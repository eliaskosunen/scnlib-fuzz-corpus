_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   872k|{
 4068|   872k|    if constexpr (sizeof(U) == 1) {
 4069|   872k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   872k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   872k|{
 4032|   872k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   872k|    SCN_GCC_COMPAT_PUSH
 4035|   872k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   872k|    constexpr char lengths[] =
 4037|   872k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   872k|        "\1\1\1\1\1\1\1\1"
 4039|   872k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   872k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   872k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   872k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   872k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   872k|    SCN_GCC_COMPAT_POP
 4046|   872k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   854k|{
 4274|   854k|    if constexpr (sizeof(CharT) == 1) {
 4275|   854k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   854k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   854k|{
 4087|   854k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   854k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   854k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   854k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   854k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   854k|    };
 4092|       |
 4093|   854k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 844k, False: 9.43k]
  ------------------
 4094|   844k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 1.09k, False: 843k]
  ------------------
 4095|  1.09k|            SCN_UNLIKELY_ATTR
 4096|  1.09k|            return invalid_code_point;
 4097|  1.09k|        }
 4098|   843k|        return static_cast<char32_t>(input[0]);
 4099|   844k|    }
 4100|       |
 4101|  9.43k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 4.11k, False: 5.31k]
  ------------------
 4102|  4.11k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 44, False: 4.07k]
  ------------------
 4103|     44|            SCN_UNLIKELY_ATTR
 4104|     44|            return invalid_code_point;
 4105|     44|        }
 4106|  4.07k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 830, False: 3.24k]
  ------------------
 4107|    830|            SCN_UNLIKELY_ATTR
 4108|    830|            return invalid_code_point;
 4109|    830|        }
 4110|       |
 4111|  3.24k|        char32_t cp{};
 4112|  3.24k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  3.24k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  3.24k|        return cp;
 4115|  4.07k|    }
 4116|       |
 4117|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 4.14k, False: 1.17k]
  ------------------
 4118|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 53, False: 4.08k]
  ------------------
 4119|     53|            SCN_UNLIKELY_ATTR
 4120|     53|            return invalid_code_point;
 4121|     53|        }
 4122|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 613, False: 3.47k]
  ------------------
 4123|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 260, False: 3.21k]
  ------------------
 4124|    873|            SCN_UNLIKELY_ATTR
 4125|    873|            return invalid_code_point;
 4126|    873|        }
 4127|       |
 4128|  3.21k|        char32_t cp{};
 4129|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  3.21k|        return cp;
 4133|  4.08k|    }
 4134|       |
 4135|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.17k, False: 0]
  ------------------
 4136|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.17k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 275, False: 901]
  ------------------
 4141|    275|            SCN_UNLIKELY_ATTR
 4142|    275|            return invalid_code_point;
 4143|    275|        }
 4144|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 391, False: 510]
  ------------------
 4145|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 13, False: 497]
  ------------------
 4146|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 10, False: 487]
  ------------------
 4147|    414|            SCN_UNLIKELY_ATTR
 4148|    414|            return invalid_code_point;
 4149|    414|        }
 4150|       |
 4151|    487|        char32_t cp{};
 4152|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    487|        return cp;
 4157|    901|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  13.5k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  13.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  13.5k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   600k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   600k|    else {
 3966|   600k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   600k|                                       to_address(first), to_address(last)))};
 3968|   600k|    }
 3969|   600k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.81M|{
  316|  1.81M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.81M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.62M|{
  294|  4.62M|    return p;
  295|  4.62M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.38M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.38M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.38M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.38M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.38M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  88.6k|    {
 2869|  88.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  88.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  88.6k|    {
 2850|  88.6k|        return decay_copy(t.begin());
 2851|  88.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  4.34M|{
 2094|  4.34M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.34M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   911k|    {
 2926|   911k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   911k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   911k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   911k|    {
 2908|   911k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   911k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   911k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  34.3k|{
 9681|  34.3k|    auto result = make_scan_result<Source, Args...>();
 9682|  34.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  34.3k|                                   make_scan_args(result->values())));
 9684|  34.3k|    return result;
 9685|  34.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9636|  74.0k|{
 9637|  74.0k|    return scan_result_type<Source, Args...>();
 9638|  74.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  74.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  74.0k|        : m_value(T{}), m_has_value(true)
  427|  74.0k|    {
  428|  74.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6570|  74.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|   455k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   455k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6344|   207k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  74.0k|{
 9622|  74.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  74.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 59.4k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  59.4k|    else {
 9626|  59.4k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  59.4k|    static_cast<    \
  |  |  935|  59.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  59.4k|    }
 9628|  74.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   455k|    {
 1740|   455k|        return has_value();
 1741|   455k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   911k|    {
  490|   911k|        return m_has_value;
  491|   911k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  87.9k|    {
 1746|  87.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  87.9k|        return this->get_unexpected().error();
 1748|  87.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.9k|    {
  473|  87.9k|        return m_unexpected;
  474|  87.9k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  5.94M|    {
  365|  5.94M|        return m_unexpected;
  366|  5.94M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  2.65M|        : m_unexpected(std::forward<Err>(e))
  350|  2.65M|    {
  351|  2.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.65M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  3.41M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.41M|    {
  360|  3.41M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.41M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.41M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   296k|    {
  490|   296k|        return m_has_value;
  491|   296k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   192k|    {
  456|   192k|        return m_value;
  457|   192k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   527k|{
  396|   527k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   527k|        T(std::forward<Args>(args)...);
  398|   527k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   367k|    {
 6445|   367k|        m_range = std::forward<Other>(r);
 6446|   367k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   367k|    {
 1795|   367k|        return value();
 1796|   367k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   367k|    {
 1769|   367k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   367k|        return this->get_value();
 1771|   367k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   367k|    {
  456|   367k|        return m_value;
  457|   367k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|   211k|{
 9461|   211k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   211k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   211k|{
 9398|   211k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   211k|    auto result = vscan_impl(buffer, format, args);
 9401|   211k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.8k, False: 169k]
  |  |  ------------------
  ------------------
 9402|  41.8k|        return unexpected(result.error());
 9403|  41.8k|    }
 9404|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   211k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   455k|{
 5381|   455k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   455k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   455k|                  "\n"
 5385|   455k|                  "Unsupported range type given as input to a scanning "
 5386|   455k|                  "function.\n"
 5387|   455k|                  "A range needs to have a character type (value type) "
 5388|   455k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   455k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   455k|                  "to be included.\n"
 5391|   455k|                  "See the scnlib documentation for more details.");
 5392|   455k|    static_assert(
 5393|   455k|        !std::is_same_v<T, custom_char_traits>,
 5394|   455k|        "\n"
 5395|   455k|        "Unsupported range type given as input to a scanning "
 5396|   455k|        "function.\n"
 5397|   455k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   455k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   455k|        "not supported.");
 5400|   455k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   455k|                  "\n"
 5402|   455k|                  "Unsupported range type given as input to a scanning "
 5403|   455k|                  "function.\n"
 5404|   455k|                  "file_marker_found cannot be used as an "
 5405|   455k|                  "source range type to scn::scan.\n"
 5406|   455k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   455k|                  "and do not provide an explicit source range, "
 5408|   455k|                  "or use scn::scan with a FILE* directly.");
 5409|   455k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   455k|                  "\n"
 5411|   455k|                  "Unsupported range type given as input to a scanning "
 5412|   455k|                  "function.\n"
 5413|   455k|                  "In order to be scannable, a range needs to satisfy "
 5414|   455k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   455k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   455k|                  "\n"
 5417|   455k|                  "Unsupported range type given as input to a scanning "
 5418|   455k|                  "function.\n"
 5419|   455k|                  "A range needs to model forward_range and have a valid "
 5420|   455k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   455k|                  "Examples of scannable ranges are std::string, "
 5422|   455k|                  "std::string_view, "
 5423|   455k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   455k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   455k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   455k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   455k|{
 5320|   455k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   455k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   455k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   455k|    {
 3000|   455k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   455k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   455k|    {
 2981|   455k|        return t.data();
 2982|   455k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   455k|    {
 3383|   455k|        return detail::to_address(ranges::begin(derived()));
 3384|   455k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.81M|{
  316|  2.81M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.81M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   823k|    {
 2869|   823k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   823k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   823k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   823k|    {
 2850|   823k|        return decay_copy(t.begin());
 2851|   823k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  8.09M|    {
 3480|  8.09M|        return m_iterator;
 3481|  8.09M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   455k|    {
 3339|   455k|        return static_cast<const D&>(*this);
 3340|   455k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   455k|    {
 3075|   455k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   455k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   455k|    {
 3041|   455k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   455k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  1.26M|{
 2094|  1.26M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.26M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  1.89M|    {
 3496|  1.89M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  1.89M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  1.90M|    {
 1740|  1.90M|        return has_value();
 1741|  1.90M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  3.54M|    {
  490|  3.54M|        return m_has_value;
  491|  3.54M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   527k|    {
 1746|   527k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   527k|        return this->get_unexpected().error();
 1748|   527k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   527k|    {
  473|   527k|        return m_unexpected;
  474|   527k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  87.9k|        : base(unexpect, std::move(e.error())),
 1616|  87.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.9k|    {
 1618|  87.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  87.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.9k|          m_has_value(false)
  451|  87.9k|    {
  452|  87.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   455k|    {
 1316|   455k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   367k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   367k|                      ranges::iterator_t<SourceRange>>) {
 6677|   367k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   367k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.15M|    {
 2869|  2.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.15M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.15M|    {
 2850|  2.15M|        return decay_copy(t.begin());
 2851|  2.15M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   367k|{
 6662|   367k|    return ranges::end(source);
 6663|   367k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   367k|    {
 2926|   367k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   367k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   367k|    {
 2908|   367k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   367k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  5.61M|    {
 3484|  5.61M|        return m_sentinel;
 3485|  5.61M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  1.11M|    {
 1795|  1.11M|        return value();
 1796|  1.11M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  1.11M|    {
 1769|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.11M|        return this->get_value();
 1771|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.11M|    {
  456|  1.11M|        return m_value;
  457|  1.11M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   367k|        : base(std::in_place, std::forward<U>(val)),
 1570|   367k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   367k|    {
 1572|   367k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   367k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   367k|    {
  442|   367k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  68.7k|    {
 8768|  68.7k|        return m_str;
 8769|  68.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   137k|{
 6110|   137k|    detail::check_scan_arg_types<Args...>();
 6111|   137k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   137k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5824|   207k|{
 5825|   207k|    constexpr bool default_constructible_constraint =
 5826|   207k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   207k|    static_assert(default_constructible_constraint,
 5828|   207k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   207k|    constexpr bool destructible_constraint =
 5831|   207k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   207k|    static_assert(destructible_constraint,
 5833|   207k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   207k|    constexpr bool non_reference_constraint =
 5836|   207k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   207k|    static_assert(non_reference_constraint,
 5838|   207k|                  "Scan argument types must not be references");
 5839|       |
 5840|   207k|    constexpr bool movable_constraint =
 5841|   207k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   207k|    static_assert(movable_constraint,
 5843|   207k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   207k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   207k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   207k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6085|   137k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   137k|    {
 6087|   137k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   137k|    {
 6095|   137k|        return {detail::make_arg<
 6096|   137k|            kind, Context,
 6097|   137k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   137k|                                 typename Context::char_type>::value>(args)...};
 6099|   137k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5874|   137k|{
 5875|   137k|    return make_value<Context>(value).ref_value;
 5876|   137k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5809|   148k|{
 5810|   148k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   148k|                                  needs_context_tag>) {
 5814|   148k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   148k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5648|   148k|    {                                                                        \
 5649|   148k|        return val;                                                          \
 5650|   148k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5778|   207k|{
 5779|   207k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   207k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   207k|    constexpr bool scannable_char =
 5783|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   207k|    static_assert(scannable_char,
 5785|   207k|                  "Cannot scan an argument of an unsupported character "
 5786|   207k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   207k|    constexpr bool scannable_const =
 5789|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   207k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   207k|    constexpr bool scannable_disabled =
 5793|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   207k|    static_assert(scannable_disabled,
 5795|   207k|                  "Cannot scan an argument that has been disabled by "
 5796|   207k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   207k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   207k|    static_assert(
 5800|   207k|        scannable,
 5801|   207k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   207k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   207k|    return arg_value{arg};
 5805|   207k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5562|   207k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   207k|    {
 5564|   207k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6353|   194k|    {
 6354|   194k|        return m_values;
 6355|   194k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   137k|        : basic_scan_args(store.desc, store.args.data())
 6136|   137k|    {
 6137|   137k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|   846k|        : m_desc(desc), m_builtin_values(data)
 6188|   846k|    {
 6189|   846k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  4.20M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.20M|    static_cast<    \
  |  |  935|  4.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.20M|    static_cast<    \
  |  |  935|  4.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.20M|    {
 3466|  4.20M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   846k|{
 8441|   846k|    return s;
 8442|   846k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   846k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  68.7k|        : m_str(r.str)
 8763|  68.7k|    {
 8764|  68.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  74.0k|    {
 1740|  74.0k|        return has_value();
 1741|  74.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|   192k|    {
 1815|   192k|        return &value();
 1816|   192k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   192k|    {
 1769|   192k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   192k|        return this->get_value();
 1771|   192k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   367k|    {
 6434|   367k|        return ranges::begin(m_range);
 6435|   367k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  34.3k|{
 9750|  34.3k|    auto result = make_scan_result<Source, Args...>();
 9751|  34.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  34.3k|                                   make_scan_args(result->values())));
 9753|  34.3k|    return result;
 9754|  34.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|   211k|{
 9479|   211k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   211k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   211k|{
 9414|   211k|#if !SCN_DISABLE_LOCALE
 9415|   211k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   211k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   211k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   211k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   211k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.8k, False: 169k]
  |  |  ------------------
  ------------------
 9422|  41.8k|        return unexpected(result.error());
 9423|  41.8k|    }
 9424|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   211k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  5.35k|{
 9791|  5.35k|    auto result = make_scan_result<Source, T>();
 9792|  5.35k|    fill_scan_result(
 9793|  5.35k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.35k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.35k|    return result;
 9796|  5.35k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  32.1k|{
 9492|  32.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  32.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  32.1k|{
 9438|  32.1k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  32.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  32.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.18k, False: 27.9k]
  |  |  ------------------
  ------------------
 9442|  4.18k|        return unexpected(result.error());
 9443|  4.18k|    }
 9444|  27.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  32.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5859|  10.7k|{
 5860|  10.7k|    check_scan_arg_types<T>();
 5861|       |
 5862|  10.7k|    basic_scan_arg<Context> arg;
 5863|  10.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  10.7k|    arg.m_value = make_value<Context>(value);
 5865|  10.7k|    return arg;
 5866|  10.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   910k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  1.26M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  13.5k|    {
 6376|  13.5k|        return std::get<0>(m_values);
 6377|  13.5k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  30.2k|{
 9681|  30.2k|    auto result = make_scan_result<Source, Args...>();
 9682|  30.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  30.2k|                                   make_scan_args(result->values())));
 9684|  30.2k|    return result;
 9685|  30.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9636|  65.0k|{
 9637|  65.0k|    return scan_result_type<Source, Args...>();
 9638|  65.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  65.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  65.0k|        : m_value(T{}), m_has_value(true)
  427|  65.0k|    {
  428|  65.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6570|  65.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6344|   189k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  65.0k|{
 9622|  65.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  65.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 50.3k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  50.3k|    else {
 9626|  50.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  50.3k|    static_cast<    \
  |  |  935|  50.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  50.3k|    }
 9628|  65.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   260k|    {
  490|   260k|        return m_has_value;
  491|   260k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   165k|    {
  456|   165k|        return m_value;
  457|   165k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  60.5k|    {
 8768|  60.5k|        return m_str;
 8769|  60.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   121k|{
 6110|   121k|    detail::check_scan_arg_types<Args...>();
 6111|   121k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   121k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5824|   189k|{
 5825|   189k|    constexpr bool default_constructible_constraint =
 5826|   189k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   189k|    static_assert(default_constructible_constraint,
 5828|   189k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   189k|    constexpr bool destructible_constraint =
 5831|   189k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   189k|    static_assert(destructible_constraint,
 5833|   189k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   189k|    constexpr bool non_reference_constraint =
 5836|   189k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   189k|    static_assert(non_reference_constraint,
 5838|   189k|                  "Scan argument types must not be references");
 5839|       |
 5840|   189k|    constexpr bool movable_constraint =
 5841|   189k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   189k|    static_assert(movable_constraint,
 5843|   189k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   189k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   189k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   189k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6085|   121k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   121k|    {
 6087|   121k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   121k|    {
 6095|   121k|        return {detail::make_arg<
 6096|   121k|            kind, Context,
 6097|   121k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   121k|                                 typename Context::char_type>::value>(args)...};
 6099|   121k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5874|   121k|{
 5875|   121k|    return make_value<Context>(value).ref_value;
 5876|   121k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5809|   130k|{
 5810|   130k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   130k|                                  needs_context_tag>) {
 5814|   130k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   130k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5648|   130k|    {                                                                        \
 5649|   130k|        return val;                                                          \
 5650|   130k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5778|   189k|{
 5779|   189k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   189k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   189k|    constexpr bool scannable_char =
 5783|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   189k|    static_assert(scannable_char,
 5785|   189k|                  "Cannot scan an argument of an unsupported character "
 5786|   189k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   189k|    constexpr bool scannable_const =
 5789|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   189k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   189k|    constexpr bool scannable_disabled =
 5793|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   189k|    static_assert(scannable_disabled,
 5795|   189k|                  "Cannot scan an argument that has been disabled by "
 5796|   189k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   189k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   189k|    static_assert(
 5800|   189k|        scannable,
 5801|   189k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   189k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   189k|    return arg_value{arg};
 5805|   189k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5562|   189k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   189k|    {
 5564|   189k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6353|   177k|    {
 6354|   177k|        return m_values;
 6355|   177k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   121k|        : basic_scan_args(store.desc, store.args.data())
 6136|   121k|    {
 6137|   121k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  60.5k|        : m_str(r.str)
 8763|  60.5k|    {
 8764|  60.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  65.0k|    {
 1740|  65.0k|        return has_value();
 1741|  65.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|   165k|    {
 1815|   165k|        return &value();
 1816|   165k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   165k|    {
 1769|   165k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   165k|        return this->get_value();
 1771|   165k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  30.2k|{
 9750|  30.2k|    auto result = make_scan_result<Source, Args...>();
 9751|  30.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  30.2k|                                   make_scan_args(result->values())));
 9753|  30.2k|    return result;
 9754|  30.2k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.46k|{
 9791|  4.46k|    auto result = make_scan_result<Source, T>();
 9792|  4.46k|    fill_scan_result(
 9793|  4.46k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.46k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.46k|    return result;
 9796|  4.46k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5859|  8.93k|{
 5860|  8.93k|    check_scan_arg_types<T>();
 5861|       |
 5862|  8.93k|    basic_scan_arg<Context> arg;
 5863|  8.93k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  8.93k|    arg.m_value = make_value<Context>(value);
 5865|  8.93k|    return arg;
 5866|  8.93k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  11.7k|    {
 6376|  11.7k|        return std::get<0>(m_values);
 6377|  11.7k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  40.1k|{
 9681|  40.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.1k|                                   make_scan_args(result->values())));
 9684|  40.1k|    return result;
 9685|  40.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9636|  86.5k|{
 9637|  86.5k|    return scan_result_type<Source, Args...>();
 9638|  86.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  86.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  86.5k|        : m_value(T{}), m_has_value(true)
  427|  86.5k|    {
  428|  86.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  86.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|   232k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  86.5k|{
 9622|  86.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  86.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 71.8k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  71.8k|    else {
 9626|  71.8k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  71.8k|    static_cast<    \
  |  |  935|  71.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  71.8k|    }
 9628|  86.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   346k|    {
  490|   346k|        return m_has_value;
  491|   346k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   230k|    {
  456|   230k|        return m_value;
  457|   230k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  80.3k|    {
 8768|  80.3k|        return m_str;
 8769|  80.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   160k|{
 6110|   160k|    detail::check_scan_arg_types<Args...>();
 6111|   160k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   160k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|   232k|{
 5825|   232k|    constexpr bool default_constructible_constraint =
 5826|   232k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   232k|    static_assert(default_constructible_constraint,
 5828|   232k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   232k|    constexpr bool destructible_constraint =
 5831|   232k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   232k|    static_assert(destructible_constraint,
 5833|   232k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   232k|    constexpr bool non_reference_constraint =
 5836|   232k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   232k|    static_assert(non_reference_constraint,
 5838|   232k|                  "Scan argument types must not be references");
 5839|       |
 5840|   232k|    constexpr bool movable_constraint =
 5841|   232k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   232k|    static_assert(movable_constraint,
 5843|   232k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   232k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   232k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   232k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|   160k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   160k|    {
 6087|   160k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   160k|    {
 6095|   160k|        return {detail::make_arg<
 6096|   160k|            kind, Context,
 6097|   160k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   160k|                                 typename Context::char_type>::value>(args)...};
 6099|   160k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|   160k|{
 5875|   160k|    return make_value<Context>(value).ref_value;
 5876|   160k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|   172k|{
 5810|   172k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   172k|                                  needs_context_tag>) {
 5814|   172k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   172k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|   172k|    {                                                                        \
 5649|   172k|        return val;                                                          \
 5650|   172k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|   232k|{
 5779|   232k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   232k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   232k|    constexpr bool scannable_char =
 5783|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   232k|    static_assert(scannable_char,
 5785|   232k|                  "Cannot scan an argument of an unsupported character "
 5786|   232k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   232k|    constexpr bool scannable_const =
 5789|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   232k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   232k|    constexpr bool scannable_disabled =
 5793|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   232k|    static_assert(scannable_disabled,
 5795|   232k|                  "Cannot scan an argument that has been disabled by "
 5796|   232k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   232k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   232k|    static_assert(
 5800|   232k|        scannable,
 5801|   232k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   232k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   232k|    return arg_value{arg};
 5805|   232k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|   232k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   232k|    {
 5564|   232k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|   217k|    {
 6354|   217k|        return m_values;
 6355|   217k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   160k|        : basic_scan_args(store.desc, store.args.data())
 6136|   160k|    {
 6137|   160k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  80.3k|        : m_str(r.str)
 8763|  80.3k|    {
 8764|  80.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  86.5k|    {
 1740|  86.5k|        return has_value();
 1741|  86.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|   230k|    {
 1815|   230k|        return &value();
 1816|   230k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   230k|    {
 1769|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   230k|        return this->get_value();
 1771|   230k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  40.1k|{
 9750|  40.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.1k|                                   make_scan_args(result->values())));
 9753|  40.1k|    return result;
 9754|  40.1k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  6.18k|{
 9791|  6.18k|    auto result = make_scan_result<Source, T>();
 9792|  6.18k|    fill_scan_result(
 9793|  6.18k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.18k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.18k|    return result;
 9796|  6.18k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5859|  12.1k|{
 5860|  12.1k|    check_scan_arg_types<T>();
 5861|       |
 5862|  12.1k|    basic_scan_arg<Context> arg;
 5863|  12.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  12.1k|    arg.m_value = make_value<Context>(value);
 5865|  12.1k|    return arg;
 5866|  12.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  15.0k|    {
 6376|  15.0k|        return std::get<0>(m_values);
 6377|  15.0k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  32.8k|{
 9681|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  32.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  32.8k|                                   make_scan_args(result->values())));
 9684|  32.8k|    return result;
 9685|  32.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9636|  70.5k|{
 9637|  70.5k|    return scan_result_type<Source, Args...>();
 9638|  70.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  70.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.5k|        : m_value(T{}), m_has_value(true)
  427|  70.5k|    {
  428|  70.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  70.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|   200k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  70.5k|{
 9622|  70.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 55.8k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  55.8k|    else {
 9626|  55.8k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  55.8k|    static_cast<    \
  |  |  935|  55.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  55.8k|    }
 9628|  70.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   282k|    {
  490|   282k|        return m_has_value;
  491|   282k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  65.6k|    {
 8768|  65.6k|        return m_str;
 8769|  65.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   131k|{
 6110|   131k|    detail::check_scan_arg_types<Args...>();
 6111|   131k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   131k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|   200k|{
 5825|   200k|    constexpr bool default_constructible_constraint =
 5826|   200k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   200k|    static_assert(default_constructible_constraint,
 5828|   200k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   200k|    constexpr bool destructible_constraint =
 5831|   200k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   200k|    static_assert(destructible_constraint,
 5833|   200k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   200k|    constexpr bool non_reference_constraint =
 5836|   200k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   200k|    static_assert(non_reference_constraint,
 5838|   200k|                  "Scan argument types must not be references");
 5839|       |
 5840|   200k|    constexpr bool movable_constraint =
 5841|   200k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   200k|    static_assert(movable_constraint,
 5843|   200k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   200k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   200k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   200k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|   131k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   131k|    {
 6087|   131k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   131k|    {
 6095|   131k|        return {detail::make_arg<
 6096|   131k|            kind, Context,
 6097|   131k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   131k|                                 typename Context::char_type>::value>(args)...};
 6099|   131k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|   131k|{
 5875|   131k|    return make_value<Context>(value).ref_value;
 5876|   131k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|   141k|{
 5810|   141k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   141k|                                  needs_context_tag>) {
 5814|   141k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   141k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|   141k|    {                                                                        \
 5649|   141k|        return val;                                                          \
 5650|   141k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|   200k|{
 5779|   200k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   200k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   200k|    constexpr bool scannable_char =
 5783|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   200k|    static_assert(scannable_char,
 5785|   200k|                  "Cannot scan an argument of an unsupported character "
 5786|   200k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   200k|    constexpr bool scannable_const =
 5789|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   200k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   200k|    constexpr bool scannable_disabled =
 5793|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   200k|    static_assert(scannable_disabled,
 5795|   200k|                  "Cannot scan an argument that has been disabled by "
 5796|   200k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   200k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   200k|    static_assert(
 5800|   200k|        scannable,
 5801|   200k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   200k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   200k|    return arg_value{arg};
 5805|   200k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|   200k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   200k|    {
 5564|   200k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|   187k|    {
 6354|   187k|        return m_values;
 6355|   187k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   131k|        : basic_scan_args(store.desc, store.args.data())
 6136|   131k|    {
 6137|   131k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  65.6k|        : m_str(r.str)
 8763|  65.6k|    {
 8764|  65.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  70.5k|    {
 1740|  70.5k|        return has_value();
 1741|  70.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|   182k|    {
 1815|   182k|        return &value();
 1816|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   182k|    {
 1769|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   182k|        return this->get_value();
 1771|   182k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  32.8k|{
 9750|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  32.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  32.8k|                                   make_scan_args(result->values())));
 9753|  32.8k|    return result;
 9754|  32.8k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.91k|{
 9791|  4.91k|    auto result = make_scan_result<Source, T>();
 9792|  4.91k|    fill_scan_result(
 9793|  4.91k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.91k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.91k|    return result;
 9796|  4.91k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5859|  9.79k|{
 5860|  9.79k|    check_scan_arg_types<T>();
 5861|       |
 5862|  9.79k|    basic_scan_arg<Context> arg;
 5863|  9.79k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  9.79k|    arg.m_value = make_value<Context>(value);
 5865|  9.79k|    return arg;
 5866|  9.79k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  12.6k|    {
 6376|  12.6k|        return std::get<0>(m_values);
 6377|  12.6k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  40.8k|{
 9681|  40.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.8k|                                   make_scan_args(result->values())));
 9684|  40.8k|    return result;
 9685|  40.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9636|  88.0k|{
 9637|  88.0k|    return scan_result_type<Source, Args...>();
 9638|  88.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  88.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.0k|        : m_value(T{}), m_has_value(true)
  427|  88.0k|    {
  428|  88.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6570|  88.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6344|   235k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  88.0k|{
 9622|  88.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 73.3k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  73.3k|    else {
 9626|  73.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  73.3k|    static_cast<    \
  |  |  935|  73.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  73.3k|    }
 9628|  88.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   234k|    {
  456|   234k|        return m_value;
  457|   234k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  81.7k|    {
 8768|  81.7k|        return m_str;
 8769|  81.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   163k|{
 6110|   163k|    detail::check_scan_arg_types<Args...>();
 6111|   163k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   163k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5824|   235k|{
 5825|   235k|    constexpr bool default_constructible_constraint =
 5826|   235k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   235k|    static_assert(default_constructible_constraint,
 5828|   235k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   235k|    constexpr bool destructible_constraint =
 5831|   235k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   235k|    static_assert(destructible_constraint,
 5833|   235k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   235k|    constexpr bool non_reference_constraint =
 5836|   235k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   235k|    static_assert(non_reference_constraint,
 5838|   235k|                  "Scan argument types must not be references");
 5839|       |
 5840|   235k|    constexpr bool movable_constraint =
 5841|   235k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   235k|    static_assert(movable_constraint,
 5843|   235k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   235k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   235k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   235k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6085|   163k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   163k|    {
 6087|   163k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   163k|    {
 6095|   163k|        return {detail::make_arg<
 6096|   163k|            kind, Context,
 6097|   163k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   163k|                                 typename Context::char_type>::value>(args)...};
 6099|   163k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5874|   163k|{
 5875|   163k|    return make_value<Context>(value).ref_value;
 5876|   163k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5809|   175k|{
 5810|   175k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   175k|                                  needs_context_tag>) {
 5814|   175k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   175k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5648|   175k|    {                                                                        \
 5649|   175k|        return val;                                                          \
 5650|   175k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5778|   235k|{
 5779|   235k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   235k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   235k|    constexpr bool scannable_char =
 5783|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   235k|    static_assert(scannable_char,
 5785|   235k|                  "Cannot scan an argument of an unsupported character "
 5786|   235k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   235k|    constexpr bool scannable_const =
 5789|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   235k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   235k|    constexpr bool scannable_disabled =
 5793|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   235k|    static_assert(scannable_disabled,
 5795|   235k|                  "Cannot scan an argument that has been disabled by "
 5796|   235k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   235k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   235k|    static_assert(
 5800|   235k|        scannable,
 5801|   235k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   235k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   235k|    return arg_value{arg};
 5805|   235k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5562|   235k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   235k|    {
 5564|   235k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6353|   220k|    {
 6354|   220k|        return m_values;
 6355|   220k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   163k|        : basic_scan_args(store.desc, store.args.data())
 6136|   163k|    {
 6137|   163k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  81.7k|        : m_str(r.str)
 8763|  81.7k|    {
 8764|  81.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  88.0k|    {
 1740|  88.0k|        return has_value();
 1741|  88.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|   234k|    {
 1815|   234k|        return &value();
 1816|   234k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   234k|    {
 1769|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   234k|        return this->get_value();
 1771|   234k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  40.8k|{
 9750|  40.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.8k|                                   make_scan_args(result->values())));
 9753|  40.8k|    return result;
 9754|  40.8k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  6.29k|{
 9791|  6.29k|    auto result = make_scan_result<Source, T>();
 9792|  6.29k|    fill_scan_result(
 9793|  6.29k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.29k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.29k|    return result;
 9796|  6.29k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5859|  12.3k|{
 5860|  12.3k|    check_scan_arg_types<T>();
 5861|       |
 5862|  12.3k|    basic_scan_arg<Context> arg;
 5863|  12.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  12.3k|    arg.m_value = make_value<Context>(value);
 5865|  12.3k|    return arg;
 5866|  12.3k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  15.2k|    {
 6376|  15.2k|        return std::get<0>(m_values);
 6377|  15.2k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  33.1k|{
 9681|  33.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.1k|                                   make_scan_args(result->values())));
 9684|  33.1k|    return result;
 9685|  33.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9636|  71.3k|{
 9637|  71.3k|    return scan_result_type<Source, Args...>();
 9638|  71.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  71.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.3k|        : m_value(T{}), m_has_value(true)
  427|  71.3k|    {
  428|  71.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6570|  71.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6344|   202k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  71.3k|{
 9622|  71.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 56.6k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  56.6k|    else {
 9626|  56.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.6k|    static_cast<    \
  |  |  935|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.6k|    }
 9628|  71.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   285k|    {
  490|   285k|        return m_has_value;
  491|   285k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   184k|    {
  456|   184k|        return m_value;
  457|   184k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  66.3k|    {
 8768|  66.3k|        return m_str;
 8769|  66.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   132k|{
 6110|   132k|    detail::check_scan_arg_types<Args...>();
 6111|   132k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   132k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5824|   202k|{
 5825|   202k|    constexpr bool default_constructible_constraint =
 5826|   202k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   202k|    static_assert(default_constructible_constraint,
 5828|   202k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   202k|    constexpr bool destructible_constraint =
 5831|   202k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   202k|    static_assert(destructible_constraint,
 5833|   202k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   202k|    constexpr bool non_reference_constraint =
 5836|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   202k|    static_assert(non_reference_constraint,
 5838|   202k|                  "Scan argument types must not be references");
 5839|       |
 5840|   202k|    constexpr bool movable_constraint =
 5841|   202k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   202k|    static_assert(movable_constraint,
 5843|   202k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   202k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   202k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   202k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6085|   132k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   132k|    {
 6087|   132k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   132k|    {
 6095|   132k|        return {detail::make_arg<
 6096|   132k|            kind, Context,
 6097|   132k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   132k|                                 typename Context::char_type>::value>(args)...};
 6099|   132k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5874|   132k|{
 5875|   132k|    return make_value<Context>(value).ref_value;
 5876|   132k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5809|   142k|{
 5810|   142k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   142k|                                  needs_context_tag>) {
 5814|   142k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   142k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5648|   142k|    {                                                                        \
 5649|   142k|        return val;                                                          \
 5650|   142k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5778|   202k|{
 5779|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   202k|    constexpr bool scannable_char =
 5783|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   202k|    static_assert(scannable_char,
 5785|   202k|                  "Cannot scan an argument of an unsupported character "
 5786|   202k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   202k|    constexpr bool scannable_const =
 5789|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   202k|    constexpr bool scannable_disabled =
 5793|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   202k|    static_assert(scannable_disabled,
 5795|   202k|                  "Cannot scan an argument that has been disabled by "
 5796|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   202k|    static_assert(
 5800|   202k|        scannable,
 5801|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   202k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   202k|    return arg_value{arg};
 5805|   202k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5562|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   202k|    {
 5564|   202k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6353|   189k|    {
 6354|   189k|        return m_values;
 6355|   189k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   132k|        : basic_scan_args(store.desc, store.args.data())
 6136|   132k|    {
 6137|   132k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.3k|        : m_str(r.str)
 8763|  66.3k|    {
 8764|  66.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  71.3k|    {
 1740|  71.3k|        return has_value();
 1741|  71.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|   184k|    {
 1815|   184k|        return &value();
 1816|   184k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   184k|    {
 1769|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   184k|        return this->get_value();
 1771|   184k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  33.1k|{
 9750|  33.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.1k|                                   make_scan_args(result->values())));
 9753|  33.1k|    return result;
 9754|  33.1k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.97k|{
 9791|  4.97k|    auto result = make_scan_result<Source, T>();
 9792|  4.97k|    fill_scan_result(
 9793|  4.97k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.97k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.97k|    return result;
 9796|  4.97k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5859|  9.92k|{
 5860|  9.92k|    check_scan_arg_types<T>();
 5861|       |
 5862|  9.92k|    basic_scan_arg<Context> arg;
 5863|  9.92k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  9.92k|    arg.m_value = make_value<Context>(value);
 5865|  9.92k|    return arg;
 5866|  9.92k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  12.8k|    {
 6376|  12.8k|        return std::get<0>(m_values);
 6377|  12.8k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  87.9k|    {
 2869|  87.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  87.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  87.9k|    {
 2850|  87.9k|        return decay_copy(t.begin());
 2851|  87.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  9.30M|{
 2094|  9.30M|    return SCN_FWD(t);
  ------------------
  |  |  936|  9.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  9.30M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   909k|    {
 2926|   909k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   909k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   909k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   909k|    {
 2908|   909k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   909k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   909k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  34.3k|{
 9681|  34.3k|    auto result = make_scan_result<Source, Args...>();
 9682|  34.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  34.3k|                                   make_scan_args(result->values())));
 9684|  34.3k|    return result;
 9685|  34.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9636|  74.1k|{
 9637|  74.1k|    return scan_result_type<Source, Args...>();
 9638|  74.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  74.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  74.1k|        : m_value(T{}), m_has_value(true)
  427|  74.1k|    {
  428|  74.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6570|  74.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|   454k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   454k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  74.1k|{
 9622|  74.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 59.4k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  59.4k|    else {
 9626|  59.4k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  59.4k|    static_cast<    \
  |  |  935|  59.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  59.4k|    }
 9628|  74.1k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   454k|    {
 1740|   454k|        return has_value();
 1741|   454k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   909k|    {
  490|   909k|        return m_has_value;
  491|   909k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  87.9k|    {
 1746|  87.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  87.9k|        return this->get_unexpected().error();
 1748|  87.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.9k|    {
  473|  87.9k|        return m_unexpected;
  474|  87.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   296k|    {
  490|   296k|        return m_has_value;
  491|   296k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   192k|    {
  456|   192k|        return m_value;
  457|   192k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   366k|    {
 6445|   366k|        m_range = std::forward<Other>(r);
 6446|   366k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   366k|    {
 1795|   366k|        return value();
 1796|   366k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   366k|    {
 1769|   366k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   366k|        return this->get_value();
 1771|   366k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   366k|    {
  456|   366k|        return m_value;
  457|   366k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|   211k|{
 9461|   211k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   211k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   211k|{
 9398|   211k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   211k|    auto result = vscan_impl(buffer, format, args);
 9401|   211k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.8k, False: 169k]
  |  |  ------------------
  ------------------
 9402|  41.8k|        return unexpected(result.error());
 9403|  41.8k|    }
 9404|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   211k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   454k|{
 5381|   454k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   454k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   454k|                  "\n"
 5385|   454k|                  "Unsupported range type given as input to a scanning "
 5386|   454k|                  "function.\n"
 5387|   454k|                  "A range needs to have a character type (value type) "
 5388|   454k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   454k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   454k|                  "to be included.\n"
 5391|   454k|                  "See the scnlib documentation for more details.");
 5392|   454k|    static_assert(
 5393|   454k|        !std::is_same_v<T, custom_char_traits>,
 5394|   454k|        "\n"
 5395|   454k|        "Unsupported range type given as input to a scanning "
 5396|   454k|        "function.\n"
 5397|   454k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   454k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   454k|        "not supported.");
 5400|   454k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   454k|                  "\n"
 5402|   454k|                  "Unsupported range type given as input to a scanning "
 5403|   454k|                  "function.\n"
 5404|   454k|                  "file_marker_found cannot be used as an "
 5405|   454k|                  "source range type to scn::scan.\n"
 5406|   454k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   454k|                  "and do not provide an explicit source range, "
 5408|   454k|                  "or use scn::scan with a FILE* directly.");
 5409|   454k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   454k|                  "\n"
 5411|   454k|                  "Unsupported range type given as input to a scanning "
 5412|   454k|                  "function.\n"
 5413|   454k|                  "In order to be scannable, a range needs to satisfy "
 5414|   454k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   454k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   454k|                  "\n"
 5417|   454k|                  "Unsupported range type given as input to a scanning "
 5418|   454k|                  "function.\n"
 5419|   454k|                  "A range needs to model forward_range and have a valid "
 5420|   454k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   454k|                  "Examples of scannable ranges are std::string, "
 5422|   454k|                  "std::string_view, "
 5423|   454k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   454k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   454k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   454k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   454k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   454k|    else {
 5366|   454k|        return make_forward_scan_buffer(r);
 5367|   454k|    }
 5368|   454k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   454k|{
 5185|   454k|    return basic_scan_forward_buffer_impl(range);
 5186|   454k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   454k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   454k|          m_cursor(ranges::begin(*m_range))
 4766|   454k|    {
 4767|   454k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   454k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   454k|    {
 4738|   454k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   454k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   454k|    {
 4429|   454k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   454k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   821k|    {
 2869|   821k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   821k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   821k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   821k|    {
 2850|   821k|        return decay_copy(t.begin());
 2851|   821k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  1.18M|    {
 3480|  1.18M|        return m_iterator;
 3481|  1.18M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  2.34M|    {
 4771|  2.34M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 144k, False: 2.20M]
  ------------------
 4772|   144k|            return false;
 4773|   144k|        }
 4774|  2.20M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.20M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.20M|        }
 4777|  2.20M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.78M, False: 420k]
  ------------------
 4778|  1.78M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.78M|                                          this->m_current_view.begin(),
 4780|  1.78M|                                          this->m_current_view.end());
 4781|  1.78M|        }
 4782|  2.20M|        m_latest = *m_cursor;
 4783|  2.20M|        ++m_cursor;
 4784|  2.20M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.20M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.20M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.20M|        }
 4788|  2.20M|        return true;
 4789|  2.34M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  6.74M|    {
 2926|  6.74M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  6.74M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  6.74M|    {
 2908|  6.74M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  6.74M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  7.11M|    {
 3484|  7.11M|        return m_sentinel;
 3485|  7.11M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   454k|    {
 4346|   454k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   454k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   454k|        return true;
 4348|   454k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  87.9k|        : base(unexpect, std::move(e.error())),
 1616|  87.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.9k|    {
 1618|  87.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  87.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.9k|          m_has_value(false)
  451|  87.9k|    {
  452|  87.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   454k|    {
 1316|   454k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   366k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   366k|                      ranges::iterator_t<SourceRange>>) {
 6677|   366k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   366k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   366k|    {
 2869|   366k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   366k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   366k|    {
 2850|   366k|        return decay_copy(t.begin());
 2851|   366k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|   366k|{
 6662|   366k|    return ranges::end(source);
 6663|   366k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   366k|    {
 2926|   366k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   366k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   366k|    {
 2908|   366k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   366k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   366k|        : base(std::in_place, std::forward<U>(val)),
 1570|   366k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   366k|    {
 1572|   366k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   366k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   366k|    {
  442|   366k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  68.7k|    {
 8768|  68.7k|        return m_str;
 8769|  68.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   821k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   821k|    static_cast<    \
  |  |  935|   821k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   821k|    static_cast<    \
  |  |  935|   821k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   821k|    {
 3466|   821k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  68.7k|        : m_str(r.str)
 8763|  68.7k|    {
 8764|  68.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  74.1k|    {
 1740|  74.1k|        return has_value();
 1741|  74.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|   192k|    {
 1815|   192k|        return &value();
 1816|   192k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   192k|    {
 1769|   192k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   192k|        return this->get_value();
 1771|   192k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|   366k|    {
 6434|   366k|        return ranges::begin(m_range);
 6435|   366k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  34.3k|{
 9750|  34.3k|    auto result = make_scan_result<Source, Args...>();
 9751|  34.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  34.3k|                                   make_scan_args(result->values())));
 9753|  34.3k|    return result;
 9754|  34.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|   211k|{
 9479|   211k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   211k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   211k|{
 9414|   211k|#if !SCN_DISABLE_LOCALE
 9415|   211k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   211k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   211k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   211k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   211k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.8k, False: 169k]
  |  |  ------------------
  ------------------
 9422|  41.8k|        return unexpected(result.error());
 9423|  41.8k|    }
 9424|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   211k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  5.34k|{
 9791|  5.34k|    auto result = make_scan_result<Source, T>();
 9792|  5.34k|    fill_scan_result(
 9793|  5.34k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.34k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.34k|    return result;
 9796|  5.34k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  31.7k|{
 9492|  31.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  31.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  31.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  31.7k|{
 9438|  31.7k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  31.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  31.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.18k, False: 27.5k]
  |  |  ------------------
  ------------------
 9442|  4.18k|        return unexpected(result.error());
 9443|  4.18k|    }
 9444|  27.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  31.7k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  30.2k|{
 9681|  30.2k|    auto result = make_scan_result<Source, Args...>();
 9682|  30.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  30.2k|                                   make_scan_args(result->values())));
 9684|  30.2k|    return result;
 9685|  30.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9636|  65.0k|{
 9637|  65.0k|    return scan_result_type<Source, Args...>();
 9638|  65.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  65.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  65.0k|        : m_value(T{}), m_has_value(true)
  427|  65.0k|    {
  428|  65.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6570|  65.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  65.0k|{
 9622|  65.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  65.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 50.3k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  50.3k|    else {
 9626|  50.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  50.3k|    static_cast<    \
  |  |  935|  50.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  50.3k|    }
 9628|  65.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   260k|    {
  490|   260k|        return m_has_value;
  491|   260k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   165k|    {
  456|   165k|        return m_value;
  457|   165k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  60.5k|    {
 8768|  60.5k|        return m_str;
 8769|  60.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  60.5k|        : m_str(r.str)
 8763|  60.5k|    {
 8764|  60.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  65.0k|    {
 1740|  65.0k|        return has_value();
 1741|  65.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|   165k|    {
 1815|   165k|        return &value();
 1816|   165k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   165k|    {
 1769|   165k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   165k|        return this->get_value();
 1771|   165k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  30.2k|{
 9750|  30.2k|    auto result = make_scan_result<Source, Args...>();
 9751|  30.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  30.2k|                                   make_scan_args(result->values())));
 9753|  30.2k|    return result;
 9754|  30.2k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.46k|{
 9791|  4.46k|    auto result = make_scan_result<Source, T>();
 9792|  4.46k|    fill_scan_result(
 9793|  4.46k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.46k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.46k|    return result;
 9796|  4.46k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  40.0k|{
 9681|  40.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.0k|                                   make_scan_args(result->values())));
 9684|  40.0k|    return result;
 9685|  40.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9636|  86.0k|{
 9637|  86.0k|    return scan_result_type<Source, Args...>();
 9638|  86.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  86.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  86.0k|        : m_value(T{}), m_has_value(true)
  427|  86.0k|    {
  428|  86.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6570|  86.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  86.0k|{
 9622|  86.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 71.4k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  71.4k|    else {
 9626|  71.4k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  71.4k|    static_cast<    \
  |  |  935|  71.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  71.4k|    }
 9628|  86.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   344k|    {
  490|   344k|        return m_has_value;
  491|   344k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   228k|    {
  456|   228k|        return m_value;
  457|   228k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  80.0k|    {
 8768|  80.0k|        return m_str;
 8769|  80.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  80.0k|        : m_str(r.str)
 8763|  80.0k|    {
 8764|  80.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  86.0k|    {
 1740|  86.0k|        return has_value();
 1741|  86.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|   228k|    {
 1815|   228k|        return &value();
 1816|   228k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   228k|    {
 1769|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   228k|        return this->get_value();
 1771|   228k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  40.0k|{
 9750|  40.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.0k|                                   make_scan_args(result->values())));
 9753|  40.0k|    return result;
 9754|  40.0k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  5.98k|{
 9791|  5.98k|    auto result = make_scan_result<Source, T>();
 9792|  5.98k|    fill_scan_result(
 9793|  5.98k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.98k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.98k|    return result;
 9796|  5.98k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  32.8k|{
 9681|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  32.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  32.8k|                                   make_scan_args(result->values())));
 9684|  32.8k|    return result;
 9685|  32.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9636|  70.5k|{
 9637|  70.5k|    return scan_result_type<Source, Args...>();
 9638|  70.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  70.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.5k|        : m_value(T{}), m_has_value(true)
  427|  70.5k|    {
  428|  70.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6570|  70.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  70.5k|{
 9622|  70.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 55.8k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  55.8k|    else {
 9626|  55.8k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  55.8k|    static_cast<    \
  |  |  935|  55.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  55.8k|    }
 9628|  70.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   282k|    {
  490|   282k|        return m_has_value;
  491|   282k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  65.6k|    {
 8768|  65.6k|        return m_str;
 8769|  65.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  65.6k|        : m_str(r.str)
 8763|  65.6k|    {
 8764|  65.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  70.5k|    {
 1740|  70.5k|        return has_value();
 1741|  70.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|   182k|    {
 1815|   182k|        return &value();
 1816|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   182k|    {
 1769|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   182k|        return this->get_value();
 1771|   182k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  32.8k|{
 9750|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  32.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  32.8k|                                   make_scan_args(result->values())));
 9753|  32.8k|    return result;
 9754|  32.8k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.88k|{
 9791|  4.88k|    auto result = make_scan_result<Source, T>();
 9792|  4.88k|    fill_scan_result(
 9793|  4.88k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.88k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.88k|    return result;
 9796|  4.88k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  40.7k|{
 9681|  40.7k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.7k|                                   make_scan_args(result->values())));
 9684|  40.7k|    return result;
 9685|  40.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9636|  87.5k|{
 9637|  87.5k|    return scan_result_type<Source, Args...>();
 9638|  87.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  87.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  87.5k|        : m_value(T{}), m_has_value(true)
  427|  87.5k|    {
  428|  87.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6570|  87.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  87.5k|{
 9622|  87.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 72.8k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  72.8k|    else {
 9626|  72.8k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  72.8k|    static_cast<    \
  |  |  935|  72.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  72.8k|    }
 9628|  87.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   350k|    {
  490|   350k|        return m_has_value;
  491|   350k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   233k|    {
  456|   233k|        return m_value;
  457|   233k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  81.4k|    {
 8768|  81.4k|        return m_str;
 8769|  81.4k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  81.4k|        : m_str(r.str)
 8763|  81.4k|    {
 8764|  81.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  87.5k|    {
 1740|  87.5k|        return has_value();
 1741|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|   233k|    {
 1815|   233k|        return &value();
 1816|   233k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   233k|    {
 1769|   233k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   233k|        return this->get_value();
 1771|   233k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  40.7k|{
 9750|  40.7k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.7k|                                   make_scan_args(result->values())));
 9753|  40.7k|    return result;
 9754|  40.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  6.08k|{
 9791|  6.08k|    auto result = make_scan_result<Source, T>();
 9792|  6.08k|    fill_scan_result(
 9793|  6.08k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.08k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.08k|    return result;
 9796|  6.08k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  33.1k|{
 9681|  33.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.1k|                                   make_scan_args(result->values())));
 9684|  33.1k|    return result;
 9685|  33.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9636|  71.3k|{
 9637|  71.3k|    return scan_result_type<Source, Args...>();
 9638|  71.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  71.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.3k|        : m_value(T{}), m_has_value(true)
  427|  71.3k|    {
  428|  71.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6570|  71.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  71.3k|{
 9622|  71.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.6k, False: 56.6k]
  |  |  ------------------
  ------------------
 9623|  14.6k|        out = unexpected(in.error());
 9624|  14.6k|    }
 9625|  56.6k|    else {
 9626|  56.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.6k|    static_cast<    \
  |  |  935|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.6k|    }
 9628|  71.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.6k|        : base(unexpect, std::move(e.error())),
 1616|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.6k|    {
 1618|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.6k|          m_has_value(false)
  451|  14.6k|    {
  452|  14.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.6k|    {
 1316|  14.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.6k|    {
  903|  14.6k|        assign_common(std::move(other));
  904|  14.6k|        return *this;
  905|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.6k|    {
  950|  14.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.6k, False: 0]
  ------------------
  951|  14.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   285k|    {
  490|   285k|        return m_has_value;
  491|   285k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   184k|    {
  456|   184k|        return m_value;
  457|   184k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.6k|    {
 1046|  14.6k|        this->destroy_value();
 1047|  14.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.6k|    {
  504|  14.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.6k|                                  std::forward<Args>(args)...);
  506|  14.6k|        m_has_value = false;
  507|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.6k|    {
  473|  14.6k|        return m_unexpected;
  474|  14.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.6k|    {
  481|  14.6k|        return std::move(m_unexpected);
  482|  14.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  66.3k|    {
 8768|  66.3k|        return m_str;
 8769|  66.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.3k|        : m_str(r.str)
 8763|  66.3k|    {
 8764|  66.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  71.3k|    {
 1740|  71.3k|        return has_value();
 1741|  71.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|   184k|    {
 1815|   184k|        return &value();
 1816|   184k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   184k|    {
 1769|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   184k|        return this->get_value();
 1771|   184k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  33.1k|{
 9750|  33.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.1k|                                   make_scan_args(result->values())));
 9753|  33.1k|    return result;
 9754|  33.1k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.95k|{
 9791|  4.95k|    auto result = make_scan_result<Source, T>();
 9792|  4.95k|    fill_scan_result(
 9793|  4.95k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.95k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.95k|    return result;
 9796|  4.95k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   177k|    {
 2869|   177k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   177k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   177k|    {
 2850|   177k|        return decay_copy(t.begin());
 2851|   177k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  1.14M|{
 2094|  1.14M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.14M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   359k|    {
 2926|   359k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   359k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   359k|    {
 2908|   359k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   359k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9636|  29.8k|{
 9637|  29.8k|    return scan_result_type<Source, Args...>();
 9638|  29.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  29.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.8k|        : m_value(T{}), m_has_value(true)
  427|  29.8k|    {
  428|  29.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6570|  29.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   179k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   179k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  29.8k|{
 9622|  29.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 485]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    485|    else {
 9626|    485|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    485|    static_cast<    \
  |  |  935|    485|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    485|    }
 9628|  29.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   179k|    {
 1740|   179k|        return has_value();
 1741|   179k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   358k|    {
  490|   358k|        return m_has_value;
  491|   358k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   175k|    {
 1746|   175k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   175k|        return this->get_unexpected().error();
 1748|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   175k|    {
  473|   175k|        return m_unexpected;
  474|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.7k|    {
  456|  30.7k|        return m_value;
  457|  30.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  3.25k|    {
 6445|  3.25k|        m_range = std::forward<Other>(r);
 6446|  3.25k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  3.25k|    {
 1795|  3.25k|        return value();
 1796|  3.25k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  3.25k|    {
 1769|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.25k|        return this->get_value();
 1771|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.25k|    {
  456|  3.25k|        return m_value;
  457|  3.25k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  85.2k|{
 9398|  85.2k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  85.2k|    auto result = vscan_impl(buffer, format, args);
 9401|  85.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 9402|  83.7k|        return unexpected(result.error());
 9403|  83.7k|    }
 9404|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  85.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   179k|{
 5381|   179k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   179k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   179k|                  "\n"
 5385|   179k|                  "Unsupported range type given as input to a scanning "
 5386|   179k|                  "function.\n"
 5387|   179k|                  "A range needs to have a character type (value type) "
 5388|   179k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   179k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   179k|                  "to be included.\n"
 5391|   179k|                  "See the scnlib documentation for more details.");
 5392|   179k|    static_assert(
 5393|   179k|        !std::is_same_v<T, custom_char_traits>,
 5394|   179k|        "\n"
 5395|   179k|        "Unsupported range type given as input to a scanning "
 5396|   179k|        "function.\n"
 5397|   179k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   179k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   179k|        "not supported.");
 5400|   179k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   179k|                  "\n"
 5402|   179k|                  "Unsupported range type given as input to a scanning "
 5403|   179k|                  "function.\n"
 5404|   179k|                  "file_marker_found cannot be used as an "
 5405|   179k|                  "source range type to scn::scan.\n"
 5406|   179k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   179k|                  "and do not provide an explicit source range, "
 5408|   179k|                  "or use scn::scan with a FILE* directly.");
 5409|   179k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   179k|                  "\n"
 5411|   179k|                  "Unsupported range type given as input to a scanning "
 5412|   179k|                  "function.\n"
 5413|   179k|                  "In order to be scannable, a range needs to satisfy "
 5414|   179k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   179k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   179k|                  "\n"
 5417|   179k|                  "Unsupported range type given as input to a scanning "
 5418|   179k|                  "function.\n"
 5419|   179k|                  "A range needs to model forward_range and have a valid "
 5420|   179k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   179k|                  "Examples of scannable ranges are std::string, "
 5422|   179k|                  "std::string_view, "
 5423|   179k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   179k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   179k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   179k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   179k|{
 5320|   179k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   179k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   179k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   179k|    {
 3000|   179k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   179k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   179k|    {
 2981|   179k|        return t.data();
 2982|   179k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   179k|    {
 3383|   179k|        return detail::to_address(ranges::begin(derived()));
 3384|   179k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   600k|{
  316|   600k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   600k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   600k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   600k|{
  294|   600k|    return p;
  295|   600k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   182k|    {
 2869|   182k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   182k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   182k|    {
 2850|   182k|        return decay_copy(t.begin());
 2851|   182k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  37.1M|    {
 3480|  37.1M|        return m_iterator;
 3481|  37.1M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   179k|    {
 3339|   179k|        return static_cast<const D&>(*this);
 3340|   179k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   179k|    {
 3075|   179k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   179k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   179k|    {
 3041|   179k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   179k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   543k|    {
 3496|   543k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   543k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   175k|        : base(unexpect, std::move(e.error())),
 1616|   175k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   175k|    {
 1618|   175k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   175k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   175k|          m_has_value(false)
  451|   175k|    {
  452|   175k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   179k|    {
 1316|   179k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  3.25k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 6677|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  3.25k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   418k|    {
 2869|   418k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   418k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   418k|    {
 2850|   418k|        return decay_copy(t.begin());
 2851|   418k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  3.25k|{
 6662|  3.25k|    return ranges::end(source);
 6663|  3.25k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.25k|    {
 2926|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.25k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.25k|    {
 2908|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.25k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  36.0M|    {
 3484|  36.0M|        return m_sentinel;
 3485|  36.0M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.25k|    {
 1572|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.25k|    {
  442|  3.25k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.3k|    {
 8768|  28.3k|        return m_str;
 8769|  28.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  56.7k|{
 6110|  56.7k|    detail::check_scan_arg_types<Args...>();
 6111|  56.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  56.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6085|  56.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  56.7k|    {
 6087|  56.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  56.7k|    {
 6095|  56.7k|        return {detail::make_arg<
 6096|  56.7k|            kind, Context,
 6097|  56.7k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  56.7k|                                 typename Context::char_type>::value>(args)...};
 6099|  56.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5874|  56.7k|{
 5875|  56.7k|    return make_value<Context>(value).ref_value;
 5876|  56.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5809|  59.6k|{
 5810|  59.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  59.6k|                                  needs_context_tag>) {
 5814|  59.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  59.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5648|  59.6k|    {                                                                        \
 5649|  59.6k|        return val;                                                          \
 5650|  59.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  56.7k|        : basic_scan_args(store.desc, store.args.data())
 6136|  56.7k|    {
 6137|  56.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|   341k|        : m_desc(desc), m_builtin_values(data)
 6188|   341k|    {
 6189|   341k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.36M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.36M|    {
 3466|  1.36M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   341k|{
 8446|   341k|    return s;
 8447|   341k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   341k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.3k|        : m_str(r.str)
 8763|  28.3k|    {
 8764|  28.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  29.8k|    {
 1740|  29.8k|        return has_value();
 1741|  29.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|  30.7k|    {
 1815|  30.7k|        return &value();
 1816|  30.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  30.7k|    {
 1769|  30.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.7k|        return this->get_value();
 1771|  30.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  3.25k|    {
 6434|  3.25k|        return ranges::begin(m_range);
 6435|  3.25k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  85.2k|{
 9414|  85.2k|#if !SCN_DISABLE_LOCALE
 9415|  85.2k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  85.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  85.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  85.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  85.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 9422|  83.7k|        return unexpected(result.error());
 9423|  83.7k|    }
 9424|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  85.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  8.61k|{
 9438|  8.61k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  8.61k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  8.61k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.37k, False: 240]
  |  |  ------------------
  ------------------
 9442|  8.37k|        return unexpected(result.error());
 9443|  8.37k|    }
 9444|    240|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  8.61k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.86k|{
 5860|  2.86k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.86k|    basic_scan_arg<Context> arg;
 5863|  2.86k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.86k|    arg.m_value = make_value<Context>(value);
 5865|  2.86k|    return arg;
 5866|  2.86k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   358k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9636|  29.7k|{
 9637|  29.7k|    return scan_result_type<Source, Args...>();
 9638|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  29.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.7k|        : m_value(T{}), m_has_value(true)
  427|  29.7k|    {
  428|  29.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6570|  29.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  29.7k|{
 9622|  29.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 410]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    410|    else {
 9626|    410|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    410|    static_cast<    \
  |  |  935|    410|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    410|    }
 9628|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   118k|    {
  490|   118k|        return m_has_value;
  491|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.5k|    {
  456|  30.5k|        return m_value;
  457|  30.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.3k|    {
 8768|  28.3k|        return m_str;
 8769|  28.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  56.6k|{
 6110|  56.6k|    detail::check_scan_arg_types<Args...>();
 6111|  56.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  56.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6085|  56.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  56.6k|    {
 6087|  56.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  56.6k|    {
 6095|  56.6k|        return {detail::make_arg<
 6096|  56.6k|            kind, Context,
 6097|  56.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  56.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  56.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5874|  56.6k|{
 5875|  56.6k|    return make_value<Context>(value).ref_value;
 5876|  56.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5809|  59.4k|{
 5810|  59.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  59.4k|                                  needs_context_tag>) {
 5814|  59.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  59.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5648|  59.4k|    {                                                                        \
 5649|  59.4k|        return val;                                                          \
 5650|  59.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  56.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  56.6k|    {
 6137|  56.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.3k|        : m_str(r.str)
 8763|  28.3k|    {
 8764|  28.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  29.7k|    {
 1740|  29.7k|        return has_value();
 1741|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|  30.5k|    {
 1815|  30.5k|        return &value();
 1816|  30.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  30.5k|    {
 1769|  30.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.5k|        return this->get_value();
 1771|  30.5k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.84k|{
 5860|  2.84k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.84k|    basic_scan_arg<Context> arg;
 5863|  2.84k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.84k|    arg.m_value = make_value<Context>(value);
 5865|  2.84k|    return arg;
 5866|  2.84k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9636|  29.9k|{
 9637|  29.9k|    return scan_result_type<Source, Args...>();
 9638|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  29.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.9k|        : m_value(T{}), m_has_value(true)
  427|  29.9k|    {
  428|  29.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  29.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  29.9k|{
 9622|  29.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 601]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    601|    else {
 9626|    601|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    601|    static_cast<    \
  |  |  935|    601|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    601|    }
 9628|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.1k|    {
  456|  31.1k|        return m_value;
  457|  31.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.4k|    {
 8768|  28.4k|        return m_str;
 8769|  28.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  56.9k|{
 6110|  56.9k|    detail::check_scan_arg_types<Args...>();
 6111|  56.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  56.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  56.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  56.9k|    {
 6087|  56.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  56.9k|    {
 6095|  56.9k|        return {detail::make_arg<
 6096|  56.9k|            kind, Context,
 6097|  56.9k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  56.9k|                                 typename Context::char_type>::value>(args)...};
 6099|  56.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  56.9k|{
 5875|  56.9k|    return make_value<Context>(value).ref_value;
 5876|  56.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  59.8k|{
 5810|  59.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  59.8k|                                  needs_context_tag>) {
 5814|  59.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  59.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  59.8k|    {                                                                        \
 5649|  59.8k|        return val;                                                          \
 5650|  59.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  56.9k|        : basic_scan_args(store.desc, store.args.data())
 6136|  56.9k|    {
 6137|  56.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.4k|        : m_str(r.str)
 8763|  28.4k|    {
 8764|  28.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  29.9k|    {
 1740|  29.9k|        return has_value();
 1741|  29.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  31.1k|    {
 1815|  31.1k|        return &value();
 1816|  31.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.1k|    {
 1769|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.1k|        return this->get_value();
 1771|  31.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.88k|{
 5860|  2.88k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.88k|    basic_scan_arg<Context> arg;
 5863|  2.88k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.88k|    arg.m_value = make_value<Context>(value);
 5865|  2.88k|    return arg;
 5866|  2.88k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9636|  29.7k|{
 9637|  29.7k|    return scan_result_type<Source, Args...>();
 9638|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  29.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.7k|        : m_value(T{}), m_has_value(true)
  427|  29.7k|    {
  428|  29.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  29.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  29.7k|{
 9622|  29.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 474]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    474|    else {
 9626|    474|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    474|    static_cast<    \
  |  |  935|    474|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    474|    }
 9628|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.7k|    {
  456|  30.7k|        return m_value;
  457|  30.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.3k|    {
 8768|  28.3k|        return m_str;
 8769|  28.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  56.7k|{
 6110|  56.7k|    detail::check_scan_arg_types<Args...>();
 6111|  56.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  56.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  56.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  56.7k|    {
 6087|  56.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  56.7k|    {
 6095|  56.7k|        return {detail::make_arg<
 6096|  56.7k|            kind, Context,
 6097|  56.7k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  56.7k|                                 typename Context::char_type>::value>(args)...};
 6099|  56.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  56.7k|{
 5875|  56.7k|    return make_value<Context>(value).ref_value;
 5876|  56.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  59.5k|{
 5810|  59.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  59.5k|                                  needs_context_tag>) {
 5814|  59.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  59.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  59.5k|    {                                                                        \
 5649|  59.5k|        return val;                                                          \
 5650|  59.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  56.7k|        : basic_scan_args(store.desc, store.args.data())
 6136|  56.7k|    {
 6137|  56.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.3k|        : m_str(r.str)
 8763|  28.3k|    {
 8764|  28.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  29.7k|    {
 1740|  29.7k|        return has_value();
 1741|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  30.7k|    {
 1815|  30.7k|        return &value();
 1816|  30.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  30.7k|    {
 1769|  30.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.7k|        return this->get_value();
 1771|  30.7k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.86k|{
 5860|  2.86k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.86k|    basic_scan_arg<Context> arg;
 5863|  2.86k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.86k|    arg.m_value = make_value<Context>(value);
 5865|  2.86k|    return arg;
 5866|  2.86k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9636|  30.0k|{
 9637|  30.0k|    return scan_result_type<Source, Args...>();
 9638|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.0k|        : m_value(T{}), m_has_value(true)
  427|  30.0k|    {
  428|  30.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6570|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.0k|{
 9622|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 718]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    718|    else {
 9626|    718|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    718|    static_cast<    \
  |  |  935|    718|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    718|    }
 9628|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.4k|    {
  456|  31.4k|        return m_value;
  457|  31.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.5k|    {
 8768|  28.5k|        return m_str;
 8769|  28.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.1k|{
 6110|  57.1k|    detail::check_scan_arg_types<Args...>();
 6111|  57.1k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6085|  57.1k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.1k|    {
 6087|  57.1k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.1k|    {
 6095|  57.1k|        return {detail::make_arg<
 6096|  57.1k|            kind, Context,
 6097|  57.1k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.1k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.1k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5874|  57.1k|{
 5875|  57.1k|    return make_value<Context>(value).ref_value;
 5876|  57.1k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5809|  60.0k|{
 5810|  60.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.0k|                                  needs_context_tag>) {
 5814|  60.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5648|  60.0k|    {                                                                        \
 5649|  60.0k|        return val;                                                          \
 5650|  60.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.1k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.1k|    {
 6137|  57.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.5k|        : m_str(r.str)
 8763|  28.5k|    {
 8764|  28.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  30.0k|    {
 1740|  30.0k|        return has_value();
 1741|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|  31.4k|    {
 1815|  31.4k|        return &value();
 1816|  31.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.4k|    {
 1769|  31.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.4k|        return this->get_value();
 1771|  31.4k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.90k|{
 5860|  2.90k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.90k|    basic_scan_arg<Context> arg;
 5863|  2.90k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.90k|    arg.m_value = make_value<Context>(value);
 5865|  2.90k|    return arg;
 5866|  2.90k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9636|  29.8k|{
 9637|  29.8k|    return scan_result_type<Source, Args...>();
 9638|  29.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  29.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.8k|        : m_value(T{}), m_has_value(true)
  427|  29.8k|    {
  428|  29.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6570|  29.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  29.8k|{
 9622|  29.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 564]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    564|    else {
 9626|    564|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    564|    static_cast<    \
  |  |  935|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    564|    }
 9628|  29.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.0k|    {
  456|  31.0k|        return m_value;
  457|  31.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.4k|    {
 8768|  28.4k|        return m_str;
 8769|  28.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  56.8k|{
 6110|  56.8k|    detail::check_scan_arg_types<Args...>();
 6111|  56.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  56.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6085|  56.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  56.8k|    {
 6087|  56.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  56.8k|    {
 6095|  56.8k|        return {detail::make_arg<
 6096|  56.8k|            kind, Context,
 6097|  56.8k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  56.8k|                                 typename Context::char_type>::value>(args)...};
 6099|  56.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5874|  56.8k|{
 5875|  56.8k|    return make_value<Context>(value).ref_value;
 5876|  56.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5809|  59.7k|{
 5810|  59.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  59.7k|                                  needs_context_tag>) {
 5814|  59.7k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  59.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5648|  59.7k|    {                                                                        \
 5649|  59.7k|        return val;                                                          \
 5650|  59.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  56.8k|        : basic_scan_args(store.desc, store.args.data())
 6136|  56.8k|    {
 6137|  56.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.4k|        : m_str(r.str)
 8763|  28.4k|    {
 8764|  28.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  29.8k|    {
 1740|  29.8k|        return has_value();
 1741|  29.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|  31.0k|    {
 1815|  31.0k|        return &value();
 1816|  31.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.0k|    {
 1769|  31.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.0k|        return this->get_value();
 1771|  31.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.87k|{
 5860|  2.87k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.87k|    basic_scan_arg<Context> arg;
 5863|  2.87k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.87k|    arg.m_value = make_value<Context>(value);
 5865|  2.87k|    return arg;
 5866|  2.87k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   175k|    {
 2869|   175k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   175k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   175k|    {
 2850|   175k|        return decay_copy(t.begin());
 2851|   175k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   104M|{
 2094|   104M|    return SCN_FWD(t);
  ------------------
  |  |  936|   104M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   104M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   358k|    {
 2926|   358k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   358k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   358k|    {
 2908|   358k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   358k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9636|  29.8k|{
 9637|  29.8k|    return scan_result_type<Source, Args...>();
 9638|  29.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  29.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.8k|        : m_value(T{}), m_has_value(true)
  427|  29.8k|    {
  428|  29.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6570|  29.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   179k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   179k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  29.8k|{
 9622|  29.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 485]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    485|    else {
 9626|    485|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    485|    static_cast<    \
  |  |  935|    485|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    485|    }
 9628|  29.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   179k|    {
 1740|   179k|        return has_value();
 1741|   179k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   358k|    {
  490|   358k|        return m_has_value;
  491|   358k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   175k|    {
 1746|   175k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   175k|        return this->get_unexpected().error();
 1748|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   175k|    {
  473|   175k|        return m_unexpected;
  474|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.7k|    {
  456|  30.7k|        return m_value;
  457|  30.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  3.25k|    {
 6445|  3.25k|        m_range = std::forward<Other>(r);
 6446|  3.25k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  3.25k|    {
 1795|  3.25k|        return value();
 1796|  3.25k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  3.25k|    {
 1769|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.25k|        return this->get_value();
 1771|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.25k|    {
  456|  3.25k|        return m_value;
  457|  3.25k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  85.2k|{
 9398|  85.2k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  85.2k|    auto result = vscan_impl(buffer, format, args);
 9401|  85.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 9402|  83.7k|        return unexpected(result.error());
 9403|  83.7k|    }
 9404|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  85.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   179k|{
 5381|   179k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   179k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   179k|                  "\n"
 5385|   179k|                  "Unsupported range type given as input to a scanning "
 5386|   179k|                  "function.\n"
 5387|   179k|                  "A range needs to have a character type (value type) "
 5388|   179k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   179k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   179k|                  "to be included.\n"
 5391|   179k|                  "See the scnlib documentation for more details.");
 5392|   179k|    static_assert(
 5393|   179k|        !std::is_same_v<T, custom_char_traits>,
 5394|   179k|        "\n"
 5395|   179k|        "Unsupported range type given as input to a scanning "
 5396|   179k|        "function.\n"
 5397|   179k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   179k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   179k|        "not supported.");
 5400|   179k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   179k|                  "\n"
 5402|   179k|                  "Unsupported range type given as input to a scanning "
 5403|   179k|                  "function.\n"
 5404|   179k|                  "file_marker_found cannot be used as an "
 5405|   179k|                  "source range type to scn::scan.\n"
 5406|   179k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   179k|                  "and do not provide an explicit source range, "
 5408|   179k|                  "or use scn::scan with a FILE* directly.");
 5409|   179k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   179k|                  "\n"
 5411|   179k|                  "Unsupported range type given as input to a scanning "
 5412|   179k|                  "function.\n"
 5413|   179k|                  "In order to be scannable, a range needs to satisfy "
 5414|   179k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   179k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   179k|                  "\n"
 5417|   179k|                  "Unsupported range type given as input to a scanning "
 5418|   179k|                  "function.\n"
 5419|   179k|                  "A range needs to model forward_range and have a valid "
 5420|   179k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   179k|                  "Examples of scannable ranges are std::string, "
 5422|   179k|                  "std::string_view, "
 5423|   179k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   179k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   179k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   179k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   179k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   179k|    else {
 5366|   179k|        return make_forward_scan_buffer(r);
 5367|   179k|    }
 5368|   179k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   179k|{
 5185|   179k|    return basic_scan_forward_buffer_impl(range);
 5186|   179k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   179k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   179k|          m_cursor(ranges::begin(*m_range))
 4766|   179k|    {
 4767|   179k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   179k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   179k|    {
 4738|   179k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   179k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   179k|    {
 4429|   179k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   179k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   182k|    {
 2869|   182k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   182k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   182k|    {
 2850|   182k|        return decay_copy(t.begin());
 2851|   182k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   185k|    {
 3480|   185k|        return m_iterator;
 3481|   185k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  34.7M|    {
 4771|  34.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 106k, False: 34.5M]
  ------------------
 4772|   106k|            return false;
 4773|   106k|        }
 4774|  34.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  34.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  34.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  34.5M|        }
 4777|  34.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 34.4M, False: 128k]
  ------------------
 4778|  34.4M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  34.4M|                                          this->m_current_view.begin(),
 4780|  34.4M|                                          this->m_current_view.end());
 4781|  34.4M|        }
 4782|  34.5M|        m_latest = *m_cursor;
 4783|  34.5M|        ++m_cursor;
 4784|  34.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  34.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  34.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  34.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  34.5M|        }
 4788|  34.5M|        return true;
 4789|  34.7M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   103M|    {
 2926|   103M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   103M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   103M|    {
 2908|   103M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   103M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   103M|    {
 3484|   103M|        return m_sentinel;
 3485|   103M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   179k|    {
 4346|   179k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   179k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   179k|        return true;
 4348|   179k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   175k|        : base(unexpect, std::move(e.error())),
 1616|   175k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   175k|    {
 1618|   175k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   175k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   175k|          m_has_value(false)
  451|   175k|    {
  452|   175k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   179k|    {
 1316|   179k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  3.25k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 6677|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  3.25k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.25k|    {
 2869|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.25k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.25k|    {
 2850|  3.25k|        return decay_copy(t.begin());
 2851|  3.25k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|  3.25k|{
 6662|  3.25k|    return ranges::end(source);
 6663|  3.25k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.25k|    {
 2926|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.25k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.25k|    {
 2908|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.25k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.25k|    {
 1572|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.25k|    {
  442|  3.25k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.3k|    {
 8768|  28.3k|        return m_str;
 8769|  28.3k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   182k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   182k|    static_cast<    \
  |  |  935|   182k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   182k|    static_cast<    \
  |  |  935|   182k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   182k|    {
 3466|   182k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.3k|        : m_str(r.str)
 8763|  28.3k|    {
 8764|  28.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  29.8k|    {
 1740|  29.8k|        return has_value();
 1741|  29.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|  30.7k|    {
 1815|  30.7k|        return &value();
 1816|  30.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  30.7k|    {
 1769|  30.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.7k|        return this->get_value();
 1771|  30.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|  3.25k|    {
 6434|  3.25k|        return ranges::begin(m_range);
 6435|  3.25k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  85.2k|{
 9414|  85.2k|#if !SCN_DISABLE_LOCALE
 9415|  85.2k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  85.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  85.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  85.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  85.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 9422|  83.7k|        return unexpected(result.error());
 9423|  83.7k|    }
 9424|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  85.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  8.61k|{
 9438|  8.61k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  8.61k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  8.61k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.37k, False: 240]
  |  |  ------------------
  ------------------
 9442|  8.37k|        return unexpected(result.error());
 9443|  8.37k|    }
 9444|    240|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  8.61k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9636|  29.7k|{
 9637|  29.7k|    return scan_result_type<Source, Args...>();
 9638|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  29.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.7k|        : m_value(T{}), m_has_value(true)
  427|  29.7k|    {
  428|  29.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6570|  29.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  29.7k|{
 9622|  29.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 410]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    410|    else {
 9626|    410|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    410|    static_cast<    \
  |  |  935|    410|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    410|    }
 9628|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   118k|    {
  490|   118k|        return m_has_value;
  491|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.5k|    {
  456|  30.5k|        return m_value;
  457|  30.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.3k|    {
 8768|  28.3k|        return m_str;
 8769|  28.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.3k|        : m_str(r.str)
 8763|  28.3k|    {
 8764|  28.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  29.7k|    {
 1740|  29.7k|        return has_value();
 1741|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|  30.5k|    {
 1815|  30.5k|        return &value();
 1816|  30.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  30.5k|    {
 1769|  30.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.5k|        return this->get_value();
 1771|  30.5k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9636|  29.9k|{
 9637|  29.9k|    return scan_result_type<Source, Args...>();
 9638|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  29.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.9k|        : m_value(T{}), m_has_value(true)
  427|  29.9k|    {
  428|  29.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6570|  29.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  29.9k|{
 9622|  29.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 601]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    601|    else {
 9626|    601|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    601|    static_cast<    \
  |  |  935|    601|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    601|    }
 9628|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.1k|    {
  456|  31.1k|        return m_value;
  457|  31.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.4k|    {
 8768|  28.4k|        return m_str;
 8769|  28.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.4k|        : m_str(r.str)
 8763|  28.4k|    {
 8764|  28.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  29.9k|    {
 1740|  29.9k|        return has_value();
 1741|  29.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|  31.1k|    {
 1815|  31.1k|        return &value();
 1816|  31.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.1k|    {
 1769|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.1k|        return this->get_value();
 1771|  31.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9636|  29.7k|{
 9637|  29.7k|    return scan_result_type<Source, Args...>();
 9638|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  29.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.7k|        : m_value(T{}), m_has_value(true)
  427|  29.7k|    {
  428|  29.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6570|  29.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  29.7k|{
 9622|  29.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 474]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    474|    else {
 9626|    474|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    474|    static_cast<    \
  |  |  935|    474|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    474|    }
 9628|  29.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.7k|    {
  456|  30.7k|        return m_value;
  457|  30.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.3k|    {
 8768|  28.3k|        return m_str;
 8769|  28.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.3k|        : m_str(r.str)
 8763|  28.3k|    {
 8764|  28.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  29.7k|    {
 1740|  29.7k|        return has_value();
 1741|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|  30.7k|    {
 1815|  30.7k|        return &value();
 1816|  30.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  30.7k|    {
 1769|  30.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.7k|        return this->get_value();
 1771|  30.7k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9636|  30.0k|{
 9637|  30.0k|    return scan_result_type<Source, Args...>();
 9638|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.0k|        : m_value(T{}), m_has_value(true)
  427|  30.0k|    {
  428|  30.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6570|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.0k|{
 9622|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 718]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    718|    else {
 9626|    718|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    718|    static_cast<    \
  |  |  935|    718|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    718|    }
 9628|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.4k|    {
  456|  31.4k|        return m_value;
  457|  31.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.5k|    {
 8768|  28.5k|        return m_str;
 8769|  28.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.5k|        : m_str(r.str)
 8763|  28.5k|    {
 8764|  28.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  30.0k|    {
 1740|  30.0k|        return has_value();
 1741|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|  31.4k|    {
 1815|  31.4k|        return &value();
 1816|  31.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.4k|    {
 1769|  31.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.4k|        return this->get_value();
 1771|  31.4k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9636|  29.8k|{
 9637|  29.8k|    return scan_result_type<Source, Args...>();
 9638|  29.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  29.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.8k|        : m_value(T{}), m_has_value(true)
  427|  29.8k|    {
  428|  29.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6570|  29.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  29.8k|{
 9622|  29.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 564]
  |  |  ------------------
  ------------------
 9623|  29.3k|        out = unexpected(in.error());
 9624|  29.3k|    }
 9625|    564|    else {
 9626|    564|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    564|    static_cast<    \
  |  |  935|    564|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    564|    }
 9628|  29.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.3k|        : base(unexpect, std::move(e.error())),
 1616|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.3k|    {
 1618|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.3k|          m_has_value(false)
  451|  29.3k|    {
  452|  29.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.3k|    {
 1316|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.3k|    {
  903|  29.3k|        assign_common(std::move(other));
  904|  29.3k|        return *this;
  905|  29.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.3k|    {
  950|  29.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.3k, False: 0]
  ------------------
  951|  29.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.0k|    {
  456|  31.0k|        return m_value;
  457|  31.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.3k|    {
 1046|  29.3k|        this->destroy_value();
 1047|  29.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.3k|    {
  504|  29.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.3k|                                  std::forward<Args>(args)...);
  506|  29.3k|        m_has_value = false;
  507|  29.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.3k|    {
  473|  29.3k|        return m_unexpected;
  474|  29.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.3k|    {
  481|  29.3k|        return std::move(m_unexpected);
  482|  29.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.4k|    {
 8768|  28.4k|        return m_str;
 8769|  28.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.4k|        : m_str(r.str)
 8763|  28.4k|    {
 8764|  28.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  29.8k|    {
 1740|  29.8k|        return has_value();
 1741|  29.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|  31.0k|    {
 1815|  31.0k|        return &value();
 1816|  31.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.0k|    {
 1769|  31.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.0k|        return this->get_value();
 1771|  31.0k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   728k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   728k|    {
 3742|   728k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   728k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   728k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   600k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   600k|    else {
 3981|   600k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   600k|    }
 3983|   600k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  10.7M|    {
 3480|  10.7M|        return m_iterator;
 3481|  10.7M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  37.0M|    {
 3480|  37.0M|        return m_iterator;
 3481|  37.0M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.88M|    {
  572|  5.88M|        return m_has_value;
  573|  5.88M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   587k|    {
  555|   587k|        return m_unexpected;
  556|   587k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   452k|    {
 1746|   452k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   452k|        return this->get_unexpected().error();
 1748|   452k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|   852k|    {
 6974|   852k|        SCN_GCC_COMPAT_PUSH
 6975|   852k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|   852k|        switch (type) {
 6977|   159k|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 159k, False: 692k]
  ------------------
 6978|   159k|                return 10;
 6979|   177k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 177k, False: 675k]
  ------------------
 6980|   177k|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 852k]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|  77.5k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 77.5k, False: 775k]
  ------------------
 6985|  77.5k|                return 2;
 6986|   112k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 112k, False: 740k]
  ------------------
 6987|   112k|                return 8;
 6988|   159k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 159k, False: 693k]
  ------------------
 6989|   159k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 0, False: 852k]
  ------------------
 6990|   159k|                return 10;
 6991|   166k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 166k, False: 686k]
  ------------------
 6992|   166k|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 852k]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|   852k|        }
 6998|   852k|        SCN_GCC_COMPAT_POP
 6999|   852k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  1.02M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|   759k|    {
 7056|   759k|        m_specs.type = type;
 7057|   759k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|   100k|    {
 7118|   100k|        SCN_UNLIKELY_ATTR
 7119|   100k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|   100k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|   924k|    {
 7129|   924k|        return m_error;
 7130|   924k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   601k|{
 3918|   601k|    return unexpected(scan_error{c, m});
 3919|   601k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  1.07M|{
 4308|       |    // Pattern_White_Space property
 4309|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 939k, False: 132k]
  |  Branch (4309:27): [True: 382k, False: 557k]
  ------------------
 4310|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 9.25k, False: 680k]
  ------------------
 4311|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 3.93k, False: 676k]
  ------------------
 4312|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 1.56k, False: 675k]
  ------------------
 4313|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 2.08k, False: 673k]
  ------------------
 4314|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 2.48k, False: 670k]
  ------------------
 4315|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 670k]
  ------------------
 4316|  1.07M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|   164k|{
 7812|   164k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 164k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|  27.4k|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 27.4k, False: 137k]
  ------------------
 7817|  27.4k|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 164k]
  ------------------
 7818|  58.2k|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 30.8k, False: 134k]
  ------------------
 7819|  58.2k|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 164k]
  ------------------
 7820|  89.6k|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 31.3k, False: 133k]
  ------------------
 7821|  89.6k|            return arg_type_category::integer;
 7822|       |
 7823|  23.7k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 23.7k, False: 141k]
  ------------------
 7824|  23.7k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 164k]
  ------------------
 7825|  49.3k|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 25.5k, False: 139k]
  ------------------
 7826|  49.3k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 164k]
  ------------------
 7827|  75.2k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 25.9k, False: 139k]
  ------------------
 7828|  75.2k|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 164k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 164k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 164k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 164k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 164k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 164k]
  ------------------
 7840|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 164k]
  ------------------
 7841|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 164k]
  ------------------
 7842|      0|            return arg_type_category::floating;
 7843|       |
 7844|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 164k]
  ------------------
 7845|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 164k]
  ------------------
 7846|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 0, False: 164k]
  ------------------
 7847|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 164k]
  ------------------
 7848|      0|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 164k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 164k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|   164k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|   164k|            SCN_CLANG_POP
 7859|   164k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|   164k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|   135k|    {
 1756|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   135k|        return std::move(this->get_unexpected().error());
 1758|   135k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|   874k|{
 7898|   874k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 874k]
  |  |  ------------------
  ------------------
 7899|      0|        return handler.on_error("Invalid type specifier for integer type");
 7900|      0|    }
 7901|   874k|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 164k, False: 709k]
  ------------------
 7902|   164k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|      0|            return;
 7907|      0|        }
 7908|   164k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|   164k|    }
 7914|   874k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  5.29M|    {
 1740|  5.29M|        return has_value();
 1741|  5.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  62.5M|    {
 4473|  62.5M|        assert(m_begin);
 4474|  62.5M|        return m_end == nullptr;
 4475|  62.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  1.42M|    {
 4490|  1.42M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.42M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.42M|        return parent()->get_segment_starting_at(position());
 4496|  1.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  34.3M|    {
 4484|  34.3M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  34.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  34.3M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  34.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  1.42M|    {
 4377|  1.42M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 382k, False: 1.04M]
  |  |  ------------------
  ------------------
 4378|  1.42M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   382k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   382k|        }
 4381|  1.04M|        const auto start = pos - m_putback_buffer.size();
 4382|  1.04M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  1.04M|        return m_current_view.substr(start);
 4384|  1.04M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|   340k|    {
 4479|   340k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   340k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   340k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  2.20M|    {
 4468|  2.20M|        return m_position;
 4469|  2.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  1.36M|    {
 4399|  1.36M|        return m_is_contiguous;
 4400|  1.36M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   140G|    {
 4473|   140G|        assert(m_begin);
 4474|   140G|        return m_end == nullptr;
 4475|   140G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  5.65k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  5.65k|    else {
 3981|  5.65k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  5.65k|    }
 3983|  5.65k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|   134k|    {
 4490|   134k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 134k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   134k|        return parent()->get_segment_starting_at(position());
 4496|   134k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  70.4G|    {
 4484|  70.4G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  70.4G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.4G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  70.4G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  70.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|   134k|    {
 4377|   134k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.77k, False: 131k]
  |  |  ------------------
  ------------------
 4378|   134k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  2.77k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  2.77k|        }
 4381|   131k|        const auto start = pos - m_putback_buffer.size();
 4382|   131k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   131k|        return m_current_view.substr(start);
 4384|   131k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|   101k|    {
 4479|   101k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   101k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   101k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   241k|    {
 4468|   241k|        return m_position;
 4469|   241k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   537k|    {
 4399|   537k|        return m_is_contiguous;
 4400|   537k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  1.78M|    {
 3334|  1.78M|        return static_cast<D&>(*this);
 3335|  1.78M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  1.78M|    {
 3375|  1.78M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.78M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   415k|    {
 3334|   415k|        return static_cast<D&>(*this);
 3335|   415k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   415k|    {
 3375|   415k|        return detail::to_address(ranges::begin(derived()));
 3376|   415k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   334k|    {
 8965|   334k|        return ranges::subrange{begin(), end()};
 8966|   334k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   334k|    {
 8957|   334k|        return ranges::default_sentinel;
 8958|   334k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  3.48M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.48M|    static_cast<    \
  |  |  935|  3.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.48M|    static_cast<    \
  |  |  935|  3.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.48M|    {
 3466|  3.48M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   837k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   429k|    {
 1979|   429k|        return detail::transform_error_impl(std::move(*this),
 1980|   429k|                                            std::forward<F>(f));
 1981|   429k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   429k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   429k|    else {
 1472|   429k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   429k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   429k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 417k, False: 12.1k]
  |  |  ------------------
  ------------------
 1474|   429k|                   ? result(*std::forward<Exp>(exp))
 1475|   429k|                   : result(unexpect,
 1476|  12.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  12.1k|                                           std::forward<Exp>(exp).error()));
 1478|   429k|    }
 1479|   429k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.16M|    {
  490|  2.16M|        return m_has_value;
  491|  2.16M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   746k|    {
 1805|   746k|        return std::move(value());
 1806|   746k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   843k|    {
 1769|   843k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   843k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   843k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   843k|        return this->get_value();
 1771|   843k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   843k|    {
  456|   843k|        return m_value;
  457|   843k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.35M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.35M|    {
 1572|  1.35M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.35M|    {
  442|  1.35M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.49M|    {
 1316|  1.49M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  27.1k|{
 1350|  27.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  27.1k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  23.7k|    {
 1756|  23.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  23.7k|        return std::move(this->get_unexpected().error());
 1758|  23.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  24.0k|    {
  473|  24.0k|        return m_unexpected;
  474|  24.0k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   155k|    {
  365|   155k|        return m_unexpected;
  366|   155k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  40.8k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  40.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  40.8k|    {
 1628|  40.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   144k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   144k|          m_has_value(false)
  451|   144k|    {
  452|   144k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   103k|    {
 8965|   103k|        return ranges::subrange{begin(), end()};
 8966|   103k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   103k|    {
 8957|   103k|        return ranges::default_sentinel;
 8958|   103k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   922k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   922k|    static_cast<    \
  |  |  935|   922k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   922k|    static_cast<    \
  |  |  935|   922k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   922k|    {
 3466|   922k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   128k|    {
 1979|   128k|        return detail::transform_error_impl(std::move(*this),
 1980|   128k|                                            std::forward<F>(f));
 1981|   128k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   128k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   128k|    else {
 1472|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 127k, False: 1.86k]
  |  |  ------------------
  ------------------
 1474|   128k|                   ? result(*std::forward<Exp>(exp))
 1475|   128k|                   : result(unexpect,
 1476|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.86k|                                           std::forward<Exp>(exp).error()));
 1478|   128k|    }
 1479|   128k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   624k|    {
  490|   624k|        return m_has_value;
  491|   624k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   209k|    {
 1805|   209k|        return std::move(value());
 1806|   209k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   211k|    {
 1769|   211k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   211k|        return this->get_value();
 1771|   211k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   211k|    {
  456|   211k|        return m_value;
  457|   211k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   135k|        : base(std::in_place, std::forward<U>(val)),
 1570|   135k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   135k|    {
 1572|   135k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   135k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   135k|    {
  442|   135k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   468k|    {
 1316|   468k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  20.9k|    {
 1756|  20.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  20.9k|        return std::move(this->get_unexpected().error());
 1758|  20.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  21.0k|    {
  473|  21.0k|        return m_unexpected;
  474|  21.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   108k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   108k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   108k|    {
 1628|   108k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   332k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   332k|          m_has_value(false)
  451|   332k|    {
  452|   332k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   601k|        : m_unexpected(std::forward<Err>(e))
  350|   601k|    {
  351|   601k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   601k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   601k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   527k|        : base(unexpect, std::move(e.error())),
 1616|   527k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   527k|    {
 1618|   527k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   527k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   527k|          m_has_value(false)
  451|   527k|    {
  452|   527k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.26M|    {
 1316|  1.26M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   162k|        : base(unexpect, std::move(e.error())),
 1616|   162k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   162k|    {
 1618|   162k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.71M|    {
 1316|  2.71M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.53M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.53M|    {
 1572|  2.53M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.53M|    {
  442|  2.53M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  2.71M|    {
 1740|  2.71M|        return has_value();
 1741|  2.71M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.42M|    {
  490|  5.42M|        return m_has_value;
  491|  5.42M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   173k|    {
 1746|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   173k|        return this->get_unexpected().error();
 1748|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.25M|    {
 1805|  2.25M|        return std::move(value());
 1806|  2.25M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.53M|    {
 1769|  2.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.53M|        return this->get_value();
 1771|  2.53M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.53M|    {
  456|  2.53M|        return m_value;
  457|  2.53M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   332k|        : base(unexpect, std::move(e.error())),
 1616|   332k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   332k|    {
 1618|   332k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   334k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   334k|          m_has_value(false)
  451|   334k|    {
  452|   334k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   586k|    {
 1316|   586k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   251k|        : base(std::in_place, std::forward<U>(val)),
 1570|   251k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   251k|    {
 1572|   251k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   251k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   251k|    {
  442|   251k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   586k|    {
 1740|   586k|        return has_value();
 1741|   586k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.17M|    {
  490|  1.17M|        return m_has_value;
  491|  1.17M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   334k|    {
 1746|   334k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   334k|        return this->get_unexpected().error();
 1748|   334k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   334k|    {
  473|   334k|        return m_unexpected;
  474|   334k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   249k|    {
 1805|   249k|        return std::move(value());
 1806|   249k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   251k|    {
 1769|   251k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   251k|        return this->get_value();
 1771|   251k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   251k|    {
  456|   251k|        return m_value;
  457|   251k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   430k|    {
 1979|   430k|        return detail::transform_error_impl(std::move(*this),
 1980|   430k|                                            std::forward<F>(f));
 1981|   430k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   430k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   430k|    else {
 1472|   430k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   430k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   430k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 419k, False: 11.2k]
  |  |  ------------------
  ------------------
 1474|   430k|                   ? result(*std::forward<Exp>(exp))
 1475|   430k|                   : result(unexpect,
 1476|  11.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.2k|                                           std::forward<Exp>(exp).error()));
 1478|   430k|    }
 1479|   430k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   516k|    {
 1769|   516k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   516k|        return this->get_value();
 1771|   516k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   516k|    {
  456|   516k|        return m_value;
  457|   516k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  11.2k|    {
 1756|  11.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  11.2k|        return std::move(this->get_unexpected().error());
 1758|  11.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.2k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.2k|    {
 1628|  11.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   977k|    {
 8949|   977k|        return m_current;
 8950|   977k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   668k|    {
 8842|   668k|        return m_locale;
 8843|   668k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   718k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   718k|    static_cast<    \
  |  |  935|   718k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   718k|    static_cast<    \
  |  |  935|   718k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   718k|    {
 8849|   718k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   103k|        : base(unexpect, std::move(e.error())),
 1616|   103k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   103k|    {
 1618|   103k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   258k|    {
 8949|   258k|        return m_current;
 8950|   258k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   206k|    {
 8842|   206k|        return m_locale;
 8843|   206k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   306k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   306k|    static_cast<    \
  |  |  935|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   306k|    static_cast<    \
  |  |  935|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   306k|    {
 8849|   306k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   224k|        : base(unexpect, std::move(e.error())),
 1616|   224k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   224k|    {
 1618|   224k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   788k|        : base(unexpect, std::move(e.error())),
 1616|   788k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   788k|    {
 1618|   788k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   788k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   788k|          m_has_value(false)
  550|   788k|    {
  551|   788k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   788k|    {
 1316|   788k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  4.52M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  4.52M|        : m_deferred_init(), m_has_value(true)
  529|  4.52M|    {
  530|  4.52M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  2.32M|    {
 4559|  2.32M|        return x.is_at_end();
 4560|  2.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  4.91M|    {
 4603|  4.91M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 4.91M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  4.91M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 4.91M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  4.91M|        return !read_at_position();
 4610|  4.91M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  19.8M|    {
 4583|  19.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  19.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  19.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 19.8M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  19.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  19.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 17.5M, False: 2.34M]
  |  |  ------------------
  ------------------
 4590|  17.5M|            return true;
 4591|  17.5M|        }
 4592|       |
 4593|  4.54M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 2.34M, False: 2.20M]
  ------------------
 4594|  2.34M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 144k, False: 2.20M]
  ------------------
 4595|   144k|                return false;
 4596|   144k|            }
 4597|  2.34M|        }
 4598|  2.20M|        return true;
 4599|  2.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  6.20M|    {
 4518|  6.20M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  6.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  6.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 6.20M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  6.20M|        auto res = read_at_position();
 4527|  6.20M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  6.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  6.20M|        return parent()->get_character_at(m_position);
 4529|  6.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  6.20M|    {
 4388|  6.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  6.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.95M, False: 2.25M]
  |  |  ------------------
  ------------------
 4389|  6.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  3.95M|            return m_putback_buffer[pos];
 4391|  3.95M|        }
 4392|  2.25M|        const auto start = pos - m_putback_buffer.size();
 4393|  2.25M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  2.25M|        return m_current_view[start];
 4395|  2.25M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  1.27M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.27M|    {
 1572|  1.27M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.27M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.27M|    {
  442|  1.27M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.29M|    {
 1316|  1.29M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  49.8k|        : m_unexpected(std::forward<Err>(e))
  350|  49.8k|    {
  351|  49.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  49.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  24.0k|        : base(unexpect, std::move(e.error())),
 1616|  24.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.0k|    {
 1618|  24.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  24.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.0k|          m_has_value(false)
  451|  24.0k|    {
  452|  24.0k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  77.8k|        : m_unexpected(std::forward<Args>(args)...)
  359|  77.8k|    {
  360|  77.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  77.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  77.8k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   526k|    {
 1740|   526k|        return has_value();
 1741|   526k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  96.8k|    {
 1795|  96.8k|        return value();
 1796|  96.8k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  5.48M|    {
 4553|  5.48M|        return !(lhs == rhs);
 4554|  5.48M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  5.79M|    {
 4548|  5.79M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.79M, False: 0]
  |  Branch (4548:46): [True: 536k, False: 5.25M]
  ------------------
 4549|  5.79M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  8.73M|    {
 4504|  8.73M|        ++m_position;
 4505|  8.73M|        (void)read_at_position();
 4506|  8.73M|        return *this;
 4507|  8.73M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  27.9k|        : m_unexpected(std::forward<Err>(e))
  350|  27.9k|    {
  351|  27.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  27.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  27.9k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  9.79k|        : base(unexpect, std::move(e.error())),
 1616|  9.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.79k|    {
 1618|  9.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  9.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.79k|          m_has_value(false)
  451|  9.79k|    {
  452|  9.79k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   611k|    {
 1316|   611k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   601k|        : base(std::in_place, std::forward<U>(val)),
 1570|   601k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   601k|    {
 1572|   601k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   601k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   601k|    {
  442|   601k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   611k|    {
 1740|   611k|        return has_value();
 1741|   611k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  9.79k|    {
 1746|  9.79k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  9.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  9.79k|        return this->get_unexpected().error();
 1748|  9.79k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.79k|    {
  473|  9.79k|        return m_unexpected;
  474|  9.79k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   601k|    {
 1805|   601k|        return std::move(value());
 1806|   601k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   601k|    {
 1769|   601k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   601k|        return this->get_value();
 1771|   601k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   601k|    {
  456|   601k|        return m_value;
  457|   601k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  7.60M|    {
 3484|  7.60M|        return m_sentinel;
 3485|  7.60M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  12.6k|        : m_unexpected(std::forward<Err>(e))
  350|  12.6k|    {
  351|  12.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.6k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  1.22M|    {
  365|  1.22M|        return m_unexpected;
  366|  1.22M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   112k|        : m_unexpected(std::forward<Args>(args)...)
  359|   112k|    {
  360|   112k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   112k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  2.33M|        : m_unexpected(std::forward<Err>(e))
  350|  2.33M|    {
  351|  2.33M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.33M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  2.33M|    {
  365|  2.33M|        return m_unexpected;
  366|  2.33M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  2.33M|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.33M|    {
  360|  2.33M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.33M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  49.8k|{
 1350|  49.8k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  49.8k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  49.8k|        : m_unexpected(std::forward<Err>(e))
  350|  49.8k|    {
  351|  49.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  49.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.8k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|   135k|{
 1350|   135k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   135k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  39.3k|{
  396|  39.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  39.3k|        T(std::forward<Args>(args)...);
  398|  39.3k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3106|   114k|    {
 3107|   114k|        return fn::impl(std::forward<T>(t));
 3108|   114k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3097|   114k|    {
 3098|   114k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|   114k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3074|   114k|    {
 3075|   114k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   114k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3040|   114k|    {
 3041|   114k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   114k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  39.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  39.3k|    else {
  408|  39.3k|        p->~T();
  409|  39.3k|    }
  410|  39.3k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  11.9k|        : base(unexpect, std::move(e.error())),
 1616|  11.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.9k|    {
 1618|  11.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.5k|          m_has_value(false)
  451|  23.5k|    {
  452|  23.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.63M|    {
 1316|  1.63M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   139k|        : base(std::in_place, std::forward<U>(val)),
 1570|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   139k|    {
 1572|   139k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   851k|        : base(unexpect, std::move(e.error())),
 1616|   851k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   851k|    {
 1618|   851k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   851k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   851k|          m_has_value(false)
  451|   851k|    {
  452|   851k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  1.31M|    {
 1740|  1.31M|        return has_value();
 1741|  1.31M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  2.79M|    {
  490|  2.79M|        return m_has_value;
  491|  2.79M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   374k|    {
 1746|   374k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   374k|        return this->get_unexpected().error();
 1748|   374k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   402k|    {
  473|   402k|        return m_unexpected;
  474|   402k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   417k|        : base(std::in_place, std::forward<U>(val)),
 1570|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   417k|    {
 1572|   417k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   417k|    {
  442|   417k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   417k|    {
 1316|   417k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   142k|    {
 1795|   142k|        return value();
 1796|   142k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   756k|    {
 1769|   756k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   756k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   756k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   756k|        return this->get_value();
 1771|   756k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   756k|    {
  456|   756k|        return m_value;
  457|   756k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   417k|    {
 1740|   417k|        return has_value();
 1741|   417k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   834k|    {
  490|   834k|        return m_has_value;
  491|   834k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   417k|    {
 1316|   417k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   417k|    {
 1769|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   417k|        return this->get_value();
 1771|   417k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   417k|    {
  456|   417k|        return m_value;
  457|   417k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   340k|    {
 1979|   340k|        return detail::transform_error_impl(std::move(*this),
 1980|   340k|                                            std::forward<F>(f));
 1981|   340k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   340k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   340k|    else {
 1472|   340k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   340k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   340k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 329k, False: 11.6k]
  |  |  ------------------
  ------------------
 1474|   340k|                   ? result(*std::forward<Exp>(exp))
 1475|   340k|                   : result(unexpect,
 1476|  11.6k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.6k|                                           std::forward<Exp>(exp).error()));
 1478|   340k|    }
 1479|   340k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|   616k|        : base(std::in_place, std::forward<U>(val)),
 1570|   616k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   616k|    {
 1572|   616k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   616k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   616k|    {
  442|   616k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.6k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.6k|    {
 1628|  11.6k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   613k|    {
 1805|   613k|        return std::move(value());
 1806|   613k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   417k|        : base(std::in_place, std::forward<U>(val)),
 1570|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   417k|    {
 1572|   417k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   417k|    {
  442|   417k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   417k|    {
 1979|   417k|        return detail::transform_error_impl(std::move(*this),
 1980|   417k|                                            std::forward<F>(f));
 1981|   417k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   417k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   417k|    else {
 1472|   417k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   417k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   417k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 417k, False: 0]
  |  |  ------------------
  ------------------
 1474|   417k|                   ? result(*std::forward<Exp>(exp))
 1475|   417k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   417k|    }
 1479|   417k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   834k|    {
  490|   834k|        return m_has_value;
  491|   834k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   417k|    {
 1769|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   417k|        return this->get_value();
 1771|   417k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   417k|    {
  456|   417k|        return m_value;
  457|   417k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   417k|        : base(std::in_place, std::forward<U>(val)),
 1570|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   417k|    {
 1572|   417k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   417k|    {
  442|   417k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   417k|    {
 1316|   417k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   417k|    {
 1740|   417k|        return has_value();
 1741|   417k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   834k|    {
  490|   834k|        return m_has_value;
  491|   834k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   417k|    {
 1805|   417k|        return std::move(value());
 1806|   417k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   417k|    {
 1769|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   417k|        return this->get_value();
 1771|   417k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   417k|    {
  456|   417k|        return m_value;
  457|   417k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   313k|    {
 1979|   313k|        return detail::transform_error_impl(std::move(*this),
 1980|   313k|                                            std::forward<F>(f));
 1981|   313k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   313k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   313k|    else {
 1472|   313k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   313k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   313k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 284k, False: 28.7k]
  |  |  ------------------
  ------------------
 1474|   313k|                   ? result(*std::forward<Exp>(exp))
 1475|   313k|                   : result(unexpect,
 1476|  28.7k|                            trivial_invoke(std::forward<F>(f),
 1477|  28.7k|                                           std::forward<Exp>(exp).error()));
 1478|   313k|    }
 1479|   313k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|  28.7k|    {
 1756|  28.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  28.7k|        return std::move(this->get_unexpected().error());
 1758|  28.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  3.29k|        : base(unexpect, std::move(e.error())),
 1616|  3.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.29k|    {
 1618|  3.29k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  636|  3.29k|        : m_has_value(false)
  637|  3.29k|    {
  638|  3.29k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.29k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  700|  3.29k|    {
  701|  3.29k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.29k|                                  std::forward<Args>(args)...);
  703|  3.29k|        m_has_value = false;
  704|  3.29k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  9.88k|    {
  730|  9.88k|        return reinterpret_cast<unexpected<E>*>(
  731|  9.88k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  9.88k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  9.88k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.3k|    {
 1316|  61.3k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  58.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  58.0k|    {
 1572|  58.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  626|  58.0k|        : m_has_value(true)
  627|  58.0k|    {
  628|  58.0k|        construct(std::forward<Args>(args)...);
  629|  58.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  693|  58.0k|    {
  694|  58.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  58.0k|        m_has_value = true;
  696|  58.0k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  395|  58.0k|{
  396|  58.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  58.0k|        T(std::forward<Args>(args)...);
  398|  58.0k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   174k|    {
  718|   174k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   174k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   174k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1739|  61.3k|    {
 1740|  61.3k|        return has_value();
 1741|  61.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1745|  3.29k|    {
 1746|  3.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.29k|        return this->get_unexpected().error();
 1748|  3.29k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.29k|    {
  670|  3.29k|        return *unexpected_ptr();
  671|  3.29k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1804|  58.0k|    {
 1805|  58.0k|        return std::move(value());
 1806|  58.0k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  58.0k|    {
 1769|  58.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  58.0k|        return this->get_value();
 1771|  58.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  58.0k|    {
  653|  58.0k|        return *value_ptr();
  654|  58.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  642|  61.3k|    {
  643|  61.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 58.0k, False: 3.29k]
  ------------------
  644|  58.0k|            destroy_value();
  645|  58.0k|        }
  646|  3.29k|        else {
  647|  3.29k|            destroy_unexpected();
  648|  3.29k|        }
  649|  61.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  58.0k|    {
  708|  58.0k|        scn::detail::destroy_at(value_ptr());
  709|  58.0k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  401|  58.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  58.0k|    else {
  408|  58.0k|        p->~T();
  409|  58.0k|    }
  410|  58.0k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.29k|    {
  712|  3.29k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.29k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.49M|    {
 1740|  1.49M|        return has_value();
 1741|  1.49M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.99M|    {
  490|  2.99M|        return m_has_value;
  491|  2.99M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   144k|    {
 1746|   144k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   144k|        return this->get_unexpected().error();
 1748|   144k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   144k|    {
  473|   144k|        return m_unexpected;
  474|   144k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.06M|    {
 1805|  1.06M|        return std::move(value());
 1806|  1.06M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.35M|    {
 1769|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.35M|        return this->get_value();
 1771|  1.35M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.35M|    {
  456|  1.35M|        return m_value;
  457|  1.35M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   643k|    {
 3480|   643k|        return m_iterator;
 3481|   643k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   643k|    {
 3484|   643k|        return m_sentinel;
 3485|   643k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   284k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   284k|    {
 3466|   284k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  2.59M|    {
 4570|  2.59M|        return !x.is_at_end();
 4571|  2.59M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   958k|    {
 1316|   958k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   947k|        : base(std::in_place, std::forward<U>(val)),
 1570|   947k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   947k|    {
 1572|   947k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   947k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   947k|    {
  442|   947k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|   528k|    {
 1740|   528k|        return has_value();
 1741|   528k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  96.9k|    {
 1795|  96.9k|        return value();
 1796|  96.9k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  8.82k|        : base(unexpect, std::move(e.error())),
 1616|  8.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.82k|    {
 1618|  8.82k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  8.82k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.82k|          m_has_value(false)
  451|  8.82k|    {
  452|  8.82k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   610k|    {
 1316|   610k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   601k|        : base(std::in_place, std::forward<U>(val)),
 1570|   601k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   601k|    {
 1572|   601k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   601k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   601k|    {
  442|   601k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   610k|    {
 1740|   610k|        return has_value();
 1741|   610k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  8.82k|    {
 1746|  8.82k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  8.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  8.82k|        return this->get_unexpected().error();
 1748|  8.82k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.82k|    {
  473|  8.82k|        return m_unexpected;
  474|  8.82k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   601k|    {
 1805|   601k|        return std::move(value());
 1806|   601k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   601k|    {
 1769|   601k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   601k|        return this->get_value();
 1771|   601k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   601k|    {
  456|   601k|        return m_value;
  457|   601k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.1k|          m_has_value(false)
  451|  12.1k|    {
  452|  12.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   979k|    {
 1316|   979k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   139k|        : base(std::in_place, std::forward<U>(val)),
 1570|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   139k|    {
 1572|   139k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   825k|        : base(unexpect, std::move(e.error())),
 1616|   825k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   825k|    {
 1618|   825k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   825k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   825k|          m_has_value(false)
  451|   825k|    {
  452|   825k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|   979k|    {
 1740|   979k|        return has_value();
 1741|   979k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|   364k|    {
 1746|   364k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   364k|        return this->get_unexpected().error();
 1748|   364k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   364k|    {
  473|   364k|        return m_unexpected;
  474|   364k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   419k|        : base(std::in_place, std::forward<U>(val)),
 1570|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   419k|    {
 1572|   419k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   419k|    {
  442|   419k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   142k|    {
 1795|   142k|        return value();
 1796|   142k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   142k|    {
 1769|   142k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   142k|        return this->get_value();
 1771|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   142k|    {
  456|   142k|        return m_value;
  457|   142k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   419k|    {
 1740|   419k|        return has_value();
 1741|   419k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   838k|    {
  490|   838k|        return m_has_value;
  491|   838k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.59k|    {
 1572|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59k|    {
  442|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   419k|        : base(std::in_place, std::forward<U>(val)),
 1570|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   419k|    {
 1572|   419k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   419k|    {
  442|   419k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   419k|    {
 1979|   419k|        return detail::transform_error_impl(std::move(*this),
 1980|   419k|                                            std::forward<F>(f));
 1981|   419k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   419k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   419k|    else {
 1472|   419k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   419k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   419k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 419k, False: 0]
  |  |  ------------------
  ------------------
 1474|   419k|                   ? result(*std::forward<Exp>(exp))
 1475|   419k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   419k|    }
 1479|   419k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|   838k|    {
  490|   838k|        return m_has_value;
  491|   838k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   419k|        : base(std::in_place, std::forward<U>(val)),
 1570|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   419k|    {
 1572|   419k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   419k|    {
  442|   419k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|   419k|    {
 1740|   419k|        return has_value();
 1741|   419k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|   838k|    {
  490|   838k|        return m_has_value;
  491|   838k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  3.53k|        : base(unexpect, std::move(e.error())),
 1616|  3.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.53k|    {
 1618|  3.53k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|  3.53k|        : m_has_value(false)
  637|  3.53k|    {
  638|  3.53k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.53k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|  3.53k|    {
  701|  3.53k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.53k|                                  std::forward<Args>(args)...);
  703|  3.53k|        m_has_value = false;
  704|  3.53k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  10.5k|    {
  730|  10.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  10.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  10.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  10.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.5k|    {
 1316|  61.5k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1569|  57.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  57.9k|    {
 1572|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  626|  57.9k|        : m_has_value(true)
  627|  57.9k|    {
  628|  57.9k|        construct(std::forward<Args>(args)...);
  629|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  693|  57.9k|    {
  694|  57.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.9k|        m_has_value = true;
  696|  57.9k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  395|  57.9k|{
  396|  57.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.9k|        T(std::forward<Args>(args)...);
  398|  57.9k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   173k|    {
  718|   173k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   173k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   173k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|  61.5k|    {
 1740|  61.5k|        return has_value();
 1741|  61.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   184k|    {
  687|   184k|        return m_has_value;
  688|   184k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|  3.53k|    {
 1746|  3.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.53k|        return this->get_unexpected().error();
 1748|  3.53k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.53k|    {
  670|  3.53k|        return *unexpected_ptr();
  671|  3.53k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1804|  57.9k|    {
 1805|  57.9k|        return std::move(value());
 1806|  57.9k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  57.9k|    {
 1769|  57.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.9k|        return this->get_value();
 1771|  57.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.9k|    {
  653|  57.9k|        return *value_ptr();
  654|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|  61.5k|    {
  643|  61.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.9k, False: 3.53k]
  ------------------
  644|  57.9k|            destroy_value();
  645|  57.9k|        }
  646|  3.53k|        else {
  647|  3.53k|            destroy_unexpected();
  648|  3.53k|        }
  649|  61.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.9k|    {
  708|  57.9k|        scn::detail::destroy_at(value_ptr());
  709|  57.9k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  401|  57.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.9k|    else {
  408|  57.9k|        p->~T();
  409|  57.9k|    }
  410|  57.9k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.53k|    {
  712|  3.53k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.53k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.46M|    {
 3000|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.46M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.46M|    {
 2981|  1.46M|        return t.data();
 2982|  1.46M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   740k|        : base(std::in_place, std::forward<U>(val)),
 1570|   740k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   740k|    {
 1572|   740k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   740k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   740k|    {
  442|   740k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   284k|    {
 1795|   284k|        return value();
 1796|   284k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   283k|    {
 1795|   283k|        return value();
 1796|   283k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   313k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   313k|    static_cast<    \
  |  |  935|   313k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   313k|    {
 3912|   313k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   611k|    {
 4559|   611k|        return x.is_at_end();
 4560|   611k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  35.1M|    {
 4603|  35.1M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 35.1M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  35.1M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 35.1M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  35.1M|        return !read_at_position();
 4610|  35.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  70.3G|    {
 4583|  70.3G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  70.3G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.3G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  70.3G|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 70.3G]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  70.3G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  70.3G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 70.3G, False: 34.7M]
  |  |  ------------------
  ------------------
 4590|  70.3G|            return true;
 4591|  70.3G|        }
 4592|       |
 4593|  69.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 34.7M, False: 34.5M]
  ------------------
 4594|  34.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 106k, False: 34.5M]
  ------------------
 4595|   106k|                return false;
 4596|   106k|            }
 4597|  34.7M|        }
 4598|  34.5M|        return true;
 4599|  34.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  70.4G|    {
 4357|  70.4G|        return m_putback_buffer.size() + m_current_view.size();
 4358|  70.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  35.2M|    {
 4518|  35.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  35.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  35.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 35.2M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  35.2M|        auto res = read_at_position();
 4527|  35.2M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  35.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  35.2M|        return parent()->get_character_at(m_position);
 4529|  35.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  35.2M|    {
 4388|  35.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  35.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 642k, False: 34.5M]
  |  |  ------------------
  ------------------
 4389|  35.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   642k|            return m_putback_buffer[pos];
 4391|   642k|        }
 4392|  34.5M|        const auto start = pos - m_putback_buffer.size();
 4393|  34.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  34.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  34.5M|        return m_current_view[start];
 4395|  34.5M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   258k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   258k|    else {
 4075|       |        // utf-32
 4076|   258k|        static_assert(sizeof(U) == 4);
 4077|   258k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   258k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   258k|        return 1;
 4079|   258k|    }
 4080|   258k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   370k|        : base(std::in_place, std::forward<U>(val)),
 1570|   370k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   370k|    {
 1572|   370k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   370k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   370k|    {
  442|   370k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   391k|    {
 1316|   391k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  21.0k|        : base(unexpect, std::move(e.error())),
 1616|  21.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.0k|    {
 1618|  21.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  21.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  21.0k|          m_has_value(false)
  451|  21.0k|    {
  452|  21.0k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   160k|    {
 1740|   160k|        return has_value();
 1741|   160k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  2.22k|    {
 1795|  2.22k|        return value();
 1796|  2.22k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  70.2G|    {
 4553|  70.2G|        return !(lhs == rhs);
 4554|  70.2G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  70.2G|    {
 4548|  70.2G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 70.2G, False: 0]
  |  Branch (4548:46): [True: 34.4M, False: 70.2G]
  ------------------
 4549|  70.2G|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  70.2G|    {
 4504|  70.2G|        ++m_position;
 4505|  70.2G|        (void)read_at_position();
 4506|  70.2G|        return *this;
 4507|  70.2G|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   258k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   258k|    else {
 4281|   258k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   258k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   258k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   258k|        auto cp = static_cast<char32_t>(input.front());
 4283|   258k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 106k, False: 152k]
  |  |  ------------------
  ------------------
 4284|   106k|            return invalid_code_point;
 4285|   106k|        }
 4286|   152k|        return cp;
 4287|   258k|    }
 4288|   258k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.50k|        : base(unexpect, std::move(e.error())),
 1616|  1.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.50k|    {
 1618|  1.50k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.50k|          m_has_value(false)
  451|  1.50k|    {
  452|  1.50k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   104k|    {
 1316|   104k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   103k|        : base(std::in_place, std::forward<U>(val)),
 1570|   103k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   103k|    {
 1572|   103k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   103k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   103k|    {
  442|   103k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   104k|    {
 1740|   104k|        return has_value();
 1741|   104k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   209k|    {
  490|   209k|        return m_has_value;
  491|   209k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.50k|    {
 1746|  1.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.50k|        return this->get_unexpected().error();
 1748|  1.50k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.50k|    {
  473|  1.50k|        return m_unexpected;
  474|  1.50k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   103k|    {
 1805|   103k|        return std::move(value());
 1806|   103k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   103k|    {
 1769|   103k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   103k|        return this->get_value();
 1771|   103k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   103k|    {
  456|   103k|        return m_value;
  457|   103k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  35.8M|    {
 3484|  35.8M|        return m_sentinel;
 3485|  35.8M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  19.1k|        : base(unexpect, std::move(e.error())),
 1616|  19.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.1k|    {
 1618|  19.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  38.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.2k|          m_has_value(false)
  451|  38.2k|    {
  452|  38.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   507k|    {
 1316|   507k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.58k|    {
 1572|  2.58k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.58k|    {
  442|  2.58k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   380k|        : base(unexpect, std::move(e.error())),
 1616|   380k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   380k|    {
 1618|   380k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   380k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   380k|          m_has_value(false)
  451|   380k|    {
  452|   380k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|   397k|    {
 1740|   397k|        return has_value();
 1741|   397k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   845k|    {
  490|   845k|        return m_has_value;
  491|   845k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   144k|    {
 1746|   144k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   144k|        return this->get_unexpected().error();
 1748|   144k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   250k|    {
  473|   250k|        return m_unexpected;
  474|   250k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  2.58k|    {
 1795|  2.58k|        return value();
 1796|  2.58k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  87.9k|    {
 1769|  87.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  87.9k|        return this->get_value();
 1771|  87.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  87.9k|    {
  456|  87.9k|        return m_value;
  457|  87.9k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   127k|    {
 1740|   127k|        return has_value();
 1741|   127k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   254k|    {
  490|   254k|        return m_has_value;
  491|   254k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   101k|    {
 1979|   101k|        return detail::transform_error_impl(std::move(*this),
 1980|   101k|                                            std::forward<F>(f));
 1981|   101k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   101k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   101k|    else {
 1472|   101k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   101k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   101k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 82.5k, False: 19.1k]
  |  |  ------------------
  ------------------
 1474|   101k|                   ? result(*std::forward<Exp>(exp))
 1475|   101k|                   : result(unexpect,
 1476|  19.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.1k|                                           std::forward<Exp>(exp).error()));
 1478|   101k|    }
 1479|   101k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  85.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  85.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  85.3k|    {
 1572|  85.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  85.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  85.3k|    {
  442|  85.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  19.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  19.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  19.1k|    {
 1628|  19.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  85.3k|    {
 1805|  85.3k|        return std::move(value());
 1806|  85.3k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   127k|    {
 1979|   127k|        return detail::transform_error_impl(std::move(*this),
 1980|   127k|                                            std::forward<F>(f));
 1981|   127k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   127k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   127k|    else {
 1472|   127k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   127k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   127k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 127k, False: 0]
  |  |  ------------------
  ------------------
 1474|   127k|                   ? result(*std::forward<Exp>(exp))
 1475|   127k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   127k|    }
 1479|   127k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   254k|    {
  490|   254k|        return m_has_value;
  491|   254k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   127k|    {
 1740|   127k|        return has_value();
 1741|   127k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   254k|    {
  490|   254k|        return m_has_value;
  491|   254k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   109k|    {
 1979|   109k|        return detail::transform_error_impl(std::move(*this),
 1980|   109k|                                            std::forward<F>(f));
 1981|   109k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   109k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   109k|    else {
 1472|   109k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   109k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.86k, False: 106k]
  |  |  ------------------
  ------------------
 1474|   109k|                   ? result(*std::forward<Exp>(exp))
 1475|   109k|                   : result(unexpect,
 1476|   106k|                            trivial_invoke(std::forward<F>(f),
 1477|   106k|                                           std::forward<Exp>(exp).error()));
 1478|   109k|    }
 1479|   109k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|   106k|    {
 1756|   106k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   106k|        return std::move(this->get_unexpected().error());
 1758|   106k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  16.2k|        : base(unexpect, std::move(e.error())),
 1616|  16.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.2k|    {
 1618|  16.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|  16.2k|        : m_has_value(false)
  637|  16.2k|    {
  638|  16.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|  16.2k|    {
  701|  16.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.2k|                                  std::forward<Args>(args)...);
  703|  16.2k|        m_has_value = false;
  704|  16.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  48.7k|    {
  730|  48.7k|        return reinterpret_cast<unexpected<E>*>(
  731|  48.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  48.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  48.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.8k|    {
 1316|  16.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    584|        : base(std::in_place, std::forward<U>(val)),
 1570|    584|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    584|    {
 1572|    584|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  626|    584|        : m_has_value(true)
  627|    584|    {
  628|    584|        construct(std::forward<Args>(args)...);
  629|    584|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  693|    584|    {
  694|    584|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|    584|        m_has_value = true;
  696|    584|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  395|    584|{
  396|    584|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|    584|        T(std::forward<Args>(args)...);
  398|    584|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  1.75k|    {
  718|  1.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  1.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  1.75k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  16.8k|    {
 1740|  16.8k|        return has_value();
 1741|  16.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  50.4k|    {
  687|  50.4k|        return m_has_value;
  688|  50.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  16.2k|    {
 1746|  16.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.2k|        return this->get_unexpected().error();
 1748|  16.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  16.2k|    {
  670|  16.2k|        return *unexpected_ptr();
  671|  16.2k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1804|    584|    {
 1805|    584|        return std::move(value());
 1806|    584|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|    584|    {
 1769|    584|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    584|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    584|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    584|        return this->get_value();
 1771|    584|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|    584|    {
  653|    584|        return *value_ptr();
  654|    584|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  16.8k|    {
  643|  16.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 584, False: 16.2k]
  ------------------
  644|    584|            destroy_value();
  645|    584|        }
  646|  16.2k|        else {
  647|  16.2k|            destroy_unexpected();
  648|  16.2k|        }
  649|  16.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|    584|    {
  708|    584|        scn::detail::destroy_at(value_ptr());
  709|    584|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  401|    584|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|    584|    else {
  408|    584|        p->~T();
  409|    584|    }
  410|    584|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  16.2k|    {
  712|  16.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  16.2k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   468k|    {
 1740|   468k|        return has_value();
 1741|   468k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   936k|    {
  490|   936k|        return m_has_value;
  491|   936k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   332k|    {
 1746|   332k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   332k|        return this->get_unexpected().error();
 1748|   332k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   332k|    {
  473|   332k|        return m_unexpected;
  474|   332k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   133k|    {
 1805|   133k|        return std::move(value());
 1806|   133k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   135k|    {
 1769|   135k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   135k|        return this->get_value();
 1771|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   135k|    {
  456|   135k|        return m_value;
  457|   135k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|  7.01k|    {
 3480|  7.01k|        return m_iterator;
 3481|  7.01k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|  7.01k|    {
 3484|  7.01k|        return m_sentinel;
 3485|  7.01k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  2.86k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.86k|    static_cast<    \
  |  |  935|  2.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.86k|    static_cast<    \
  |  |  935|  2.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.86k|    {
 3466|  2.86k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  34.5M|    {
 4570|  34.5M|        return !x.is_at_end();
 4571|  34.5M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  21.0k|        : base(unexpect, std::move(e.error())),
 1616|  21.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.0k|    {
 1618|  21.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  21.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  21.0k|          m_has_value(false)
  451|  21.0k|    {
  452|  21.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   391k|    {
 1316|   391k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   370k|        : base(std::in_place, std::forward<U>(val)),
 1570|   370k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   370k|    {
 1572|   370k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   370k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   370k|    {
  442|   370k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   160k|    {
 1740|   160k|        return has_value();
 1741|   160k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   624k|    {
  490|   624k|        return m_has_value;
  491|   624k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  2.22k|    {
 1795|  2.22k|        return value();
 1796|  2.22k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   211k|    {
 1769|   211k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   211k|        return this->get_value();
 1771|   211k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   211k|    {
  456|   211k|        return m_value;
  457|   211k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.50k|        : base(unexpect, std::move(e.error())),
 1616|  1.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.50k|    {
 1618|  1.50k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.50k|          m_has_value(false)
  451|  1.50k|    {
  452|  1.50k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   104k|    {
 1316|   104k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   103k|        : base(std::in_place, std::forward<U>(val)),
 1570|   103k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   103k|    {
 1572|   103k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   103k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   103k|    {
  442|   103k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   128k|    {
 1979|   128k|        return detail::transform_error_impl(std::move(*this),
 1980|   128k|                                            std::forward<F>(f));
 1981|   128k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   128k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   128k|    else {
 1472|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 127k, False: 1.86k]
  |  |  ------------------
  ------------------
 1474|   128k|                   ? result(*std::forward<Exp>(exp))
 1475|   128k|                   : result(unexpect,
 1476|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.86k|                                           std::forward<Exp>(exp).error()));
 1478|   128k|    }
 1479|   128k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   209k|    {
 1805|   209k|        return std::move(value());
 1806|   209k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  20.9k|    {
 1756|  20.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  20.9k|        return std::move(this->get_unexpected().error());
 1758|  20.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  21.0k|    {
  473|  21.0k|        return m_unexpected;
  474|  21.0k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.86k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.86k|    {
 1628|  1.86k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   104k|    {
 1740|   104k|        return has_value();
 1741|   104k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|   209k|    {
  490|   209k|        return m_has_value;
  491|   209k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.50k|    {
 1746|  1.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.50k|        return this->get_unexpected().error();
 1748|  1.50k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.50k|    {
  473|  1.50k|        return m_unexpected;
  474|  1.50k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   103k|    {
 1805|   103k|        return std::move(value());
 1806|   103k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   103k|    {
 1769|   103k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   103k|        return this->get_value();
 1771|   103k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   103k|    {
  456|   103k|        return m_value;
  457|   103k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  19.1k|        : base(unexpect, std::move(e.error())),
 1616|  19.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.1k|    {
 1618|  19.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  38.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.2k|          m_has_value(false)
  451|  38.2k|    {
  452|  38.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   397k|    {
 1316|   397k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.58k|    {
 1572|  2.58k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.58k|    {
  442|  2.58k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   274k|        : base(unexpect, std::move(e.error())),
 1616|   274k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   274k|    {
 1618|   274k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   274k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   274k|          m_has_value(false)
  451|   274k|    {
  452|   274k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|   397k|    {
 1740|   397k|        return has_value();
 1741|   397k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   627k|    {
  490|   627k|        return m_has_value;
  491|   627k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|   144k|    {
 1746|   144k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   144k|        return this->get_unexpected().error();
 1748|   144k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   144k|    {
  473|   144k|        return m_unexpected;
  474|   144k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  2.58k|    {
 1795|  2.58k|        return value();
 1796|  2.58k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  85.0k|    {
 1769|  85.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  85.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  85.0k|        return this->get_value();
 1771|  85.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  85.0k|    {
  456|  85.0k|        return m_value;
  457|  85.0k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   127k|    {
 1740|   127k|        return has_value();
 1741|   127k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   254k|    {
  490|   254k|        return m_has_value;
  491|   254k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   101k|    {
 1979|   101k|        return detail::transform_error_impl(std::move(*this),
 1980|   101k|                                            std::forward<F>(f));
 1981|   101k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   101k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   101k|    else {
 1472|   101k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   101k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   101k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 82.5k, False: 19.1k]
  |  |  ------------------
  ------------------
 1474|   101k|                   ? result(*std::forward<Exp>(exp))
 1475|   101k|                   : result(unexpect,
 1476|  19.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.1k|                                           std::forward<Exp>(exp).error()));
 1478|   101k|    }
 1479|   101k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  82.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  82.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  82.5k|    {
 1572|  82.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  82.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  82.5k|    {
  442|  82.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  19.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  19.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  19.1k|    {
 1628|  19.1k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  82.5k|    {
 1805|  82.5k|        return std::move(value());
 1806|  82.5k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   127k|    {
 1979|   127k|        return detail::transform_error_impl(std::move(*this),
 1980|   127k|                                            std::forward<F>(f));
 1981|   127k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   127k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   127k|    else {
 1472|   127k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   127k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   127k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 127k, False: 0]
  |  |  ------------------
  ------------------
 1474|   127k|                   ? result(*std::forward<Exp>(exp))
 1475|   127k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   127k|    }
 1479|   127k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|   254k|    {
  490|   254k|        return m_has_value;
  491|   254k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   127k|        : base(std::in_place, std::forward<U>(val)),
 1570|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   127k|    {
 1572|   127k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   127k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   127k|    {
  442|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|   127k|    {
 1740|   127k|        return has_value();
 1741|   127k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|   254k|    {
  490|   254k|        return m_has_value;
  491|   254k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   127k|    {
 1805|   127k|        return std::move(value());
 1806|   127k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   127k|    {
 1769|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   127k|        return this->get_value();
 1771|   127k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|   127k|    {
  456|   127k|        return m_value;
  457|   127k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  16.2k|        : base(unexpect, std::move(e.error())),
 1616|  16.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.2k|    {
 1618|  16.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|  16.2k|        : m_has_value(false)
  637|  16.2k|    {
  638|  16.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|  16.2k|    {
  701|  16.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.2k|                                  std::forward<Args>(args)...);
  703|  16.2k|        m_has_value = false;
  704|  16.2k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  48.7k|    {
  730|  48.7k|        return reinterpret_cast<unexpected<E>*>(
  731|  48.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  48.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  48.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  16.8k|    {
 1316|  16.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1569|    584|        : base(std::in_place, std::forward<U>(val)),
 1570|    584|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    584|    {
 1572|    584|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|    584|        : m_has_value(true)
  627|    584|    {
  628|    584|        construct(std::forward<Args>(args)...);
  629|    584|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|    584|    {
  694|    584|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|    584|        m_has_value = true;
  696|    584|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|    584|{
  396|    584|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|    584|        T(std::forward<Args>(args)...);
  398|    584|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  1.75k|    {
  718|  1.75k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  1.75k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  1.75k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  16.8k|    {
 1740|  16.8k|        return has_value();
 1741|  16.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  50.4k|    {
  687|  50.4k|        return m_has_value;
  688|  50.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  16.2k|    {
 1746|  16.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.2k|        return this->get_unexpected().error();
 1748|  16.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  16.2k|    {
  670|  16.2k|        return *unexpected_ptr();
  671|  16.2k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1804|    584|    {
 1805|    584|        return std::move(value());
 1806|    584|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|    584|    {
 1769|    584|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    584|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    584|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    584|        return this->get_value();
 1771|    584|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|    584|    {
  653|    584|        return *value_ptr();
  654|    584|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  16.8k|    {
  643|  16.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 584, False: 16.2k]
  ------------------
  644|    584|            destroy_value();
  645|    584|        }
  646|  16.2k|        else {
  647|  16.2k|            destroy_unexpected();
  648|  16.2k|        }
  649|  16.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|    584|    {
  708|    584|        scn::detail::destroy_at(value_ptr());
  709|    584|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|    584|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|    584|    else {
  408|    584|        p->~T();
  409|    584|    }
  410|    584|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  16.2k|    {
  712|  16.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  16.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   415k|    {
 3000|   415k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   415k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   415k|    {
 2981|   415k|        return t.data();
 2982|   415k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  2.53k|    {
 1795|  2.53k|        return value();
 1796|  2.53k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  2.53k|    {
 1795|  2.53k|        return value();
 1796|  2.53k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   109k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   109k|    {
 3912|   109k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  24.7M|    {
 4357|  24.7M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  24.7M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   846k|    {
 6177|   846k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 846k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   846k|        return static_cast<std::size_t>(m_desc &
 6182|   846k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   846k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  1.69M|    {
 6203|  1.69M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  1.69M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   846k|    {
 6145|   846k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 846k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   846k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 846k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   846k|        const auto t = type(id);
 6157|   846k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 846k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   846k|        basic_scan_arg<Context> arg;
 6162|   846k|        arg.m_type = t;
 6163|   846k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 846k, False: 0]
  ------------------
 6164|   846k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   846k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   846k|        return arg;
 6170|   846k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   846k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   846k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   846k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   846k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   846k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   846k|    {
 6207|   846k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   846k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  1.57M|    {
 5961|  1.57M|        return m_type != detail::arg_type::none_type;
 5962|  1.57M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  96.5k|{
 9300|  96.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  96.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  96.5k|{
 9201|  96.5k|#define SCN_VISIT(Type)                                                \
 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  96.5k|    }                                                                  \
 9205|  96.5k|    else {                                                             \
 9206|  96.5k|        return vis(monostate_val);                                     \
 9207|  96.5k|    }
 9208|       |
 9209|  96.5k|    monostate monostate_val{};
 9210|       |
 9211|  96.5k|    switch (get_arg_type(arg)) {
 9212|  16.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 16.0k, False: 80.4k]
  ------------------
 9213|  16.0k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  16.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.0k|    }                                                                  \
  |  | 9205|  16.0k|    else {                                                             \
  |  | 9206|  16.0k|        return vis(monostate_val);                                     \
  |  | 9207|  16.0k|    }
  ------------------
 9214|  16.0k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 96.5k]
  ------------------
 9215|  16.0k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  16.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.0k|    }                                                                  \
  |  | 9205|  16.0k|    else {                                                             \
  |  | 9206|  16.0k|        return vis(monostate_val);                                     \
  |  | 9207|  16.0k|    }
  ------------------
 9216|  34.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 18.5k, False: 78.0k]
  ------------------
 9217|  34.6k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.6k|    }                                                                  \
  |  | 9205|  34.6k|    else {                                                             \
  |  | 9206|  34.6k|        return vis(monostate_val);                                     \
  |  | 9207|  34.6k|    }
  ------------------
 9218|  34.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 96.5k]
  ------------------
 9219|  34.6k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.6k|    }                                                                  \
  |  | 9205|  34.6k|    else {                                                             \
  |  | 9206|  34.6k|        return vis(monostate_val);                                     \
  |  | 9207|  34.6k|    }
  ------------------
 9220|  53.4k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.8k, False: 77.6k]
  ------------------
 9221|  53.4k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  53.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.4k|    }                                                                  \
  |  | 9205|  53.4k|    else {                                                             \
  |  | 9206|  53.4k|        return vis(monostate_val);                                     \
  |  | 9207|  53.4k|    }
  ------------------
 9222|  66.8k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 13.4k, False: 83.1k]
  ------------------
 9223|  66.8k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  66.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  66.8k|    }                                                                  \
  |  | 9205|  66.8k|    else {                                                             \
  |  | 9206|  66.8k|        return vis(monostate_val);                                     \
  |  | 9207|  66.8k|    }
  ------------------
 9224|  66.8k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 96.5k]
  ------------------
 9225|  66.8k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  66.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  66.8k|    }                                                                  \
  |  | 9205|  66.8k|    else {                                                             \
  |  | 9206|  66.8k|        return vis(monostate_val);                                     \
  |  | 9207|  66.8k|    }
  ------------------
 9226|  81.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 14.7k, False: 81.8k]
  ------------------
 9227|  81.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  81.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  81.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  81.6k|    }                                                                  \
  |  | 9205|  81.6k|    else {                                                             \
  |  | 9206|  81.6k|        return vis(monostate_val);                                     \
  |  | 9207|  81.6k|    }
  ------------------
 9228|  81.6k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 96.5k]
  ------------------
 9229|  81.6k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  81.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  81.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  81.6k|    }                                                                  \
  |  | 9205|  81.6k|    else {                                                             \
  |  | 9206|  81.6k|        return vis(monostate_val);                                     \
  |  | 9207|  81.6k|    }
  ------------------
 9230|  96.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 14.9k, False: 81.6k]
  ------------------
 9231|  96.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9232|  96.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 96.5k]
  ------------------
 9233|  96.5k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9234|  96.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 96.5k]
  ------------------
 9235|  96.5k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9236|  96.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 96.5k]
  ------------------
 9237|  96.5k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9238|  96.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 96.5k]
  ------------------
 9239|  96.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9240|  96.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 96.5k]
  ------------------
 9241|  96.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9242|  96.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 96.5k]
  ------------------
 9243|  96.5k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9244|  96.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 96.5k]
  ------------------
 9245|  96.5k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9246|  96.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 96.5k]
  ------------------
 9247|  96.5k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9248|  96.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 96.5k]
  ------------------
 9249|  96.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9250|  96.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 96.5k]
  ------------------
 9251|  96.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9252|  96.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 96.5k]
  ------------------
 9253|  96.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9254|  96.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 96.5k]
  ------------------
 9255|  96.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9256|  96.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 96.5k]
  ------------------
 9257|  96.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9258|  96.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 96.5k]
  ------------------
 9259|  96.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  96.5k|    }                                                                  \
  |  | 9205|  96.5k|    else {                                                             \
  |  | 9206|  96.5k|        return vis(monostate_val);                                     \
  |  | 9207|  96.5k|    }
  ------------------
 9260|       |
 9261|  96.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 96.5k]
  ------------------
 9262|  96.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  96.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  96.5k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 96.5k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 96.5k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  96.5k|            SCN_CLANG_POP
 9279|  96.5k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  2.29M|{
 6006|  2.29M|    return arg.m_type;
 6007|  2.29M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   859k|{
 6018|   859k|    return arg.m_value;
 6019|   859k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   718k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   718k|    {
 6258|   718k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   359k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   359k|    static_cast<    \
  |  |  935|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   359k|    {
 8934|   359k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   454k|{
 4691|   454k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 454k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   454k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   454k|                            ranges::default_sentinel};
 4697|   454k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   454k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   454k|    {
 4455|   454k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   454k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   454k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  95.1k|{
 9300|  95.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  95.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  95.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  95.1k|{
 9201|  95.1k|#define SCN_VISIT(Type)                                                \
 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  95.1k|    }                                                                  \
 9205|  95.1k|    else {                                                             \
 9206|  95.1k|        return vis(monostate_val);                                     \
 9207|  95.1k|    }
 9208|       |
 9209|  95.1k|    monostate monostate_val{};
 9210|       |
 9211|  95.1k|    switch (get_arg_type(arg)) {
 9212|  16.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 16.0k, False: 79.1k]
  ------------------
 9213|  16.0k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  16.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.0k|    }                                                                  \
  |  | 9205|  16.0k|    else {                                                             \
  |  | 9206|  16.0k|        return vis(monostate_val);                                     \
  |  | 9207|  16.0k|    }
  ------------------
 9214|  16.0k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 95.1k]
  ------------------
 9215|  16.0k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  16.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.0k|    }                                                                  \
  |  | 9205|  16.0k|    else {                                                             \
  |  | 9206|  16.0k|        return vis(monostate_val);                                     \
  |  | 9207|  16.0k|    }
  ------------------
 9216|  33.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 17.9k, False: 77.2k]
  ------------------
 9217|  33.9k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  33.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  33.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  33.9k|    }                                                                  \
  |  | 9205|  33.9k|    else {                                                             \
  |  | 9206|  33.9k|        return vis(monostate_val);                                     \
  |  | 9207|  33.9k|    }
  ------------------
 9218|  33.9k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 95.1k]
  ------------------
 9219|  33.9k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  33.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  33.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  33.9k|    }                                                                  \
  |  | 9205|  33.9k|    else {                                                             \
  |  | 9206|  33.9k|        return vis(monostate_val);                                     \
  |  | 9207|  33.9k|    }
  ------------------
 9220|  52.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.2k, False: 76.8k]
  ------------------
 9221|  52.2k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  52.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  52.2k|    }                                                                  \
  |  | 9205|  52.2k|    else {                                                             \
  |  | 9206|  52.2k|        return vis(monostate_val);                                     \
  |  | 9207|  52.2k|    }
  ------------------
 9222|  65.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 13.3k, False: 81.7k]
  ------------------
 9223|  65.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  65.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  65.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  65.6k|    }                                                                  \
  |  | 9205|  65.6k|    else {                                                             \
  |  | 9206|  65.6k|        return vis(monostate_val);                                     \
  |  | 9207|  65.6k|    }
  ------------------
 9224|  65.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 95.1k]
  ------------------
 9225|  65.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  65.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  65.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  65.6k|    }                                                                  \
  |  | 9205|  65.6k|    else {                                                             \
  |  | 9206|  65.6k|        return vis(monostate_val);                                     \
  |  | 9207|  65.6k|    }
  ------------------
 9226|  80.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 14.6k, False: 80.4k]
  ------------------
 9227|  80.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  80.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  80.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  80.3k|    }                                                                  \
  |  | 9205|  80.3k|    else {                                                             \
  |  | 9206|  80.3k|        return vis(monostate_val);                                     \
  |  | 9207|  80.3k|    }
  ------------------
 9228|  80.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 95.1k]
  ------------------
 9229|  80.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  80.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  80.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  80.3k|    }                                                                  \
  |  | 9205|  80.3k|    else {                                                             \
  |  | 9206|  80.3k|        return vis(monostate_val);                                     \
  |  | 9207|  80.3k|    }
  ------------------
 9230|  95.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 14.8k, False: 80.3k]
  ------------------
 9231|  95.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9232|  95.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 95.1k]
  ------------------
 9233|  95.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9234|  95.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 95.1k]
  ------------------
 9235|  95.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9236|  95.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 95.1k]
  ------------------
 9237|  95.1k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9238|  95.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 95.1k]
  ------------------
 9239|  95.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9240|  95.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 95.1k]
  ------------------
 9241|  95.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9242|  95.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 95.1k]
  ------------------
 9243|  95.1k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9244|  95.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 95.1k]
  ------------------
 9245|  95.1k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9246|  95.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 95.1k]
  ------------------
 9247|  95.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9248|  95.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 95.1k]
  ------------------
 9249|  95.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9250|  95.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 95.1k]
  ------------------
 9251|  95.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9252|  95.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 95.1k]
  ------------------
 9253|  95.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9254|  95.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 95.1k]
  ------------------
 9255|  95.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9256|  95.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 95.1k]
  ------------------
 9257|  95.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9258|  95.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 95.1k]
  ------------------
 9259|  95.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  95.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.1k|    }                                                                  \
  |  | 9205|  95.1k|    else {                                                             \
  |  | 9206|  95.1k|        return vis(monostate_val);                                     \
  |  | 9207|  95.1k|    }
  ------------------
 9260|       |
 9261|  95.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 95.1k]
  ------------------
 9262|  95.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  95.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  95.1k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 95.1k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 95.1k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  95.1k|            SCN_CLANG_POP
 9279|  95.1k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   358k|    {
 3075|   358k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   358k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   358k|    {
 3041|   358k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   358k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   358k|{
 7793|   358k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   358k|    handler.check_args_exhausted();
 7795|   358k|    return handler.get_error();
 7796|   358k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   358k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   358k|    auto begin = format.data();
 7761|   358k|    auto it = begin;
 7762|   358k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   642k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 358k, False: 283k]
  ------------------
 7765|   358k|        const auto ch = *it++;
 7766|   358k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 358k, False: 0]
  ------------------
 7767|   358k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   358k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   358k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 75.3k, False: 283k]
  ------------------
 7771|  75.3k|                return;
 7772|  75.3k|            }
 7773|   358k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   358k|    }
 7784|       |
 7785|   283k|    handler.on_literal_text(begin, end);
 7786|   283k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|   358k|{
 7690|   358k|    struct id_adapter {
 7691|   358k|        constexpr void operator()()
 7692|   358k|        {
 7693|   358k|            arg_id = handler.on_arg_id();
 7694|   358k|        }
 7695|   358k|        constexpr void operator()(std::size_t id)
 7696|   358k|        {
 7697|   358k|            arg_id = handler.on_arg_id(id);
 7698|   358k|        }
 7699|       |
 7700|   358k|        constexpr void on_error(const char* msg)
 7701|   358k|        {
 7702|   358k|            SCN_UNLIKELY_ATTR
 7703|   358k|            handler.on_error(msg);
 7704|   358k|        }
 7705|       |
 7706|   358k|        Handler& handler;
 7707|   358k|        std::size_t arg_id;
 7708|   358k|    };
 7709|       |
 7710|   358k|    ++begin;
 7711|   358k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   358k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 358k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   358k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 358k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   358k|    else {
 7723|   358k|        auto adapter = id_adapter{handler, 0};
 7724|   358k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   358k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   358k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 358k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   358k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 358k, False: 0]
  ------------------
 7735|   358k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   358k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   358k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 333k]
  |  |  |  Branch (865:45): [True: 0, False: 358k]
  |  |  |  Branch (865:45): [True: 25.1k, False: 333k]
  |  |  ------------------
  ------------------
 7741|  25.1k|                handler.on_error("Unknown format specifier");
 7742|  25.1k|                return begin;
 7743|  25.1k|            }
 7744|   358k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   358k|    }
 7751|   333k|    return begin + 1;
 7752|   358k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   718k|    {
 8832|   718k|        return m_args.get(id);
 8833|   718k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   718k|    {
 6286|   718k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 718k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   718k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   718k|        do_check_arg_id(id);
 6294|   718k|        return id;
 6295|   718k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   718k|{
 6806|   718k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   718k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   718k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   358k|{
 7191|   358k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   358k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 358k, False: 0]
  |  Branch (7192:26): [True: 0, False: 358k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   358k|    handler();
 7197|   358k|    return begin;
 7198|   358k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   358k|        {
 7693|   358k|            arg_id = handler.on_arg_id();
 7694|   358k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   668k|    {
 6281|   668k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   668k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  1.38M|    {
 6270|  1.38M|        return m_format.data();
 6271|  1.38M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   358k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   358k|    {
 7871|   358k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   358k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|   358k|{
 7606|   358k|    auto do_presentation = [&]() -> const CharT* {
 7607|   358k|        if (*begin == CharT{'['}) {
 7608|   358k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   358k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   358k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   358k|                return begin;
 7614|   358k|            }
 7615|   358k|            handler.on_character_set_string(set);
 7616|   358k|            return begin;
 7617|   358k|        }
 7618|   358k|        if (*begin == CharT{'/'}) {
 7619|   358k|            return parse_presentation_regex(begin, end, handler);
 7620|   358k|        }
 7621|   358k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   358k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   358k|            handler.on_error("Invalid type specifier in format string");
 7624|   358k|            return begin;
 7625|   358k|        }
 7626|   358k|        handler.on_type(type);
 7627|   358k|        return begin;
 7628|   358k|    };
 7629|       |
 7630|   358k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 358k, False: 0]
  |  Branch (7630:28): [True: 342k, False: 16.7k]
  ------------------
 7631|   358k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 333k, False: 8.37k]
  |  Branch (7631:36): [True: 268k, False: 65.1k]
  ------------------
 7632|   268k|        return do_presentation();
 7633|   268k|    }
 7634|       |
 7635|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  90.2k|    begin = parse_align(begin, end, handler);
 7641|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  90.2k|    begin = parse_width(begin, end, handler);
 7647|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  90.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 90.2k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  90.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 65.1k, False: 25.1k]
  ------------------
 7666|  65.1k|        handler.on_localized();
 7667|  65.1k|        ++begin;
 7668|  65.1k|    }
 7669|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  90.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 90.2k, False: 0]
  |  Branch (7674:25): [True: 25.1k, False: 65.1k]
  ------------------
 7675|  25.1k|        do_presentation();
 7676|  25.1k|    }
 7677|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  90.2k|    return begin;
 7683|  90.2k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|   684k|{
 7255|   684k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 537k, False: 147k]
  |  Branch (7255:33): [True: 537k, False: 0]
  ------------------
 7256|   684k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 130k, False: 16.7k]
  |  Branch (7256:33): [True: 130k, False: 0]
  ------------------
 7257|   684k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   293k|    auto do_presentation = [&]() -> const CharT* {
 7607|   293k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 293k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   293k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 293k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   293k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   293k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.7k, False: 277k]
  |  |  ------------------
  ------------------
 7623|  16.7k|            handler.on_error("Invalid type specifier in format string");
 7624|  16.7k|            return begin;
 7625|  16.7k|        }
 7626|   277k|        handler.on_type(type);
 7627|   277k|        return begin;
 7628|   293k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|   588k|{
 7203|   588k|    switch (type) {
 7204|  45.0k|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 45.0k, False: 542k]
  ------------------
 7205|  61.8k|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 16.7k, False: 571k]
  ------------------
 7206|  61.8k|            return presentation_type::int_binary;
 7207|   128k|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 128k, False: 459k]
  ------------------
 7208|   128k|            return presentation_type::int_decimal;
 7209|   146k|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 146k, False: 441k]
  ------------------
 7210|   146k|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 588k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|  80.7k|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 80.7k, False: 507k]
  ------------------
 7214|  80.7k|            return presentation_type::int_octal;
 7215|   136k|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 136k, False: 451k]
  ------------------
 7216|   136k|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 588k]
  ------------------
 7217|   136k|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 588k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 588k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 588k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 588k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 588k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 588k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 588k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 588k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 588k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 588k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 588k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 588k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 588k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 588k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 588k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 588k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  33.5k|        default:
  ------------------
  |  Branch (7247:9): [True: 33.5k, False: 554k]
  ------------------
 7248|  33.5k|            return presentation_type::none;
 7249|   588k|    }
 7250|   588k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  90.2k|{
 7280|  90.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  90.2k|    auto check_align = [](wchar_t ch) {
 7283|  90.2k|        switch (ch) {
 7284|  90.2k|            case L'<':
 7285|  90.2k|                return align_type::left;
 7286|  90.2k|            case L'>':
 7287|  90.2k|                return align_type::right;
 7288|  90.2k|            case L'^':
 7289|  90.2k|                return align_type::center;
 7290|  90.2k|            default:
 7291|  90.2k|                return align_type::none;
 7292|  90.2k|        }
 7293|  90.2k|    };
 7294|       |
 7295|  90.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  90.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  |  Branch (865:45): [True: 0, False: 90.2k]
  |  |  |  Branch (865:45): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7297|  90.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  90.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  90.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  90.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  90.2k|    const auto begin_before_fill = begin;
 7307|  90.2k|    begin += potential_fill_len;
 7308|       |
 7309|  90.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 90.2k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  90.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  90.2k|    const auto begin_after_fill = begin;
 7315|  90.2k|    ++begin;
 7316|       |
 7317|  90.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 90.2k, False: 0]
  ------------------
 7318|  90.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  90.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 90.2k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  90.2k|    }
 7326|       |
 7327|  90.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 90.2k, False: 0]
  ------------------
 7328|  90.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 90.2k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  90.2k|        return begin_before_fill;
 7333|  90.2k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  90.2k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|   180k|{
 7262|   180k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|   180k|    else {
 7267|   180k|        const auto lengths =
 7268|   180k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|   180k|            "\3\4";
 7270|   180k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|   180k|        return len;
 7272|   180k|    }
 7273|   180k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   180k|    auto check_align = [](wchar_t ch) {
 7283|   180k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 180k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 180k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 180k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   180k|            default:
  ------------------
  |  Branch (7290:13): [True: 180k, False: 0]
  ------------------
 7291|   180k|                return align_type::none;
 7292|   180k|        }
 7293|   180k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  90.2k|{
 7345|  90.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  90.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 73.5k, False: 16.7k]
  |  Branch (7347:33): [True: 0, False: 73.5k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  90.2k|    return begin;
 7358|  90.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|  65.1k|    {
 7876|  65.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  65.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 29.0k, False: 36.1k]
  ------------------
 7878|  65.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 29.0k]
  ------------------
 7879|  65.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  65.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  65.1k|        Handler::on_localized();
 7888|  65.1k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|   164k|    {
 7025|   164k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|   164k|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|   164k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   333k|{
 9300|   333k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   333k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   333k|{
 9201|   333k|#define SCN_VISIT(Type)                                                \
 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   333k|    }                                                                  \
 9205|   333k|    else {                                                             \
 9206|   333k|        return vis(monostate_val);                                     \
 9207|   333k|    }
 9208|       |
 9209|   333k|    monostate monostate_val{};
 9210|       |
 9211|   333k|    switch (get_arg_type(arg)) {
 9212|  53.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 53.8k, False: 280k]
  ------------------
 9213|  53.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  53.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.8k|    }                                                                  \
  |  | 9205|  53.8k|    else {                                                             \
  |  | 9206|  53.8k|        return vis(monostate_val);                                     \
  |  | 9207|  53.8k|    }
  ------------------
 9214|  53.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 333k]
  ------------------
 9215|  53.8k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  53.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.8k|    }                                                                  \
  |  | 9205|  53.8k|    else {                                                             \
  |  | 9206|  53.8k|        return vis(monostate_val);                                     \
  |  | 9207|  53.8k|    }
  ------------------
 9216|   117k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 63.8k, False: 270k]
  ------------------
 9217|   117k|            SCN_VISIT(int);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9218|   117k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 333k]
  ------------------
 9219|   117k|            SCN_VISIT(long);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9220|   182k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 64.9k, False: 268k]
  ------------------
 9221|   182k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|   182k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   182k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   182k|    }                                                                  \
  |  | 9205|   182k|    else {                                                             \
  |  | 9206|   182k|        return vis(monostate_val);                                     \
  |  | 9207|   182k|    }
  ------------------
 9222|   230k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 47.4k, False: 286k]
  ------------------
 9223|   230k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|   230k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   230k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   230k|    }                                                                  \
  |  | 9205|   230k|    else {                                                             \
  |  | 9206|   230k|        return vis(monostate_val);                                     \
  |  | 9207|   230k|    }
  ------------------
 9224|   230k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 333k]
  ------------------
 9225|   230k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|   230k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   230k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   230k|    }                                                                  \
  |  | 9205|   230k|    else {                                                             \
  |  | 9206|   230k|        return vis(monostate_val);                                     \
  |  | 9207|   230k|    }
  ------------------
 9226|   281k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 51.6k, False: 282k]
  ------------------
 9227|   281k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|   281k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   281k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   281k|    }                                                                  \
  |  | 9205|   281k|    else {                                                             \
  |  | 9206|   281k|        return vis(monostate_val);                                     \
  |  | 9207|   281k|    }
  ------------------
 9228|   281k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 333k]
  ------------------
 9229|   281k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|   281k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   281k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   281k|    }                                                                  \
  |  | 9205|   281k|    else {                                                             \
  |  | 9206|   281k|        return vis(monostate_val);                                     \
  |  | 9207|   281k|    }
  ------------------
 9230|   333k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 52.1k, False: 281k]
  ------------------
 9231|   333k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9232|   333k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 333k]
  ------------------
 9233|   333k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9234|   333k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 333k]
  ------------------
 9235|   333k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9236|   333k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 333k]
  ------------------
 9237|   333k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9238|   333k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 333k]
  ------------------
 9239|   333k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9240|   333k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 333k]
  ------------------
 9241|   333k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9242|   333k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 333k]
  ------------------
 9243|   333k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9244|   333k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 333k]
  ------------------
 9245|   333k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9246|   333k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 333k]
  ------------------
 9247|   333k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9248|   333k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 333k]
  ------------------
 9249|   333k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9250|   333k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 333k]
  ------------------
 9251|   333k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9252|   333k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 333k]
  ------------------
 9253|   333k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9254|   333k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 333k]
  ------------------
 9255|   333k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9256|   333k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 333k]
  ------------------
 9257|   333k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9258|   333k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 333k]
  ------------------
 9259|   333k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   333k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   333k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   333k|    }                                                                  \
  |  | 9205|   333k|    else {                                                             \
  |  | 9206|   333k|        return vis(monostate_val);                                     \
  |  | 9207|   333k|    }
  ------------------
 9260|       |
 9261|   333k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 333k]
  ------------------
 9262|   333k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   333k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   333k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 333k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 333k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   333k|            SCN_CLANG_POP
 9279|   333k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   359k|{
 7793|   359k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   359k|    handler.check_args_exhausted();
 7795|   359k|    return handler.get_error();
 7796|   359k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   359k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   359k|    auto begin = format.data();
 7761|   359k|    auto it = begin;
 7762|   359k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   643k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 359k, False: 284k]
  ------------------
 7765|   359k|        const auto ch = *it++;
 7766|   359k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 359k, False: 0]
  ------------------
 7767|   359k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   359k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   359k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 75.3k, False: 284k]
  ------------------
 7771|  75.3k|                return;
 7772|  75.3k|            }
 7773|   359k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   359k|    }
 7784|       |
 7785|   284k|    handler.on_literal_text(begin, end);
 7786|   284k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   284k|    {
 8971|   284k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   284k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|   359k|{
 7690|   359k|    struct id_adapter {
 7691|   359k|        constexpr void operator()()
 7692|   359k|        {
 7693|   359k|            arg_id = handler.on_arg_id();
 7694|   359k|        }
 7695|   359k|        constexpr void operator()(std::size_t id)
 7696|   359k|        {
 7697|   359k|            arg_id = handler.on_arg_id(id);
 7698|   359k|        }
 7699|       |
 7700|   359k|        constexpr void on_error(const char* msg)
 7701|   359k|        {
 7702|   359k|            SCN_UNLIKELY_ATTR
 7703|   359k|            handler.on_error(msg);
 7704|   359k|        }
 7705|       |
 7706|   359k|        Handler& handler;
 7707|   359k|        std::size_t arg_id;
 7708|   359k|    };
 7709|       |
 7710|   359k|    ++begin;
 7711|   359k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   359k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 359k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   359k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 359k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   359k|    else {
 7723|   359k|        auto adapter = id_adapter{handler, 0};
 7724|   359k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   359k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   359k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 359k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   359k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 359k, False: 0]
  ------------------
 7735|   359k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   359k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   359k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 334k]
  |  |  |  Branch (865:45): [True: 0, False: 359k]
  |  |  |  Branch (865:45): [True: 25.1k, False: 334k]
  |  |  ------------------
  ------------------
 7741|  25.1k|                handler.on_error("Unknown format specifier");
 7742|  25.1k|                return begin;
 7743|  25.1k|            }
 7744|   359k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   359k|    }
 7751|   334k|    return begin + 1;
 7752|   359k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   359k|{
 7191|   359k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   359k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 359k, False: 0]
  |  Branch (7192:26): [True: 0, False: 359k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   359k|    handler();
 7197|   359k|    return begin;
 7198|   359k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   359k|        {
 7693|   359k|            arg_id = handler.on_arg_id();
 7694|   359k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   359k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   359k|    {
 7871|   359k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   359k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|   359k|{
 7606|   359k|    auto do_presentation = [&]() -> const CharT* {
 7607|   359k|        if (*begin == CharT{'['}) {
 7608|   359k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   359k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   359k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   359k|                return begin;
 7614|   359k|            }
 7615|   359k|            handler.on_character_set_string(set);
 7616|   359k|            return begin;
 7617|   359k|        }
 7618|   359k|        if (*begin == CharT{'/'}) {
 7619|   359k|            return parse_presentation_regex(begin, end, handler);
 7620|   359k|        }
 7621|   359k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   359k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   359k|            handler.on_error("Invalid type specifier in format string");
 7624|   359k|            return begin;
 7625|   359k|        }
 7626|   359k|        handler.on_type(type);
 7627|   359k|        return begin;
 7628|   359k|    };
 7629|       |
 7630|   359k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 359k, False: 0]
  |  Branch (7630:28): [True: 342k, False: 16.7k]
  ------------------
 7631|   359k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 334k, False: 8.37k]
  |  Branch (7631:36): [True: 269k, False: 65.2k]
  ------------------
 7632|   269k|        return do_presentation();
 7633|   269k|    }
 7634|       |
 7635|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  90.3k|    begin = parse_align(begin, end, handler);
 7641|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  90.3k|    begin = parse_width(begin, end, handler);
 7647|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  90.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 90.3k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  90.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 65.2k, False: 25.1k]
  ------------------
 7666|  65.2k|        handler.on_localized();
 7667|  65.2k|        ++begin;
 7668|  65.2k|    }
 7669|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  90.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 90.3k, False: 0]
  |  Branch (7674:25): [True: 25.1k, False: 65.2k]
  ------------------
 7675|  25.1k|        do_presentation();
 7676|  25.1k|    }
 7677|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  90.3k|    return begin;
 7683|  90.3k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   294k|    auto do_presentation = [&]() -> const CharT* {
 7607|   294k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 294k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   294k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 294k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   294k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   294k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.7k, False: 277k]
  |  |  ------------------
  ------------------
 7623|  16.7k|            handler.on_error("Invalid type specifier in format string");
 7624|  16.7k|            return begin;
 7625|  16.7k|        }
 7626|   277k|        handler.on_type(type);
 7627|   277k|        return begin;
 7628|   294k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|  90.3k|{
 7280|  90.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  90.3k|    auto check_align = [](wchar_t ch) {
 7283|  90.3k|        switch (ch) {
 7284|  90.3k|            case L'<':
 7285|  90.3k|                return align_type::left;
 7286|  90.3k|            case L'>':
 7287|  90.3k|                return align_type::right;
 7288|  90.3k|            case L'^':
 7289|  90.3k|                return align_type::center;
 7290|  90.3k|            default:
 7291|  90.3k|                return align_type::none;
 7292|  90.3k|        }
 7293|  90.3k|    };
 7294|       |
 7295|  90.3k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  90.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  |  Branch (865:45): [True: 0, False: 90.3k]
  |  |  |  Branch (865:45): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7297|  90.3k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  90.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  90.3k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  90.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  90.3k|    const auto begin_before_fill = begin;
 7307|  90.3k|    begin += potential_fill_len;
 7308|       |
 7309|  90.3k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 90.3k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  90.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  90.3k|    const auto begin_after_fill = begin;
 7315|  90.3k|    ++begin;
 7316|       |
 7317|  90.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 90.3k, False: 0]
  ------------------
 7318|  90.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  90.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 90.3k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  90.3k|    }
 7326|       |
 7327|  90.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 90.3k, False: 0]
  ------------------
 7328|  90.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 90.3k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  90.3k|        return begin_before_fill;
 7333|  90.3k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  90.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   180k|    auto check_align = [](wchar_t ch) {
 7283|   180k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 180k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 180k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 180k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   180k|            default:
  ------------------
  |  Branch (7290:13): [True: 180k, False: 0]
  ------------------
 7291|   180k|                return align_type::none;
 7292|   180k|        }
 7293|   180k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|  90.3k|{
 7345|  90.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  90.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 73.6k, False: 16.7k]
  |  Branch (7347:33): [True: 0, False: 73.6k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  90.3k|    return begin;
 7358|  90.3k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|  65.2k|    {
 7876|  65.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  65.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 29.0k, False: 36.1k]
  ------------------
 7878|  65.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 29.0k]
  ------------------
 7879|  65.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  65.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  65.2k|        Handler::on_localized();
 7888|  65.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   334k|{
 9300|   334k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   334k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   334k|{
 9201|   334k|#define SCN_VISIT(Type)                                                \
 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   334k|    }                                                                  \
 9205|   334k|    else {                                                             \
 9206|   334k|        return vis(monostate_val);                                     \
 9207|   334k|    }
 9208|       |
 9209|   334k|    monostate monostate_val{};
 9210|       |
 9211|   334k|    switch (get_arg_type(arg)) {
 9212|  53.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 53.8k, False: 280k]
  ------------------
 9213|  53.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  53.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.8k|    }                                                                  \
  |  | 9205|  53.8k|    else {                                                             \
  |  | 9206|  53.8k|        return vis(monostate_val);                                     \
  |  | 9207|  53.8k|    }
  ------------------
 9214|  53.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 334k]
  ------------------
 9215|  53.8k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  53.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.8k|    }                                                                  \
  |  | 9205|  53.8k|    else {                                                             \
  |  | 9206|  53.8k|        return vis(monostate_val);                                     \
  |  | 9207|  53.8k|    }
  ------------------
 9216|   117k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 63.9k, False: 270k]
  ------------------
 9217|   117k|            SCN_VISIT(int);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9218|   117k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 334k]
  ------------------
 9219|   117k|            SCN_VISIT(long);
  ------------------
  |  | 9202|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   117k|    }                                                                  \
  |  | 9205|   117k|    else {                                                             \
  |  | 9206|   117k|        return vis(monostate_val);                                     \
  |  | 9207|   117k|    }
  ------------------
 9220|   182k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 65.0k, False: 269k]
  ------------------
 9221|   182k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|   182k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   182k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   182k|    }                                                                  \
  |  | 9205|   182k|    else {                                                             \
  |  | 9206|   182k|        return vis(monostate_val);                                     \
  |  | 9207|   182k|    }
  ------------------
 9222|   230k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 47.4k, False: 286k]
  ------------------
 9223|   230k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|   230k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   230k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   230k|    }                                                                  \
  |  | 9205|   230k|    else {                                                             \
  |  | 9206|   230k|        return vis(monostate_val);                                     \
  |  | 9207|   230k|    }
  ------------------
 9224|   230k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 334k]
  ------------------
 9225|   230k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|   230k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   230k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   230k|    }                                                                  \
  |  | 9205|   230k|    else {                                                             \
  |  | 9206|   230k|        return vis(monostate_val);                                     \
  |  | 9207|   230k|    }
  ------------------
 9226|   282k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 51.6k, False: 282k]
  ------------------
 9227|   282k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|   282k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   282k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   282k|    }                                                                  \
  |  | 9205|   282k|    else {                                                             \
  |  | 9206|   282k|        return vis(monostate_val);                                     \
  |  | 9207|   282k|    }
  ------------------
 9228|   282k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 334k]
  ------------------
 9229|   282k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|   282k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   282k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   282k|    }                                                                  \
  |  | 9205|   282k|    else {                                                             \
  |  | 9206|   282k|        return vis(monostate_val);                                     \
  |  | 9207|   282k|    }
  ------------------
 9230|   334k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 52.2k, False: 282k]
  ------------------
 9231|   334k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9232|   334k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 334k]
  ------------------
 9233|   334k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9234|   334k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 334k]
  ------------------
 9235|   334k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9236|   334k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 334k]
  ------------------
 9237|   334k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9238|   334k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 334k]
  ------------------
 9239|   334k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9240|   334k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 334k]
  ------------------
 9241|   334k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9242|   334k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 334k]
  ------------------
 9243|   334k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9244|   334k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 334k]
  ------------------
 9245|   334k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9246|   334k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 334k]
  ------------------
 9247|   334k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9248|   334k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 334k]
  ------------------
 9249|   334k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9250|   334k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 334k]
  ------------------
 9251|   334k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9252|   334k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 334k]
  ------------------
 9253|   334k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9254|   334k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 334k]
  ------------------
 9255|   334k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9256|   334k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 334k]
  ------------------
 9257|   334k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9258|   334k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 334k]
  ------------------
 9259|   334k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   334k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   334k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   334k|    }                                                                  \
  |  | 9205|   334k|    else {                                                             \
  |  | 9206|   334k|        return vis(monostate_val);                                     \
  |  | 9207|   334k|    }
  ------------------
 9260|       |
 9261|   334k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 334k]
  ------------------
 9262|   334k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   334k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   334k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 334k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 334k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   334k|            SCN_CLANG_POP
 9279|   334k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  87.9k|    {
 4352|  87.9k|        return sync(0);
 4353|  87.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   341k|    {
 6177|   341k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   341k|        return static_cast<std::size_t>(m_desc &
 6182|   341k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   341k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   682k|    {
 6203|   682k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   682k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   341k|    {
 6145|   341k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   341k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   341k|        const auto t = type(id);
 6157|   341k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   341k|        basic_scan_arg<Context> arg;
 6162|   341k|        arg.m_type = t;
 6163|   341k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 341k, False: 0]
  ------------------
 6164|   341k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   341k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   341k|        return arg;
 6170|   341k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   341k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   341k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   341k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   341k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   341k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   341k|    {
 6207|   341k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   341k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   564k|    {
 5961|   564k|        return m_type != detail::arg_type::none_type;
 5962|   564k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  25.8k|{
 9300|  25.8k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  25.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  25.8k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  25.8k|{
 9201|  25.8k|#define SCN_VISIT(Type)                                                \
 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  25.8k|    }                                                                  \
 9205|  25.8k|    else {                                                             \
 9206|  25.8k|        return vis(monostate_val);                                     \
 9207|  25.8k|    }
 9208|       |
 9209|  25.8k|    monostate monostate_val{};
 9210|       |
 9211|  25.8k|    switch (get_arg_type(arg)) {
 9212|  4.29k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 4.29k, False: 21.5k]
  ------------------
 9213|  4.29k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  4.29k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.29k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.29k|    }                                                                  \
  |  | 9205|  4.29k|    else {                                                             \
  |  | 9206|  4.29k|        return vis(monostate_val);                                     \
  |  | 9207|  4.29k|    }
  ------------------
 9214|  4.29k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 25.8k]
  ------------------
 9215|  4.29k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  4.29k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.29k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.29k|    }                                                                  \
  |  | 9205|  4.29k|    else {                                                             \
  |  | 9206|  4.29k|        return vis(monostate_val);                                     \
  |  | 9207|  4.29k|    }
  ------------------
 9216|  8.61k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.32k, False: 21.5k]
  ------------------
 9217|  8.61k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.61k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.61k|    }                                                                  \
  |  | 9205|  8.61k|    else {                                                             \
  |  | 9206|  8.61k|        return vis(monostate_val);                                     \
  |  | 9207|  8.61k|    }
  ------------------
 9218|  8.61k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 25.8k]
  ------------------
 9219|  8.61k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.61k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.61k|    }                                                                  \
  |  | 9205|  8.61k|    else {                                                             \
  |  | 9206|  8.61k|        return vis(monostate_val);                                     \
  |  | 9207|  8.61k|    }
  ------------------
 9220|  12.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 4.35k, False: 21.4k]
  ------------------
 9221|  12.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  12.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.9k|    }                                                                  \
  |  | 9205|  12.9k|    else {                                                             \
  |  | 9206|  12.9k|        return vis(monostate_val);                                     \
  |  | 9207|  12.9k|    }
  ------------------
 9222|  17.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 4.27k, False: 21.5k]
  ------------------
 9223|  17.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  17.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.2k|    }                                                                  \
  |  | 9205|  17.2k|    else {                                                             \
  |  | 9206|  17.2k|        return vis(monostate_val);                                     \
  |  | 9207|  17.2k|    }
  ------------------
 9224|  17.2k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 25.8k]
  ------------------
 9225|  17.2k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  17.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.2k|    }                                                                  \
  |  | 9205|  17.2k|    else {                                                             \
  |  | 9206|  17.2k|        return vis(monostate_val);                                     \
  |  | 9207|  17.2k|    }
  ------------------
 9226|  21.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.29k, False: 21.5k]
  ------------------
 9227|  21.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9228|  21.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 25.8k]
  ------------------
 9229|  21.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9230|  25.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 4.31k, False: 21.5k]
  ------------------
 9231|  25.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9232|  25.8k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 25.8k]
  ------------------
 9233|  25.8k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9234|  25.8k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 25.8k]
  ------------------
 9235|  25.8k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9236|  25.8k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 25.8k]
  ------------------
 9237|  25.8k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9238|  25.8k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 25.8k]
  ------------------
 9239|  25.8k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9240|  25.8k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 25.8k]
  ------------------
 9241|  25.8k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9242|  25.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 25.8k]
  ------------------
 9243|  25.8k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9244|  25.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 25.8k]
  ------------------
 9245|  25.8k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9246|  25.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 25.8k]
  ------------------
 9247|  25.8k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9248|  25.8k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 25.8k]
  ------------------
 9249|  25.8k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9250|  25.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 25.8k]
  ------------------
 9251|  25.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9252|  25.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 25.8k]
  ------------------
 9253|  25.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9254|  25.8k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 25.8k]
  ------------------
 9255|  25.8k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9256|  25.8k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 25.8k]
  ------------------
 9257|  25.8k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9258|  25.8k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 25.8k]
  ------------------
 9259|  25.8k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9260|       |
 9261|  25.8k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 25.8k]
  ------------------
 9262|  25.8k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  25.8k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  25.8k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 25.8k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 25.8k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  25.8k|            SCN_CLANG_POP
 9279|  25.8k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   870k|{
 6006|   870k|    return arg.m_type;
 6007|   870k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   257k|{
 6018|   257k|    return arg.m_value;
 6019|   257k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   306k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   306k|    {
 6258|   306k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   153k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   153k|    {
 8934|   153k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   153k|    {
 3075|   153k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   153k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   153k|    {
 3041|   153k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   153k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   153k|{
 7793|   153k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   153k|    handler.check_args_exhausted();
 7795|   153k|    return handler.get_error();
 7796|   153k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   153k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   153k|    auto begin = format.data();
 7761|   153k|    auto it = begin;
 7762|   153k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   155k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 153k, False: 2.53k]
  ------------------
 7765|   153k|        const auto ch = *it++;
 7766|   153k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 153k, False: 0]
  ------------------
 7767|   153k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   153k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   153k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 150k, False: 2.53k]
  ------------------
 7771|   150k|                return;
 7772|   150k|            }
 7773|   153k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   153k|    }
 7784|       |
 7785|  2.53k|    handler.on_literal_text(begin, end);
 7786|  2.53k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   153k|{
 7690|   153k|    struct id_adapter {
 7691|   153k|        constexpr void operator()()
 7692|   153k|        {
 7693|   153k|            arg_id = handler.on_arg_id();
 7694|   153k|        }
 7695|   153k|        constexpr void operator()(std::size_t id)
 7696|   153k|        {
 7697|   153k|            arg_id = handler.on_arg_id(id);
 7698|   153k|        }
 7699|       |
 7700|   153k|        constexpr void on_error(const char* msg)
 7701|   153k|        {
 7702|   153k|            SCN_UNLIKELY_ATTR
 7703|   153k|            handler.on_error(msg);
 7704|   153k|        }
 7705|       |
 7706|   153k|        Handler& handler;
 7707|   153k|        std::size_t arg_id;
 7708|   153k|    };
 7709|       |
 7710|   153k|    ++begin;
 7711|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   153k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 153k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   153k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 153k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   153k|    else {
 7723|   153k|        auto adapter = id_adapter{handler, 0};
 7724|   153k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   153k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   153k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 153k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   153k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 153k, False: 0]
  ------------------
 7735|   153k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   153k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   153k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.2k, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 153k]
  |  |  |  Branch (865:45): [True: 50.2k, False: 103k]
  |  |  ------------------
  ------------------
 7741|  50.2k|                handler.on_error("Unknown format specifier");
 7742|  50.2k|                return begin;
 7743|  50.2k|            }
 7744|   153k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   153k|    }
 7751|   103k|    return begin + 1;
 7752|   153k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   306k|    {
 8832|   306k|        return m_args.get(id);
 8833|   306k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   306k|    {
 6286|   306k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   306k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   306k|        do_check_arg_id(id);
 6294|   306k|        return id;
 6295|   306k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   306k|{
 6806|   306k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   306k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   306k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   153k|{
 7191|   153k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   153k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 153k, False: 0]
  |  Branch (7192:26): [True: 0, False: 153k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   153k|    handler();
 7197|   153k|    return begin;
 7198|   153k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   153k|        {
 7693|   153k|            arg_id = handler.on_arg_id();
 7694|   153k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   206k|    {
 6281|   206k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   206k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   179k|{
 4691|   179k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 179k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   179k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   179k|                            ranges::default_sentinel};
 4697|   179k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   179k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   179k|    {
 4455|   179k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   179k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   179k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|   512k|    {
 6270|   512k|        return m_format.data();
 6271|   512k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   153k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   153k|    {
 7871|   153k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   153k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   153k|{
 7606|   153k|    auto do_presentation = [&]() -> const CharT* {
 7607|   153k|        if (*begin == CharT{'['}) {
 7608|   153k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   153k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   153k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   153k|                return begin;
 7614|   153k|            }
 7615|   153k|            handler.on_character_set_string(set);
 7616|   153k|            return begin;
 7617|   153k|        }
 7618|   153k|        if (*begin == CharT{'/'}) {
 7619|   153k|            return parse_presentation_regex(begin, end, handler);
 7620|   153k|        }
 7621|   153k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   153k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   153k|            handler.on_error("Invalid type specifier in format string");
 7624|   153k|            return begin;
 7625|   153k|        }
 7626|   153k|        handler.on_type(type);
 7627|   153k|        return begin;
 7628|   153k|    };
 7629|       |
 7630|   153k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 153k, False: 0]
  |  Branch (7630:28): [True: 119k, False: 33.5k]
  ------------------
 7631|   153k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 103k, False: 16.7k]
  |  Branch (7631:36): [True: 85.7k, False: 17.2k]
  ------------------
 7632|  85.7k|        return do_presentation();
 7633|  85.7k|    }
 7634|       |
 7635|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  67.5k|    begin = parse_align(begin, end, handler);
 7641|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  67.5k|    begin = parse_width(begin, end, handler);
 7647|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  67.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 67.5k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  67.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 17.2k, False: 50.2k]
  ------------------
 7666|  17.2k|        handler.on_localized();
 7667|  17.2k|        ++begin;
 7668|  17.2k|    }
 7669|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  67.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 67.5k, False: 0]
  |  Branch (7674:25): [True: 50.2k, False: 17.2k]
  ------------------
 7675|  50.2k|        do_presentation();
 7676|  50.2k|    }
 7677|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  67.5k|    return begin;
 7683|  67.5k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   239k|{
 7255|   239k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 171k, False: 68.0k]
  |  Branch (7255:33): [True: 171k, False: 0]
  ------------------
 7256|   239k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 34.5k, False: 33.5k]
  |  Branch (7256:33): [True: 34.5k, False: 0]
  ------------------
 7257|   239k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   136k|    auto do_presentation = [&]() -> const CharT* {
 7607|   136k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 136k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   136k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 136k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   136k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   136k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.5k, False: 102k]
  |  |  ------------------
  ------------------
 7623|  33.5k|            handler.on_error("Invalid type specifier in format string");
 7624|  33.5k|            return begin;
 7625|  33.5k|        }
 7626|   102k|        handler.on_type(type);
 7627|   102k|        return begin;
 7628|   136k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   272k|{
 7203|   272k|    switch (type) {
 7204|  33.9k|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 33.9k, False: 238k]
  ------------------
 7205|  67.4k|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 33.5k, False: 238k]
  ------------------
 7206|  67.4k|            return presentation_type::int_binary;
 7207|  34.4k|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 34.4k, False: 237k]
  ------------------
 7208|  34.4k|            return presentation_type::int_decimal;
 7209|  34.4k|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 34.4k, False: 237k]
  ------------------
 7210|  34.4k|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 272k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|  34.0k|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 34.0k, False: 237k]
  ------------------
 7214|  34.0k|            return presentation_type::int_octal;
 7215|  34.5k|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 34.5k, False: 237k]
  ------------------
 7216|  34.5k|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 272k]
  ------------------
 7217|  34.5k|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 272k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 272k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 272k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 272k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 272k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 272k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 272k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 272k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 272k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 272k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 272k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 272k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 272k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 272k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 272k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 272k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  67.0k|        default:
  ------------------
  |  Branch (7247:9): [True: 67.0k, False: 205k]
  ------------------
 7248|  67.0k|            return presentation_type::none;
 7249|   272k|    }
 7250|   272k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  67.5k|{
 7280|  67.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  67.5k|    auto check_align = [](wchar_t ch) {
 7283|  67.5k|        switch (ch) {
 7284|  67.5k|            case L'<':
 7285|  67.5k|                return align_type::left;
 7286|  67.5k|            case L'>':
 7287|  67.5k|                return align_type::right;
 7288|  67.5k|            case L'^':
 7289|  67.5k|                return align_type::center;
 7290|  67.5k|            default:
 7291|  67.5k|                return align_type::none;
 7292|  67.5k|        }
 7293|  67.5k|    };
 7294|       |
 7295|  67.5k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  67.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  |  Branch (865:45): [True: 0, False: 67.5k]
  |  |  |  Branch (865:45): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7297|  67.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  67.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  67.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  67.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  67.5k|    const auto begin_before_fill = begin;
 7307|  67.5k|    begin += potential_fill_len;
 7308|       |
 7309|  67.5k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 67.5k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  67.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  67.5k|    const auto begin_after_fill = begin;
 7315|  67.5k|    ++begin;
 7316|       |
 7317|  67.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 67.5k, False: 0]
  ------------------
 7318|  67.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  67.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 67.5k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  67.5k|    }
 7326|       |
 7327|  67.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 67.5k, False: 0]
  ------------------
 7328|  67.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 67.5k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  67.5k|        return begin_before_fill;
 7333|  67.5k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  67.5k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|   135k|{
 7262|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|   135k|    if constexpr (sizeof(CharT) != 1) {
 7264|   135k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|   135k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   135k|    auto check_align = [](wchar_t ch) {
 7283|   135k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 135k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 135k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 135k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   135k|            default:
  ------------------
  |  Branch (7290:13): [True: 135k, False: 0]
  ------------------
 7291|   135k|                return align_type::none;
 7292|   135k|        }
 7293|   135k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  67.5k|{
 7345|  67.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  67.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 34.0k, False: 33.5k]
  |  Branch (7347:33): [True: 0, False: 34.0k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  67.5k|    return begin;
 7358|  67.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|  17.2k|    {
 7876|  17.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  17.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 8.59k, False: 8.66k]
  ------------------
 7878|  17.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 8.59k]
  ------------------
 7879|  17.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  17.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  17.2k|        Handler::on_localized();
 7888|  17.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   103k|{
 9300|   103k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   103k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   103k|{
 9201|   103k|#define SCN_VISIT(Type)                                                \
 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   103k|    }                                                                  \
 9205|   103k|    else {                                                             \
 9206|   103k|        return vis(monostate_val);                                     \
 9207|   103k|    }
 9208|       |
 9209|   103k|    monostate monostate_val{};
 9210|       |
 9211|   103k|    switch (get_arg_type(arg)) {
 9212|  17.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 17.1k, False: 85.9k]
  ------------------
 9213|  17.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  17.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.1k|    }                                                                  \
  |  | 9205|  17.1k|    else {                                                             \
  |  | 9206|  17.1k|        return vis(monostate_val);                                     \
  |  | 9207|  17.1k|    }
  ------------------
 9214|  17.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 103k]
  ------------------
 9215|  17.1k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  17.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.1k|    }                                                                  \
  |  | 9205|  17.1k|    else {                                                             \
  |  | 9206|  17.1k|        return vis(monostate_val);                                     \
  |  | 9207|  17.1k|    }
  ------------------
 9216|  34.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 17.2k, False: 85.8k]
  ------------------
 9217|  34.3k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.3k|    }                                                                  \
  |  | 9205|  34.3k|    else {                                                             \
  |  | 9206|  34.3k|        return vis(monostate_val);                                     \
  |  | 9207|  34.3k|    }
  ------------------
 9218|  34.3k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 103k]
  ------------------
 9219|  34.3k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.3k|    }                                                                  \
  |  | 9205|  34.3k|    else {                                                             \
  |  | 9206|  34.3k|        return vis(monostate_val);                                     \
  |  | 9207|  34.3k|    }
  ------------------
 9220|  51.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 17.3k, False: 85.7k]
  ------------------
 9221|  51.6k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  51.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  51.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  51.6k|    }                                                                  \
  |  | 9205|  51.6k|    else {                                                             \
  |  | 9206|  51.6k|        return vis(monostate_val);                                     \
  |  | 9207|  51.6k|    }
  ------------------
 9222|  68.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 17.0k, False: 85.9k]
  ------------------
 9223|  68.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  68.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  68.7k|    }                                                                  \
  |  | 9205|  68.7k|    else {                                                             \
  |  | 9206|  68.7k|        return vis(monostate_val);                                     \
  |  | 9207|  68.7k|    }
  ------------------
 9224|  68.7k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 103k]
  ------------------
 9225|  68.7k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  68.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  68.7k|    }                                                                  \
  |  | 9205|  68.7k|    else {                                                             \
  |  | 9206|  68.7k|        return vis(monostate_val);                                     \
  |  | 9207|  68.7k|    }
  ------------------
 9226|  85.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 17.1k, False: 85.9k]
  ------------------
 9227|  85.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  85.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  85.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  85.8k|    }                                                                  \
  |  | 9205|  85.8k|    else {                                                             \
  |  | 9206|  85.8k|        return vis(monostate_val);                                     \
  |  | 9207|  85.8k|    }
  ------------------
 9228|  85.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 103k]
  ------------------
 9229|  85.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  85.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  85.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  85.8k|    }                                                                  \
  |  | 9205|  85.8k|    else {                                                             \
  |  | 9206|  85.8k|        return vis(monostate_val);                                     \
  |  | 9207|  85.8k|    }
  ------------------
 9230|   103k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 17.1k, False: 85.8k]
  ------------------
 9231|   103k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9232|   103k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 103k]
  ------------------
 9233|   103k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9234|   103k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 103k]
  ------------------
 9235|   103k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9236|   103k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 103k]
  ------------------
 9237|   103k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9238|   103k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 103k]
  ------------------
 9239|   103k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9240|   103k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 103k]
  ------------------
 9241|   103k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9242|   103k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 103k]
  ------------------
 9243|   103k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9244|   103k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 103k]
  ------------------
 9245|   103k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9246|   103k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 103k]
  ------------------
 9247|   103k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9248|   103k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 103k]
  ------------------
 9249|   103k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9250|   103k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 103k]
  ------------------
 9251|   103k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9252|   103k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 103k]
  ------------------
 9253|   103k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9254|   103k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 103k]
  ------------------
 9255|   103k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9256|   103k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 103k]
  ------------------
 9257|   103k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9258|   103k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 103k]
  ------------------
 9259|   103k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9260|       |
 9261|   103k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 103k]
  ------------------
 9262|   103k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   103k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   103k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 103k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 103k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   103k|            SCN_CLANG_POP
 9279|   103k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  25.8k|{
 9300|  25.8k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  25.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  25.8k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  25.8k|{
 9201|  25.8k|#define SCN_VISIT(Type)                                                \
 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  25.8k|    }                                                                  \
 9205|  25.8k|    else {                                                             \
 9206|  25.8k|        return vis(monostate_val);                                     \
 9207|  25.8k|    }
 9208|       |
 9209|  25.8k|    monostate monostate_val{};
 9210|       |
 9211|  25.8k|    switch (get_arg_type(arg)) {
 9212|  4.29k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 4.29k, False: 21.5k]
  ------------------
 9213|  4.29k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  4.29k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.29k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.29k|    }                                                                  \
  |  | 9205|  4.29k|    else {                                                             \
  |  | 9206|  4.29k|        return vis(monostate_val);                                     \
  |  | 9207|  4.29k|    }
  ------------------
 9214|  4.29k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 25.8k]
  ------------------
 9215|  4.29k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  4.29k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.29k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.29k|    }                                                                  \
  |  | 9205|  4.29k|    else {                                                             \
  |  | 9206|  4.29k|        return vis(monostate_val);                                     \
  |  | 9207|  4.29k|    }
  ------------------
 9216|  8.61k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.32k, False: 21.5k]
  ------------------
 9217|  8.61k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.61k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.61k|    }                                                                  \
  |  | 9205|  8.61k|    else {                                                             \
  |  | 9206|  8.61k|        return vis(monostate_val);                                     \
  |  | 9207|  8.61k|    }
  ------------------
 9218|  8.61k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 25.8k]
  ------------------
 9219|  8.61k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  8.61k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.61k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.61k|    }                                                                  \
  |  | 9205|  8.61k|    else {                                                             \
  |  | 9206|  8.61k|        return vis(monostate_val);                                     \
  |  | 9207|  8.61k|    }
  ------------------
 9220|  12.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 4.35k, False: 21.4k]
  ------------------
 9221|  12.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  12.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  12.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  12.9k|    }                                                                  \
  |  | 9205|  12.9k|    else {                                                             \
  |  | 9206|  12.9k|        return vis(monostate_val);                                     \
  |  | 9207|  12.9k|    }
  ------------------
 9222|  17.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 4.27k, False: 21.5k]
  ------------------
 9223|  17.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  17.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.2k|    }                                                                  \
  |  | 9205|  17.2k|    else {                                                             \
  |  | 9206|  17.2k|        return vis(monostate_val);                                     \
  |  | 9207|  17.2k|    }
  ------------------
 9224|  17.2k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 25.8k]
  ------------------
 9225|  17.2k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  17.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.2k|    }                                                                  \
  |  | 9205|  17.2k|    else {                                                             \
  |  | 9206|  17.2k|        return vis(monostate_val);                                     \
  |  | 9207|  17.2k|    }
  ------------------
 9226|  21.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.29k, False: 21.5k]
  ------------------
 9227|  21.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9228|  21.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 25.8k]
  ------------------
 9229|  21.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  21.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.5k|    }                                                                  \
  |  | 9205|  21.5k|    else {                                                             \
  |  | 9206|  21.5k|        return vis(monostate_val);                                     \
  |  | 9207|  21.5k|    }
  ------------------
 9230|  25.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 4.31k, False: 21.5k]
  ------------------
 9231|  25.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9232|  25.8k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 25.8k]
  ------------------
 9233|  25.8k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9234|  25.8k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 25.8k]
  ------------------
 9235|  25.8k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9236|  25.8k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 25.8k]
  ------------------
 9237|  25.8k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9238|  25.8k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 25.8k]
  ------------------
 9239|  25.8k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9240|  25.8k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 25.8k]
  ------------------
 9241|  25.8k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9242|  25.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 25.8k]
  ------------------
 9243|  25.8k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9244|  25.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 25.8k]
  ------------------
 9245|  25.8k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9246|  25.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 25.8k]
  ------------------
 9247|  25.8k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9248|  25.8k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 25.8k]
  ------------------
 9249|  25.8k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9250|  25.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 25.8k]
  ------------------
 9251|  25.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9252|  25.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 25.8k]
  ------------------
 9253|  25.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9254|  25.8k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 25.8k]
  ------------------
 9255|  25.8k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9256|  25.8k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 25.8k]
  ------------------
 9257|  25.8k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9258|  25.8k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 25.8k]
  ------------------
 9259|  25.8k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  25.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  25.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  25.8k|    }                                                                  \
  |  | 9205|  25.8k|    else {                                                             \
  |  | 9206|  25.8k|        return vis(monostate_val);                                     \
  |  | 9207|  25.8k|    }
  ------------------
 9260|       |
 9261|  25.8k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 25.8k]
  ------------------
 9262|  25.8k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  25.8k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  25.8k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 25.8k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 25.8k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  25.8k|            SCN_CLANG_POP
 9279|  25.8k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   153k|{
 7793|   153k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   153k|    handler.check_args_exhausted();
 7795|   153k|    return handler.get_error();
 7796|   153k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   153k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   153k|    auto begin = format.data();
 7761|   153k|    auto it = begin;
 7762|   153k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   155k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 153k, False: 2.53k]
  ------------------
 7765|   153k|        const auto ch = *it++;
 7766|   153k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 153k, False: 0]
  ------------------
 7767|   153k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   153k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   153k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 150k, False: 2.53k]
  ------------------
 7771|   150k|                return;
 7772|   150k|            }
 7773|   153k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   153k|    }
 7784|       |
 7785|  2.53k|    handler.on_literal_text(begin, end);
 7786|  2.53k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|  2.53k|    {
 8971|  2.53k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  2.53k|    static_cast<    \
  |  |  935|  2.53k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|  2.53k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   153k|{
 7690|   153k|    struct id_adapter {
 7691|   153k|        constexpr void operator()()
 7692|   153k|        {
 7693|   153k|            arg_id = handler.on_arg_id();
 7694|   153k|        }
 7695|   153k|        constexpr void operator()(std::size_t id)
 7696|   153k|        {
 7697|   153k|            arg_id = handler.on_arg_id(id);
 7698|   153k|        }
 7699|       |
 7700|   153k|        constexpr void on_error(const char* msg)
 7701|   153k|        {
 7702|   153k|            SCN_UNLIKELY_ATTR
 7703|   153k|            handler.on_error(msg);
 7704|   153k|        }
 7705|       |
 7706|   153k|        Handler& handler;
 7707|   153k|        std::size_t arg_id;
 7708|   153k|    };
 7709|       |
 7710|   153k|    ++begin;
 7711|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   153k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 153k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   153k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 153k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   153k|    else {
 7723|   153k|        auto adapter = id_adapter{handler, 0};
 7724|   153k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   153k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   153k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 153k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   153k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 153k, False: 0]
  ------------------
 7735|   153k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   153k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   153k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.2k, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 153k]
  |  |  |  Branch (865:45): [True: 50.2k, False: 103k]
  |  |  ------------------
  ------------------
 7741|  50.2k|                handler.on_error("Unknown format specifier");
 7742|  50.2k|                return begin;
 7743|  50.2k|            }
 7744|   153k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   153k|    }
 7751|   103k|    return begin + 1;
 7752|   153k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   153k|{
 7191|   153k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   153k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 153k, False: 0]
  |  Branch (7192:26): [True: 0, False: 153k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   153k|    handler();
 7197|   153k|    return begin;
 7198|   153k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   153k|        {
 7693|   153k|            arg_id = handler.on_arg_id();
 7694|   153k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   153k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   153k|    {
 7871|   153k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   153k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   153k|{
 7606|   153k|    auto do_presentation = [&]() -> const CharT* {
 7607|   153k|        if (*begin == CharT{'['}) {
 7608|   153k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   153k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   153k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   153k|                return begin;
 7614|   153k|            }
 7615|   153k|            handler.on_character_set_string(set);
 7616|   153k|            return begin;
 7617|   153k|        }
 7618|   153k|        if (*begin == CharT{'/'}) {
 7619|   153k|            return parse_presentation_regex(begin, end, handler);
 7620|   153k|        }
 7621|   153k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   153k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   153k|            handler.on_error("Invalid type specifier in format string");
 7624|   153k|            return begin;
 7625|   153k|        }
 7626|   153k|        handler.on_type(type);
 7627|   153k|        return begin;
 7628|   153k|    };
 7629|       |
 7630|   153k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 153k, False: 0]
  |  Branch (7630:28): [True: 119k, False: 33.5k]
  ------------------
 7631|   153k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 103k, False: 16.7k]
  |  Branch (7631:36): [True: 85.7k, False: 17.2k]
  ------------------
 7632|  85.7k|        return do_presentation();
 7633|  85.7k|    }
 7634|       |
 7635|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  67.5k|    begin = parse_align(begin, end, handler);
 7641|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  67.5k|    begin = parse_width(begin, end, handler);
 7647|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  67.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 67.5k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  67.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 17.2k, False: 50.2k]
  ------------------
 7666|  17.2k|        handler.on_localized();
 7667|  17.2k|        ++begin;
 7668|  17.2k|    }
 7669|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  67.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 67.5k, False: 0]
  |  Branch (7674:25): [True: 50.2k, False: 17.2k]
  ------------------
 7675|  50.2k|        do_presentation();
 7676|  50.2k|    }
 7677|  67.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  67.5k|    return begin;
 7683|  67.5k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   136k|    auto do_presentation = [&]() -> const CharT* {
 7607|   136k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 136k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   136k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 136k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   136k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   136k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.5k, False: 102k]
  |  |  ------------------
  ------------------
 7623|  33.5k|            handler.on_error("Invalid type specifier in format string");
 7624|  33.5k|            return begin;
 7625|  33.5k|        }
 7626|   102k|        handler.on_type(type);
 7627|   102k|        return begin;
 7628|   136k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|  67.5k|{
 7280|  67.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  67.5k|    auto check_align = [](wchar_t ch) {
 7283|  67.5k|        switch (ch) {
 7284|  67.5k|            case L'<':
 7285|  67.5k|                return align_type::left;
 7286|  67.5k|            case L'>':
 7287|  67.5k|                return align_type::right;
 7288|  67.5k|            case L'^':
 7289|  67.5k|                return align_type::center;
 7290|  67.5k|            default:
 7291|  67.5k|                return align_type::none;
 7292|  67.5k|        }
 7293|  67.5k|    };
 7294|       |
 7295|  67.5k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  67.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  |  Branch (865:45): [True: 0, False: 67.5k]
  |  |  |  Branch (865:45): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7297|  67.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  67.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  67.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  67.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  67.5k|    const auto begin_before_fill = begin;
 7307|  67.5k|    begin += potential_fill_len;
 7308|       |
 7309|  67.5k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 67.5k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  67.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  67.5k|    const auto begin_after_fill = begin;
 7315|  67.5k|    ++begin;
 7316|       |
 7317|  67.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 67.5k, False: 0]
  ------------------
 7318|  67.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.5k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  67.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 67.5k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  67.5k|    }
 7326|       |
 7327|  67.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 67.5k, False: 0]
  ------------------
 7328|  67.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 67.5k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  67.5k|        return begin_before_fill;
 7333|  67.5k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  67.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   135k|    auto check_align = [](wchar_t ch) {
 7283|   135k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 135k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 135k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 135k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   135k|            default:
  ------------------
  |  Branch (7290:13): [True: 135k, False: 0]
  ------------------
 7291|   135k|                return align_type::none;
 7292|   135k|        }
 7293|   135k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|  67.5k|{
 7345|  67.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  67.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 34.0k, False: 33.5k]
  |  Branch (7347:33): [True: 0, False: 34.0k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  67.5k|    return begin;
 7358|  67.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|  17.2k|    {
 7876|  17.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  17.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 8.59k, False: 8.66k]
  ------------------
 7878|  17.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 8.59k]
  ------------------
 7879|  17.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  17.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  17.2k|        Handler::on_localized();
 7888|  17.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   103k|{
 9300|   103k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   103k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   103k|{
 9201|   103k|#define SCN_VISIT(Type)                                                \
 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   103k|    }                                                                  \
 9205|   103k|    else {                                                             \
 9206|   103k|        return vis(monostate_val);                                     \
 9207|   103k|    }
 9208|       |
 9209|   103k|    monostate monostate_val{};
 9210|       |
 9211|   103k|    switch (get_arg_type(arg)) {
 9212|  17.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 17.1k, False: 85.9k]
  ------------------
 9213|  17.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  17.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.1k|    }                                                                  \
  |  | 9205|  17.1k|    else {                                                             \
  |  | 9206|  17.1k|        return vis(monostate_val);                                     \
  |  | 9207|  17.1k|    }
  ------------------
 9214|  17.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 103k]
  ------------------
 9215|  17.1k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  17.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.1k|    }                                                                  \
  |  | 9205|  17.1k|    else {                                                             \
  |  | 9206|  17.1k|        return vis(monostate_val);                                     \
  |  | 9207|  17.1k|    }
  ------------------
 9216|  34.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 17.2k, False: 85.8k]
  ------------------
 9217|  34.3k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.3k|    }                                                                  \
  |  | 9205|  34.3k|    else {                                                             \
  |  | 9206|  34.3k|        return vis(monostate_val);                                     \
  |  | 9207|  34.3k|    }
  ------------------
 9218|  34.3k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 103k]
  ------------------
 9219|  34.3k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.3k|    }                                                                  \
  |  | 9205|  34.3k|    else {                                                             \
  |  | 9206|  34.3k|        return vis(monostate_val);                                     \
  |  | 9207|  34.3k|    }
  ------------------
 9220|  51.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 17.3k, False: 85.7k]
  ------------------
 9221|  51.6k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  51.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  51.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  51.6k|    }                                                                  \
  |  | 9205|  51.6k|    else {                                                             \
  |  | 9206|  51.6k|        return vis(monostate_val);                                     \
  |  | 9207|  51.6k|    }
  ------------------
 9222|  68.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 17.0k, False: 85.9k]
  ------------------
 9223|  68.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  68.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  68.7k|    }                                                                  \
  |  | 9205|  68.7k|    else {                                                             \
  |  | 9206|  68.7k|        return vis(monostate_val);                                     \
  |  | 9207|  68.7k|    }
  ------------------
 9224|  68.7k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 103k]
  ------------------
 9225|  68.7k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  68.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  68.7k|    }                                                                  \
  |  | 9205|  68.7k|    else {                                                             \
  |  | 9206|  68.7k|        return vis(monostate_val);                                     \
  |  | 9207|  68.7k|    }
  ------------------
 9226|  85.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 17.1k, False: 85.9k]
  ------------------
 9227|  85.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  85.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  85.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  85.8k|    }                                                                  \
  |  | 9205|  85.8k|    else {                                                             \
  |  | 9206|  85.8k|        return vis(monostate_val);                                     \
  |  | 9207|  85.8k|    }
  ------------------
 9228|  85.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 103k]
  ------------------
 9229|  85.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  85.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  85.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  85.8k|    }                                                                  \
  |  | 9205|  85.8k|    else {                                                             \
  |  | 9206|  85.8k|        return vis(monostate_val);                                     \
  |  | 9207|  85.8k|    }
  ------------------
 9230|   103k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 17.1k, False: 85.8k]
  ------------------
 9231|   103k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9232|   103k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 103k]
  ------------------
 9233|   103k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9234|   103k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 103k]
  ------------------
 9235|   103k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9236|   103k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 103k]
  ------------------
 9237|   103k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9238|   103k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 103k]
  ------------------
 9239|   103k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9240|   103k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 103k]
  ------------------
 9241|   103k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9242|   103k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 103k]
  ------------------
 9243|   103k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9244|   103k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 103k]
  ------------------
 9245|   103k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9246|   103k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 103k]
  ------------------
 9247|   103k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9248|   103k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 103k]
  ------------------
 9249|   103k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9250|   103k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 103k]
  ------------------
 9251|   103k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9252|   103k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 103k]
  ------------------
 9253|   103k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9254|   103k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 103k]
  ------------------
 9255|   103k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9256|   103k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 103k]
  ------------------
 9257|   103k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9258|   103k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 103k]
  ------------------
 9259|   103k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   103k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   103k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   103k|    }                                                                  \
  |  | 9205|   103k|    else {                                                             \
  |  | 9206|   103k|        return vis(monostate_val);                                     \
  |  | 9207|   103k|    }
  ------------------
 9260|       |
 9261|   103k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 103k]
  ------------------
 9262|   103k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   103k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   103k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 103k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 103k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   103k|            SCN_CLANG_POP
 9279|   103k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   175k|    {
 4352|   175k|        return sync(0);
 4353|   175k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  63.9k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|  17.2k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.1k|{
   89|  14.1k|    auto result = make_scan_result<Source, Args...>();
   90|  14.1k|    fill_scan_result(result,
   91|  14.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.1k|    return result;
   94|  14.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  85.2k|{
   44|  85.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  85.2k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.1k|{
  131|  14.1k|    auto result = make_scan_result<Source, Args...>();
  132|  14.1k|    fill_scan_result(result,
  133|  14.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.1k|    return result;
  136|  14.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  85.2k|{
   60|  85.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  85.2k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.61k|{
   72|  8.61k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.61k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.1k|{
   89|  14.1k|    auto result = make_scan_result<Source, Args...>();
   90|  14.1k|    fill_scan_result(result,
   91|  14.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.1k|    return result;
   94|  14.1k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.1k|{
  131|  14.1k|    auto result = make_scan_result<Source, Args...>();
  132|  14.1k|    fill_scan_result(result,
  133|  14.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.1k|    return result;
  136|  14.1k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.2k|{
   89|  14.2k|    auto result = make_scan_result<Source, Args...>();
   90|  14.2k|    fill_scan_result(result,
   91|  14.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.2k|    return result;
   94|  14.2k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.2k|{
  131|  14.2k|    auto result = make_scan_result<Source, Args...>();
  132|  14.2k|    fill_scan_result(result,
  133|  14.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.2k|    return result;
  136|  14.2k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.1k|{
   89|  14.1k|    auto result = make_scan_result<Source, Args...>();
   90|  14.1k|    fill_scan_result(result,
   91|  14.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.1k|    return result;
   94|  14.1k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.1k|{
  131|  14.1k|    auto result = make_scan_result<Source, Args...>();
  132|  14.1k|    fill_scan_result(result,
  133|  14.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.1k|    return result;
  136|  14.1k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.2k|{
   89|  14.2k|    auto result = make_scan_result<Source, Args...>();
   90|  14.2k|    fill_scan_result(result,
   91|  14.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.2k|    return result;
   94|  14.2k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.2k|{
  131|  14.2k|    auto result = make_scan_result<Source, Args...>();
  132|  14.2k|    fill_scan_result(result,
  133|  14.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.2k|    return result;
  136|  14.2k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.45k|{
  171|  1.45k|    auto result = make_scan_result<Source, T>();
  172|  1.45k|    fill_scan_result(
  173|  1.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.45k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.45k|    return result;
  176|  1.45k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.2k|{
   89|  14.2k|    auto result = make_scan_result<Source, Args...>();
   90|  14.2k|    fill_scan_result(result,
   91|  14.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.2k|    return result;
   94|  14.2k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.2k|{
  131|  14.2k|    auto result = make_scan_result<Source, Args...>();
  132|  14.2k|    fill_scan_result(result,
  133|  14.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.2k|    return result;
  136|  14.2k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.1k|{
   89|  14.1k|    auto result = make_scan_result<Source, Args...>();
   90|  14.1k|    fill_scan_result(result,
   91|  14.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.1k|    return result;
   94|  14.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  85.2k|{
   44|  85.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  85.2k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.1k|{
  131|  14.1k|    auto result = make_scan_result<Source, Args...>();
  132|  14.1k|    fill_scan_result(result,
  133|  14.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.1k|    return result;
  136|  14.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  85.2k|{
   60|  85.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  85.2k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.61k|{
   72|  8.61k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.61k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.1k|{
   89|  14.1k|    auto result = make_scan_result<Source, Args...>();
   90|  14.1k|    fill_scan_result(result,
   91|  14.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.1k|    return result;
   94|  14.1k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.1k|{
  131|  14.1k|    auto result = make_scan_result<Source, Args...>();
  132|  14.1k|    fill_scan_result(result,
  133|  14.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.1k|    return result;
  136|  14.1k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.2k|{
   89|  14.2k|    auto result = make_scan_result<Source, Args...>();
   90|  14.2k|    fill_scan_result(result,
   91|  14.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.2k|    return result;
   94|  14.2k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.2k|{
  131|  14.2k|    auto result = make_scan_result<Source, Args...>();
  132|  14.2k|    fill_scan_result(result,
  133|  14.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.2k|    return result;
  136|  14.2k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.1k|{
   89|  14.1k|    auto result = make_scan_result<Source, Args...>();
   90|  14.1k|    fill_scan_result(result,
   91|  14.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.1k|    return result;
   94|  14.1k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.1k|{
  131|  14.1k|    auto result = make_scan_result<Source, Args...>();
  132|  14.1k|    fill_scan_result(result,
  133|  14.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.1k|    return result;
  136|  14.1k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.2k|{
   89|  14.2k|    auto result = make_scan_result<Source, Args...>();
   90|  14.2k|    fill_scan_result(result,
   91|  14.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.2k|    return result;
   94|  14.2k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.2k|{
  131|  14.2k|    auto result = make_scan_result<Source, Args...>();
  132|  14.2k|    fill_scan_result(result,
  133|  14.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.2k|    return result;
  136|  14.2k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.45k|{
  171|  1.45k|    auto result = make_scan_result<Source, T>();
  172|  1.45k|    fill_scan_result(
  173|  1.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.45k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.45k|    return result;
  176|  1.45k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.2k|{
   89|  14.2k|    auto result = make_scan_result<Source, Args...>();
   90|  14.2k|    fill_scan_result(result,
   91|  14.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.2k|    return result;
   94|  14.2k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.2k|{
  131|  14.2k|    auto result = make_scan_result<Source, Args...>();
  132|  14.2k|    fill_scan_result(result,
  133|  14.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.2k|    return result;
  136|  14.2k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.43k|{
  171|  1.43k|    auto result = make_scan_result<Source, T>();
  172|  1.43k|    fill_scan_result(
  173|  1.43k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.43k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.43k|    return result;
  176|  1.43k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   593k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   593k|{
  309|   593k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   593k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   156k|{
  315|   156k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   156k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 78.2k, False: 78.2k]
  ------------------
  317|   156k|                    : std::locale{};
  318|   156k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   119k|{
 1153|   119k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   119k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   119k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   119k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   119k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.18k, False: 113k]
  ------------------
 1159|  5.18k|        SCN_UNLIKELY_ATTR
 1160|  5.18k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.18k|                                             "Invalid integer value");
 1162|  5.18k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   113k|    auto start = source.data();
 1166|   113k|    const auto end = source.data() + source.size();
 1167|   113k|    {
 1168|   304k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 285k, False: 18.4k]
  ------------------
 1169|   285k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 95.3k, False: 190k]
  ------------------
 1170|  95.3k|                break;
 1171|  95.3k|            }
 1172|   285k|        }
 1173|   113k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.6k, False: 83.2k]
  |  |  |  Branch (865:45): [True: 18.4k, False: 95.3k]
  |  |  |  Branch (865:45): [True: 12.1k, False: 83.2k]
  |  |  ------------------
  ------------------
 1174|  30.6k|            value = 0;
 1175|  30.6k|            return ranges::next(source.begin(),
 1176|  30.6k|                                ranges::distance(source.data(), start));
 1177|  30.6k|        }
 1178|   113k|    }
 1179|       |
 1180|  83.2k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  83.2k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 62.2k, False: 20.9k]
  ------------------
 1182|  62.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.48k, False: 58.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.48k|    }                                                  \
  |  |  |  | 3939|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  58.7k|                             detail::make_string_view_from_pointers(start, end),
 1184|  58.7k|                             value, sign == sign_type::minus_sign));
 1185|  58.7k|            return ranges::next(source.begin(),
 1186|  58.7k|                                ranges::distance(source.data(), ptr));
 1187|  62.2k|        }
 1188|  83.2k|    }
 1189|       |
 1190|  81.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  83.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  83.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  83.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  83.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.95k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.95k|    }                                                  \
  |  |  |  | 3939|  83.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  81.2k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  81.2k|                     base, sign == sign_type::minus_sign));
 1193|  81.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  83.2k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.9k|{
 1153|  18.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.7k, False: 1.21k]
  ------------------
 1159|  17.7k|        SCN_UNLIKELY_ATTR
 1160|  17.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.7k|                                             "Invalid integer value");
 1162|  17.7k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.21k|    auto start = source.data();
 1166|  1.21k|    const auto end = source.data() + source.size();
 1167|  1.21k|    {
 1168|  1.63k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.42k, False: 212]
  ------------------
 1169|  1.42k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 1.00k, False: 420]
  ------------------
 1170|  1.00k|                break;
 1171|  1.00k|            }
 1172|  1.42k|        }
 1173|  1.21k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 886]
  |  |  |  Branch (865:45): [True: 212, False: 1.00k]
  |  |  |  Branch (865:45): [True: 120, False: 886]
  |  |  ------------------
  ------------------
 1174|    332|            value = 0;
 1175|    332|            return ranges::next(source.begin(),
 1176|    332|                                ranges::distance(source.data(), start));
 1177|    332|        }
 1178|  1.21k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    886|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 332, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    332|    }                                                  \
  |  |  |  | 3939|    886|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    554|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    554|                     base, sign == sign_type::minus_sign));
 1193|    554|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    886|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   140k|{
 1153|   140k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   140k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   140k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   140k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   140k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.81k, False: 134k]
  ------------------
 1159|  5.81k|        SCN_UNLIKELY_ATTR
 1160|  5.81k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.81k|                                             "Invalid integer value");
 1162|  5.81k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   134k|    auto start = source.data();
 1166|   134k|    const auto end = source.data() + source.size();
 1167|   134k|    {
 1168|   339k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 318k, False: 20.5k]
  ------------------
 1169|   318k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 114k, False: 204k]
  ------------------
 1170|   114k|                break;
 1171|   114k|            }
 1172|   318k|        }
 1173|   134k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.2k, False: 100k]
  |  |  |  Branch (865:45): [True: 20.5k, False: 114k]
  |  |  |  Branch (865:45): [True: 13.6k, False: 100k]
  |  |  ------------------
  ------------------
 1174|  34.2k|            value = 0;
 1175|  34.2k|            return ranges::next(source.begin(),
 1176|  34.2k|                                ranges::distance(source.data(), start));
 1177|  34.2k|        }
 1178|   134k|    }
 1179|       |
 1180|   100k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   100k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 72.3k, False: 28.3k]
  ------------------
 1182|  72.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  72.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.73k, False: 70.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.73k|    }                                                  \
  |  |  |  | 3939|  72.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  70.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  70.5k|                             detail::make_string_view_from_pointers(start, end),
 1184|  70.5k|                             value, sign == sign_type::minus_sign));
 1185|  70.5k|            return ranges::next(source.begin(),
 1186|  70.5k|                                ranges::distance(source.data(), ptr));
 1187|  72.3k|        }
 1188|   100k|    }
 1189|       |
 1190|  99.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 906, False: 99.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    906|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  99.7k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  99.7k|                     base, sign == sign_type::minus_sign));
 1193|  99.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  19.0k|{
 1153|  19.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  19.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  19.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  19.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  19.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.7k, False: 1.26k]
  ------------------
 1159|  17.7k|        SCN_UNLIKELY_ATTR
 1160|  17.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.7k|                                             "Invalid integer value");
 1162|  17.7k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.26k|    auto start = source.data();
 1166|  1.26k|    const auto end = source.data() + source.size();
 1167|  1.26k|    {
 1168|  1.70k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.47k, False: 223]
  ------------------
 1169|  1.47k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 1.03k, False: 438]
  ------------------
 1170|  1.03k|                break;
 1171|  1.03k|            }
 1172|  1.47k|        }
 1173|  1.26k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 350, False: 912]
  |  |  |  Branch (865:45): [True: 223, False: 1.03k]
  |  |  |  Branch (865:45): [True: 127, False: 912]
  |  |  ------------------
  ------------------
 1174|    350|            value = 0;
 1175|    350|            return ranges::next(source.begin(),
 1176|    350|                                ranges::distance(source.data(), start));
 1177|    350|        }
 1178|  1.26k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    912|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    912|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    912|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    912|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 148, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    148|    }                                                  \
  |  |  |  | 3939|    912|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    764|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    764|                     base, sign == sign_type::minus_sign));
 1193|    764|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    912|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   142k|{
 1153|   142k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   142k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   142k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   142k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   142k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 6.08k, False: 136k]
  ------------------
 1159|  6.08k|        SCN_UNLIKELY_ATTR
 1160|  6.08k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  6.08k|                                             "Invalid integer value");
 1162|  6.08k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   136k|    auto start = source.data();
 1166|   136k|    const auto end = source.data() + source.size();
 1167|   136k|    {
 1168|   341k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 320k, False: 20.7k]
  ------------------
 1169|   320k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 115k, False: 205k]
  ------------------
 1170|   115k|                break;
 1171|   115k|            }
 1172|   320k|        }
 1173|   136k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 102k]
  |  |  |  Branch (865:45): [True: 20.7k, False: 115k]
  |  |  |  Branch (865:45): [True: 13.8k, False: 102k]
  |  |  ------------------
  ------------------
 1174|  34.5k|            value = 0;
 1175|  34.5k|            return ranges::next(source.begin(),
 1176|  34.5k|                                ranges::distance(source.data(), start));
 1177|  34.5k|        }
 1178|   136k|    }
 1179|       |
 1180|   102k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   102k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 73.3k, False: 28.6k]
  ------------------
 1182|  73.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 934, False: 72.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    934|    }                                                  \
  |  |  |  | 3939|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  72.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  72.3k|                             detail::make_string_view_from_pointers(start, end),
 1184|  72.3k|                             value, sign == sign_type::minus_sign));
 1185|  72.3k|            return ranges::next(source.begin(),
 1186|  72.3k|                                ranges::distance(source.data(), ptr));
 1187|  73.3k|        }
 1188|   102k|    }
 1189|       |
 1190|   101k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 466, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    466|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|   101k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|   101k|                     base, sign == sign_type::minus_sign));
 1193|   101k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   102k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  19.1k|{
 1153|  19.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  19.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  19.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  19.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  19.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.8k, False: 1.35k]
  ------------------
 1159|  17.8k|        SCN_UNLIKELY_ATTR
 1160|  17.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.8k|                                             "Invalid integer value");
 1162|  17.8k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.35k|    auto start = source.data();
 1166|  1.35k|    const auto end = source.data() + source.size();
 1167|  1.35k|    {
 1168|  1.84k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.59k, False: 256]
  ------------------
 1169|  1.59k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 1.10k, False: 492]
  ------------------
 1170|  1.10k|                break;
 1171|  1.10k|            }
 1172|  1.59k|        }
 1173|  1.35k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 404, False: 952]
  |  |  |  Branch (865:45): [True: 256, False: 1.10k]
  |  |  |  Branch (865:45): [True: 148, False: 952]
  |  |  ------------------
  ------------------
 1174|    404|            value = 0;
 1175|    404|            return ranges::next(source.begin(),
 1176|    404|                                ranges::distance(source.data(), start));
 1177|    404|        }
 1178|  1.35k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    952|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    952|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    952|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    952|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 932]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    952|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    932|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    932|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    932|                     base, sign == sign_type::minus_sign));
 1193|    932|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    952|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  97.5k|{
 1153|  97.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  97.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  97.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  97.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  97.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.60k, False: 93.9k]
  ------------------
 1159|  3.60k|        SCN_UNLIKELY_ATTR
 1160|  3.60k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.60k|                                             "Invalid integer value");
 1162|  3.60k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  93.9k|    auto start = source.data();
 1166|  93.9k|    const auto end = source.data() + source.size();
 1167|  93.9k|    {
 1168|   275k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 258k, False: 17.3k]
  ------------------
 1169|   258k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 76.5k, False: 181k]
  ------------------
 1170|  76.5k|                break;
 1171|  76.5k|            }
 1172|   258k|        }
 1173|  93.9k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.0k, False: 64.8k]
  |  |  |  Branch (865:45): [True: 17.3k, False: 76.5k]
  |  |  |  Branch (865:45): [True: 11.6k, False: 64.8k]
  |  |  ------------------
  ------------------
 1174|  29.0k|            value = 0;
 1175|  29.0k|            return ranges::next(source.begin(),
 1176|  29.0k|                                ranges::distance(source.data(), start));
 1177|  29.0k|        }
 1178|  93.9k|    }
 1179|       |
 1180|  64.8k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  64.8k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 47.1k, False: 17.7k]
  ------------------
 1182|  47.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.76k, False: 45.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.76k|    }                                                  \
  |  |  |  | 3939|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  45.3k|                             detail::make_string_view_from_pointers(start, end),
 1184|  45.3k|                             value, sign == sign_type::minus_sign));
 1185|  45.3k|            return ranges::next(source.begin(),
 1186|  45.3k|                                ranges::distance(source.data(), ptr));
 1187|  47.1k|        }
 1188|  64.8k|    }
 1189|       |
 1190|  63.8k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  64.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.02k, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.02k|    }                                                  \
  |  |  |  | 3939|  64.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  63.8k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  63.8k|                     base, sign == sign_type::minus_sign));
 1193|  63.8k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  64.8k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.5k|{
 1153|  18.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.5k, False: 990]
  ------------------
 1159|  17.5k|        SCN_UNLIKELY_ATTR
 1160|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.5k|                                             "Invalid integer value");
 1162|  17.5k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|    990|    auto start = source.data();
 1166|    990|    const auto end = source.data() + source.size();
 1167|    990|    {
 1168|  1.39k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.19k, False: 201]
  ------------------
 1169|  1.19k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 789, False: 402]
  ------------------
 1170|    789|                break;
 1171|    789|            }
 1172|  1.19k|        }
 1173|    990|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314, False: 676]
  |  |  |  Branch (865:45): [True: 201, False: 789]
  |  |  |  Branch (865:45): [True: 113, False: 676]
  |  |  ------------------
  ------------------
 1174|    314|            value = 0;
 1175|    314|            return ranges::next(source.begin(),
 1176|    314|                                ranges::distance(source.data(), start));
 1177|    314|        }
 1178|    990|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    676|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    676|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    676|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    676|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 250, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    250|    }                                                  \
  |  |  |  | 3939|    676|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    426|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    426|                     base, sign == sign_type::minus_sign));
 1193|    426|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    676|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   107k|{
 1153|   107k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   107k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   107k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   107k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   107k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.83k, False: 103k]
  ------------------
 1159|  3.83k|        SCN_UNLIKELY_ATTR
 1160|  3.83k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.83k|                                             "Invalid integer value");
 1162|  3.83k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   103k|    auto start = source.data();
 1166|   103k|    const auto end = source.data() + source.size();
 1167|   103k|    {
 1168|   290k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 271k, False: 18.5k]
  ------------------
 1169|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 84.5k, False: 187k]
  ------------------
 1170|  84.5k|                break;
 1171|  84.5k|            }
 1172|   271k|        }
 1173|   103k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.0k, False: 72.1k]
  |  |  |  Branch (865:45): [True: 18.5k, False: 84.5k]
  |  |  |  Branch (865:45): [True: 12.4k, False: 72.1k]
  |  |  ------------------
  ------------------
 1174|  31.0k|            value = 0;
 1175|  31.0k|            return ranges::next(source.begin(),
 1176|  31.0k|                                ranges::distance(source.data(), start));
 1177|  31.0k|        }
 1178|   103k|    }
 1179|       |
 1180|  72.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  72.1k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 52.3k, False: 19.7k]
  ------------------
 1182|  52.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 939, False: 51.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    939|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    939|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    939|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    939|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    939|    }                                                  \
  |  |  |  | 3939|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  51.3k|                             detail::make_string_view_from_pointers(start, end),
 1184|  51.3k|                             value, sign == sign_type::minus_sign));
 1185|  51.3k|            return ranges::next(source.begin(),
 1186|  51.3k|                                ranges::distance(source.data(), ptr));
 1187|  52.3k|        }
 1188|  72.1k|    }
 1189|       |
 1190|  71.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  72.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 486, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    486|    }                                                  \
  |  |  |  | 3939|  72.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  71.6k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  71.6k|                     base, sign == sign_type::minus_sign));
 1193|  71.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  72.1k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.6k|{
 1153|  18.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.6k, False: 1.01k]
  ------------------
 1159|  17.6k|        SCN_UNLIKELY_ATTR
 1160|  17.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.6k|                                             "Invalid integer value");
 1162|  17.6k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.01k|    auto start = source.data();
 1166|  1.01k|    const auto end = source.data() + source.size();
 1167|  1.01k|    {
 1168|  1.41k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.21k, False: 201]
  ------------------
 1169|  1.21k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 811, False: 402]
  ------------------
 1170|    811|                break;
 1171|    811|            }
 1172|  1.21k|        }
 1173|  1.01k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314, False: 698]
  |  |  |  Branch (865:45): [True: 201, False: 811]
  |  |  |  Branch (865:45): [True: 113, False: 698]
  |  |  ------------------
  ------------------
 1174|    314|            value = 0;
 1175|    314|            return ranges::next(source.begin(),
 1176|    314|                                ranges::distance(source.data(), start));
 1177|    314|        }
 1178|  1.01k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    698|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    698|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    698|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    698|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|    698|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    554|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    554|                     base, sign == sign_type::minus_sign));
 1193|    554|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    698|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   107k|{
 1153|   107k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   107k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   107k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   107k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   107k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.91k, False: 104k]
  ------------------
 1159|  3.91k|        SCN_UNLIKELY_ATTR
 1160|  3.91k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.91k|                                             "Invalid integer value");
 1162|  3.91k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   104k|    auto start = source.data();
 1166|   104k|    const auto end = source.data() + source.size();
 1167|   104k|    {
 1168|   291k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 272k, False: 18.6k]
  ------------------
 1169|   272k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 85.3k, False: 187k]
  ------------------
 1170|  85.3k|                break;
 1171|  85.3k|            }
 1172|   272k|        }
 1173|   104k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.1k, False: 72.8k]
  |  |  |  Branch (865:45): [True: 18.6k, False: 85.3k]
  |  |  |  Branch (865:45): [True: 12.5k, False: 72.8k]
  |  |  ------------------
  ------------------
 1174|  31.1k|            value = 0;
 1175|  31.1k|            return ranges::next(source.begin(),
 1176|  31.1k|                                ranges::distance(source.data(), start));
 1177|  31.1k|        }
 1178|   104k|    }
 1179|       |
 1180|  72.8k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  72.8k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 52.9k, False: 19.9k]
  ------------------
 1182|  52.9k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 456, False: 52.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    456|    }                                                  \
  |  |  |  | 3939|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  52.4k|                             detail::make_string_view_from_pointers(start, end),
 1184|  52.4k|                             value, sign == sign_type::minus_sign));
 1185|  52.4k|            return ranges::next(source.begin(),
 1186|  52.4k|                                ranges::distance(source.data(), ptr));
 1187|  52.9k|        }
 1188|  72.8k|    }
 1189|       |
 1190|  72.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  72.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  72.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  72.6k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  72.6k|                     base, sign == sign_type::minus_sign));
 1193|  72.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  72.8k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.7k|{
 1153|  18.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.6k, False: 1.05k]
  ------------------
 1159|  17.6k|        SCN_UNLIKELY_ATTR
 1160|  17.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.6k|                                             "Invalid integer value");
 1162|  17.6k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.05k|    auto start = source.data();
 1166|  1.05k|    const auto end = source.data() + source.size();
 1167|  1.05k|    {
 1168|  1.45k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.25k, False: 201]
  ------------------
 1169|  1.25k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 855, False: 402]
  ------------------
 1170|    855|                break;
 1171|    855|            }
 1172|  1.25k|        }
 1173|  1.05k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314, False: 742]
  |  |  |  Branch (865:45): [True: 201, False: 855]
  |  |  |  Branch (865:45): [True: 113, False: 742]
  |  |  ------------------
  ------------------
 1174|    314|            value = 0;
 1175|    314|            return ranges::next(source.begin(),
 1176|    314|                                ranges::distance(source.data(), start));
 1177|    314|        }
 1178|  1.05k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    742|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 734]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    734|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    734|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    734|                     base, sign == sign_type::minus_sign));
 1193|    734|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    742|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   211k|{
 1903|   211k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   211k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   211k|{
 1911|   211k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   211k|    return sync_after_vscan(source, n);
 1913|   211k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  85.2k|{
 1921|  85.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  85.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  85.2k|{
 1929|  85.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  85.2k|    return sync_after_vscan(source, n);
 1931|  85.2k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   856k|{
  215|   856k|    return find_classic_impl(
  216|   856k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   856k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   856k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   211k|{
 1872|   211k|    return vscan_internal(source, format, args);
 1873|   211k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   211k|{
 1878|   211k|    auto n = vscan_internal(source, format, args);
 1879|   211k|    return sync_after_vscan(source, n);
 1880|   211k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  85.2k|{
 1886|  85.2k|    return vscan_internal(source, format, args);
 1887|  85.2k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  85.2k|{
 1892|  85.2k|    auto n = vscan_internal(source, format, args);
 1893|  85.2k|    return sync_after_vscan(source, n);
 1894|  85.2k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  32.1k|{
 1958|  32.1k|    return vscan_value_internal(source, arg);
 1959|  32.1k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  31.7k|{
 1963|  31.7k|    auto n = vscan_value_internal(source, arg);
 1964|  31.7k|    return sync_after_vscan(source, n);
 1965|  31.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  8.61k|{
 1971|  8.61k|    return vscan_value_internal(source, arg);
 1972|  8.61k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  8.61k|{
 1977|  8.61k|    auto n = vscan_value_internal(source, arg);
 1978|  8.61k|    return sync_after_vscan(source, n);
 1979|  8.61k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1056|  84.0k|{
 1057|  84.0k|    auto max_digits = maxdigits_u64(base);
 1058|  84.0k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 958, False: 83.1k]
  ------------------
 1059|    958|        return true;
 1060|    958|    }
 1061|  83.1k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 318, False: 82.8k]
  |  Branch (1061:39): [True: 106, False: 212]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|  83.0k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  83.0k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 4.69k, False: 78.3k]
  ------------------
 1066|  83.0k|                      static_cast<uint64_t>(is_negative)) {
 1067|  4.69k|            SCN_UNLIKELY_ATTR
 1068|  4.69k|            return true;
 1069|  4.69k|        }
 1070|  83.0k|    }
 1071|       |
 1072|  78.3k|    return false;
 1073|  83.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1002|   500k|{
 1003|   500k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|   500k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   500k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1004|   500k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1005|   500k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1046|  1.79k|{
 1047|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1048|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1049|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIaEET_mb:
 1077|  78.3k|{
 1078|  78.3k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 15.1k, False: 63.2k]
  ------------------
 1079|  15.1k|        SCN_MSVC_PUSH
 1080|  15.1k|        SCN_MSVC_IGNORE(4146)
 1081|  15.1k|        return static_cast<T>(
 1082|  15.1k|            -std::numeric_limits<T>::max() -
 1083|  15.1k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  15.1k|        SCN_MSVC_POP
 1085|  15.1k|    }
 1086|       |
 1087|  63.2k|    return static_cast<T>(u64val);
 1088|  78.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1056|   101k|{
 1057|   101k|    auto max_digits = maxdigits_u64(base);
 1058|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.02k, False: 100k]
  ------------------
 1059|  1.02k|        return true;
 1060|  1.02k|    }
 1061|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 326, False: 100k]
  |  Branch (1061:39): [True: 106, False: 220]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 1.65k, False: 98.7k]
  ------------------
 1066|   100k|                      static_cast<uint64_t>(is_negative)) {
 1067|  1.65k|            SCN_UNLIKELY_ATTR
 1068|  1.65k|            return true;
 1069|  1.65k|        }
 1070|   100k|    }
 1071|       |
 1072|  98.7k|    return false;
 1073|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIiEET_mb:
 1077|  98.7k|{
 1078|  98.7k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 16.4k, False: 82.2k]
  ------------------
 1079|  16.4k|        SCN_MSVC_PUSH
 1080|  16.4k|        SCN_MSVC_IGNORE(4146)
 1081|  16.4k|        return static_cast<T>(
 1082|  16.4k|            -std::numeric_limits<T>::max() -
 1083|  16.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  16.4k|        SCN_MSVC_POP
 1085|  16.4k|    }
 1086|       |
 1087|  82.2k|    return static_cast<T>(u64val);
 1088|  98.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1056|   102k|{
 1057|   102k|    auto max_digits = maxdigits_u64(base);
 1058|   102k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.11k, False: 101k]
  ------------------
 1059|  1.11k|        return true;
 1060|  1.11k|    }
 1061|   101k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 362, False: 101k]
  |  Branch (1061:39): [True: 106, False: 256]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   101k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   101k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 202, False: 101k]
  ------------------
 1066|   101k|                      static_cast<uint64_t>(is_negative)) {
 1067|    202|            SCN_UNLIKELY_ATTR
 1068|    202|            return true;
 1069|    202|        }
 1070|   101k|    }
 1071|       |
 1072|   101k|    return false;
 1073|   101k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxEET_mb:
 1077|   101k|{
 1078|   101k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 17.2k, False: 84.2k]
  ------------------
 1079|  17.2k|        SCN_MSVC_PUSH
 1080|  17.2k|        SCN_MSVC_IGNORE(4146)
 1081|  17.2k|        return static_cast<T>(
 1082|  17.2k|            -std::numeric_limits<T>::max() -
 1083|  17.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  17.2k|        SCN_MSVC_POP
 1085|  17.2k|    }
 1086|       |
 1087|  84.2k|    return static_cast<T>(u64val);
 1088|   101k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1056|  65.5k|{
 1057|  65.5k|    auto max_digits = maxdigits_u64(base);
 1058|  65.5k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 654, False: 64.9k]
  ------------------
 1059|    654|        return true;
 1060|    654|    }
 1061|  64.9k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 224, False: 64.6k]
  |  Branch (1061:39): [True: 58, False: 166]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  64.8k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  64.8k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 2.32k, False: 62.5k]
  ------------------
 1066|  64.8k|                      static_cast<uint64_t>(is_negative)) {
 1067|  2.32k|            SCN_UNLIKELY_ATTR
 1068|  2.32k|            return true;
 1069|  2.32k|        }
 1070|  64.8k|    }
 1071|       |
 1072|  62.5k|    return false;
 1073|  64.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhEET_mb:
 1077|  62.5k|{
 1078|  62.5k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 62.5k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  62.5k|    return static_cast<T>(u64val);
 1088|  62.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1056|  72.8k|{
 1057|  72.8k|    auto max_digits = maxdigits_u64(base);
 1058|  72.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 654, False: 72.1k]
  ------------------
 1059|    654|        return true;
 1060|    654|    }
 1061|  72.1k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 228, False: 71.9k]
  |  Branch (1061:39): [True: 58, False: 170]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  72.0k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  72.0k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 857, False: 71.2k]
  ------------------
 1066|  72.0k|                      static_cast<uint64_t>(is_negative)) {
 1067|    857|            SCN_UNLIKELY_ATTR
 1068|    857|            return true;
 1069|    857|        }
 1070|  72.0k|    }
 1071|       |
 1072|  71.2k|    return false;
 1073|  72.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjEET_mb:
 1077|  71.2k|{
 1078|  71.2k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 71.2k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  71.2k|    return static_cast<T>(u64val);
 1088|  71.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1056|  73.6k|{
 1057|  73.6k|    auto max_digits = maxdigits_u64(base);
 1058|  73.6k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 668, False: 72.9k]
  ------------------
 1059|    668|        return true;
 1060|    668|    }
 1061|  72.9k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 336, False: 72.6k]
  |  Branch (1061:39): [True: 58, False: 278]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  72.9k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  72.9k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 0, False: 72.9k]
  ------------------
 1066|  72.9k|                      static_cast<uint64_t>(is_negative)) {
 1067|      0|            SCN_UNLIKELY_ATTR
 1068|      0|            return true;
 1069|      0|        }
 1070|  72.9k|    }
 1071|       |
 1072|  72.9k|    return false;
 1073|  72.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIyEET_mb:
 1077|  72.9k|{
 1078|  72.9k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 72.9k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  72.9k|    return static_cast<T>(u64val);
 1088|  72.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
  940|   189k|{
  941|   189k|    uint64_t val{};
  942|   189k|    std::memcpy(&val, input, sizeof(uint64_t));
  943|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
  944|       |        val = byteswap(val);
  945|       |    }
  946|   189k|    return val;
  947|   189k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
  950|  34.0k|{
  951|  34.0k|    constexpr uint64_t mask = 0x000000FF000000FF;
  952|  34.0k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
  953|  34.0k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
  954|  34.0k|    word -= 0x3030303030303030;
  955|  34.0k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
  956|  34.0k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
  957|  34.0k|    return static_cast<uint32_t>(word);
  958|  34.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
  961|   155k|{
  962|   155k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
  963|   155k|              0x8080808080808080));
  964|   155k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   522k|{
  118|   522k|    static_assert(sizeof(*source.data()) == 1);
  119|   522k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   522k|    uint64_t word{};
  121|   522k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   522k|    return has_byte_greater(word, 127) != 0;
  124|   522k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   856k|{
  131|   856k|    auto it = source.begin();
  132|       |
  133|   935k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 522k, False: 413k]
  ------------------
  134|   522k|        auto sv =
  135|   522k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   522k|                .substr(0, 8);
  137|       |
  138|   522k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 497k, False: 24.9k]
  ------------------
  139|   497k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   497k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   497k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 419k, False: 77.6k]
  ------------------
  142|   419k|                break;
  143|   419k|            }
  144|  77.6k|            continue;
  145|   497k|        }
  146|       |
  147|  34.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 32.5k, False: 2.05k]
  ------------------
  148|  32.5k|            auto tmp =
  149|  32.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  32.5k|            auto res = get_next_code_point(tmp);
  151|  32.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 22.8k, False: 9.69k]
  ------------------
  152|  22.8k|                return it;
  153|  22.8k|            }
  154|  9.69k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.69k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.69k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  9.69k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.69k|        }
  158|  24.9k|    }
  159|       |
  160|   833k|    return detail::make_string_view_iterator(source, it);
  161|   856k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   868k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  32.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  62.2k|{
 1095|  62.2k|    uint64_t u64val{};
 1096|  62.2k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  62.2k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  62.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  62.2k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.48k, False: 58.7k]
  |  |  ------------------
  ------------------
 1101|  62.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  3.48k|        return detail::unexpected_scan_error(
 1103|  3.48k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 1.07k, False: 2.40k]
  ------------------
 1104|  3.48k|                        : scan_error::value_positive_overflow,
 1105|  3.48k|            "Integer overflow");
 1106|  3.48k|    }
 1107|       |
 1108|  58.7k|    val = store_result<T>(u64val, is_negative);
 1109|  58.7k|    return ptr;
 1110|  62.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
  982|   360k|{
  983|   360k|    loop_parse_if_eight_decimal_digits(begin, end, val);
  984|       |
  985|   809k|    while (begin != end) {
  ------------------
  |  Branch (985:12): [True: 585k, False: 224k]
  ------------------
  986|   585k|        const auto digit = char_to_int(*begin);
  987|   585k|        if (digit >= 10) {
  ------------------
  |  Branch (987:13): [True: 136k, False: 449k]
  ------------------
  988|   136k|            break;
  989|   136k|        }
  990|   449k|        val = 10ull * val + static_cast<uint64_t>(digit);
  991|   449k|        ++begin;
  992|   449k|    }
  993|       |
  994|   360k|    return begin;
  995|   360k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
  969|   360k|{
  970|   360k|    while (
  971|   394k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (971:9): [True: 155k, False: 238k]
  ------------------
  972|   394k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (972:9): [True: 34.0k, False: 121k]
  ------------------
  973|  34.0k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
  974|  34.0k|                                      get_eight_digits_word(p));
  975|  34.0k|        p += 8;
  976|  34.0k|    }
  977|   360k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  20.9k|{
 1118|  20.9k|    uint64_t u64val{};
 1119|  20.9k|    const CharT* begin = input.data();
 1120|  20.9k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  73.8k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 62.8k, False: 10.9k]
  ------------------
 1123|  62.8k|        const auto digit = char_to_int(*begin);
 1124|  62.8k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 10.0k, False: 52.8k]
  ------------------
 1125|  10.0k|            break;
 1126|  10.0k|        }
 1127|  52.8k|        u64val =
 1128|  52.8k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  52.8k|        ++begin;
 1130|  52.8k|    }
 1131|       |
 1132|  20.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  20.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.95k, False: 19.0k]
  |  |  ------------------
  ------------------
 1134|  20.9k|                                               is_negative))) {
 1135|  1.95k|        return detail::unexpected_scan_error(
 1136|  1.95k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 608, False: 1.34k]
  ------------------
 1137|  1.95k|                        : scan_error::value_positive_overflow,
 1138|  1.95k|            "Integer overflow");
 1139|  1.95k|    }
 1140|       |
 1141|  19.0k|    val = store_result<T>(u64val, is_negative);
 1142|  19.0k|    return begin;
 1143|  20.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    886|{
 1118|    886|    uint64_t u64val{};
 1119|    886|    const CharT* begin = input.data();
 1120|    886|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.60k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.99k, False: 609]
  ------------------
 1123|  3.99k|        const auto digit = char_to_int(*begin);
 1124|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 277, False: 3.71k]
  ------------------
 1125|    277|            break;
 1126|    277|        }
 1127|  3.71k|        u64val =
 1128|  3.71k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.71k|        ++begin;
 1130|  3.71k|    }
 1131|       |
 1132|    886|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    886|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 554]
  |  |  ------------------
  ------------------
 1134|    886|                                               is_negative))) {
 1135|    332|        return detail::unexpected_scan_error(
 1136|    332|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 56, False: 276]
  ------------------
 1137|    332|                        : scan_error::value_positive_overflow,
 1138|    332|            "Integer overflow");
 1139|    332|    }
 1140|       |
 1141|    554|    val = store_result<T>(u64val, is_negative);
 1142|    554|    return begin;
 1143|    886|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  72.3k|{
 1095|  72.3k|    uint64_t u64val{};
 1096|  72.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  72.3k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  72.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  72.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.73k, False: 70.5k]
  |  |  ------------------
  ------------------
 1101|  72.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.73k|        return detail::unexpected_scan_error(
 1103|  1.73k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 624, False: 1.10k]
  ------------------
 1104|  1.73k|                        : scan_error::value_positive_overflow,
 1105|  1.73k|            "Integer overflow");
 1106|  1.73k|    }
 1107|       |
 1108|  70.5k|    val = store_result<T>(u64val, is_negative);
 1109|  70.5k|    return ptr;
 1110|  72.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.3k|{
 1118|  28.3k|    uint64_t u64val{};
 1119|  28.3k|    const CharT* begin = input.data();
 1120|  28.3k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  92.4k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 77.8k, False: 14.6k]
  ------------------
 1123|  77.8k|        const auto digit = char_to_int(*begin);
 1124|  77.8k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.6k, False: 64.1k]
  ------------------
 1125|  13.6k|            break;
 1126|  13.6k|        }
 1127|  64.1k|        u64val =
 1128|  64.1k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  64.1k|        ++begin;
 1130|  64.1k|    }
 1131|       |
 1132|  28.3k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.3k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 906, False: 27.4k]
  |  |  ------------------
  ------------------
 1134|  28.3k|                                               is_negative))) {
 1135|    906|        return detail::unexpected_scan_error(
 1136|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 336, False: 570]
  ------------------
 1137|    906|                        : scan_error::value_positive_overflow,
 1138|    906|            "Integer overflow");
 1139|    906|    }
 1140|       |
 1141|  27.4k|    val = store_result<T>(u64val, is_negative);
 1142|  27.4k|    return begin;
 1143|  28.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    912|{
 1118|    912|    uint64_t u64val{};
 1119|    912|    const CharT* begin = input.data();
 1120|    912|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.65k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 4.02k, False: 624]
  ------------------
 1123|  4.02k|        const auto digit = char_to_int(*begin);
 1124|  4.02k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 288, False: 3.74k]
  ------------------
 1125|    288|            break;
 1126|    288|        }
 1127|  3.74k|        u64val =
 1128|  3.74k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.74k|        ++begin;
 1130|  3.74k|    }
 1131|       |
 1132|    912|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    912|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148, False: 764]
  |  |  ------------------
  ------------------
 1134|    912|                                               is_negative))) {
 1135|    148|        return detail::unexpected_scan_error(
 1136|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 148]
  ------------------
 1137|    148|                        : scan_error::value_positive_overflow,
 1138|    148|            "Integer overflow");
 1139|    148|    }
 1140|       |
 1141|    764|    val = store_result<T>(u64val, is_negative);
 1142|    764|    return begin;
 1143|    912|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  73.3k|{
 1095|  73.3k|    uint64_t u64val{};
 1096|  73.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  73.3k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  73.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  73.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 934, False: 72.3k]
  |  |  ------------------
  ------------------
 1101|  73.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    934|        return detail::unexpected_scan_error(
 1103|    934|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 284, False: 650]
  ------------------
 1104|    934|                        : scan_error::value_positive_overflow,
 1105|    934|            "Integer overflow");
 1106|    934|    }
 1107|       |
 1108|  72.3k|    val = store_result<T>(u64val, is_negative);
 1109|  72.3k|    return ptr;
 1110|  73.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.6k|{
 1118|  28.6k|    uint64_t u64val{};
 1119|  28.6k|    const CharT* begin = input.data();
 1120|  28.6k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  95.1k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 80.2k, False: 14.8k]
  ------------------
 1123|  80.2k|        const auto digit = char_to_int(*begin);
 1124|  80.2k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.7k, False: 66.4k]
  ------------------
 1125|  13.7k|            break;
 1126|  13.7k|        }
 1127|  66.4k|        u64val =
 1128|  66.4k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  66.4k|        ++begin;
 1130|  66.4k|    }
 1131|       |
 1132|  28.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 466, False: 28.2k]
  |  |  ------------------
  ------------------
 1134|  28.6k|                                               is_negative))) {
 1135|    466|        return detail::unexpected_scan_error(
 1136|    466|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 96, False: 370]
  ------------------
 1137|    466|                        : scan_error::value_positive_overflow,
 1138|    466|            "Integer overflow");
 1139|    466|    }
 1140|       |
 1141|  28.2k|    val = store_result<T>(u64val, is_negative);
 1142|  28.2k|    return begin;
 1143|  28.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    952|{
 1118|    952|    uint64_t u64val{};
 1119|    952|    const CharT* begin = input.data();
 1120|    952|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.73k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 4.08k, False: 648]
  ------------------
 1123|  4.08k|        const auto digit = char_to_int(*begin);
 1124|  4.08k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 304, False: 3.78k]
  ------------------
 1125|    304|            break;
 1126|    304|        }
 1127|  3.78k|        u64val =
 1128|  3.78k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.78k|        ++begin;
 1130|  3.78k|    }
 1131|       |
 1132|    952|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    952|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 932]
  |  |  ------------------
  ------------------
 1134|    952|                                               is_negative))) {
 1135|     20|        return detail::unexpected_scan_error(
 1136|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 20]
  ------------------
 1137|     20|                        : scan_error::value_positive_overflow,
 1138|     20|            "Integer overflow");
 1139|     20|    }
 1140|       |
 1141|    932|    val = store_result<T>(u64val, is_negative);
 1142|    932|    return begin;
 1143|    952|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  47.1k|{
 1095|  47.1k|    uint64_t u64val{};
 1096|  47.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  47.1k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  47.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  47.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.76k, False: 45.3k]
  |  |  ------------------
  ------------------
 1101|  47.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.76k|        return detail::unexpected_scan_error(
 1103|  1.76k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 1.76k]
  ------------------
 1104|  1.76k|                        : scan_error::value_positive_overflow,
 1105|  1.76k|            "Integer overflow");
 1106|  1.76k|    }
 1107|       |
 1108|  45.3k|    val = store_result<T>(u64val, is_negative);
 1109|  45.3k|    return ptr;
 1110|  47.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  17.7k|{
 1118|  17.7k|    uint64_t u64val{};
 1119|  17.7k|    const CharT* begin = input.data();
 1120|  17.7k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  56.9k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 47.7k, False: 9.22k]
  ------------------
 1123|  47.7k|        const auto digit = char_to_int(*begin);
 1124|  47.7k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 8.54k, False: 39.1k]
  ------------------
 1125|  8.54k|            break;
 1126|  8.54k|        }
 1127|  39.1k|        u64val =
 1128|  39.1k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  39.1k|        ++begin;
 1130|  39.1k|    }
 1131|       |
 1132|  17.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  17.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.02k, False: 16.7k]
  |  |  ------------------
  ------------------
 1134|  17.7k|                                               is_negative))) {
 1135|  1.02k|        return detail::unexpected_scan_error(
 1136|  1.02k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 1.02k]
  ------------------
 1137|  1.02k|                        : scan_error::value_positive_overflow,
 1138|  1.02k|            "Integer overflow");
 1139|  1.02k|    }
 1140|       |
 1141|  16.7k|    val = store_result<T>(u64val, is_negative);
 1142|  16.7k|    return begin;
 1143|  17.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    676|{
 1118|    676|    uint64_t u64val{};
 1119|    676|    const CharT* begin = input.data();
 1120|    676|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.01k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.57k, False: 444]
  ------------------
 1123|  3.57k|        const auto digit = char_to_int(*begin);
 1124|  3.57k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 232, False: 3.34k]
  ------------------
 1125|    232|            break;
 1126|    232|        }
 1127|  3.34k|        u64val =
 1128|  3.34k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.34k|        ++begin;
 1130|  3.34k|    }
 1131|       |
 1132|    676|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    676|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250, False: 426]
  |  |  ------------------
  ------------------
 1134|    676|                                               is_negative))) {
 1135|    250|        return detail::unexpected_scan_error(
 1136|    250|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 250]
  ------------------
 1137|    250|                        : scan_error::value_positive_overflow,
 1138|    250|            "Integer overflow");
 1139|    250|    }
 1140|       |
 1141|    426|    val = store_result<T>(u64val, is_negative);
 1142|    426|    return begin;
 1143|    676|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  52.3k|{
 1095|  52.3k|    uint64_t u64val{};
 1096|  52.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  52.3k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  52.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  52.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 939, False: 51.3k]
  |  |  ------------------
  ------------------
 1101|  52.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    939|        return detail::unexpected_scan_error(
 1103|    939|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 939]
  ------------------
 1104|    939|                        : scan_error::value_positive_overflow,
 1105|    939|            "Integer overflow");
 1106|    939|    }
 1107|       |
 1108|  51.3k|    val = store_result<T>(u64val, is_negative);
 1109|  51.3k|    return ptr;
 1110|  52.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.7k|{
 1118|  19.7k|    uint64_t u64val{};
 1119|  19.7k|    const CharT* begin = input.data();
 1120|  19.7k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  62.1k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 51.9k, False: 10.2k]
  ------------------
 1123|  51.9k|        const auto digit = char_to_int(*begin);
 1124|  51.9k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.52k, False: 42.4k]
  ------------------
 1125|  9.52k|            break;
 1126|  9.52k|        }
 1127|  42.4k|        u64val =
 1128|  42.4k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  42.4k|        ++begin;
 1130|  42.4k|    }
 1131|       |
 1132|  19.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 486, False: 19.3k]
  |  |  ------------------
  ------------------
 1134|  19.7k|                                               is_negative))) {
 1135|    486|        return detail::unexpected_scan_error(
 1136|    486|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 486]
  ------------------
 1137|    486|                        : scan_error::value_positive_overflow,
 1138|    486|            "Integer overflow");
 1139|    486|    }
 1140|       |
 1141|  19.3k|    val = store_result<T>(u64val, is_negative);
 1142|  19.3k|    return begin;
 1143|  19.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    698|{
 1118|    698|    uint64_t u64val{};
 1119|    698|    const CharT* begin = input.data();
 1120|    698|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.06k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.60k, False: 457]
  ------------------
 1123|  3.60k|        const auto digit = char_to_int(*begin);
 1124|  3.60k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 241, False: 3.36k]
  ------------------
 1125|    241|            break;
 1126|    241|        }
 1127|  3.36k|        u64val =
 1128|  3.36k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.36k|        ++begin;
 1130|  3.36k|    }
 1131|       |
 1132|    698|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    698|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 144, False: 554]
  |  |  ------------------
  ------------------
 1134|    698|                                               is_negative))) {
 1135|    144|        return detail::unexpected_scan_error(
 1136|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 144]
  ------------------
 1137|    144|                        : scan_error::value_positive_overflow,
 1138|    144|            "Integer overflow");
 1139|    144|    }
 1140|       |
 1141|    554|    val = store_result<T>(u64val, is_negative);
 1142|    554|    return begin;
 1143|    698|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  52.9k|{
 1095|  52.9k|    uint64_t u64val{};
 1096|  52.9k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  52.9k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  52.9k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  52.9k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 456, False: 52.4k]
  |  |  ------------------
  ------------------
 1101|  52.9k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    456|        return detail::unexpected_scan_error(
 1103|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 456]
  ------------------
 1104|    456|                        : scan_error::value_positive_overflow,
 1105|    456|            "Integer overflow");
 1106|    456|    }
 1107|       |
 1108|  52.4k|    val = store_result<T>(u64val, is_negative);
 1109|  52.4k|    return ptr;
 1110|  52.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.9k|{
 1118|  19.9k|    uint64_t u64val{};
 1119|  19.9k|    const CharT* begin = input.data();
 1120|  19.9k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  63.6k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 53.2k, False: 10.3k]
  ------------------
 1123|  53.2k|        const auto digit = char_to_int(*begin);
 1124|  53.2k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.60k, False: 43.6k]
  ------------------
 1125|  9.60k|            break;
 1126|  9.60k|        }
 1127|  43.6k|        u64val =
 1128|  43.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  43.6k|        ++begin;
 1130|  43.6k|    }
 1131|       |
 1132|  19.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 262, False: 19.6k]
  |  |  ------------------
  ------------------
 1134|  19.9k|                                               is_negative))) {
 1135|    262|        return detail::unexpected_scan_error(
 1136|    262|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 262]
  ------------------
 1137|    262|                        : scan_error::value_positive_overflow,
 1138|    262|            "Integer overflow");
 1139|    262|    }
 1140|       |
 1141|  19.6k|    val = store_result<T>(u64val, is_negative);
 1142|  19.6k|    return begin;
 1143|  19.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    742|{
 1118|    742|    uint64_t u64val{};
 1119|    742|    const CharT* begin = input.data();
 1120|    742|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.15k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.66k, False: 483]
  ------------------
 1123|  3.66k|        const auto digit = char_to_int(*begin);
 1124|  3.66k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 259, False: 3.40k]
  ------------------
 1125|    259|            break;
 1126|    259|        }
 1127|  3.40k|        u64val =
 1128|  3.40k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.40k|        ++begin;
 1130|  3.40k|    }
 1131|       |
 1132|    742|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    742|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 734]
  |  |  ------------------
  ------------------
 1134|    742|                                               is_negative))) {
 1135|      8|        return detail::unexpected_scan_error(
 1136|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 8]
  ------------------
 1137|      8|                        : scan_error::value_positive_overflow,
 1138|      8|            "Integer overflow");
 1139|      8|    }
 1140|       |
 1141|    734|    val = store_result<T>(u64val, is_negative);
 1142|    734|    return begin;
 1143|    742|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   422k|{
 1769|   422k|    const auto argcount = args.size();
 1770|   422k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 63.4k, False: 359k]
  |  Branch (1770:60): [True: 63.4k, False: 0]
  ------------------
 1771|  63.4k|        auto arg = args.get(0);
 1772|  63.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  63.4k|    static_cast<    \
  |  |  935|  63.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  63.4k|    }
 1774|       |
 1775|   359k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 359k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   359k|    SCN_UNLIKELY_ATTR
 1783|   359k|    {
 1784|   359k|        auto handler = format_handler<false, CharT>{
 1785|   359k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   359k|    static_cast<    \
  |  |  935|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   359k|    static_cast<    \
  |  |  935|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   359k|        return vscan_parse_format_string(format, handler);
 1787|   359k|    }
 1788|   359k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   846k|{
 1317|   846k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 718k, False: 127k]
  ------------------
 1318|   718k|        return false;
 1319|   718k|    }
 1320|   127k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 127k, False: 0]
  |  Branch (1320:39): [True: 127k, False: 0]
  ------------------
 1321|   846k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  95.1k|{
 1350|  95.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.1k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  95.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  95.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 95.1k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  95.1k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  95.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  95.1k|    static_cast<    \
  |  |  935|  95.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  95.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  95.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  95.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  95.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.5k, False: 82.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.5k|    }                                                  \
  |  |  |  | 3939|  95.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  82.5k|    return it.position();
 1367|  95.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   358k|        : format_handler_base{argcount},
 1593|   358k|          parse_ctx{format},
 1594|   358k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   358k|    {
 1596|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.02M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.02M|    {
 1412|  1.02M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   358k|        : contiguous_ctx(source, args, loc)
 1544|   358k|    {
 1545|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   358k|{
 1734|   358k|    const auto beg = handler.get_ctx().begin();
 1735|   358k|    detail::parse_format_string<false>(format, handler);
 1736|   358k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 75.3k, False: 283k]
  |  |  ------------------
  ------------------
 1737|  75.3k|        return unexpected(err.error());
 1738|  75.3k|    }
 1739|   283k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   358k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  2.31M|    {
 1718|  2.31M|        return ctx.get();
 1719|  2.31M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  2.31M|    {
 1549|  2.31M|        return contiguous_ctx;
 1550|  2.31M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   642k|    {
 1600|   642k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 642k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   642k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   402k|    {
 1460|   402k|        error = unexpected(err);
 1461|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   358k|{
 1372|   358k|    auto arg = ctx.arg(id);
 1373|   358k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 358k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   358k|    return arg;
 1377|   358k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.02M|    {
 1486|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.02M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.02M|            visited_args_lower64 |= (1ull << id);
 1499|  1.02M|            return;
 1500|  1.02M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.02M|    {
 1470|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.02M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.02M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   358k|    {
 1640|   358k|        return parse_ctx.next_arg_id();
 1641|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   358k|    {
 1680|   358k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   358k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   358k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 358k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   358k|        auto specs = detail::format_specs{};
 1693|   358k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   358k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   358k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   358k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   358k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 358k]
  |  Branch (1698:29): [True: 16.7k, False: 342k]
  ------------------
 1699|  16.7k|            SCN_UNLIKELY_ATTR
 1700|  16.7k|            on_error({scan_error::invalid_format_string,
 1701|  16.7k|                      "Missing '}' in format string"});
 1702|  16.7k|            return parse_ctx.begin();
 1703|  16.7k|        }
 1704|   342k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.37k, False: 333k]
  |  |  ------------------
  ------------------
 1705|  8.37k|            return parse_ctx.begin();
 1706|  8.37k|        }
 1707|   333k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   333k|        on_visit_scan_arg(
 1710|   333k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   333k|                                           get_ctx().locale()},
 1712|   333k|            arg);
 1713|   333k|        return parse_ctx.begin();
 1714|   342k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   358k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   358k|    {
 1391|   358k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   333k|    {
 1651|   333k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 333k]
  |  Branch (1651:13): [True: 0, False: 333k]
  |  Branch (1651:29): [True: 0, False: 333k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   333k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   333k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.2k, False: 283k]
  |  |  ------------------
  ------------------
 1658|  50.2k|            on_error(r.error());
 1659|  50.2k|        }
 1660|   283k|        else {
 1661|   283k|            get_ctx().advance_to(*r);
 1662|   283k|        }
 1663|   333k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|   150k|    {
 1454|   150k|        SCN_UNLIKELY_ATTR
 1455|   150k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|   150k|                                              msg);
 1457|   150k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.02M|    {
 1419|  1.02M|        {
 1420|  1.02M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.02M]
  ------------------
 1421|  1.02M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.02M]
  ------------------
 1422|  1.02M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.02M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.02M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.02M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.02M|        }
 1430|       |
 1431|  1.02M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.02M, False: 0]
  ------------------
 1432|  1.02M|            return;
 1433|  1.02M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  3.94M|    {
 1465|  3.94M|        return error;
 1466|  3.94M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   359k|        : format_handler_base{argcount},
 1593|   359k|          parse_ctx{format},
 1594|   359k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   359k|    static_cast<    \
  |  |  935|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   359k|    static_cast<    \
  |  |  935|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   359k|    {
 1596|   359k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   359k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   359k|    static_cast<    \
  |  |  935|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   359k|    {
 1521|   359k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   359k|{
 1734|   359k|    const auto beg = handler.get_ctx().begin();
 1735|   359k|    detail::parse_format_string<false>(format, handler);
 1736|   359k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 75.3k, False: 284k]
  |  |  ------------------
  ------------------
 1737|  75.3k|        return unexpected(err.error());
 1738|  75.3k|    }
 1739|   284k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   359k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  2.31M|    {
 1718|  2.31M|        return ctx.get();
 1719|  2.31M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  2.31M|    {
 1525|  2.31M|        return ctx;
 1526|  2.31M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   643k|    {
 1600|   643k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 643k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   643k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   359k|{
 1372|   359k|    auto arg = ctx.arg(id);
 1373|   359k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   359k|    return arg;
 1377|   359k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   359k|    {
 1640|   359k|        return parse_ctx.next_arg_id();
 1641|   359k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   359k|    {
 1680|   359k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   359k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   359k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 359k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   359k|        auto specs = detail::format_specs{};
 1693|   359k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   359k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   359k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   359k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   359k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 359k]
  |  Branch (1698:29): [True: 16.7k, False: 342k]
  ------------------
 1699|  16.7k|            SCN_UNLIKELY_ATTR
 1700|  16.7k|            on_error({scan_error::invalid_format_string,
 1701|  16.7k|                      "Missing '}' in format string"});
 1702|  16.7k|            return parse_ctx.begin();
 1703|  16.7k|        }
 1704|   342k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.37k, False: 334k]
  |  |  ------------------
  ------------------
 1705|  8.37k|            return parse_ctx.begin();
 1706|  8.37k|        }
 1707|   334k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   334k|        on_visit_scan_arg(
 1710|   334k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   334k|                                           get_ctx().locale()},
 1712|   334k|            arg);
 1713|   334k|        return parse_ctx.begin();
 1714|   342k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   359k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   359k|    {
 1391|   359k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   334k|    {
 1651|   334k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 334k]
  |  Branch (1651:13): [True: 0, False: 334k]
  |  Branch (1651:29): [True: 0, False: 334k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   334k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   334k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.2k, False: 284k]
  |  |  ------------------
  ------------------
 1658|  50.2k|            on_error(r.error());
 1659|  50.2k|        }
 1660|   284k|        else {
 1661|   284k|            get_ctx().advance_to(*r);
 1662|   284k|        }
 1663|   334k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   423k|{
 1749|   423k|    const auto argcount = args.size();
 1750|   423k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 64.3k, False: 358k]
  |  Branch (1750:60): [True: 64.3k, False: 0]
  ------------------
 1751|  64.3k|        auto arg = args.get(0);
 1752|  64.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  64.3k|    static_cast<    \
  |  |  935|  64.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  64.3k|    }
 1754|       |
 1755|   358k|    auto handler = format_handler<true, CharT>{
 1756|   358k|        ranges::subrange<const CharT*>{source.data(),
 1757|   358k|                                       source.data() + source.size()},
 1758|   358k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   358k|    return vscan_parse_format_string(format, handler);
 1760|   423k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  96.5k|{
 1330|  96.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.5k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  96.5k|    auto reader =
 1336|  96.5k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  96.5k|            ranges::subrange<const CharT*>{source.data(),
 1338|  96.5k|                                           source.data() + source.size()},
 1339|  96.5k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  96.5k|    static_cast<    \
  |  |  935|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  96.5k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  96.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.5k, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.5k|    }                                                  \
  |  |  |  | 3939|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|  83.9k|    return ranges::distance(source.data(), it);
 1342|  96.5k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   454k|{
 1849|   454k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   454k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 366k, False: 87.9k]
  |  |  ------------------
  ------------------
 1850|   366k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   366k|    }
 1856|  87.9k|    else {
 1857|  87.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.9k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  87.9k|    }
 1863|   454k|    return result;
 1864|   454k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   170k|{
 1749|   170k|    const auto argcount = args.size();
 1750|   170k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 17.2k, False: 153k]
  |  Branch (1750:60): [True: 17.2k, False: 0]
  ------------------
 1751|  17.2k|        auto arg = args.get(0);
 1752|  17.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  17.2k|    static_cast<    \
  |  |  935|  17.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  17.2k|    }
 1754|       |
 1755|   153k|    auto handler = format_handler<true, CharT>{
 1756|   153k|        ranges::subrange<const CharT*>{source.data(),
 1757|   153k|                                       source.data() + source.size()},
 1758|   153k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   153k|    return vscan_parse_format_string(format, handler);
 1760|   170k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   341k|{
 1317|   341k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 306k, False: 34.4k]
  ------------------
 1318|   306k|        return false;
 1319|   306k|    }
 1320|  34.4k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 34.4k, False: 0]
  |  Branch (1320:39): [True: 34.4k, False: 0]
  ------------------
 1321|   341k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  25.8k|{
 1330|  25.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.8k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  25.8k|    auto reader =
 1336|  25.8k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  25.8k|            ranges::subrange<const CharT*>{source.data(),
 1338|  25.8k|                                           source.data() + source.size()},
 1339|  25.8k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  25.8k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 25.1k, False: 720]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  25.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  25.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  25.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  25.1k|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    720|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|    720|    return ranges::distance(source.data(), it);
 1342|  25.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   153k|        : format_handler_base{argcount},
 1593|   153k|          parse_ctx{format},
 1594|   153k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   153k|    {
 1596|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   153k|        : contiguous_ctx(source, args, loc)
 1544|   153k|    {
 1545|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   153k|{
 1734|   153k|    const auto beg = handler.get_ctx().begin();
 1735|   153k|    detail::parse_format_string<false>(format, handler);
 1736|   153k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 150k, False: 2.53k]
  |  |  ------------------
  ------------------
 1737|   150k|        return unexpected(err.error());
 1738|   150k|    }
 1739|  2.53k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   153k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   671k|    {
 1718|   671k|        return ctx.get();
 1719|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   671k|    {
 1549|   671k|        return contiguous_ctx;
 1550|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   155k|    {
 1600|   155k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 155k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   153k|{
 1372|   153k|    auto arg = ctx.arg(id);
 1373|   153k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   153k|    return arg;
 1377|   153k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   153k|    {
 1640|   153k|        return parse_ctx.next_arg_id();
 1641|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   153k|    {
 1680|   153k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   153k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   153k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 153k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   153k|        auto specs = detail::format_specs{};
 1693|   153k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   153k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   153k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   153k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   153k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 153k]
  |  Branch (1698:29): [True: 33.5k, False: 119k]
  ------------------
 1699|  33.5k|            SCN_UNLIKELY_ATTR
 1700|  33.5k|            on_error({scan_error::invalid_format_string,
 1701|  33.5k|                      "Missing '}' in format string"});
 1702|  33.5k|            return parse_ctx.begin();
 1703|  33.5k|        }
 1704|   119k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.7k, False: 103k]
  |  |  ------------------
  ------------------
 1705|  16.7k|            return parse_ctx.begin();
 1706|  16.7k|        }
 1707|   103k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   103k|        on_visit_scan_arg(
 1710|   103k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   103k|                                           get_ctx().locale()},
 1712|   103k|            arg);
 1713|   103k|        return parse_ctx.begin();
 1714|   119k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   153k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   153k|    {
 1391|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   103k|    {
 1651|   103k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 103k]
  |  Branch (1651:13): [True: 0, False: 103k]
  |  Branch (1651:29): [True: 0, False: 103k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   103k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   103k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100k, False: 2.53k]
  |  |  ------------------
  ------------------
 1658|   100k|            on_error(r.error());
 1659|   100k|        }
 1660|  2.53k|        else {
 1661|  2.53k|            get_ctx().advance_to(*r);
 1662|  2.53k|        }
 1663|   103k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   170k|{
 1769|   170k|    const auto argcount = args.size();
 1770|   170k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 17.2k, False: 153k]
  |  Branch (1770:60): [True: 17.2k, False: 0]
  ------------------
 1771|  17.2k|        auto arg = args.get(0);
 1772|  17.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  17.2k|    static_cast<    \
  |  |  935|  17.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  17.2k|    }
 1774|       |
 1775|   153k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 153k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   153k|    SCN_UNLIKELY_ATTR
 1783|   153k|    {
 1784|   153k|        auto handler = format_handler<false, CharT>{
 1785|   153k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   153k|        return vscan_parse_format_string(format, handler);
 1787|   153k|    }
 1788|   153k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  25.8k|{
 1350|  25.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.8k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  25.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  25.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 25.8k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  25.8k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  25.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  25.8k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  25.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 25.1k, False: 720]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  25.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  25.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  25.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  25.1k|    }                                                  \
  |  |  |  | 3939|  25.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    720|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|    720|    return it.position();
 1367|  25.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   153k|        : format_handler_base{argcount},
 1593|   153k|          parse_ctx{format},
 1594|   153k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   153k|    {
 1596|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   153k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   153k|    {
 1521|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   153k|{
 1734|   153k|    const auto beg = handler.get_ctx().begin();
 1735|   153k|    detail::parse_format_string<false>(format, handler);
 1736|   153k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 150k, False: 2.53k]
  |  |  ------------------
  ------------------
 1737|   150k|        return unexpected(err.error());
 1738|   150k|    }
 1739|  2.53k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   153k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   671k|    {
 1718|   671k|        return ctx.get();
 1719|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   671k|    {
 1525|   671k|        return ctx;
 1526|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   155k|    {
 1600|   155k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 155k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   153k|{
 1372|   153k|    auto arg = ctx.arg(id);
 1373|   153k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   153k|    return arg;
 1377|   153k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   153k|    {
 1640|   153k|        return parse_ctx.next_arg_id();
 1641|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   153k|    {
 1680|   153k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   153k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   153k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 153k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   153k|        auto specs = detail::format_specs{};
 1693|   153k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   153k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   153k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   153k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   153k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 153k]
  |  Branch (1698:29): [True: 33.5k, False: 119k]
  ------------------
 1699|  33.5k|            SCN_UNLIKELY_ATTR
 1700|  33.5k|            on_error({scan_error::invalid_format_string,
 1701|  33.5k|                      "Missing '}' in format string"});
 1702|  33.5k|            return parse_ctx.begin();
 1703|  33.5k|        }
 1704|   119k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.7k, False: 103k]
  |  |  ------------------
  ------------------
 1705|  16.7k|            return parse_ctx.begin();
 1706|  16.7k|        }
 1707|   103k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   103k|        on_visit_scan_arg(
 1710|   103k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   103k|                                           get_ctx().locale()},
 1712|   103k|            arg);
 1713|   103k|        return parse_ctx.begin();
 1714|   119k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   153k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   153k|    {
 1391|   153k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   103k|    {
 1651|   103k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 103k]
  |  Branch (1651:13): [True: 0, False: 103k]
  |  Branch (1651:29): [True: 0, False: 103k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   103k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   103k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100k, False: 2.53k]
  |  |  ------------------
  ------------------
 1658|   100k|            on_error(r.error());
 1659|   100k|        }
 1660|  2.53k|        else {
 1661|  2.53k|            get_ctx().advance_to(*r);
 1662|  2.53k|        }
 1663|   103k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   179k|{
 1849|   179k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   179k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.25k, False: 175k]
  |  |  ------------------
  ------------------
 1850|  3.25k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  3.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.25k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  3.25k|    }
 1856|   175k|    else {
 1857|   175k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   175k|    }
 1863|   179k|    return result;
 1864|   179k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  32.1k|{
 1795|  32.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  32.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  31.7k|{
 1795|  31.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  31.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  31.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  8.61k|{
 1795|  8.61k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.61k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  8.61k|{
 1795|  8.61k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.61k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    698|{
 1462|    698|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    698|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    698|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    698|            return transcode_to_string_impl_to32(src, dest);
 1473|    698|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    698|    SCN_EXPECT(false);
  ------------------
  |  |  930|    698|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    698|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    698|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    698|{
 1355|    698|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    698|    auto it = src.begin();
 1358|  46.4k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 45.7k, False: 698]
  ------------------
 1359|  45.7k|        auto res = get_next_code_point(
 1360|  45.7k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  45.7k|                                                                 src.end()));
 1362|  45.7k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 489, False: 45.2k]
  |  |  ------------------
  ------------------
 1363|    489|            dest.push_back(DestCharT{0xfffd});
 1364|    489|        }
 1365|  45.2k|        else {
 1366|  45.2k|            dest.push_back(res.value);
 1367|  45.2k|        }
 1368|  45.7k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  45.7k|    }
 1370|    698|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  78.3k|{
 1279|  78.3k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  78.3k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  78.3k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.53k, False: 75.8k]
  |  |  ------------------
  ------------------
 1283|  2.53k|        return {get_start_for_next_code_point(input),
 1284|  2.53k|                detail::invalid_code_point};
 1285|  2.53k|    }
 1286|  75.8k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.19k, False: 73.6k]
  |  |  ------------------
  ------------------
 1287|  2.19k|        return {input.end(), detail::invalid_code_point};
 1288|  2.19k|    }
 1289|       |
 1290|  73.6k|    return {input.begin() + len,
 1291|  73.6k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  75.8k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  2.53k|{
 1265|  2.53k|    auto it = input.begin();
 1266|  10.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 9.19k, False: 1.23k]
  ------------------
 1267|  9.19k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.30k, False: 7.88k]
  ------------------
 1268|  1.30k|            break;
 1269|  1.30k|        }
 1270|  9.19k|    }
 1271|  2.53k|    return it;
 1272|  2.53k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.77M|    constexpr parse_error(code c) : m_code(c)
  808|  3.77M|    {
  809|  3.77M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.77M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.77M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.38M|    {
  823|  1.38M|        return a.m_code == b.m_code;
  824|  1.38M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   135k|    {
  827|   135k|        return !(a == b);
  828|   135k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3039|   874k|    {
 3040|   874k|        return m_msg == nullptr;
 3041|   874k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   868k|{
  458|   868k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   868k|        static_cast<unsigned char>(ch))];
  460|   868k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   522k|{
  539|   522k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   522k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.15M|{
  784|  3.15M|    return e != eof_error::good;
  785|  3.15M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  27.1k|{
  798|  27.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  27.1k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  27.1k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  62.4k|{
  845|  62.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  62.4k|    return parse_error::eof;
  847|  62.4k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   135k|{
  854|   135k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 135k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   135k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 135k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   135k|    return detail::unexpected_scan_error(code, msg);
  863|   135k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   422k|{
  868|   422k|    return [code, msg](parse_error err) {
  869|   422k|        assert(err != parse_error::good);
  870|   422k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   422k|    };
  872|   422k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|   329k|{
 2320|   329k|    unsigned char running_diff{0};
 2321|   987k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 658k, False: 329k]
  ------------------
 2322|   658k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|   658k|    }
 2324|   329k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 2.13k, False: 327k]
  |  Branch (2324:33): [True: 462, False: 326k]
  ------------------
 2325|   329k|}
_ZN3scn2v44impl11char_to_intEc:
 3228|  5.13M|{
 3229|  5.13M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3230|  5.13M|}
_ZN3scn2v44impl11char_to_intEw:
 3232|   550k|{
 3233|   550k|#if WCHAR_MIN < 0
 3234|   550k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3234:9): [True: 524k, False: 25.9k]
  |  Branch (3234:20): [True: 302k, False: 222k]
  ------------------
 3235|       |#else
 3236|       |    if (ch <= 255) {
 3237|       |#endif
 3238|   302k|        return char_to_int(static_cast<char>(ch));
 3239|   302k|    }
 3240|   247k|    return 255;
 3241|   550k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6034|   572k|{
 6035|   572k|    if (specs.width != 0) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 572k]
  ------------------
 6036|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6036:13): [True: 0, False: 0]
  ------------------
 6037|      0|            return detail::unexpected_scan_error(
 6038|      0|                scan_error::length_too_short,
 6039|      0|                "Scanned value too narrow, width did not exceed what "
 6040|      0|                "was specified in the format string");
 6041|      0|        }
 6042|      0|    }
 6043|   572k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6043:9): [True: 0, False: 572k]
  ------------------
 6044|       |        // Ensured by take_width_view
 6045|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6046|      0|                   specs.precision);
 6047|      0|    }
 6048|   572k|    return {};
 6049|   572k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.43M|    {
  304|  1.43M|        ranges::advance(x, n);
  305|  1.43M|        return x;
  306|  1.43M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.43M|    {
  268|  1.43M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.43M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.43M|    {
  151|  1.43M|        i += n;
  152|  1.43M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.20M|    {
  108|  2.20M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.20M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.20M|    {
   87|  2.20M|        return s - i;
   88|  2.20M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  91.4k|    {
  304|  91.4k|        ranges::advance(x, n);
  305|  91.4k|        return x;
  306|  91.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  91.4k|    {
  268|  91.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  91.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  91.4k|    {
  151|  91.4k|        i += n;
  152|  91.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  34.3M|    {
  108|  34.3M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.3M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  34.3M|    {
   87|  34.3M|        return s - i;
   88|  34.3M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2981|   976k|    {
 2982|   976k|        return m_current;
 2983|   976k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2981|   258k|    {
 2982|   258k|        return m_current;
 2983|   258k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   429k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   429k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   429k|        auto beg = r.begin();
  991|   429k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 429k, False: 0]
  ------------------
  992|   429k|            return false;
  993|   429k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   429k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  2.32M|    {
  763|  2.32M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.32M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   340k|{
 1956|   340k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   340k|    else {
 1967|   340k|        auto it = range.begin();
 1968|   340k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 304k, False: 36.1k]
  ------------------
 1969|   304k|            return ranges::next(it, count);
 1970|   304k|        }
 1971|       |
 1972|  95.7k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 71.2k, False: 24.5k]
  ------------------
 1973|  71.2k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 11.6k, False: 59.6k]
  ------------------
 1974|  11.6k|                return unexpected(eof_error::eof);
 1975|  11.6k|            }
 1976|  71.2k|        }
 1977|       |
 1978|  24.5k|        return it;
 1979|  36.1k|    }
 1980|   340k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   340k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   340k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   340k|        else {
 1107|   340k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 340k, False: 0]
  ------------------
 1108|   340k|                return static_cast<size_t>(
 1109|   340k|                    r.begin().parent()->chars_available() -
 1110|   340k|                    r.begin().position());
 1111|   340k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   340k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   340k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   313k|        : m_fptr([](storage fn,
  743|   313k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   313k|              cvref<T> obj = *get<T>(fn);
  745|   313k|              if constexpr (std::is_void_v<R>) {
  746|   313k|                  obj(static_cast<decltype(args)>(args)...);
  747|   313k|              }
  748|   313k|              else {
  749|   313k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   313k|              }
  751|   313k|          }),
  752|   313k|          m_storage(std::addressof(f))
  753|   313k|    {
  754|   313k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.16M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.16M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.16M|              else {
  749|  1.16M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.16M|              }
  751|  1.16M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.16M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.16M|        else if constexpr (std::is_object_v<T>) {
  688|  1.16M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.16M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   313k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   313k|        {
  662|   313k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.07M|    {
  763|  2.07M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.07M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   661k|        : m_fptr([](storage fn,
  743|   661k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   661k|              cvref<T> obj = *get<T>(fn);
  745|   661k|              if constexpr (std::is_void_v<R>) {
  746|   661k|                  obj(static_cast<decltype(args)>(args)...);
  747|   661k|              }
  748|   661k|              else {
  749|   661k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   661k|              }
  751|   661k|          }),
  752|   661k|          m_storage(std::addressof(f))
  753|   661k|    {
  754|   661k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.03M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.03M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.03M|              else {
  749|  1.03M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.03M|              }
  751|  1.03M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.03M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.03M|        else if constexpr (std::is_object_v<T>) {
  688|  1.03M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.03M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   661k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   661k|        {
  662|   661k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   334k|    {
 6063|   334k|        const bool need_skipped_width =
 6064|   334k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 334k]
  |  Branch (6064:33): [True: 0, False: 334k]
  ------------------
 6065|   334k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   334k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 334k]
  ------------------
 6069|   334k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 334k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   334k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 334k, False: 0]
  |  Branch (6073:56): [True: 334k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   334k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 334k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   658k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.79k, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.79k|    }                                                  \
  |  |  |  | 3939|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   658k|                            make_eof_scan_error));
 6084|       |
 6085|   658k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 324k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   324k|            return result_type{it, 0};
 6093|   658k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   334k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   313k|{
 2075|   313k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   313k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   313k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   313k|    else {
 2060|   313k|        auto first = range.begin();
 2061|  1.17M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.16M, False: 9.12k]
  ------------------
 2062|  1.16M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 304k, False: 857k]
  ------------------
 2063|   304k|                return first;
 2064|   304k|            }
 2065|  1.16M|        }
 2066|  9.12k|        return first;
 2067|   313k|    }
 2068|   313k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   315k|    {
  108|   315k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   315k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   315k|    {
   94|   315k|        iter_difference_t<I> counter{0};
   95|  4.04M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 3.73M, False: 315k]
  ------------------
   96|  3.73M|            ++i;
   97|  3.73M|            ++counter;
   98|  3.73M|        }
   99|   315k|        return counter;
  100|   315k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   135k|    return [code, msg](parse_error err) {
  869|   135k|        assert(err != parse_error::good);
  870|   135k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   135k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   122k|    {
 1879|   122k|        auto stdloc = loc.get<std::locale>();
 1880|   122k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   122k|        grouping = numpunct.grouping();
 1882|   122k|        thousands_sep =
 1883|   122k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 122k]
  ------------------
 1884|   122k|        decimal_point = numpunct.decimal_point();
 1885|   122k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   122k|{
 1816|   122k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 122k, False: 0]
  ------------------
 1817|   122k|        return std::use_facet<Facet>(stdloc);
 1818|   122k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   122k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   526k|{
 1945|   526k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 526k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   526k|    return ranges::next(range.begin());
 1950|   526k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.04M|{
  951|  1.04M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.4k, False: 1.03M]
  |  |  ------------------
  ------------------
  952|  12.4k|        return eof_error::eof;
  953|  12.4k|    }
  954|  1.03M|    return eof_error::good;
  955|  1.04M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.83M|{
  945|  1.83M|    return is_range_eof(r.begin(), r.end());
  946|  1.83M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.83M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.83M|    {
  938|  1.83M|        return begin == end;
  939|  1.83M|    }
  940|  1.83M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   526k|    {
  296|   526k|        ++x;
  297|   526k|        return x;
  298|   526k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  52.3k|    {
 3579|  52.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  52.3k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  52.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 7.70k, False: 44.6k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  7.70k|            else {
 3590|  7.70k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 7.70k]
  ------------------
 3591|  7.70k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  7.70k|            }
 3597|  7.70k|        }
 3598|       |
 3599|  52.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.23k, False: 47.1k]
  ------------------
 3600|  5.23k|            value = T{0};
 3601|  5.23k|            return std::next(prefix_result.iterator);
 3602|  5.23k|        }
 3603|       |
 3604|  47.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  47.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.6k, False: 10.4k]
  |  |  ------------------
  ------------------
 3605|  36.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.12k, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.12k|    }                                                  \
  |  |  |  | 3939|  36.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  32.5k|                    parse_integer_digits_without_thsep(
 3607|  32.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  32.5k|                        prefix_result.parsed_base));
 3609|       |
 3610|  32.5k|            auto buf = make_contiguous_buffer(
 3611|  32.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  32.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  32.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.69k, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.69k|    }                                                  \
  |  |  |  | 3939|  32.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.8k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.8k|            return ranges::next(
 3617|  30.8k|                prefix_result.iterator,
 3618|  30.8k|                ranges::distance(buf.view().begin(), result_it));
 3619|  32.5k|        }
 3620|       |
 3621|  10.4k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  10.4k|            localized_number_formatting_options<CharT>{loc};
 3626|  10.4k|#endif
 3627|       |
 3628|  10.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 594, False: 9.88k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    594|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    594|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    594|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    594|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    594|    }                                                  \
  |  |  |  | 3939|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  9.88k|                parse_integer_digits_with_thsep(
 3630|  9.88k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  9.88k|                    prefix_result.parsed_base, locale_options));
 3632|  9.88k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  9.88k|            parse_digits_result;
 3634|       |
 3635|  9.88k|        auto nothsep_source_view =
 3636|  9.88k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  9.88k|        SCN_TRY(
  ------------------
  |  | 3940|  9.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 440, False: 9.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    440|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    440|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    440|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    440|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    440|    }                                                  \
  |  |  |  | 3939|  9.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  9.44k|            nothsep_source_it,
 3639|  9.44k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  9.44k|                                prefix_result.parsed_base));
 3641|       |
 3642|  9.44k|        return ranges::next(
 3643|  9.44k|            prefix_result.iterator,
 3644|  9.44k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  9.44k|                ranges::ssize(thsep_indices));
 3646|  9.88k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3365|   417k|{
 3366|   417k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   417k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   417k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   417k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 417k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   417k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   417k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   417k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   417k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   417k|        parse_integer_base_prefix(
 3371|   417k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   417k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 41.9k, False: 375k]
  ------------------
 3374|  41.9k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 478, False: 41.5k]
  ------------------
 3375|  41.9k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 30.8k, False: 10.6k]
  ------------------
 3376|  31.3k|            digits_begin_it = base_prefix_begin_it;
 3377|  31.3k|        }
 3378|  10.6k|        else {
 3379|  10.6k|            parsed_zero = false;
 3380|  10.6k|        }
 3381|  41.9k|    }
 3382|   375k|    else {
 3383|   375k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 2.15k, False: 373k]
  ------------------
 3384|   375k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 34.4k, False: 338k]
  ------------------
 3385|  36.5k|            digits_begin_it = base_prefix_begin_it;
 3386|  36.5k|        }
 3387|   375k|    }
 3388|       |
 3389|   417k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 362k, False: 54.9k]
  ------------------
 3390|   362k|        sign = sign_type::plus_sign;
 3391|   362k|    }
 3392|   417k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   417k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   417k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3246|   417k|{
 3247|   417k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   417k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 362k, False: 54.9k]
  ------------------
 3249|   362k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 362k, False: 0]
  ------------------
 3250|   362k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   362k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   362k|    }
 3254|       |
 3255|  54.9k|    auto& it = *r;
 3256|  54.9k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 42.4k, False: 12.4k]
  ------------------
 3257|  42.4k|        return std::pair{it, sign_type::minus_sign};
 3258|  42.4k|    }
 3259|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3260|  54.9k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   417k|{
 2372|   417k|    auto it = read_code_unit(range);
 2373|   417k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 417k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   822k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 822k, False: 362k]
  ------------------
 2378|   822k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.9k, False: 767k]
  ------------------
 2379|  54.9k|            return *it;
 2380|  54.9k|        }
 2381|   822k|    }
 2382|       |
 2383|   362k|    return unexpected(parse_error::error);
 2384|   417k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3332|   417k|{
 3333|   417k|    switch (base) {
 3334|  21.9k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 21.9k, False: 395k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  21.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  21.9k|                    false};
 3338|       |
 3339|  39.3k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 39.3k, False: 378k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  39.3k|            bool zero_parsed = false;
 3342|  39.3k|            auto it = apply_opt(
 3343|  39.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  39.3k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  66.0k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 66.0k, False: 351k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  66.0k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  66.0k|                    false};
 3351|       |
 3352|  71.5k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 71.5k, False: 345k]
  ------------------
 3353|       |            // detect base
 3354|  71.5k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|   218k|        default:
  ------------------
  |  Branch (3356:9): [True: 218k, False: 198k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|   218k|            return {range.begin(), base, false};
 3359|   417k|    }
 3360|   417k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|   127k|{
 2391|   127k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 109k, False: 17.4k]
  ------------------
 2392|   109k|        return range.begin();
 2393|   109k|    }
 2394|  17.4k|    return *result;
 2395|   127k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3283|  92.9k|{
 3284|  92.9k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  92.9k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   340k|{
 2331|   340k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   340k|    else {
 2344|   340k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   340k|            if (ch < 'A' || ch > 'Z') {
 2346|   340k|                return ch;
 2347|   340k|            }
 2348|   340k|            return static_cast<char_type>(ch +
 2349|   340k|                                          static_cast<char_type>('a' - 'A'));
 2350|   340k|        };
 2351|       |
 2352|   340k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.6k, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.6k|    }                                                  \
  |  |  |  | 3939|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|   329k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|   329k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|   329k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 326k, False: 2.59k]
  |  |  ------------------
  ------------------
 2357|   329k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|   329k|                    return ascii_tolower(a) ==
 2359|   329k|                           static_cast<detail::char_t<Range>>(b);
 2360|   329k|                }))) {
 2361|   326k|            return unexpected(parse_error::error);
 2362|   326k|        }
 2363|       |
 2364|  2.59k|        return it;
 2365|   329k|    }
 2366|   340k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|   465k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   465k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 451k, False: 13.7k]
  |  Branch (2345:29): [True: 7.59k, False: 6.18k]
  ------------------
 2346|   458k|                return ch;
 2347|   458k|            }
 2348|  6.18k|            return static_cast<char_type>(ch +
 2349|  6.18k|                                          static_cast<char_type>('a' - 'A'));
 2350|   465k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3297|   110k|{
 3298|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 952, False: 109k]
  ------------------
 3299|    952|        return *r;
 3300|    952|    }
 3301|       |
 3302|   109k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 41.9k, False: 67.1k]
  ------------------
 3303|  41.9k|        zero_parsed = true;
 3304|  41.9k|        return *r;
 3305|  41.9k|    }
 3306|       |
 3307|  67.1k|    return unexpected(parse_error::error);
 3308|   109k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   109k|{
 2246|   109k|    auto it = read_code_unit(range);
 2247|   109k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 108k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   108k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 66.7k, False: 41.9k]
  |  |  ------------------
  ------------------
 2252|   108k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  66.7k|        return unexpected(parse_error::error);
 2254|  66.7k|    }
 2255|       |
 2256|  41.9k|    return *it;
 2257|   108k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3290|   137k|{
 3291|   137k|    return read_matching_string_classic_nocase(range, "0x");
 3292|   137k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3313|  71.5k|{
 3314|  71.5k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 532, False: 71.0k]
  ------------------
 3315|    532|        return {*r, 16, false};
 3316|    532|    }
 3317|  71.0k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 318, False: 70.7k]
  ------------------
 3318|    318|        return {*r, 2, false};
 3319|    318|    }
 3320|  70.7k|    {
 3321|  70.7k|        bool zero_parsed{false};
 3322|  70.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 26.2k, False: 44.4k]
  ------------------
 3323|  26.2k|            return {*r, 8, zero_parsed};
 3324|  26.2k|        }
 3325|  70.7k|    }
 3326|  44.4k|    return {range.begin(), 10, false};
 3327|  70.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3399|   313k|{
 3400|   313k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|   313k|    else {
 3411|   313k|        return read_while1_code_unit(range,
 3412|   313k|                                     [&](char_type ch) noexcept {
 3413|   313k|                                         return char_to_int(ch) < base;
 3414|   313k|                                     })
 3415|   313k|            .transform_error(map_parse_error_to_scan_error(
 3416|   313k|                scan_error::invalid_scanned_value,
 3417|   313k|                "Failed to parse integer: No digits found"));
 3418|   313k|    }
 3419|   313k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   313k|{
 2095|   313k|    auto it = read_while_code_unit(range, pred);
 2096|   313k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 28.7k, False: 284k]
  ------------------
 2097|  28.7k|        return unexpected(parse_error::error);
 2098|  28.7k|    }
 2099|   284k|    return it;
 2100|   313k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   313k|        : m_fptr([](storage fn,
  743|   313k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   313k|              cvref<T> obj = *get<T>(fn);
  745|   313k|              if constexpr (std::is_void_v<R>) {
  746|   313k|                  obj(static_cast<decltype(args)>(args)...);
  747|   313k|              }
  748|   313k|              else {
  749|   313k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   313k|              }
  751|   313k|          }),
  752|   313k|          m_storage(std::addressof(f))
  753|   313k|    {
  754|   313k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.16M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.16M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.16M|              else {
  749|  1.16M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.16M|              }
  751|  1.16M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.16M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.16M|        else if constexpr (std::is_object_v<T>) {
  688|  1.16M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.16M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3412|  1.16M|                                     [&](char_type ch) noexcept {
 3413|  1.16M|                                         return char_to_int(ch) < base;
 3414|  1.16M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   313k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   313k|        {
  662|   313k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3429|  61.3k|{
 3430|  61.3k|    std::basic_string<CharT> output;
 3431|  61.3k|    std::string thsep_indices;
 3432|  61.3k|    auto it = range.begin();
 3433|  61.3k|    bool digit_matched = false;
 3434|   328k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 326k, False: 2.25k]
  ------------------
 3435|   326k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 31.7k, False: 294k]
  ------------------
 3436|  31.7k|            thsep_indices.push_back(
 3437|  31.7k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  31.7k|        }
 3439|   294k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 59.1k, False: 235k]
  ------------------
 3440|  59.1k|            break;
 3441|  59.1k|        }
 3442|   235k|        else {
 3443|   235k|            output.push_back(*it);
 3444|   235k|            digit_matched = true;
 3445|   235k|        }
 3446|   326k|    }
 3447|  61.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 58.0k]
  |  |  ------------------
  ------------------
 3448|  3.29k|        return detail::unexpected_scan_error(
 3449|  3.29k|            scan_error::invalid_scanned_value,
 3450|  3.29k|            "Failed to parse integer: No digits found");
 3451|  3.29k|    }
 3452|  58.0k|    return std::tuple{it, output, thsep_indices};
 3453|  61.3k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   284k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   284k|    else {
 1788|   284k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   284k|    }
 1790|   284k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   284k|    {
 1636|   284k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   284k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   284k|    {
 1720|   284k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   284k|                           ranges::common_range<Range>) {
 1737|   284k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   284k|            auto end_seg = range.end().contiguous_segment();
 1739|   284k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 179k, False: 105k]
  |  |  ------------------
  ------------------
 1740|   284k|                             detail::to_address(end_seg.end()))) {
 1741|   179k|                auto& str = m_storage.emplace();
 1742|   179k|                str.reserve(range.end().position() - range.begin().position());
 1743|   179k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   179k|                m_view = string_view_type{str};
 1745|   179k|                return;
 1746|   179k|            }
 1747|       |
 1748|   105k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   105k|                                                            end_seg.data());
 1750|   105k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   284k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   563k|    {
 1681|   563k|        return m_view;
 1682|   563k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   284k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|   277k|    {
 6105|   277k|        const bool need_skipped_width =
 6106|   277k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 277k]
  |  Branch (6106:33): [True: 0, False: 277k]
  ------------------
 6107|   277k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   277k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 277k]
  ------------------
 6110|   277k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 277k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   277k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 277k, False: 0]
  ------------------
 6119|   277k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 277k]
  ------------------
 6120|   277k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   277k|        return result_type{rng.begin(), 0};
 6144|   277k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   528k|{
 1945|   528k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   528k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 528k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   528k|    return ranges::next(range.begin());
 1950|   528k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.36M|{
  951|  1.36M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 1.35M]
  |  |  ------------------
  ------------------
  952|  12.5k|        return eof_error::eof;
  953|  12.5k|    }
  954|  1.35M|    return eof_error::good;
  955|  1.36M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.36M|{
  945|  1.36M|    return is_range_eof(r.begin(), r.end());
  946|  1.36M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.36M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.36M|    {
  938|  1.36M|        return begin == end;
  939|  1.36M|    }
  940|  1.36M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   528k|    {
  296|   528k|        ++x;
  297|   528k|        return x;
  298|   528k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  52.4k|    {
 3579|  52.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  52.4k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  52.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 7.70k, False: 44.7k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  7.70k|            else {
 3590|  7.70k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 7.70k]
  ------------------
 3591|  7.70k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  7.70k|            }
 3597|  7.70k|        }
 3598|       |
 3599|  52.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.23k, False: 47.2k]
  ------------------
 3600|  5.23k|            value = T{0};
 3601|  5.23k|            return std::next(prefix_result.iterator);
 3602|  5.23k|        }
 3603|       |
 3604|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.7k, False: 10.4k]
  |  |  ------------------
  ------------------
 3605|  36.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 128, False: 36.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    128|    }                                                  \
  |  |  |  | 3939|  36.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  36.6k|                    parse_integer_digits_without_thsep(
 3607|  36.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  36.6k|                        prefix_result.parsed_base));
 3609|       |
 3610|  36.6k|            auto buf = make_contiguous_buffer(
 3611|  36.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  36.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  36.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.81k, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.81k|    }                                                  \
  |  |  |  | 3939|  36.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.8k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.8k|            return ranges::next(
 3617|  30.8k|                prefix_result.iterator,
 3618|  30.8k|                ranges::distance(buf.view().begin(), result_it));
 3619|  36.6k|        }
 3620|       |
 3621|  10.4k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  10.4k|            localized_number_formatting_options<CharT>{loc};
 3626|  10.4k|#endif
 3627|       |
 3628|  10.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 630, False: 9.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    630|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    630|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    630|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    630|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    630|    }                                                  \
  |  |  |  | 3939|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  9.86k|                parse_integer_digits_with_thsep(
 3630|  9.86k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  9.86k|                    prefix_result.parsed_base, locale_options));
 3632|  9.86k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  9.86k|            parse_digits_result;
 3634|       |
 3635|  9.86k|        auto nothsep_source_view =
 3636|  9.86k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  9.86k|        SCN_TRY(
  ------------------
  |  | 3940|  9.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 436, False: 9.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    436|    }                                                  \
  |  |  |  | 3939|  9.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  9.43k|            nothsep_source_it,
 3639|  9.43k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  9.43k|                                prefix_result.parsed_base));
 3641|       |
 3642|  9.43k|        return ranges::next(
 3643|  9.43k|            prefix_result.iterator,
 3644|  9.43k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  9.43k|                ranges::ssize(thsep_indices));
 3646|  9.86k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|   419k|{
 3366|   419k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 419k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   419k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   419k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   419k|        parse_integer_base_prefix(
 3371|   419k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   419k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 41.9k, False: 377k]
  ------------------
 3374|  41.9k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 478, False: 41.4k]
  ------------------
 3375|  41.9k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 30.8k, False: 10.6k]
  ------------------
 3376|  31.3k|            digits_begin_it = base_prefix_begin_it;
 3377|  31.3k|        }
 3378|  10.6k|        else {
 3379|  10.6k|            parsed_zero = false;
 3380|  10.6k|        }
 3381|  41.9k|    }
 3382|   377k|    else {
 3383|   377k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 2.15k, False: 375k]
  ------------------
 3384|   377k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 35.2k, False: 339k]
  ------------------
 3385|  37.3k|            digits_begin_it = base_prefix_begin_it;
 3386|  37.3k|        }
 3387|   377k|    }
 3388|       |
 3389|   419k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 364k, False: 54.9k]
  ------------------
 3390|   364k|        sign = sign_type::plus_sign;
 3391|   364k|    }
 3392|   419k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   419k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   419k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|   419k|{
 3247|   419k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   419k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 364k, False: 54.9k]
  ------------------
 3249|   364k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 364k, False: 0]
  ------------------
 3250|   364k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   364k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   364k|    }
 3254|       |
 3255|  54.9k|    auto& it = *r;
 3256|  54.9k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 42.5k, False: 12.4k]
  ------------------
 3257|  42.5k|        return std::pair{it, sign_type::minus_sign};
 3258|  42.5k|    }
 3259|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3260|  54.9k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   419k|{
 2372|   419k|    auto it = read_code_unit(range);
 2373|   419k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   825k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 825k, False: 364k]
  ------------------
 2378|   825k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.9k, False: 770k]
  ------------------
 2379|  54.9k|            return *it;
 2380|  54.9k|        }
 2381|   825k|    }
 2382|       |
 2383|   364k|    return unexpected(parse_error::error);
 2384|   419k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|   419k|{
 3333|   419k|    switch (base) {
 3334|  22.0k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 22.0k, False: 397k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  22.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  22.0k|                    false};
 3338|       |
 3339|  39.4k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 39.4k, False: 379k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  39.4k|            bool zero_parsed = false;
 3342|  39.4k|            auto it = apply_opt(
 3343|  39.4k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  39.4k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  66.0k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 66.0k, False: 353k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  66.0k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  66.0k|                    false};
 3351|       |
 3352|  71.6k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 71.6k, False: 347k]
  ------------------
 3353|       |            // detect base
 3354|  71.6k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|   219k|        default:
  ------------------
  |  Branch (3356:9): [True: 219k, False: 199k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|   219k|            return {range.begin(), base, false};
 3359|   419k|    }
 3360|   419k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|   127k|{
 2391|   127k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 110k, False: 17.4k]
  ------------------
 2392|   110k|        return range.begin();
 2393|   110k|    }
 2394|  17.4k|    return *result;
 2395|   127k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3283|  93.1k|{
 3284|  93.1k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  93.1k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   341k|{
 2331|   341k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|   341k|                  std::is_same_v<char_type, char>) {
 2335|   341k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 11.8k, False: 329k]
  ------------------
 2336|  11.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  11.8k|        }
 2338|   329k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 326k, False: 2.59k]
  ------------------
 2339|   326k|            return unexpected(parse_error::error);
 2340|   326k|        }
 2341|  2.59k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|   341k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3297|   110k|{
 3298|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 952, False: 109k]
  ------------------
 3299|    952|        return *r;
 3300|    952|    }
 3301|       |
 3302|   109k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 41.9k, False: 67.3k]
  ------------------
 3303|  41.9k|        zero_parsed = true;
 3304|  41.9k|        return *r;
 3305|  41.9k|    }
 3306|       |
 3307|  67.3k|    return unexpected(parse_error::error);
 3308|   109k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   109k|{
 2246|   109k|    auto it = read_code_unit(range);
 2247|   109k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 108k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   108k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 66.9k, False: 41.9k]
  |  |  ------------------
  ------------------
 2252|   108k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  66.9k|        return unexpected(parse_error::error);
 2254|  66.9k|    }
 2255|       |
 2256|  41.9k|    return *it;
 2257|   108k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|   137k|{
 3291|   137k|    return read_matching_string_classic_nocase(range, "0x");
 3292|   137k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3313|  71.6k|{
 3314|  71.6k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 532, False: 71.1k]
  ------------------
 3315|    532|        return {*r, 16, false};
 3316|    532|    }
 3317|  71.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 318, False: 70.7k]
  ------------------
 3318|    318|        return {*r, 2, false};
 3319|    318|    }
 3320|  70.7k|    {
 3321|  70.7k|        bool zero_parsed{false};
 3322|  70.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 26.2k, False: 44.5k]
  ------------------
 3323|  26.2k|            return {*r, 8, zero_parsed};
 3324|  26.2k|        }
 3325|  70.7k|    }
 3326|  44.5k|    return {range.begin(), 10, false};
 3327|  70.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|   315k|{
 3400|   315k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|   315k|    if constexpr (ranges::contiguous_range<Range>) {
 3403|   315k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 891, False: 314k]
  |  |  ------------------
  ------------------
 3404|    891|            return detail::unexpected_scan_error(
 3405|    891|                scan_error::invalid_scanned_value,
 3406|    891|                "Failed to parse integer: No digits found");
 3407|    891|        }
 3408|   314k|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|   315k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3429|  61.5k|{
 3430|  61.5k|    std::basic_string<CharT> output;
 3431|  61.5k|    std::string thsep_indices;
 3432|  61.5k|    auto it = range.begin();
 3433|  61.5k|    bool digit_matched = false;
 3434|   328k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 325k, False: 2.21k]
  ------------------
 3435|   325k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 31.6k, False: 294k]
  ------------------
 3436|  31.6k|            thsep_indices.push_back(
 3437|  31.6k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  31.6k|        }
 3439|   294k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 59.2k, False: 234k]
  ------------------
 3440|  59.2k|            break;
 3441|  59.2k|        }
 3442|   234k|        else {
 3443|   234k|            output.push_back(*it);
 3444|   234k|            digit_matched = true;
 3445|   234k|        }
 3446|   325k|    }
 3447|  61.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.53k, False: 57.9k]
  |  |  ------------------
  ------------------
 3448|  3.53k|        return detail::unexpected_scan_error(
 3449|  3.53k|            scan_error::invalid_scanned_value,
 3450|  3.53k|            "Failed to parse integer: No digits found");
 3451|  3.53k|    }
 3452|  57.9k|    return std::tuple{it, output, thsep_indices};
 3453|  61.5k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   314k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   314k|                  ranges::sized_range<Range>) {
 1785|   314k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   314k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   314k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   314k|    {
 1589|   314k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.45M|    {
 1602|  1.45M|        return sv;
 1603|  1.45M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|   428k|{
 3055|   428k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 428k, False: 0]
  ------------------
 3056|   428k|        auto it = read_while_classic_space(range);
 3057|   428k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   428k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.40k, False: 419k]
  |  |  ------------------
  ------------------
 3059|  9.40k|            return unexpected(e);
 3060|  9.40k|        }
 3061|       |
 3062|   419k|        return it;
 3063|   428k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   428k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   428k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   428k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   428k|        auto buf = make_contiguous_buffer(range);
 2220|   428k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   428k|        return ranges::next(range.begin(),
 2222|   428k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   428k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   428k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   428k|                  ranges::sized_range<Range>) {
 1785|   428k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   428k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   428k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   428k|    {
 1589|   428k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   663k|    {
  304|   663k|        ranges::advance(x, n);
  305|   663k|        return x;
  306|   663k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.06M|    {
  268|  1.06M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.06M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.06M|    {
  181|  2.62M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.55M, False: 1.06M]
  ------------------
  182|  1.55M|            ++i;
  183|  1.55M|        }
  184|  1.06M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  53.8k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  53.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  53.8k|            auto rd = make_reader<T, char_type>();
 6225|  53.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  53.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 53.8k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  53.8k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  53.8k|                return impl(rd, range, value);
 6230|  53.8k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  53.8k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|   668k|    {
 3145|   668k|        reader_error_handler eh{};
 3146|   668k|        get_derived().check_specs_impl(specs, eh);
 3147|   668k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   668k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 668k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|   668k|        return {};
 3152|   668k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3156|   668k|    {
 3157|   668k|        return static_cast<Derived&>(*this);
 3158|   668k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|   668k|    {
 3525|   668k|        detail::check_int_type_specs(specs, eh);
 3526|   668k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  53.8k|    {
 6150|  53.8k|        const bool need_skipped_width =
 6151|  53.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 53.8k]
  |  Branch (6151:33): [True: 0, False: 53.8k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  53.8k|        auto it = rng.begin();
 6155|  53.8k|        std::ptrdiff_t prefix_width = 0;
 6156|  53.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 53.8k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  53.8k|        else {
 6164|  53.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  53.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.52k, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.52k|    }                                                  \
  |  |  |  | 3939|  53.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  52.3k|            std::tie(it, prefix_width) = prefix_result;
 6166|  52.3k|        }
 6167|  52.3k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  52.3k|        std::ptrdiff_t value_width = 0;
 6171|  52.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 52.3k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  52.3k|        else {
 6187|  52.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.85k, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.85k|    }                                                  \
  |  | 3939|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  45.4k|                                             specs, value, loc));
 6189|       |
 6190|  45.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 45.4k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  45.4k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  45.4k|        std::ptrdiff_t postfix_width = 0;
 6199|  45.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 44.4k, False: 1.04k]
  ------------------
 6200|  44.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  44.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  44.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  44.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  44.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  44.4k|                                 value_width));
 6204|  44.4k|            std::tie(it, postfix_width) = postfix_result;
 6205|  44.4k|        }
 6206|       |
 6207|  45.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  45.4k|            specs, prefix_width, value_width, postfix_width));
 6209|  45.4k|        return it;
 6210|  45.4k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3139|  1.41M|    {
 3140|  1.41M|        return true;
 3141|  1.41M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  63.9k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  63.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  63.9k|            auto rd = make_reader<T, char_type>();
 6225|  63.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  63.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 63.9k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  63.9k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  63.9k|                return impl(rd, range, value);
 6230|  63.9k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  63.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  63.9k|    {
 6150|  63.9k|        const bool need_skipped_width =
 6151|  63.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 63.9k]
  |  Branch (6151:33): [True: 0, False: 63.9k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  63.9k|        auto it = rng.begin();
 6155|  63.9k|        std::ptrdiff_t prefix_width = 0;
 6156|  63.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 63.9k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  63.9k|        else {
 6164|  63.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  63.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.00k, False: 61.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.00k|    }                                                  \
  |  |  |  | 3939|  63.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  61.9k|            std::tie(it, prefix_width) = prefix_result;
 6166|  61.9k|        }
 6167|  61.9k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  61.9k|        std::ptrdiff_t value_width = 0;
 6171|  61.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 61.9k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  61.9k|        else {
 6187|  61.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  61.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  61.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.37k, False: 55.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.37k|    }                                                  \
  |  | 3939|  61.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  55.5k|                                             specs, value, loc));
 6189|       |
 6190|  55.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 55.5k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  55.5k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  55.5k|        std::ptrdiff_t postfix_width = 0;
 6199|  55.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 54.1k, False: 1.39k]
  ------------------
 6200|  54.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  54.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  54.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  54.1k|                                 value_width));
 6204|  54.1k|            std::tie(it, postfix_width) = postfix_result;
 6205|  54.1k|        }
 6206|       |
 6207|  55.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  55.5k|            specs, prefix_width, value_width, postfix_width));
 6209|  55.5k|        return it;
 6210|  55.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  61.9k|    {
 3579|  61.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  61.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 61.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  61.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  61.9k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  61.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.06k, False: 53.8k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.06k|            else {
 3590|  8.06k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.06k]
  ------------------
 3591|  8.06k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.06k|            }
 3597|  8.06k|        }
 3598|       |
 3599|  61.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.51k, False: 56.4k]
  ------------------
 3600|  5.51k|            value = T{0};
 3601|  5.51k|            return std::next(prefix_result.iterator);
 3602|  5.51k|        }
 3603|       |
 3604|  56.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.3k, False: 12.0k]
  |  |  ------------------
  ------------------
 3605|  44.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.64k, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.64k|    }                                                  \
  |  |  |  | 3939|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  39.6k|                    parse_integer_digits_without_thsep(
 3607|  39.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  39.6k|                        prefix_result.parsed_base));
 3609|       |
 3610|  39.6k|            auto buf = make_contiguous_buffer(
 3611|  39.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  39.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 802, False: 38.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    802|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    802|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    802|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    802|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    802|    }                                                  \
  |  |  |  | 3939|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  38.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  38.8k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  38.8k|            return ranges::next(
 3617|  38.8k|                prefix_result.iterator,
 3618|  38.8k|                ranges::distance(buf.view().begin(), result_it));
 3619|  39.6k|        }
 3620|       |
 3621|  12.0k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.0k|#endif
 3627|       |
 3628|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 712, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    712|    }                                                  \
  |  |  |  | 3939|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.3k|                parse_integer_digits_with_thsep(
 3630|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.3k|                    prefix_result.parsed_base, locale_options));
 3632|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.3k|            parse_digits_result;
 3634|       |
 3635|  11.3k|        auto nothsep_source_view =
 3636|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.3k|        SCN_TRY(
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.1k|            nothsep_source_it,
 3639|  11.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.1k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.1k|        return ranges::next(
 3643|  11.1k|            prefix_result.iterator,
 3644|  11.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.1k|                ranges::ssize(thsep_indices));
 3646|  11.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  62.0k|    {
 3579|  62.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  62.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  62.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.05k, False: 53.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.05k|            else {
 3590|  8.05k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.05k]
  ------------------
 3591|  8.05k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.05k|            }
 3597|  8.05k|        }
 3598|       |
 3599|  62.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.51k, False: 56.4k]
  ------------------
 3600|  5.51k|            value = T{0};
 3601|  5.51k|            return std::next(prefix_result.iterator);
 3602|  5.51k|        }
 3603|       |
 3604|  56.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.3k, False: 12.1k]
  |  |  ------------------
  ------------------
 3605|  44.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 192, False: 44.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    192|    }                                                  \
  |  |  |  | 3939|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  44.1k|                    parse_integer_digits_without_thsep(
 3607|  44.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  44.1k|                        prefix_result.parsed_base));
 3609|       |
 3610|  44.1k|            auto buf = make_contiguous_buffer(
 3611|  44.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  44.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  44.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.39k, False: 38.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.39k|    }                                                  \
  |  |  |  | 3939|  44.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  38.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  38.7k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  38.7k|            return ranges::next(
 3617|  38.7k|                prefix_result.iterator,
 3618|  38.7k|                ranges::distance(buf.view().begin(), result_it));
 3619|  44.1k|        }
 3620|       |
 3621|  12.1k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.1k|#endif
 3627|       |
 3628|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 756, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    756|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.3k|                parse_integer_digits_with_thsep(
 3630|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.3k|                    prefix_result.parsed_base, locale_options));
 3632|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.3k|            parse_digits_result;
 3634|       |
 3635|  11.3k|        auto nothsep_source_view =
 3636|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.3k|        SCN_TRY(
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.1k|            nothsep_source_it,
 3639|  11.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.1k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.1k|        return ranges::next(
 3643|  11.1k|            prefix_result.iterator,
 3644|  11.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.1k|                ranges::ssize(thsep_indices));
 3646|  11.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  65.0k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  65.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  65.0k|            auto rd = make_reader<T, char_type>();
 6225|  65.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  65.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  65.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 65.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  65.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 65.0k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  65.0k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  65.0k|                return impl(rd, range, value);
 6230|  65.0k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  65.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  65.0k|    {
 6150|  65.0k|        const bool need_skipped_width =
 6151|  65.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 65.0k]
  |  Branch (6151:33): [True: 0, False: 65.0k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  65.0k|        auto it = rng.begin();
 6155|  65.0k|        std::ptrdiff_t prefix_width = 0;
 6156|  65.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 65.0k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  65.0k|        else {
 6164|  65.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  65.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  65.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  65.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  65.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.20k, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.20k|    }                                                  \
  |  |  |  | 3939|  65.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  62.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  62.8k|        }
 6167|  62.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  62.8k|        std::ptrdiff_t value_width = 0;
 6171|  62.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 62.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  62.8k|        else {
 6187|  62.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.17k, False: 56.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.17k|    }                                                  \
  |  | 3939|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  56.7k|                                             specs, value, loc));
 6189|       |
 6190|  56.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 56.7k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  56.7k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  56.7k|        std::ptrdiff_t postfix_width = 0;
 6199|  56.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 55.1k, False: 1.55k]
  ------------------
 6200|  55.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  55.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  55.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  55.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  55.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  55.1k|                                 value_width));
 6204|  55.1k|            std::tie(it, postfix_width) = postfix_result;
 6205|  55.1k|        }
 6206|       |
 6207|  56.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  56.7k|            specs, prefix_width, value_width, postfix_width));
 6209|  56.7k|        return it;
 6210|  56.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  62.8k|    {
 3579|  62.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  62.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  62.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.26k, False: 54.6k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.26k|            else {
 3590|  8.26k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.26k]
  ------------------
 3591|  8.26k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.26k|            }
 3597|  8.26k|        }
 3598|       |
 3599|  62.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.55k, False: 57.3k]
  ------------------
 3600|  5.55k|            value = T{0};
 3601|  5.55k|            return std::next(prefix_result.iterator);
 3602|  5.55k|        }
 3603|       |
 3604|  57.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  57.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.0k, False: 12.2k]
  |  |  ------------------
  ------------------
 3605|  45.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  45.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.87k, False: 40.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.87k|    }                                                  \
  |  |  |  | 3939|  45.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  40.1k|                    parse_integer_digits_without_thsep(
 3607|  40.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  40.1k|                        prefix_result.parsed_base));
 3609|       |
 3610|  40.1k|            auto buf = make_contiguous_buffer(
 3611|  40.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  40.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  40.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  40.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  40.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  40.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 412, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    412|    }                                                  \
  |  |  |  | 3939|  40.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  39.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  39.7k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  39.7k|            return ranges::next(
 3617|  39.7k|                prefix_result.iterator,
 3618|  39.7k|                ranges::distance(buf.view().begin(), result_it));
 3619|  40.1k|        }
 3620|       |
 3621|  12.2k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.2k|#endif
 3627|       |
 3628|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 770, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    770|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    770|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    770|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    770|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    770|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.5k|                parse_integer_digits_with_thsep(
 3630|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.5k|                    prefix_result.parsed_base, locale_options));
 3632|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.5k|            parse_digits_result;
 3634|       |
 3635|  11.5k|        auto nothsep_source_view =
 3636|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.5k|        SCN_TRY(
  ------------------
  |  | 3940|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 118, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    118|    }                                                  \
  |  |  |  | 3939|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.4k|            nothsep_source_it,
 3639|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.4k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.4k|        return ranges::next(
 3643|  11.4k|            prefix_result.iterator,
 3644|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.4k|                ranges::ssize(thsep_indices));
 3646|  11.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  62.9k|    {
 3579|  62.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  62.9k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  62.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.25k, False: 54.7k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.25k|            else {
 3590|  8.25k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.25k]
  ------------------
 3591|  8.25k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.25k|            }
 3597|  8.25k|        }
 3598|       |
 3599|  62.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.55k, False: 57.4k]
  ------------------
 3600|  5.55k|            value = T{0};
 3601|  5.55k|            return std::next(prefix_result.iterator);
 3602|  5.55k|        }
 3603|       |
 3604|  57.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  57.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.1k, False: 12.3k]
  |  |  ------------------
  ------------------
 3605|  45.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 44.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  44.8k|                    parse_integer_digits_without_thsep(
 3607|  44.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  44.8k|                        prefix_result.parsed_base));
 3609|       |
 3610|  44.8k|            auto buf = make_contiguous_buffer(
 3611|  44.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  44.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  44.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.21k, False: 39.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.21k|    }                                                  \
  |  |  |  | 3939|  44.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  39.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  39.6k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  39.6k|            return ranges::next(
 3617|  39.6k|                prefix_result.iterator,
 3618|  39.6k|                ranges::distance(buf.view().begin(), result_it));
 3619|  44.8k|        }
 3620|       |
 3621|  12.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.3k|#endif
 3627|       |
 3628|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 816, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    816|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    816|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    816|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    816|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    816|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.5k|                parse_integer_digits_with_thsep(
 3630|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.5k|                    prefix_result.parsed_base, locale_options));
 3632|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.5k|            parse_digits_result;
 3634|       |
 3635|  11.5k|        auto nothsep_source_view =
 3636|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.5k|        SCN_TRY(
  ------------------
  |  | 3940|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.3k|            nothsep_source_it,
 3639|  11.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.3k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.3k|        return ranges::next(
 3643|  11.3k|            prefix_result.iterator,
 3644|  11.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.3k|                ranges::ssize(thsep_indices));
 3646|  11.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  47.4k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  47.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  47.4k|            auto rd = make_reader<T, char_type>();
 6225|  47.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  47.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 47.4k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  47.4k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  47.4k|                return impl(rd, range, value);
 6230|  47.4k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  47.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  47.4k|    {
 6150|  47.4k|        const bool need_skipped_width =
 6151|  47.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 47.4k]
  |  Branch (6151:33): [True: 0, False: 47.4k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  47.4k|        auto it = rng.begin();
 6155|  47.4k|        std::ptrdiff_t prefix_width = 0;
 6156|  47.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 47.4k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  47.4k|        else {
 6164|  47.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.15k, False: 46.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  46.3k|            std::tie(it, prefix_width) = prefix_result;
 6166|  46.3k|        }
 6167|  46.3k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  46.3k|        std::ptrdiff_t value_width = 0;
 6171|  46.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 46.3k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  46.3k|        else {
 6187|  46.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.22k, False: 39.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.22k|    }                                                  \
  |  | 3939|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  39.0k|                                             specs, value, loc));
 6189|       |
 6190|  39.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 39.0k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  39.0k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  39.0k|        std::ptrdiff_t postfix_width = 0;
 6199|  39.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 38.3k, False: 776]
  ------------------
 6200|  38.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  38.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  38.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  38.3k|                                 value_width));
 6204|  38.3k|            std::tie(it, postfix_width) = postfix_result;
 6205|  38.3k|        }
 6206|       |
 6207|  39.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  39.0k|            specs, prefix_width, value_width, postfix_width));
 6209|  39.0k|        return it;
 6210|  39.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  46.3k|    {
 3579|  46.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  46.3k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  46.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 2.94k, False: 43.3k]
  ------------------
 3583|  2.94k|            if constexpr (!std::is_signed_v<T>) {
 3584|  2.94k|                return detail::unexpected_scan_error(
 3585|  2.94k|                    scan_error::invalid_scanned_value,
 3586|  2.94k|                    "Unexpected '-' sign when parsing an "
 3587|  2.94k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  2.94k|        }
 3598|       |
 3599|  46.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 4.81k, False: 41.5k]
  ------------------
 3600|  4.81k|            value = T{0};
 3601|  4.81k|            return std::next(prefix_result.iterator);
 3602|  4.81k|        }
 3603|       |
 3604|  41.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 30.3k, False: 11.1k]
  |  |  ------------------
  ------------------
 3605|  30.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.79k, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.79k|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  27.5k|                    parse_integer_digits_without_thsep(
 3607|  27.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  27.5k|                        prefix_result.parsed_base));
 3609|       |
 3610|  27.5k|            auto buf = make_contiguous_buffer(
 3611|  27.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  27.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 872, False: 26.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    872|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    872|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    872|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    872|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    872|    }                                                  \
  |  |  |  | 3939|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  26.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  26.6k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  26.6k|            return ranges::next(
 3617|  26.6k|                prefix_result.iterator,
 3618|  26.6k|                ranges::distance(buf.view().begin(), result_it));
 3619|  27.5k|        }
 3620|       |
 3621|  11.1k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  11.1k|            localized_number_formatting_options<CharT>{loc};
 3626|  11.1k|#endif
 3627|       |
 3628|  11.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 378, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    378|    }                                                  \
  |  |  |  | 3939|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  10.8k|                parse_integer_digits_with_thsep(
 3630|  10.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  10.8k|                    prefix_result.parsed_base, locale_options));
 3632|  10.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  10.8k|            parse_digits_result;
 3634|       |
 3635|  10.8k|        auto nothsep_source_view =
 3636|  10.8k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  10.8k|        SCN_TRY(
  ------------------
  |  | 3940|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 236, False: 10.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    236|    }                                                  \
  |  |  |  | 3939|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  10.5k|            nothsep_source_it,
 3639|  10.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  10.5k|                                prefix_result.parsed_base));
 3641|       |
 3642|  10.5k|        return ranges::next(
 3643|  10.5k|            prefix_result.iterator,
 3644|  10.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  10.5k|                ranges::ssize(thsep_indices));
 3646|  10.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  46.4k|    {
 3579|  46.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  46.4k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  46.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 2.93k, False: 43.4k]
  ------------------
 3583|  2.93k|            if constexpr (!std::is_signed_v<T>) {
 3584|  2.93k|                return detail::unexpected_scan_error(
 3585|  2.93k|                    scan_error::invalid_scanned_value,
 3586|  2.93k|                    "Unexpected '-' sign when parsing an "
 3587|  2.93k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  2.93k|        }
 3598|       |
 3599|  46.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 4.81k, False: 41.5k]
  ------------------
 3600|  4.81k|            value = T{0};
 3601|  4.81k|            return std::next(prefix_result.iterator);
 3602|  4.81k|        }
 3603|       |
 3604|  41.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 30.3k, False: 11.2k]
  |  |  ------------------
  ------------------
 3605|  30.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  30.3k|                    parse_integer_digits_without_thsep(
 3607|  30.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  30.3k|                        prefix_result.parsed_base));
 3609|       |
 3610|  30.3k|            auto buf = make_contiguous_buffer(
 3611|  30.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  30.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.73k, False: 26.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.73k|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  26.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  26.6k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  26.6k|            return ranges::next(
 3617|  26.6k|                prefix_result.iterator,
 3618|  26.6k|                ranges::distance(buf.view().begin(), result_it));
 3619|  30.3k|        }
 3620|       |
 3621|  11.2k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  11.2k|            localized_number_formatting_options<CharT>{loc};
 3626|  11.2k|#endif
 3627|       |
 3628|  11.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 412, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    412|    }                                                  \
  |  |  |  | 3939|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  10.8k|                parse_integer_digits_with_thsep(
 3630|  10.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  10.8k|                    prefix_result.parsed_base, locale_options));
 3632|  10.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  10.8k|            parse_digits_result;
 3634|       |
 3635|  10.8k|        auto nothsep_source_view =
 3636|  10.8k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  10.8k|        SCN_TRY(
  ------------------
  |  | 3940|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 232, False: 10.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    232|    }                                                  \
  |  |  |  | 3939|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  10.5k|            nothsep_source_it,
 3639|  10.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  10.5k|                                prefix_result.parsed_base));
 3641|       |
 3642|  10.5k|        return ranges::next(
 3643|  10.5k|            prefix_result.iterator,
 3644|  10.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  10.5k|                ranges::ssize(thsep_indices));
 3646|  10.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  51.6k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  51.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  51.6k|            auto rd = make_reader<T, char_type>();
 6225|  51.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  51.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 51.6k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  51.6k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  51.6k|                return impl(rd, range, value);
 6230|  51.6k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  51.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  51.6k|    {
 6150|  51.6k|        const bool need_skipped_width =
 6151|  51.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 51.6k]
  |  Branch (6151:33): [True: 0, False: 51.6k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  51.6k|        auto it = rng.begin();
 6155|  51.6k|        std::ptrdiff_t prefix_width = 0;
 6156|  51.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 51.6k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  51.6k|        else {
 6164|  51.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.40k, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.40k|    }                                                  \
  |  |  |  | 3939|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6166|  50.2k|        }
 6167|  50.2k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  50.2k|        std::ptrdiff_t value_width = 0;
 6171|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 50.2k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  50.2k|        else {
 6187|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.97k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.97k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  43.3k|                                             specs, value, loc));
 6189|       |
 6190|  43.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 43.3k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  43.3k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  43.3k|        std::ptrdiff_t postfix_width = 0;
 6199|  43.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 42.3k, False: 950]
  ------------------
 6200|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  42.3k|                                 value_width));
 6204|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6205|  42.3k|        }
 6206|       |
 6207|  43.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  43.3k|            specs, prefix_width, value_width, postfix_width));
 6209|  43.3k|        return it;
 6210|  43.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  50.2k|    {
 3579|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  50.2k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.03k, False: 47.2k]
  ------------------
 3583|  3.03k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.03k|                return detail::unexpected_scan_error(
 3585|  3.03k|                    scan_error::invalid_scanned_value,
 3586|  3.03k|                    "Unexpected '-' sign when parsing an "
 3587|  3.03k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.03k|        }
 3598|       |
 3599|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 45.2k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  45.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.1k, False: 12.1k]
  |  |  ------------------
  ------------------
 3605|  33.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.97k, False: 30.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.97k|    }                                                  \
  |  |  |  | 3939|  33.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  30.2k|                    parse_integer_digits_without_thsep(
 3607|  30.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  30.2k|                        prefix_result.parsed_base));
 3609|       |
 3610|  30.2k|            auto buf = make_contiguous_buffer(
 3611|  30.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  30.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 428, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    428|    }                                                  \
  |  |  |  | 3939|  30.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  29.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  29.7k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  29.7k|            return ranges::next(
 3617|  29.7k|                prefix_result.iterator,
 3618|  29.7k|                ranges::distance(buf.view().begin(), result_it));
 3619|  30.2k|        }
 3620|       |
 3621|  12.1k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.1k|#endif
 3627|       |
 3628|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 410, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    410|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.7k|                parse_integer_digits_with_thsep(
 3630|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.7k|                    prefix_result.parsed_base, locale_options));
 3632|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.7k|            parse_digits_result;
 3634|       |
 3635|  11.7k|        auto nothsep_source_view =
 3636|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.7k|        SCN_TRY(
  ------------------
  |  | 3940|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 128, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    128|    }                                                  \
  |  |  |  | 3939|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.5k|            nothsep_source_it,
 3639|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.5k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.5k|        return ranges::next(
 3643|  11.5k|            prefix_result.iterator,
 3644|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.5k|                ranges::ssize(thsep_indices));
 3646|  11.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  50.3k|    {
 3579|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  50.3k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.02k, False: 47.3k]
  ------------------
 3583|  3.02k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.02k|                return detail::unexpected_scan_error(
 3585|  3.02k|                    scan_error::invalid_scanned_value,
 3586|  3.02k|                    "Unexpected '-' sign when parsing an "
 3587|  3.02k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.02k|        }
 3598|       |
 3599|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 45.3k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  45.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.2k, False: 12.1k]
  |  |  ------------------
  ------------------
 3605|  33.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  33.1k|                    parse_integer_digits_without_thsep(
 3607|  33.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  33.1k|                        prefix_result.parsed_base));
 3609|       |
 3610|  33.1k|            auto buf = make_contiguous_buffer(
 3611|  33.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  33.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.48k, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.48k|    }                                                  \
  |  |  |  | 3939|  33.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  29.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  29.6k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  29.6k|            return ranges::next(
 3617|  29.6k|                prefix_result.iterator,
 3618|  29.6k|                ranges::distance(buf.view().begin(), result_it));
 3619|  33.1k|        }
 3620|       |
 3621|  12.1k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.1k|#endif
 3627|       |
 3628|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 448, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    448|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.6k|                parse_integer_digits_with_thsep(
 3630|  11.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.6k|                    prefix_result.parsed_base, locale_options));
 3632|  11.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.6k|            parse_digits_result;
 3634|       |
 3635|  11.6k|        auto nothsep_source_view =
 3636|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.6k|        SCN_TRY(
  ------------------
  |  | 3940|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 126, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    126|    }                                                  \
  |  |  |  | 3939|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.5k|            nothsep_source_it,
 3639|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.5k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.5k|        return ranges::next(
 3643|  11.5k|            prefix_result.iterator,
 3644|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.5k|                ranges::ssize(thsep_indices));
 3646|  11.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  52.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  52.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  52.2k|            auto rd = make_reader<T, char_type>();
 6225|  52.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  52.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 52.2k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  52.2k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  52.2k|                return impl(rd, range, value);
 6230|  52.2k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  52.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  52.2k|    {
 6150|  52.2k|        const bool need_skipped_width =
 6151|  52.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 52.2k]
  |  Branch (6151:33): [True: 0, False: 52.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  52.2k|        auto it = rng.begin();
 6155|  52.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  52.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 52.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  52.2k|        else {
 6164|  52.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.51k, False: 50.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.51k|    }                                                  \
  |  |  |  | 3939|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  50.7k|            std::tie(it, prefix_width) = prefix_result;
 6166|  50.7k|        }
 6167|  50.7k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  50.7k|        std::ptrdiff_t value_width = 0;
 6171|  50.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 50.7k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  50.7k|        else {
 6187|  50.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.86k, False: 43.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.86k|    }                                                  \
  |  | 3939|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  43.9k|                                             specs, value, loc));
 6189|       |
 6190|  43.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 43.9k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  43.9k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  43.9k|        std::ptrdiff_t postfix_width = 0;
 6199|  43.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 42.8k, False: 1.05k]
  ------------------
 6200|  42.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  42.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  42.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  42.8k|                                 value_width));
 6204|  42.8k|            std::tie(it, postfix_width) = postfix_result;
 6205|  42.8k|        }
 6206|       |
 6207|  43.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  43.9k|            specs, prefix_width, value_width, postfix_width));
 6209|  43.9k|        return it;
 6210|  43.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  50.7k|    {
 3579|  50.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  50.7k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  50.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.12k, False: 47.6k]
  ------------------
 3583|  3.12k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.12k|                return detail::unexpected_scan_error(
 3585|  3.12k|                    scan_error::invalid_scanned_value,
 3586|  3.12k|                    "Unexpected '-' sign when parsing an "
 3587|  3.12k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.12k|        }
 3598|       |
 3599|  50.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 45.7k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  45.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.4k, False: 12.3k]
  |  |  ------------------
  ------------------
 3605|  33.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.02k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.02k|    }                                                  \
  |  |  |  | 3939|  33.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  30.4k|                    parse_integer_digits_without_thsep(
 3607|  30.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  30.4k|                        prefix_result.parsed_base));
 3609|       |
 3610|  30.4k|            auto buf = make_contiguous_buffer(
 3611|  30.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  30.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 216, False: 30.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    216|    }                                                  \
  |  |  |  | 3939|  30.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.2k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.2k|            return ranges::next(
 3617|  30.2k|                prefix_result.iterator,
 3618|  30.2k|                ranges::distance(buf.view().begin(), result_it));
 3619|  30.4k|        }
 3620|       |
 3621|  12.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.3k|#endif
 3627|       |
 3628|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 430, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    430|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.8k|                parse_integer_digits_with_thsep(
 3630|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.8k|                    prefix_result.parsed_base, locale_options));
 3632|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.8k|            parse_digits_result;
 3634|       |
 3635|  11.8k|        auto nothsep_source_view =
 3636|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.8k|        SCN_TRY(
  ------------------
  |  | 3940|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.8k|            nothsep_source_it,
 3639|  11.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.8k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.8k|        return ranges::next(
 3643|  11.8k|            prefix_result.iterator,
 3644|  11.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.8k|                ranges::ssize(thsep_indices));
 3646|  11.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  50.8k|    {
 3579|  50.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  50.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  50.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.12k, False: 47.7k]
  ------------------
 3583|  3.12k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.12k|                return detail::unexpected_scan_error(
 3585|  3.12k|                    scan_error::invalid_scanned_value,
 3586|  3.12k|                    "Unexpected '-' sign when parsing an "
 3587|  3.12k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.12k|        }
 3598|       |
 3599|  50.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 45.8k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  45.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.5k, False: 12.3k]
  |  |  ------------------
  ------------------
 3605|  33.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  33.4k|                    parse_integer_digits_without_thsep(
 3607|  33.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  33.4k|                        prefix_result.parsed_base));
 3609|       |
 3610|  33.4k|            auto buf = make_contiguous_buffer(
 3611|  33.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  33.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.33k, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.33k|    }                                                  \
  |  |  |  | 3939|  33.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.1k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.1k|            return ranges::next(
 3617|  30.1k|                prefix_result.iterator,
 3618|  30.1k|                ranges::distance(buf.view().begin(), result_it));
 3619|  33.4k|        }
 3620|       |
 3621|  12.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.3k|#endif
 3627|       |
 3628|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 470, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    470|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    470|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    470|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    470|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    470|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.8k|                parse_integer_digits_with_thsep(
 3630|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.8k|                    prefix_result.parsed_base, locale_options));
 3632|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.8k|            parse_digits_result;
 3634|       |
 3635|  11.8k|        auto nothsep_source_view =
 3636|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.8k|        SCN_TRY(
  ------------------
  |  | 3940|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.8k|            nothsep_source_it,
 3639|  11.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.8k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.8k|        return ranges::next(
 3643|  11.8k|            prefix_result.iterator,
 3644|  11.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.8k|                ranges::ssize(thsep_indices));
 3646|  11.8k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   427k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   427k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   427k|        else {
 1055|   427k|            return r.begin().contiguous_segment();
 1056|   427k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   427k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   404k|{
 2160|   404k|    auto it = range.begin();
 2161|   792k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 782k, False: 10.2k]
  ------------------
 2162|   782k|        const auto val =
 2163|   782k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   782k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   782k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 780k, False: 1.74k]
  |  |  ------------------
  ------------------
 2165|   780k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   780k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   780k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 393k, False: 386k]
  ------------------
 2168|   393k|                return it;
 2169|   393k|            }
 2170|   780k|        }
 2171|   388k|        it = val.iterator;
 2172|   388k|    }
 2173|       |
 2174|  10.2k|    return it;
 2175|   404k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   782k|{
 1998|   782k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   782k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   782k|    auto it = range.begin();
 2002|   782k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   782k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.74k, False: 780k]
  |  |  ------------------
  ------------------
 2005|  1.74k|        ++it;
 2006|  1.74k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.74k|        return {it, {}};
 2008|  1.74k|    }
 2009|       |
 2010|   780k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 775k, False: 5.16k]
  ------------------
 2011|   775k|        ++it;
 2012|   775k|        return {it, string_type(1, *range.begin())};
 2013|   775k|    }
 2014|       |
 2015|  5.16k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.16k|    return {it, string_type{range.begin(), it}};
 2017|   780k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  1.74k|{
 1265|  1.74k|    auto it = input.begin();
 1266|  2.96k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.13k, False: 825]
  ------------------
 1267|  2.13k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 915, False: 1.22k]
  ------------------
 1268|    915|            break;
 1269|    915|        }
 1270|  2.13k|    }
 1271|  1.74k|    return it;
 1272|  1.74k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.16k|    {
  283|  5.16k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.16k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.16k|    {
  252|  5.16k|        constexpr iter_difference_t<I> zero{0};
  253|  5.16k|        iter_difference_t<I> counter{0};
  254|       |
  255|  17.1k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 13.2k, False: 3.97k]
  |  Branch (255:30): [True: 12.0k, False: 1.19k]
  ------------------
  256|  12.0k|            ++i;
  257|  12.0k|            ++counter;
  258|  12.0k|        }
  259|       |
  260|  5.16k|        return counter;
  261|  5.16k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   782k|    {
 1989|   782k|        return !codepoint.empty();
 1990|   782k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   404k|{
 2181|   404k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   404k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   427k|{
 3055|   427k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 427k, False: 0]
  ------------------
 3056|   427k|        auto it = read_while_classic_space(range);
 3057|   427k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   427k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.2k, False: 417k]
  |  |  ------------------
  ------------------
 3059|  10.2k|            return unexpected(e);
 3060|  10.2k|        }
 3061|       |
 3062|   417k|        return it;
 3063|   427k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   427k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   427k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   427k|    else {
 2225|   427k|        auto it = range.begin();
 2226|       |
 2227|   427k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   427k|            auto seg = get_contiguous_beginning(range);
 2229|   427k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   427k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 23.5k, False: 404k]
  ------------------
 2231|  23.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  23.5k|            }
 2233|   404k|            ranges::advance(it, seg.size());
 2234|   404k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   427k|            return detail::is_cp_space(cp);
 2238|   427k|        });
 2239|   427k|    }
 2240|   427k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   404k|        : m_fptr([](storage fn,
  743|   404k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   404k|              cvref<T> obj = *get<T>(fn);
  745|   404k|              if constexpr (std::is_void_v<R>) {
  746|   404k|                  obj(static_cast<decltype(args)>(args)...);
  747|   404k|              }
  748|   404k|              else {
  749|   404k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   404k|              }
  751|   404k|          }),
  752|   404k|          m_storage(std::addressof(f))
  753|   404k|    {
  754|   404k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   780k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   780k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   780k|              else {
  749|   780k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   780k|              }
  751|   780k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   780k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   780k|        else if constexpr (std::is_object_v<T>) {
  688|   780k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   780k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   780k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   780k|            return detail::is_cp_space(cp);
 2238|   780k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   404k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   404k|        {
  662|   404k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   128k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   128k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   128k|        auto beg = r.begin();
  991|   128k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 128k, False: 0]
  ------------------
  992|   128k|            return false;
  993|   128k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   128k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   236k|    {
  763|   236k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   236k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   101k|{
 1956|   101k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   101k|    else {
 1967|   101k|        auto it = range.begin();
 1968|   101k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 81.8k, False: 19.8k]
  ------------------
 1969|  81.8k|            return ranges::next(it, count);
 1970|  81.8k|        }
 1971|       |
 1972|  40.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 39.4k, False: 708]
  ------------------
 1973|  39.4k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 19.1k, False: 20.3k]
  ------------------
 1974|  19.1k|                return unexpected(eof_error::eof);
 1975|  19.1k|            }
 1976|  39.4k|        }
 1977|       |
 1978|    708|        return it;
 1979|  19.8k|    }
 1980|   101k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   101k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   101k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   101k|        else {
 1107|   101k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 101k, False: 0]
  ------------------
 1108|   101k|                return static_cast<size_t>(
 1109|   101k|                    r.begin().parent()->chars_available() -
 1110|   101k|                    r.begin().position());
 1111|   101k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   101k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   101k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   118k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   118k|        else if constexpr (std::is_object_v<T>) {
  688|   118k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   118k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   103k|    {
 6063|   103k|        const bool need_skipped_width =
 6064|   103k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 103k]
  |  Branch (6064:33): [True: 0, False: 103k]
  ------------------
 6065|   103k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   103k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 103k]
  ------------------
 6069|   103k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 103k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   103k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 103k, False: 0]
  |  Branch (6073:56): [True: 103k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   103k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 103k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   204k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   204k|                            make_eof_scan_error));
 6084|       |
 6085|   204k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 101k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   101k|            return result_type{it, 0};
 6093|   204k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   103k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   109k|{
 2075|   109k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   109k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   109k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   109k|    else {
 2060|   109k|        auto first = range.begin();
 2061|   118k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 118k, False: 684]
  ------------------
 2062|   118k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 108k, False: 9.85k]
  ------------------
 2063|   108k|                return first;
 2064|   108k|            }
 2065|   118k|        }
 2066|    684|        return first;
 2067|   109k|    }
 2068|   109k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  34.3M|    {
  108|  34.3M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.3M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  34.3M|    {
   94|  34.3M|        iter_difference_t<I> counter{0};
   95|  70.2G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 70.2G, False: 34.3M]
  ------------------
   96|  70.2G|            ++i;
   97|  70.2G|            ++counter;
   98|  70.2G|        }
   99|  34.3M|        return counter;
  100|  34.3M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|  33.6k|    {
 1879|  33.6k|        auto stdloc = loc.get<std::locale>();
 1880|  33.6k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|  33.6k|        grouping = numpunct.grouping();
 1882|  33.6k|        thousands_sep =
 1883|  33.6k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 33.6k]
  ------------------
 1884|  33.6k|        decimal_point = numpunct.decimal_point();
 1885|  33.6k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|  33.6k|{
 1816|  33.6k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 33.6k, False: 0]
  ------------------
 1817|  33.6k|        return std::use_facet<Facet>(stdloc);
 1818|  33.6k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|  33.6k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   160k|{
 1945|   160k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 160k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   160k|    return ranges::next(range.begin());
 1950|   160k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   315k|{
  951|   315k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.93k, False: 313k]
  |  |  ------------------
  ------------------
  952|  1.93k|        return eof_error::eof;
  953|  1.93k|    }
  954|   313k|    return eof_error::good;
  955|   315k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   444k|{
  945|   444k|    return is_range_eof(r.begin(), r.end());
  946|   444k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   444k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   444k|    {
  938|   444k|        return begin == end;
  939|   444k|    }
  940|   444k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   160k|    {
  296|   160k|        ++x;
  297|   160k|        return x;
  298|   160k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  16.9k|    {
 3579|  16.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.9k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.7k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    228|            else {
 3590|    228|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 228]
  ------------------
 3591|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    228|            }
 3597|    228|        }
 3598|       |
 3599|  16.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 44, False: 16.9k]
  ------------------
 3600|     44|            value = T{0};
 3601|     44|            return std::next(prefix_result.iterator);
 3602|     44|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 2.82k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    370|                    parse_integer_digits_without_thsep(
 3607|    370|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    370|                        prefix_result.parsed_base));
 3609|       |
 3610|    370|            auto buf = make_contiguous_buffer(
 3611|    370|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    370|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 44, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     44|    }                                                  \
  |  |  |  | 3939|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    326|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    326|                                        prefix_result.parsed_base));
 3615|       |
 3616|    326|            return ranges::next(
 3617|    326|                prefix_result.iterator,
 3618|    326|                ranges::distance(buf.view().begin(), result_it));
 3619|    370|        }
 3620|       |
 3621|  2.82k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.82k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.82k|#endif
 3627|       |
 3628|  2.82k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.72k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.72k|    }                                                  \
  |  |  |  | 3939|  2.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    108|                parse_integer_digits_with_thsep(
 3630|    108|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    108|                    prefix_result.parsed_base, locale_options));
 3632|    108|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    108|            parse_digits_result;
 3634|       |
 3635|    108|        auto nothsep_source_view =
 3636|    108|            std::basic_string_view<CharT>{nothsep_source};
 3637|    108|        SCN_TRY(
  ------------------
  |  | 3940|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     96|            nothsep_source_it,
 3639|     96|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     96|                                prefix_result.parsed_base));
 3641|       |
 3642|     96|        return ranges::next(
 3643|     96|            prefix_result.iterator,
 3644|     96|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     96|                ranges::ssize(thsep_indices));
 3646|    108|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3365|   127k|{
 3366|   127k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   127k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   127k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   127k|        parse_integer_base_prefix(
 3371|   127k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   127k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 356, False: 126k]
  ------------------
 3374|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 48, False: 308]
  ------------------
 3375|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 212, False: 96]
  ------------------
 3376|    260|            digits_begin_it = base_prefix_begin_it;
 3377|    260|        }
 3378|     96|        else {
 3379|     96|            parsed_zero = false;
 3380|     96|        }
 3381|    356|    }
 3382|   126k|    else {
 3383|   126k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 270, False: 126k]
  ------------------
 3384|   126k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 122k, False: 3.65k]
  ------------------
 3385|   123k|            digits_begin_it = base_prefix_begin_it;
 3386|   123k|        }
 3387|   126k|    }
 3388|       |
 3389|   127k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 125k, False: 1.87k]
  ------------------
 3390|   125k|        sign = sign_type::plus_sign;
 3391|   125k|    }
 3392|   127k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   127k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   127k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3246|   127k|{
 3247|   127k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   127k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 125k, False: 1.87k]
  ------------------
 3249|   125k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 125k, False: 0]
  ------------------
 3250|   125k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   125k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   125k|    }
 3254|       |
 3255|  1.87k|    auto& it = *r;
 3256|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 1.69k, False: 179]
  ------------------
 3257|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3258|  1.69k|    }
 3259|    179|    return std::pair{it, sign_type::plus_sign};
 3260|  1.87k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   127k|{
 2372|   127k|    auto it = read_code_unit(range);
 2373|   127k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   253k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 253k, False: 125k]
  ------------------
 2378|   253k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 1.87k, False: 252k]
  ------------------
 2379|  1.87k|            return *it;
 2380|  1.87k|        }
 2381|   253k|    }
 2382|       |
 2383|   125k|    return unexpected(parse_error::error);
 2384|   127k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3332|   127k|{
 3333|   127k|    switch (base) {
 3334|  16.7k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 16.7k, False: 110k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  16.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  16.7k|                    false};
 3338|       |
 3339|  16.8k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 16.8k, False: 110k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  16.8k|            bool zero_parsed = false;
 3342|  16.8k|            auto it = apply_opt(
 3343|  16.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  16.8k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  16.9k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 16.9k, False: 110k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  16.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  16.9k|                    false};
 3351|       |
 3352|  17.0k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 17.0k, False: 110k]
  ------------------
 3353|       |            // detect base
 3354|  17.0k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|  59.4k|        default:
  ------------------
  |  Branch (3356:9): [True: 59.4k, False: 67.6k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|  59.4k|            return {range.begin(), base, false};
 3359|   127k|    }
 3360|   127k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|  50.6k|{
 2391|  50.6k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 50.4k, False: 168]
  ------------------
 2392|  50.4k|        return range.begin();
 2393|  50.4k|    }
 2394|    168|    return *result;
 2395|  50.6k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3283|  33.7k|{
 3284|  33.7k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  33.7k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   101k|{
 2331|   101k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   101k|    else {
 2344|   101k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   101k|            if (ch < 'A' || ch > 'Z') {
 2346|   101k|                return ch;
 2347|   101k|            }
 2348|   101k|            return static_cast<char_type>(ch +
 2349|   101k|                                          static_cast<char_type>('a' - 'A'));
 2350|   101k|        };
 2351|       |
 2352|   101k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 19.1k, False: 82.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  19.1k|    }                                                  \
  |  |  |  | 3939|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  82.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  82.5k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  82.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.5k, False: 0]
  |  |  ------------------
  ------------------
 2357|  82.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  82.5k|                    return ascii_tolower(a) ==
 2359|  82.5k|                           static_cast<detail::char_t<Range>>(b);
 2360|  82.5k|                }))) {
 2361|  82.5k|            return unexpected(parse_error::error);
 2362|  82.5k|        }
 2363|       |
 2364|      0|        return it;
 2365|  82.5k|    }
 2366|   101k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  83.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  83.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 55.7k, False: 27.7k]
  |  Branch (2345:29): [True: 27.3k, False: 360]
  ------------------
 2346|  83.1k|                return ch;
 2347|  83.1k|            }
 2348|    360|            return static_cast<char_type>(ch +
 2349|    360|                                          static_cast<char_type>('a' - 'A'));
 2350|  83.4k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3297|  33.8k|{
 3298|  33.8k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 33.8k]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|  33.8k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 356, False: 33.4k]
  ------------------
 3303|    356|        zero_parsed = true;
 3304|    356|        return *r;
 3305|    356|    }
 3306|       |
 3307|  33.4k|    return unexpected(parse_error::error);
 3308|  33.8k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  33.8k|{
 2246|  33.8k|    auto it = read_code_unit(range);
 2247|  33.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 33.7k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.7k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.4k, False: 356]
  |  |  ------------------
  ------------------
 2252|  33.7k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  33.4k|        return unexpected(parse_error::error);
 2254|  33.4k|    }
 2255|       |
 2256|    356|    return *it;
 2257|  33.7k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3290|  33.9k|{
 3291|  33.9k|    return read_matching_string_classic_nocase(range, "0x");
 3292|  33.9k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3313|  17.0k|{
 3314|  17.0k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 17.0k]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|  17.0k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 17.0k]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|  17.0k|    {
 3321|  17.0k|        bool zero_parsed{false};
 3322|  17.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 188, False: 16.8k]
  ------------------
 3323|    188|            return {*r, 8, zero_parsed};
 3324|    188|        }
 3325|  17.0k|    }
 3326|  16.8k|    return {range.begin(), 10, false};
 3327|  17.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3399|   109k|{
 3400|   109k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|   109k|    else {
 3411|   109k|        return read_while1_code_unit(range,
 3412|   109k|                                     [&](char_type ch) noexcept {
 3413|   109k|                                         return char_to_int(ch) < base;
 3414|   109k|                                     })
 3415|   109k|            .transform_error(map_parse_error_to_scan_error(
 3416|   109k|                scan_error::invalid_scanned_value,
 3417|   109k|                "Failed to parse integer: No digits found"));
 3418|   109k|    }
 3419|   109k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   109k|{
 2095|   109k|    auto it = read_while_code_unit(range, pred);
 2096|   109k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 106k, False: 2.86k]
  ------------------
 2097|   106k|        return unexpected(parse_error::error);
 2098|   106k|    }
 2099|  2.86k|    return it;
 2100|   109k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   118k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   118k|        else if constexpr (std::is_object_v<T>) {
  688|   118k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   118k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3412|   118k|                                     [&](char_type ch) noexcept {
 3413|   118k|                                         return char_to_int(ch) < base;
 3414|   118k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3429|  16.8k|{
 3430|  16.8k|    std::basic_string<CharT> output;
 3431|  16.8k|    std::string thsep_indices;
 3432|  16.8k|    auto it = range.begin();
 3433|  16.8k|    bool digit_matched = false;
 3434|  34.3M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 34.3M, False: 312]
  ------------------
 3435|  34.3M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 34.3M, False: 18.6k]
  ------------------
 3436|  34.3M|            thsep_indices.push_back(
 3437|  34.3M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  34.3M|        }
 3439|  18.6k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 16.5k, False: 2.10k]
  ------------------
 3440|  16.5k|            break;
 3441|  16.5k|        }
 3442|  2.10k|        else {
 3443|  2.10k|            output.push_back(*it);
 3444|  2.10k|            digit_matched = true;
 3445|  2.10k|        }
 3446|  34.3M|    }
 3447|  16.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.2k, False: 584]
  |  |  ------------------
  ------------------
 3448|  16.2k|        return detail::unexpected_scan_error(
 3449|  16.2k|            scan_error::invalid_scanned_value,
 3450|  16.2k|            "Failed to parse integer: No digits found");
 3451|  16.2k|    }
 3452|    584|    return std::tuple{it, output, thsep_indices};
 3453|  16.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|  2.86k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.86k|    else {
 1788|  2.86k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.86k|    }
 1790|  2.86k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  2.86k|    {
 1636|  2.86k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.86k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|  2.86k|    {
 1720|  2.86k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  2.86k|                           ranges::common_range<Range>) {
 1737|  2.86k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  2.86k|            auto end_seg = range.end().contiguous_segment();
 1739|  2.86k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.07k, False: 785]
  |  |  ------------------
  ------------------
 1740|  2.86k|                             detail::to_address(end_seg.end()))) {
 1741|  2.07k|                auto& str = m_storage.emplace();
 1742|  2.07k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.07k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.07k|                m_view = string_view_type{str};
 1745|  2.07k|                return;
 1746|  2.07k|            }
 1747|       |
 1748|    785|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|    785|                                                            end_seg.data());
 1750|    785|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  2.86k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  5.34k|    {
 1681|  5.34k|        return m_view;
 1682|  5.34k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.86k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|  1.92k|    {
 6105|  1.92k|        const bool need_skipped_width =
 6106|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 1.92k]
  |  Branch (6106:33): [True: 0, False: 1.92k]
  ------------------
 6107|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 1.92k]
  ------------------
 6110|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 1.92k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 1.92k, False: 0]
  ------------------
 6119|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.92k]
  ------------------
 6120|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|  1.92k|        return result_type{rng.begin(), 0};
 6144|  1.92k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|   101k|{
 1956|   101k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|   101k|    if constexpr (ranges::sized_range<Range>) {
 1959|   101k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|   101k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 19.1k, False: 82.5k]
  ------------------
 1961|  19.1k|            return unexpected(eof_error::eof);
 1962|  19.1k|        }
 1963|       |
 1964|  82.5k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|   101k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   129k|{
 1998|   129k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   129k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   129k|    auto it = range.begin();
 2002|   129k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   129k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   129k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 129k, False: 0]
  ------------------
 2011|   129k|        ++it;
 2012|   129k|        return {it, string_type(1, *range.begin())};
 2013|   129k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   129k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   554k|{
  945|   554k|    return is_range_eof(r.begin(), r.end());
  946|   554k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   554k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   554k|    {
  938|   554k|        return begin == end;
  939|   554k|    }
  940|   554k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   129k|    {
 1989|   129k|        return !codepoint.empty();
 1990|   129k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   424k|{
  951|   424k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.09k, False: 422k]
  |  |  ------------------
  ------------------
  952|  2.09k|        return eof_error::eof;
  953|  2.09k|    }
  954|   422k|    return eof_error::good;
  955|   424k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   160k|{
 1945|   160k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 160k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   160k|    return ranges::next(range.begin());
 1950|   160k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   160k|    {
  296|   160k|        ++x;
  297|   160k|        return x;
  298|   160k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  16.9k|    {
 3579|  16.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.9k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.7k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    228|            else {
 3590|    228|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 228]
  ------------------
 3591|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    228|            }
 3597|    228|        }
 3598|       |
 3599|  16.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 44, False: 16.9k]
  ------------------
 3600|     44|            value = T{0};
 3601|     44|            return std::next(prefix_result.iterator);
 3602|     44|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 2.82k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.0k|                    parse_integer_digits_without_thsep(
 3607|  14.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.0k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.0k|            auto buf = make_contiguous_buffer(
 3611|  14.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    326|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    326|                                        prefix_result.parsed_base));
 3615|       |
 3616|    326|            return ranges::next(
 3617|    326|                prefix_result.iterator,
 3618|    326|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.0k|        }
 3620|       |
 3621|  2.82k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.82k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.82k|#endif
 3627|       |
 3628|  2.82k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.72k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.72k|    }                                                  \
  |  |  |  | 3939|  2.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    108|                parse_integer_digits_with_thsep(
 3630|    108|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    108|                    prefix_result.parsed_base, locale_options));
 3632|    108|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    108|            parse_digits_result;
 3634|       |
 3635|    108|        auto nothsep_source_view =
 3636|    108|            std::basic_string_view<CharT>{nothsep_source};
 3637|    108|        SCN_TRY(
  ------------------
  |  | 3940|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     96|            nothsep_source_it,
 3639|     96|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     96|                                prefix_result.parsed_base));
 3641|       |
 3642|     96|        return ranges::next(
 3643|     96|            prefix_result.iterator,
 3644|     96|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     96|                ranges::ssize(thsep_indices));
 3646|    108|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|   127k|{
 3366|   127k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   127k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   127k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   127k|        parse_integer_base_prefix(
 3371|   127k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   127k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 356, False: 126k]
  ------------------
 3374|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 48, False: 308]
  ------------------
 3375|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 212, False: 96]
  ------------------
 3376|    260|            digits_begin_it = base_prefix_begin_it;
 3377|    260|        }
 3378|     96|        else {
 3379|     96|            parsed_zero = false;
 3380|     96|        }
 3381|    356|    }
 3382|   126k|    else {
 3383|   126k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 270, False: 126k]
  ------------------
 3384|   126k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 122k, False: 3.65k]
  ------------------
 3385|   123k|            digits_begin_it = base_prefix_begin_it;
 3386|   123k|        }
 3387|   126k|    }
 3388|       |
 3389|   127k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 125k, False: 1.87k]
  ------------------
 3390|   125k|        sign = sign_type::plus_sign;
 3391|   125k|    }
 3392|   127k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   127k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   127k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|   127k|{
 3247|   127k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   127k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 125k, False: 1.87k]
  ------------------
 3249|   125k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 125k, False: 0]
  ------------------
 3250|   125k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   125k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   125k|    }
 3254|       |
 3255|  1.87k|    auto& it = *r;
 3256|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 1.69k, False: 179]
  ------------------
 3257|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3258|  1.69k|    }
 3259|    179|    return std::pair{it, sign_type::plus_sign};
 3260|  1.87k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   127k|{
 2372|   127k|    auto it = read_code_unit(range);
 2373|   127k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   253k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 253k, False: 125k]
  ------------------
 2378|   253k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 1.87k, False: 252k]
  ------------------
 2379|  1.87k|            return *it;
 2380|  1.87k|        }
 2381|   253k|    }
 2382|       |
 2383|   125k|    return unexpected(parse_error::error);
 2384|   127k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|   127k|{
 3333|   127k|    switch (base) {
 3334|  16.7k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 16.7k, False: 110k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  16.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  16.7k|                    false};
 3338|       |
 3339|  16.8k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 16.8k, False: 110k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  16.8k|            bool zero_parsed = false;
 3342|  16.8k|            auto it = apply_opt(
 3343|  16.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  16.8k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  16.9k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 16.9k, False: 110k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  16.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  16.9k|                    false};
 3351|       |
 3352|  17.0k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 17.0k, False: 110k]
  ------------------
 3353|       |            // detect base
 3354|  17.0k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|  59.4k|        default:
  ------------------
  |  Branch (3356:9): [True: 59.4k, False: 67.6k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|  59.4k|            return {range.begin(), base, false};
 3359|   127k|    }
 3360|   127k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  50.6k|{
 2391|  50.6k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 50.4k, False: 168]
  ------------------
 2392|  50.4k|        return range.begin();
 2393|  50.4k|    }
 2394|    168|    return *result;
 2395|  50.6k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3283|  33.7k|{
 3284|  33.7k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  33.7k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   101k|{
 2331|   101k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   101k|    else {
 2344|   101k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   101k|            if (ch < 'A' || ch > 'Z') {
 2346|   101k|                return ch;
 2347|   101k|            }
 2348|   101k|            return static_cast<char_type>(ch +
 2349|   101k|                                          static_cast<char_type>('a' - 'A'));
 2350|   101k|        };
 2351|       |
 2352|   101k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 19.1k, False: 82.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  19.1k|    }                                                  \
  |  |  |  | 3939|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  82.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  82.5k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  82.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.5k, False: 0]
  |  |  ------------------
  ------------------
 2357|  82.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  82.5k|                    return ascii_tolower(a) ==
 2359|  82.5k|                           static_cast<detail::char_t<Range>>(b);
 2360|  82.5k|                }))) {
 2361|  82.5k|            return unexpected(parse_error::error);
 2362|  82.5k|        }
 2363|       |
 2364|      0|        return it;
 2365|  82.5k|    }
 2366|   101k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  83.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  83.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 55.7k, False: 27.7k]
  |  Branch (2345:29): [True: 27.3k, False: 360]
  ------------------
 2346|  83.1k|                return ch;
 2347|  83.1k|            }
 2348|    360|            return static_cast<char_type>(ch +
 2349|    360|                                          static_cast<char_type>('a' - 'A'));
 2350|  83.4k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3297|  33.8k|{
 3298|  33.8k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 33.8k]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|  33.8k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 356, False: 33.4k]
  ------------------
 3303|    356|        zero_parsed = true;
 3304|    356|        return *r;
 3305|    356|    }
 3306|       |
 3307|  33.4k|    return unexpected(parse_error::error);
 3308|  33.8k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  33.8k|{
 2246|  33.8k|    auto it = read_code_unit(range);
 2247|  33.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 33.7k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.7k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.4k, False: 356]
  |  |  ------------------
  ------------------
 2252|  33.7k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  33.4k|        return unexpected(parse_error::error);
 2254|  33.4k|    }
 2255|       |
 2256|    356|    return *it;
 2257|  33.7k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|  33.9k|{
 3291|  33.9k|    return read_matching_string_classic_nocase(range, "0x");
 3292|  33.9k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3313|  17.0k|{
 3314|  17.0k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 17.0k]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|  17.0k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 17.0k]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|  17.0k|    {
 3321|  17.0k|        bool zero_parsed{false};
 3322|  17.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 188, False: 16.8k]
  ------------------
 3323|    188|            return {*r, 8, zero_parsed};
 3324|    188|        }
 3325|  17.0k|    }
 3326|  16.8k|    return {range.begin(), 10, false};
 3327|  17.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|   109k|{
 3400|   109k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|   109k|    if constexpr (ranges::contiguous_range<Range>) {
 3403|   109k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 108k]
  |  |  ------------------
  ------------------
 3404|    156|            return detail::unexpected_scan_error(
 3405|    156|                scan_error::invalid_scanned_value,
 3406|    156|                "Failed to parse integer: No digits found");
 3407|    156|        }
 3408|   108k|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|   109k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3429|  16.8k|{
 3430|  16.8k|    std::basic_string<CharT> output;
 3431|  16.8k|    std::string thsep_indices;
 3432|  16.8k|    auto it = range.begin();
 3433|  16.8k|    bool digit_matched = false;
 3434|  34.3M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 34.3M, False: 312]
  ------------------
 3435|  34.3M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 34.3M, False: 18.6k]
  ------------------
 3436|  34.3M|            thsep_indices.push_back(
 3437|  34.3M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  34.3M|        }
 3439|  18.6k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 16.5k, False: 2.10k]
  ------------------
 3440|  16.5k|            break;
 3441|  16.5k|        }
 3442|  2.10k|        else {
 3443|  2.10k|            output.push_back(*it);
 3444|  2.10k|            digit_matched = true;
 3445|  2.10k|        }
 3446|  34.3M|    }
 3447|  16.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.2k, False: 584]
  |  |  ------------------
  ------------------
 3448|  16.2k|        return detail::unexpected_scan_error(
 3449|  16.2k|            scan_error::invalid_scanned_value,
 3450|  16.2k|            "Failed to parse integer: No digits found");
 3451|  16.2k|    }
 3452|    584|    return std::tuple{it, output, thsep_indices};
 3453|  16.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|   108k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   108k|                  ranges::sized_range<Range>) {
 1785|   108k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   108k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   108k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   108k|    {
 1589|   108k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|   111k|    {
 1602|   111k|        return sv;
 1603|   111k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|   128k|{
 3055|   128k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 128k, False: 0]
  ------------------
 3056|   128k|        auto it = read_while_classic_space(range);
 3057|   128k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   128k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.72k, False: 127k]
  |  |  ------------------
  ------------------
 3059|  1.72k|            return unexpected(e);
 3060|  1.72k|        }
 3061|       |
 3062|   127k|        return it;
 3063|   128k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   128k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   128k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   128k|    else {
 2225|   128k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   128k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   128k|            return detail::is_cp_space(cp);
 2238|   128k|        });
 2239|   128k|    }
 2240|   128k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   128k|{
 2181|   128k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   128k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   128k|{
 2160|   128k|    auto it = range.begin();
 2161|   131k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 129k, False: 1.72k]
  ------------------
 2162|   129k|        const auto val =
 2163|   129k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   129k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   129k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 129k, False: 0]
  |  |  ------------------
  ------------------
 2165|   129k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   129k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   129k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 127k, False: 2.41k]
  ------------------
 2168|   127k|                return it;
 2169|   127k|            }
 2170|   129k|        }
 2171|  2.41k|        it = val.iterator;
 2172|  2.41k|    }
 2173|       |
 2174|  1.72k|    return it;
 2175|   128k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   128k|        : m_fptr([](storage fn,
  743|   128k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   128k|              cvref<T> obj = *get<T>(fn);
  745|   128k|              if constexpr (std::is_void_v<R>) {
  746|   128k|                  obj(static_cast<decltype(args)>(args)...);
  747|   128k|              }
  748|   128k|              else {
  749|   128k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   128k|              }
  751|   128k|          }),
  752|   128k|          m_storage(std::addressof(f))
  753|   128k|    {
  754|   128k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   129k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   129k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   129k|              else {
  749|   129k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   129k|              }
  751|   129k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   129k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   129k|        else if constexpr (std::is_object_v<T>) {
  688|   129k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   129k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   129k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   129k|            return detail::is_cp_space(cp);
 2238|   129k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   128k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   128k|        {
  662|   128k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  84.7k|    {
  304|  84.7k|        ranges::advance(x, n);
  305|  84.7k|        return x;
  306|  84.7k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  84.7k|    {
  268|  84.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  84.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  84.7k|    {
  181|   255k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 171k, False: 84.7k]
  ------------------
  182|   171k|            ++i;
  183|   171k|        }
  184|  84.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.1k|            auto rd = make_reader<T, char_type>();
 6225|  17.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.1k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.1k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.1k|                return impl(rd, range, value);
 6230|  17.1k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.1k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|   206k|    {
 3145|   206k|        reader_error_handler eh{};
 3146|   206k|        get_derived().check_specs_impl(specs, eh);
 3147|   206k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|   206k|        return {};
 3152|   206k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3156|   206k|    {
 3157|   206k|        return static_cast<Derived&>(*this);
 3158|   206k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|   206k|    {
 3525|   206k|        detail::check_int_type_specs(specs, eh);
 3526|   206k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.1k|    {
 6150|  17.1k|        const bool need_skipped_width =
 6151|  17.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.1k]
  |  Branch (6151:33): [True: 0, False: 17.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.1k|        auto it = rng.begin();
 6155|  17.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.1k|        else {
 6164|  17.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.8k|        }
 6167|  16.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.8k|        std::ptrdiff_t value_width = 0;
 6171|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.8k|        else {
 6187|  16.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 380]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.4k|    }                                                  \
  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    380|                                             specs, value, loc));
 6189|       |
 6190|    380|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 380]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    380|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    380|        std::ptrdiff_t postfix_width = 0;
 6199|    380|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 270, False: 110]
  ------------------
 6200|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    270|                                 value_width));
 6204|    270|            std::tie(it, postfix_width) = postfix_result;
 6205|    270|        }
 6206|       |
 6207|    380|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    380|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 380]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    380|            specs, prefix_width, value_width, postfix_width));
 6209|    380|        return it;
 6210|    380|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3139|   261k|    {
 3140|   261k|        return true;
 3141|   261k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  16.8k|    {
 3579|  16.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 218, False: 16.6k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    218|            else {
 3590|    218|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 218]
  ------------------
 3591|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    218|            }
 3597|    218|        }
 3598|       |
 3599|  16.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 42, False: 16.8k]
  ------------------
 3600|     42|            value = T{0};
 3601|     42|            return std::next(prefix_result.iterator);
 3602|     42|        }
 3603|       |
 3604|  16.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 2.81k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.6k, False: 358]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.6k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    358|                    parse_integer_digits_without_thsep(
 3607|    358|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    358|                        prefix_result.parsed_base));
 3609|       |
 3610|    358|            auto buf = make_contiguous_buffer(
 3611|    358|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    358|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    358|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    358|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    358|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 96, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     96|    }                                                  \
  |  |  |  | 3939|    358|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    262|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    262|                                        prefix_result.parsed_base));
 3615|       |
 3616|    262|            return ranges::next(
 3617|    262|                prefix_result.iterator,
 3618|    262|                ranges::distance(buf.view().begin(), result_it));
 3619|    358|        }
 3620|       |
 3621|  2.81k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.81k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.81k|#endif
 3627|       |
 3628|  2.81k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.70k, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.70k|    }                                                  \
  |  |  |  | 3939|  2.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    104|                parse_integer_digits_with_thsep(
 3630|    104|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    104|                    prefix_result.parsed_base, locale_options));
 3632|    104|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    104|            parse_digits_result;
 3634|       |
 3635|    104|        auto nothsep_source_view =
 3636|    104|            std::basic_string_view<CharT>{nothsep_source};
 3637|    104|        SCN_TRY(
  ------------------
  |  | 3940|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     76|            nothsep_source_it,
 3639|     76|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     76|                                prefix_result.parsed_base));
 3641|       |
 3642|     76|        return ranges::next(
 3643|     76|            prefix_result.iterator,
 3644|     76|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     76|                ranges::ssize(thsep_indices));
 3646|    104|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  16.8k|    {
 3579|  16.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 218, False: 16.6k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    218|            else {
 3590|    218|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 218]
  ------------------
 3591|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    218|            }
 3597|    218|        }
 3598|       |
 3599|  16.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 42, False: 16.8k]
  ------------------
 3600|     42|            value = T{0};
 3601|     42|            return std::next(prefix_result.iterator);
 3602|     42|        }
 3603|       |
 3604|  16.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 2.81k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  13.9k|                    parse_integer_digits_without_thsep(
 3607|  13.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  13.9k|                        prefix_result.parsed_base));
 3609|       |
 3610|  13.9k|            auto buf = make_contiguous_buffer(
 3611|  13.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  13.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    262|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    262|                                        prefix_result.parsed_base));
 3615|       |
 3616|    262|            return ranges::next(
 3617|    262|                prefix_result.iterator,
 3618|    262|                ranges::distance(buf.view().begin(), result_it));
 3619|  13.9k|        }
 3620|       |
 3621|  2.81k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.81k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.81k|#endif
 3627|       |
 3628|  2.81k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.70k, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.70k|    }                                                  \
  |  |  |  | 3939|  2.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    104|                parse_integer_digits_with_thsep(
 3630|    104|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    104|                    prefix_result.parsed_base, locale_options));
 3632|    104|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    104|            parse_digits_result;
 3634|       |
 3635|    104|        auto nothsep_source_view =
 3636|    104|            std::basic_string_view<CharT>{nothsep_source};
 3637|    104|        SCN_TRY(
  ------------------
  |  | 3940|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     76|            nothsep_source_it,
 3639|     76|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     76|                                prefix_result.parsed_base));
 3641|       |
 3642|     76|        return ranges::next(
 3643|     76|            prefix_result.iterator,
 3644|     76|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     76|                ranges::ssize(thsep_indices));
 3646|    104|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.2k|            auto rd = make_reader<T, char_type>();
 6225|  17.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.2k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.2k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.2k|                return impl(rd, range, value);
 6230|  17.2k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.2k|    {
 6150|  17.2k|        const bool need_skipped_width =
 6151|  17.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.2k]
  |  Branch (6151:33): [True: 0, False: 17.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.2k|        auto it = rng.begin();
 6155|  17.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.2k|        else {
 6164|  17.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 272, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    272|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.9k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.9k|        }
 6167|  16.9k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.9k|        std::ptrdiff_t value_width = 0;
 6171|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.9k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.9k|        else {
 6187|  16.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 466]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.4k|    }                                                  \
  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    466|                                             specs, value, loc));
 6189|       |
 6190|    466|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 466]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    466|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    466|        std::ptrdiff_t postfix_width = 0;
 6199|    466|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 344, False: 122]
  ------------------
 6200|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    344|                                 value_width));
 6204|    344|            std::tie(it, postfix_width) = postfix_result;
 6205|    344|        }
 6206|       |
 6207|    466|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    466|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 466]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    466|            specs, prefix_width, value_width, postfix_width));
 6209|    466|        return it;
 6210|    466|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.3k|            auto rd = make_reader<T, char_type>();
 6225|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.3k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.3k|                return impl(rd, range, value);
 6230|  17.3k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 272, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    272|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 550]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.4k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    550|                                             specs, value, loc));
 6189|       |
 6190|    550|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 550]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    550|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    550|        std::ptrdiff_t postfix_width = 0;
 6199|    550|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 428, False: 122]
  ------------------
 6200|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    428|                                 value_width));
 6204|    428|            std::tie(it, postfix_width) = postfix_result;
 6205|    428|        }
 6206|       |
 6207|    550|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    550|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 550]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    550|            specs, prefix_width, value_width, postfix_width));
 6209|    550|        return it;
 6210|    550|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 244, False: 16.7k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    244|            else {
 3590|    244|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 244]
  ------------------
 3591|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    244|            }
 3597|    244|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 50, False: 16.9k]
  ------------------
 3600|     50|            value = T{0};
 3601|     50|            return std::next(prefix_result.iterator);
 3602|     50|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.1k, False: 2.85k]
  |  |  ------------------
  ------------------
 3605|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    392|                    parse_integer_digits_without_thsep(
 3607|    392|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    392|                        prefix_result.parsed_base));
 3609|       |
 3610|    392|            auto buf = make_contiguous_buffer(
 3611|    392|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    392|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 382]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    382|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    382|                                        prefix_result.parsed_base));
 3615|       |
 3616|    382|            return ranges::next(
 3617|    382|                prefix_result.iterator,
 3618|    382|                ranges::distance(buf.view().begin(), result_it));
 3619|    392|        }
 3620|       |
 3621|  2.85k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.85k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.85k|#endif
 3627|       |
 3628|  2.85k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.73k|    }                                                  \
  |  |  |  | 3939|  2.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    118|                parse_integer_digits_with_thsep(
 3630|    118|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    118|                    prefix_result.parsed_base, locale_options));
 3632|    118|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    118|            parse_digits_result;
 3634|       |
 3635|    118|        auto nothsep_source_view =
 3636|    118|            std::basic_string_view<CharT>{nothsep_source};
 3637|    118|        SCN_TRY(
  ------------------
  |  | 3940|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    118|            nothsep_source_it,
 3639|    118|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    118|                                prefix_result.parsed_base));
 3641|       |
 3642|    118|        return ranges::next(
 3643|    118|            prefix_result.iterator,
 3644|    118|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    118|                ranges::ssize(thsep_indices));
 3646|    118|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 244, False: 16.7k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    244|            else {
 3590|    244|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 244]
  ------------------
 3591|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    244|            }
 3597|    244|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 50, False: 16.9k]
  ------------------
 3600|     50|            value = T{0};
 3601|     50|            return std::next(prefix_result.iterator);
 3602|     50|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.1k, False: 2.85k]
  |  |  ------------------
  ------------------
 3605|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.1k|                    parse_integer_digits_without_thsep(
 3607|  14.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.1k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.1k|            auto buf = make_contiguous_buffer(
 3611|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 382]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    382|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    382|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    382|                                        prefix_result.parsed_base));
 3615|       |
 3616|    382|            return ranges::next(
 3617|    382|                prefix_result.iterator,
 3618|    382|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.1k|        }
 3620|       |
 3621|  2.85k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.85k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.85k|#endif
 3627|       |
 3628|  2.85k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.73k|    }                                                  \
  |  |  |  | 3939|  2.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    118|                parse_integer_digits_with_thsep(
 3630|    118|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    118|                    prefix_result.parsed_base, locale_options));
 3632|    118|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    118|            parse_digits_result;
 3634|       |
 3635|    118|        auto nothsep_source_view =
 3636|    118|            std::basic_string_view<CharT>{nothsep_source};
 3637|    118|        SCN_TRY(
  ------------------
  |  | 3940|    118|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    118|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    118|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    118|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 118]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    118|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    118|            nothsep_source_it,
 3639|    118|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    118|                                prefix_result.parsed_base));
 3641|       |
 3642|    118|        return ranges::next(
 3643|    118|            prefix_result.iterator,
 3644|    118|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    118|                ranges::ssize(thsep_indices));
 3646|    118|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.0k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.0k|            auto rd = make_reader<T, char_type>();
 6225|  17.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.0k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.0k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.0k|                return impl(rd, range, value);
 6230|  17.0k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.0k|    {
 6150|  17.0k|        const bool need_skipped_width =
 6151|  17.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.0k]
  |  Branch (6151:33): [True: 0, False: 17.0k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.0k|        auto it = rng.begin();
 6155|  17.0k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.0k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.0k|        else {
 6164|  17.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.8k|        }
 6167|  16.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.8k|        std::ptrdiff_t value_width = 0;
 6171|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.8k|        else {
 6187|  16.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.5k, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.5k|    }                                                  \
  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    326|                                             specs, value, loc));
 6189|       |
 6190|    326|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 326]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    326|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    326|        std::ptrdiff_t postfix_width = 0;
 6199|    326|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 242, False: 84]
  ------------------
 6200|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    242|                                 value_width));
 6204|    242|            std::tie(it, postfix_width) = postfix_result;
 6205|    242|        }
 6206|       |
 6207|    326|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    326|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    326|            specs, prefix_width, value_width, postfix_width));
 6209|    326|        return it;
 6210|    326|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  16.8k|    {
 3579|  16.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.6k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  16.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.8k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 2.97k]
  |  |  ------------------
  ------------------
 3605|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    296|                    parse_integer_digits_without_thsep(
 3607|    296|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    296|                        prefix_result.parsed_base));
 3609|       |
 3610|    296|            auto buf = make_contiguous_buffer(
 3611|    296|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    296|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 70, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     70|    }                                                  \
  |  |  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    226|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    226|                                        prefix_result.parsed_base));
 3615|       |
 3616|    226|            return ranges::next(
 3617|    226|                prefix_result.iterator,
 3618|    226|                ranges::distance(buf.view().begin(), result_it));
 3619|    296|        }
 3620|       |
 3621|  2.97k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.97k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.97k|#endif
 3627|       |
 3628|  2.97k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.68k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.68k|    }                                                  \
  |  |  |  | 3939|  2.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    294|                parse_integer_digits_with_thsep(
 3630|    294|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    294|                    prefix_result.parsed_base, locale_options));
 3632|    294|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    294|            parse_digits_result;
 3634|       |
 3635|    294|        auto nothsep_source_view =
 3636|    294|            std::basic_string_view<CharT>{nothsep_source};
 3637|    294|        SCN_TRY(
  ------------------
  |  | 3940|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    272|            nothsep_source_it,
 3639|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    272|                                prefix_result.parsed_base));
 3641|       |
 3642|    272|        return ranges::next(
 3643|    272|            prefix_result.iterator,
 3644|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    272|                ranges::ssize(thsep_indices));
 3646|    294|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  16.8k|    {
 3579|  16.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.6k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  16.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.8k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 2.97k]
  |  |  ------------------
  ------------------
 3605|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  13.8k|                    parse_integer_digits_without_thsep(
 3607|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  13.8k|                        prefix_result.parsed_base));
 3609|       |
 3610|  13.8k|            auto buf = make_contiguous_buffer(
 3611|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    226|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    226|                                        prefix_result.parsed_base));
 3615|       |
 3616|    226|            return ranges::next(
 3617|    226|                prefix_result.iterator,
 3618|    226|                ranges::distance(buf.view().begin(), result_it));
 3619|  13.8k|        }
 3620|       |
 3621|  2.97k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.97k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.97k|#endif
 3627|       |
 3628|  2.97k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.68k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.68k|    }                                                  \
  |  |  |  | 3939|  2.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    294|                parse_integer_digits_with_thsep(
 3630|    294|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    294|                    prefix_result.parsed_base, locale_options));
 3632|    294|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    294|            parse_digits_result;
 3634|       |
 3635|    294|        auto nothsep_source_view =
 3636|    294|            std::basic_string_view<CharT>{nothsep_source};
 3637|    294|        SCN_TRY(
  ------------------
  |  | 3940|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    272|            nothsep_source_it,
 3639|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    272|                                prefix_result.parsed_base));
 3641|       |
 3642|    272|        return ranges::next(
 3643|    272|            prefix_result.iterator,
 3644|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    272|                ranges::ssize(thsep_indices));
 3646|    294|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.1k|            auto rd = make_reader<T, char_type>();
 6225|  17.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.1k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.1k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.1k|                return impl(rd, range, value);
 6230|  17.1k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.1k|    {
 6150|  17.1k|        const bool need_skipped_width =
 6151|  17.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.1k]
  |  Branch (6151:33): [True: 0, False: 17.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.1k|        auto it = rng.begin();
 6155|  17.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.1k|        else {
 6164|  17.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.8k|        }
 6167|  16.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.8k|        std::ptrdiff_t value_width = 0;
 6171|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.8k|        else {
 6187|  16.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.5k, False: 372]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.5k|    }                                                  \
  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    372|                                             specs, value, loc));
 6189|       |
 6190|    372|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 372]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    372|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    372|        std::ptrdiff_t postfix_width = 0;
 6199|    372|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 288, False: 84]
  ------------------
 6200|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    288|                                 value_width));
 6204|    288|            std::tie(it, postfix_width) = postfix_result;
 6205|    288|        }
 6206|       |
 6207|    372|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    372|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 372]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    372|            specs, prefix_width, value_width, postfix_width));
 6209|    372|        return it;
 6210|    372|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  16.8k|    {
 3579|  16.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.6k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  16.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.8k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 2.99k]
  |  |  ------------------
  ------------------
 3605|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    302|                    parse_integer_digits_without_thsep(
 3607|    302|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    302|                        prefix_result.parsed_base));
 3609|       |
 3610|    302|            auto buf = make_contiguous_buffer(
 3611|    302|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    302|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    260|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    260|                                        prefix_result.parsed_base));
 3615|       |
 3616|    260|            return ranges::next(
 3617|    260|                prefix_result.iterator,
 3618|    260|                ranges::distance(buf.view().begin(), result_it));
 3619|    302|        }
 3620|       |
 3621|  2.99k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.99k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.99k|#endif
 3627|       |
 3628|  2.99k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.69k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.69k|    }                                                  \
  |  |  |  | 3939|  2.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    296|                parse_integer_digits_with_thsep(
 3630|    296|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    296|                    prefix_result.parsed_base, locale_options));
 3632|    296|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    296|            parse_digits_result;
 3634|       |
 3635|    296|        auto nothsep_source_view =
 3636|    296|            std::basic_string_view<CharT>{nothsep_source};
 3637|    296|        SCN_TRY(
  ------------------
  |  | 3940|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    284|            nothsep_source_it,
 3639|    284|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    284|                                prefix_result.parsed_base));
 3641|       |
 3642|    284|        return ranges::next(
 3643|    284|            prefix_result.iterator,
 3644|    284|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    284|                ranges::ssize(thsep_indices));
 3646|    296|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  16.8k|    {
 3579|  16.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.6k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  16.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.8k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 2.99k]
  |  |  ------------------
  ------------------
 3605|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  13.8k|                    parse_integer_digits_without_thsep(
 3607|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  13.8k|                        prefix_result.parsed_base));
 3609|       |
 3610|  13.8k|            auto buf = make_contiguous_buffer(
 3611|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    260|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    260|                                        prefix_result.parsed_base));
 3615|       |
 3616|    260|            return ranges::next(
 3617|    260|                prefix_result.iterator,
 3618|    260|                ranges::distance(buf.view().begin(), result_it));
 3619|  13.8k|        }
 3620|       |
 3621|  2.99k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.99k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.99k|#endif
 3627|       |
 3628|  2.99k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.69k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.69k|    }                                                  \
  |  |  |  | 3939|  2.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    296|                parse_integer_digits_with_thsep(
 3630|    296|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    296|                    prefix_result.parsed_base, locale_options));
 3632|    296|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    296|            parse_digits_result;
 3634|       |
 3635|    296|        auto nothsep_source_view =
 3636|    296|            std::basic_string_view<CharT>{nothsep_source};
 3637|    296|        SCN_TRY(
  ------------------
  |  | 3940|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    284|            nothsep_source_it,
 3639|    284|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    284|                                prefix_result.parsed_base));
 3641|       |
 3642|    284|        return ranges::next(
 3643|    284|            prefix_result.iterator,
 3644|    284|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    284|                ranges::ssize(thsep_indices));
 3646|    296|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.1k|            auto rd = make_reader<T, char_type>();
 6225|  17.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.1k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.1k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.1k|                return impl(rd, range, value);
 6230|  17.1k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.1k|    {
 6150|  17.1k|        const bool need_skipped_width =
 6151|  17.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.1k]
  |  Branch (6151:33): [True: 0, False: 17.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.1k|        auto it = rng.begin();
 6155|  17.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.1k|        else {
 6164|  17.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.9k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.9k|        }
 6167|  16.9k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.9k|        std::ptrdiff_t value_width = 0;
 6171|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.9k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.9k|        else {
 6187|  16.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.5k, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.5k|    }                                                  \
  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    438|                                             specs, value, loc));
 6189|       |
 6190|    438|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 438]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    438|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    438|        std::ptrdiff_t postfix_width = 0;
 6199|    438|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 354, False: 84]
  ------------------
 6200|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    354|                                 value_width));
 6204|    354|            std::tie(it, postfix_width) = postfix_result;
 6205|    354|        }
 6206|       |
 6207|    438|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    438|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    438|            specs, prefix_width, value_width, postfix_width));
 6209|    438|        return it;
 6210|    438|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  16.9k|    {
 3579|  16.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.9k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.7k]
  ------------------
 3583|    228|            if constexpr (!std::is_signed_v<T>) {
 3584|    228|                return detail::unexpected_scan_error(
 3585|    228|                    scan_error::invalid_scanned_value,
 3586|    228|                    "Unexpected '-' sign when parsing an "
 3587|    228|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    228|        }
 3598|       |
 3599|  16.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.9k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 3.01k]
  |  |  ------------------
  ------------------
 3605|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    314|                    parse_integer_digits_without_thsep(
 3607|    314|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    314|                        prefix_result.parsed_base));
 3609|       |
 3610|    314|            auto buf = make_contiguous_buffer(
 3611|    314|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    314|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    314|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    314|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    314|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|    314|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    310|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    310|                                        prefix_result.parsed_base));
 3615|       |
 3616|    310|            return ranges::next(
 3617|    310|                prefix_result.iterator,
 3618|    310|                ranges::distance(buf.view().begin(), result_it));
 3619|    314|        }
 3620|       |
 3621|  3.01k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.01k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.01k|#endif
 3627|       |
 3628|  3.01k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.70k, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.70k|    }                                                  \
  |  |  |  | 3939|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    316|                parse_integer_digits_with_thsep(
 3630|    316|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    316|                    prefix_result.parsed_base, locale_options));
 3632|    316|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    316|            parse_digits_result;
 3634|       |
 3635|    316|        auto nothsep_source_view =
 3636|    316|            std::basic_string_view<CharT>{nothsep_source};
 3637|    316|        SCN_TRY(
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    316|            nothsep_source_it,
 3639|    316|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    316|                                prefix_result.parsed_base));
 3641|       |
 3642|    316|        return ranges::next(
 3643|    316|            prefix_result.iterator,
 3644|    316|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    316|                ranges::ssize(thsep_indices));
 3646|    316|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  16.9k|    {
 3579|  16.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  16.9k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  16.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.7k]
  ------------------
 3583|    228|            if constexpr (!std::is_signed_v<T>) {
 3584|    228|                return detail::unexpected_scan_error(
 3585|    228|                    scan_error::invalid_scanned_value,
 3586|    228|                    "Unexpected '-' sign when parsing an "
 3587|    228|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    228|        }
 3598|       |
 3599|  16.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.9k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 3.01k]
  |  |  ------------------
  ------------------
 3605|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  13.8k|                    parse_integer_digits_without_thsep(
 3607|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  13.8k|                        prefix_result.parsed_base));
 3609|       |
 3610|  13.8k|            auto buf = make_contiguous_buffer(
 3611|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    310|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    310|                                        prefix_result.parsed_base));
 3615|       |
 3616|    310|            return ranges::next(
 3617|    310|                prefix_result.iterator,
 3618|    310|                ranges::distance(buf.view().begin(), result_it));
 3619|  13.8k|        }
 3620|       |
 3621|  3.01k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.01k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.01k|#endif
 3627|       |
 3628|  3.01k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.70k, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.70k|    }                                                  \
  |  |  |  | 3939|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    316|                parse_integer_digits_with_thsep(
 3630|    316|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    316|                    prefix_result.parsed_base, locale_options));
 3632|    316|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    316|            parse_digits_result;
 3634|       |
 3635|    316|        auto nothsep_source_view =
 3636|    316|            std::basic_string_view<CharT>{nothsep_source};
 3637|    316|        SCN_TRY(
  ------------------
  |  | 3940|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    316|            nothsep_source_it,
 3639|    316|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    316|                                prefix_result.parsed_base));
 3641|       |
 3642|    316|        return ranges::next(
 3643|    316|            prefix_result.iterator,
 3644|    316|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    316|                ranges::ssize(thsep_indices));
 3646|    316|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   128k|{
 2160|   128k|    auto it = range.begin();
 2161|   131k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 129k, False: 1.72k]
  ------------------
 2162|   129k|        const auto val =
 2163|   129k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   129k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   129k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 129k, False: 0]
  |  |  ------------------
  ------------------
 2165|   129k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   129k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   129k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 127k, False: 2.41k]
  ------------------
 2168|   127k|                return it;
 2169|   127k|            }
 2170|   129k|        }
 2171|  2.41k|        it = val.iterator;
 2172|  2.41k|    }
 2173|       |
 2174|  1.72k|    return it;
 2175|   128k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   129k|{
 1998|   129k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   129k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   129k|    auto it = range.begin();
 2002|   129k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   129k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   129k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 129k, False: 0]
  ------------------
 2011|   129k|        ++it;
 2012|   129k|        return {it, string_type(1, *range.begin())};
 2013|   129k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   129k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   129k|    {
 1989|   129k|        return !codepoint.empty();
 1990|   129k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   128k|{
 2181|   128k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   128k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   128k|{
 3055|   128k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 128k, False: 0]
  ------------------
 3056|   128k|        auto it = read_while_classic_space(range);
 3057|   128k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   128k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.72k, False: 127k]
  |  |  ------------------
  ------------------
 3059|  1.72k|            return unexpected(e);
 3060|  1.72k|        }
 3061|       |
 3062|   127k|        return it;
 3063|   128k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   128k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   128k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   128k|    else {
 2225|   128k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   128k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   128k|            return detail::is_cp_space(cp);
 2238|   128k|        });
 2239|   128k|    }
 2240|   128k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   128k|        : m_fptr([](storage fn,
  743|   128k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   128k|              cvref<T> obj = *get<T>(fn);
  745|   128k|              if constexpr (std::is_void_v<R>) {
  746|   128k|                  obj(static_cast<decltype(args)>(args)...);
  747|   128k|              }
  748|   128k|              else {
  749|   128k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   128k|              }
  751|   128k|          }),
  752|   128k|          m_storage(std::addressof(f))
  753|   128k|    {
  754|   128k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   129k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   129k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   129k|              else {
  749|   129k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   129k|              }
  751|   129k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   129k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   129k|        else if constexpr (std::is_object_v<T>) {
  688|   129k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   129k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   129k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   129k|            return detail::is_cp_space(cp);
 2238|   129k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   128k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   128k|        {
  662|   128k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5899|  16.0k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  16.0k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  16.0k|            auto rd = make_reader<T, char_type>();
 5905|  16.0k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  16.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  16.0k|    {
 5892|  16.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 396, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    396|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    396|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    396|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    396|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    396|    }                                                  \
  |  |  |  | 3939|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  15.6k|                        .transform_error(make_eof_scan_error));
 5894|  15.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  16.0k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|  96.5k|{
 5824|  96.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.87k, False: 94.6k]
  |  |  ------------------
  ------------------
 5825|  1.87k|        return unexpected(e);
 5826|  1.87k|    }
 5827|       |
 5828|  94.6k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 94.6k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  94.6k|    return skip_classic_whitespace(range);
 5833|  94.6k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  15.6k|    {
 3568|  15.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  15.6k|        return read_default_with_base(range, value, 10);
 3570|  15.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|  18.5k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  18.5k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  18.5k|            auto rd = make_reader<T, char_type>();
 5905|  18.5k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  18.5k|    {
 5892|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 510, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    510|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    510|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    510|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    510|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    510|    }                                                  \
  |  |  |  | 3939|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  18.0k|                        .transform_error(make_eof_scan_error));
 5894|  18.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  18.0k|    {
 3568|  18.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  18.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  18.0k|        return read_default_with_base(range, value, 10);
 3570|  18.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5899|  18.8k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  18.8k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  18.8k|            auto rd = make_reader<T, char_type>();
 5905|  18.8k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  18.8k|    {
 5892|  18.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 558, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    558|    }                                                  \
  |  |  |  | 3939|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  18.3k|                        .transform_error(make_eof_scan_error));
 5894|  18.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  18.3k|    {
 3568|  18.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  18.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  18.3k|        return read_default_with_base(range, value, 10);
 3570|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5899|  13.4k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  13.4k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  13.4k|            auto rd = make_reader<T, char_type>();
 5905|  13.4k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  13.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  13.4k|    {
 5892|  13.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 279, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    279|    }                                                  \
  |  |  |  | 3939|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  13.1k|                        .transform_error(make_eof_scan_error));
 5894|  13.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  13.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  13.1k|    {
 3568|  13.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  13.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  13.1k|        return read_default_with_base(range, value, 10);
 3570|  13.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|  14.7k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  14.7k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  14.7k|            auto rd = make_reader<T, char_type>();
 5905|  14.7k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  14.7k|    {
 5892|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 342, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    342|    }                                                  \
  |  |  |  | 3939|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.3k|                        .transform_error(make_eof_scan_error));
 5894|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  14.3k|    {
 3568|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.3k|        return read_default_with_base(range, value, 10);
 3570|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5899|  14.9k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  14.9k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  14.9k|            auto rd = make_reader<T, char_type>();
 5905|  14.9k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  14.9k|    {
 5892|  14.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 369, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    369|    }                                                  \
  |  |  |  | 3939|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.5k|                        .transform_error(make_eof_scan_error));
 5894|  14.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  14.5k|    {
 3568|  14.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.5k|        return read_default_with_base(range, value, 10);
 3570|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  16.0k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  16.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  16.0k|            auto rd = make_reader<T, char_type>();
 5909|  16.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 16.0k, False: 0]
  ------------------
 5910|  16.0k|                return impl(rd, range, value);
 5911|  16.0k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  16.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  16.0k|    {
 5892|  16.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 378, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    378|    }                                                  \
  |  |  |  | 3939|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  15.6k|                        .transform_error(make_eof_scan_error));
 5894|  15.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  16.0k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|  95.1k|{
 5824|  95.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.87k, False: 93.2k]
  |  |  ------------------
  ------------------
 5825|  1.87k|        return unexpected(e);
 5826|  1.87k|    }
 5827|       |
 5828|  93.2k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 93.2k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  93.2k|    return skip_classic_whitespace(range);
 5833|  93.2k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  15.6k|    {
 3568|  15.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  15.6k|        return read_default_with_base(range, value, 10);
 3570|  15.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  15.6k|    {
 3532|  15.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  15.6k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  15.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 15.6k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  30.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.13k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.13k|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  30.1k|                parse_integer_digits_without_thsep(
 3551|  30.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  30.1k|                    prefix_result.parsed_base));
 3553|       |
 3554|  30.1k|        auto buf = make_contiguous_buffer(
 3555|  30.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  30.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 579, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    579|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    579|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    579|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    579|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    579|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.9k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.9k|        return ranges::next(prefix_result.iterator,
 3561|  13.9k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  30.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  17.9k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  17.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  17.9k|            auto rd = make_reader<T, char_type>();
 5909|  17.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 17.9k, False: 0]
  ------------------
 5910|  17.9k|                return impl(rd, range, value);
 5911|  17.9k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  17.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  17.9k|    {
 5892|  17.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 483, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    483|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    483|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    483|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    483|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    483|    }                                                  \
  |  |  |  | 3939|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  17.4k|                        .transform_error(make_eof_scan_error));
 5894|  17.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  17.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  17.4k|    {
 3568|  17.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  17.4k|        return read_default_with_base(range, value, 10);
 3570|  17.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  17.4k|    {
 3532|  17.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  17.4k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  17.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 17.4k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  33.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.32k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.32k|    }                                                  \
  |  |  |  | 3939|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  33.6k|                parse_integer_digits_without_thsep(
 3551|  33.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  33.6k|                    prefix_result.parsed_base));
 3553|       |
 3554|  33.6k|        auto buf = make_contiguous_buffer(
 3555|  33.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  33.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 291, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    291|    }                                                  \
  |  |  |  | 3939|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  15.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  15.8k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  15.8k|        return ranges::next(prefix_result.iterator,
 3561|  15.8k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  33.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  18.2k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  18.2k|            auto rd = make_reader<T, char_type>();
 5909|  18.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 18.2k, False: 0]
  ------------------
 5910|  18.2k|                return impl(rd, range, value);
 5911|  18.2k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  18.2k|    {
 5892|  18.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 528, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    528|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    528|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    528|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    528|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    528|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  17.7k|                        .transform_error(make_eof_scan_error));
 5894|  17.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  17.7k|    {
 3568|  17.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  17.7k|        return read_default_with_base(range, value, 10);
 3570|  17.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  17.7k|    {
 3532|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  17.7k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 17.7k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  34.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  34.0k|                parse_integer_digits_without_thsep(
 3551|  34.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  34.0k|                    prefix_result.parsed_base));
 3553|       |
 3554|  34.0k|        auto buf = make_contiguous_buffer(
 3555|  34.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  34.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 174, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    174|    }                                                  \
  |  |  |  | 3939|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  16.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  16.1k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  16.1k|        return ranges::next(prefix_result.iterator,
 3561|  16.1k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  34.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  13.3k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  13.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  13.3k|            auto rd = make_reader<T, char_type>();
 5909|  13.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 13.3k, False: 0]
  ------------------
 5910|  13.3k|                return impl(rd, range, value);
 5911|  13.3k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  13.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  13.3k|    {
 5892|  13.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 267, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    267|    }                                                  \
  |  |  |  | 3939|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  13.1k|                        .transform_error(make_eof_scan_error));
 5894|  13.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  13.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  13.1k|    {
 3568|  13.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  13.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  13.1k|        return read_default_with_base(range, value, 10);
 3570|  13.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  13.1k|    {
 3532|  13.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  13.1k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  13.1k|        if constexpr (!std::is_signed_v<T>) {
 3536|  13.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 768, False: 12.3k]
  ------------------
 3537|    768|                return detail::unexpected_scan_error(
 3538|    768|                    scan_error::invalid_scanned_value,
 3539|    768|                    "Unexpected '-' sign when parsing an "
 3540|    768|                    "unsigned value");
 3541|    768|            }
 3542|  13.1k|        }
 3543|       |
 3544|  13.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 13.1k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  25.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 774, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    774|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  25.4k|                parse_integer_digits_without_thsep(
 3551|  25.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  25.4k|                    prefix_result.parsed_base));
 3553|       |
 3554|  25.4k|        auto buf = make_contiguous_buffer(
 3555|  25.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  25.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 285, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    285|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    285|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    285|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    285|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    285|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  12.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  12.0k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  12.0k|        return ranges::next(prefix_result.iterator,
 3561|  12.0k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  25.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  14.6k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  14.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  14.6k|            auto rd = make_reader<T, char_type>();
 5909|  14.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 14.6k, False: 0]
  ------------------
 5910|  14.6k|                return impl(rd, range, value);
 5911|  14.6k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  14.6k|    {
 5892|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.3k|                        .transform_error(make_eof_scan_error));
 5894|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  14.3k|    {
 3568|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.3k|        return read_default_with_base(range, value, 10);
 3570|  14.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  14.3k|    {
 3532|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.3k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 786, False: 13.5k]
  ------------------
 3537|    786|                return detail::unexpected_scan_error(
 3538|    786|                    scan_error::invalid_scanned_value,
 3539|    786|                    "Unexpected '-' sign when parsing an "
 3540|    786|                    "unsigned value");
 3541|    786|            }
 3542|  14.3k|        }
 3543|       |
 3544|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.3k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  27.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 828, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    828|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  27.8k|                parse_integer_digits_without_thsep(
 3551|  27.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  27.8k|                    prefix_result.parsed_base));
 3553|       |
 3554|  27.8k|        auto buf = make_contiguous_buffer(
 3555|  27.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  27.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 156, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    156|    }                                                  \
  |  |  |  | 3939|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.3k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.3k|        return ranges::next(prefix_result.iterator,
 3561|  13.3k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  27.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  14.8k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  14.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  14.8k|            auto rd = make_reader<T, char_type>();
 5909|  14.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 14.8k, False: 0]
  ------------------
 5910|  14.8k|                return impl(rd, range, value);
 5911|  14.8k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  14.8k|    {
 5892|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 351, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    351|    }                                                  \
  |  |  |  | 3939|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.4k|                        .transform_error(make_eof_scan_error));
 5894|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  14.4k|    {
 3568|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.4k|        return read_default_with_base(range, value, 10);
 3570|  14.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  14.4k|    {
 3532|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.4k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 810, False: 13.6k]
  ------------------
 3537|    810|                return detail::unexpected_scan_error(
 3538|    810|                    scan_error::invalid_scanned_value,
 3539|    810|                    "Unexpected '-' sign when parsing an "
 3540|    810|                    "unsigned value");
 3541|    810|            }
 3542|  14.4k|        }
 3543|       |
 3544|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.4k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  28.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 846, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    846|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    846|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    846|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    846|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    846|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  28.1k|                parse_integer_digits_without_thsep(
 3551|  28.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  28.1k|                    prefix_result.parsed_base));
 3553|       |
 3554|  28.1k|        auto buf = make_contiguous_buffer(
 3555|  28.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  28.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 87, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     87|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.5k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.5k|        return ranges::next(prefix_result.iterator,
 3561|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  28.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2974|   358k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   358k|    static_cast<    \
  |  |  935|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   358k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   358k|          m_current(m_range.begin())
 2977|   358k|    {
 2978|   358k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2986|   617k|    {
 2987|   617k|        return m_range.end();
 2988|   617k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3001|   283k|    {
 3002|   283k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|   283k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|   283k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 283k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|   283k|        }
 3008|   283k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   283k|    static_cast<    \
  |  |  935|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|   283k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2991|   333k|    {
 2992|   333k|        return ranges::subrange{begin(), end()};
 2993|   333k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6214|  53.8k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  53.8k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  53.8k|            auto rd = make_reader<T, char_type>();
 6220|  53.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  53.8k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  53.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  53.8k|    {
 6150|  53.8k|        const bool need_skipped_width =
 6151|  53.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 53.8k]
  |  Branch (6151:33): [True: 0, False: 53.8k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  53.8k|        auto it = rng.begin();
 6155|  53.8k|        std::ptrdiff_t prefix_width = 0;
 6156|  53.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 53.8k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  53.8k|        else {
 6164|  53.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  53.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.37k, False: 52.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.37k|    }                                                  \
  |  |  |  | 3939|  53.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  52.4k|            std::tie(it, prefix_width) = prefix_result;
 6166|  52.4k|        }
 6167|  52.4k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  52.4k|        std::ptrdiff_t value_width = 0;
 6171|  52.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 52.4k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  52.4k|        else {
 6187|  52.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.00k, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.00k|    }                                                  \
  |  | 3939|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  45.4k|                                             specs, value, loc));
 6189|       |
 6190|  45.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 45.4k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  45.4k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  45.4k|        std::ptrdiff_t postfix_width = 0;
 6199|  45.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 44.4k, False: 1.02k]
  ------------------
 6200|  44.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  44.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  44.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  44.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  44.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  44.4k|                                 value_width));
 6204|  44.4k|            std::tie(it, postfix_width) = postfix_result;
 6205|  44.4k|        }
 6206|       |
 6207|  45.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  45.4k|            specs, prefix_width, value_width, postfix_width));
 6209|  45.4k|        return it;
 6210|  45.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   333k|    {
 6063|   333k|        const bool need_skipped_width =
 6064|   333k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 333k]
  |  Branch (6064:33): [True: 0, False: 333k]
  ------------------
 6065|   333k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   333k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 333k]
  ------------------
 6069|   333k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 333k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   333k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 333k, False: 0]
  |  Branch (6073:56): [True: 333k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   333k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 333k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   658k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.82k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.82k|    }                                                  \
  |  |  |  | 3939|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   658k|                            make_eof_scan_error));
 6084|       |
 6085|   658k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 325k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   325k|            return result_type{it, 0};
 6093|   658k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   333k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|   276k|    {
 6105|   276k|        const bool need_skipped_width =
 6106|   276k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 276k]
  |  Branch (6106:33): [True: 0, False: 276k]
  ------------------
 6107|   276k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   276k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 276k]
  ------------------
 6110|   276k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 276k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   276k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 276k, False: 0]
  ------------------
 6119|   276k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 276k]
  ------------------
 6120|   276k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   276k|        return result_type{rng.begin(), 0};
 6144|   276k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  63.8k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  63.8k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  63.8k|            auto rd = make_reader<T, char_type>();
 6220|  63.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  63.8k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  63.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  63.8k|    {
 6150|  63.8k|        const bool need_skipped_width =
 6151|  63.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 63.8k]
  |  Branch (6151:33): [True: 0, False: 63.8k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  63.8k|        auto it = rng.begin();
 6155|  63.8k|        std::ptrdiff_t prefix_width = 0;
 6156|  63.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 63.8k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  63.8k|        else {
 6164|  63.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  63.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.81k, False: 62.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.81k|    }                                                  \
  |  |  |  | 3939|  63.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  62.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  62.0k|        }
 6167|  62.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  62.0k|        std::ptrdiff_t value_width = 0;
 6171|  62.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 62.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  62.0k|        else {
 6187|  62.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.56k, False: 55.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.56k|    }                                                  \
  |  | 3939|  62.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  55.4k|                                             specs, value, loc));
 6189|       |
 6190|  55.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 55.4k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  55.4k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  55.4k|        std::ptrdiff_t postfix_width = 0;
 6199|  55.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 54.0k, False: 1.36k]
  ------------------
 6200|  54.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  54.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  54.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  54.0k|                                 value_width));
 6204|  54.0k|            std::tie(it, postfix_width) = postfix_result;
 6205|  54.0k|        }
 6206|       |
 6207|  55.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  55.4k|            specs, prefix_width, value_width, postfix_width));
 6209|  55.4k|        return it;
 6210|  55.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6214|  64.9k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  64.9k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  64.9k|            auto rd = make_reader<T, char_type>();
 6220|  64.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  64.9k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  64.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  64.9k|    {
 6150|  64.9k|        const bool need_skipped_width =
 6151|  64.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 64.9k]
  |  Branch (6151:33): [True: 0, False: 64.9k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  64.9k|        auto it = rng.begin();
 6155|  64.9k|        std::ptrdiff_t prefix_width = 0;
 6156|  64.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 64.9k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  64.9k|        else {
 6164|  64.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.01k, False: 62.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.01k|    }                                                  \
  |  |  |  | 3939|  64.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  62.9k|            std::tie(it, prefix_width) = prefix_result;
 6166|  62.9k|        }
 6167|  62.9k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  62.9k|        std::ptrdiff_t value_width = 0;
 6171|  62.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 62.9k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  62.9k|        else {
 6187|  62.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.36k, False: 56.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.36k|    }                                                  \
  |  | 3939|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  56.6k|                                             specs, value, loc));
 6189|       |
 6190|  56.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 56.6k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  56.6k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  56.6k|        std::ptrdiff_t postfix_width = 0;
 6199|  56.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 55.0k, False: 1.52k]
  ------------------
 6200|  55.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  55.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  55.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  55.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  55.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  55.0k|                                 value_width));
 6204|  55.0k|            std::tie(it, postfix_width) = postfix_result;
 6205|  55.0k|        }
 6206|       |
 6207|  56.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  56.6k|            specs, prefix_width, value_width, postfix_width));
 6209|  56.6k|        return it;
 6210|  56.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6214|  47.4k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  47.4k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  47.4k|            auto rd = make_reader<T, char_type>();
 6220|  47.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  47.4k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  47.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  47.4k|    {
 6150|  47.4k|        const bool need_skipped_width =
 6151|  47.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 47.4k]
  |  Branch (6151:33): [True: 0, False: 47.4k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  47.4k|        auto it = rng.begin();
 6155|  47.4k|        std::ptrdiff_t prefix_width = 0;
 6156|  47.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 47.4k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  47.4k|        else {
 6164|  47.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.02k, False: 46.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.02k|    }                                                  \
  |  |  |  | 3939|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  46.4k|            std::tie(it, prefix_width) = prefix_result;
 6166|  46.4k|        }
 6167|  46.4k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  46.4k|        std::ptrdiff_t value_width = 0;
 6171|  46.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 46.4k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  46.4k|        else {
 6187|  46.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.35k, False: 39.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.35k|    }                                                  \
  |  | 3939|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  39.0k|                                             specs, value, loc));
 6189|       |
 6190|  39.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 39.0k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  39.0k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  39.0k|        std::ptrdiff_t postfix_width = 0;
 6199|  39.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 38.2k, False: 766]
  ------------------
 6200|  38.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  38.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  38.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  38.2k|                                 value_width));
 6204|  38.2k|            std::tie(it, postfix_width) = postfix_result;
 6205|  38.2k|        }
 6206|       |
 6207|  39.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  39.0k|            specs, prefix_width, value_width, postfix_width));
 6209|  39.0k|        return it;
 6210|  39.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  51.6k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  51.6k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  51.6k|            auto rd = make_reader<T, char_type>();
 6220|  51.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  51.6k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  51.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  51.6k|    {
 6150|  51.6k|        const bool need_skipped_width =
 6151|  51.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 51.6k]
  |  Branch (6151:33): [True: 0, False: 51.6k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  51.6k|        auto it = rng.begin();
 6155|  51.6k|        std::ptrdiff_t prefix_width = 0;
 6156|  51.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 51.6k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  51.6k|        else {
 6164|  51.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.25k, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.25k|    }                                                  \
  |  |  |  | 3939|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6166|  50.3k|        }
 6167|  50.3k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  50.3k|        std::ptrdiff_t value_width = 0;
 6171|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 50.3k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  50.3k|        else {
 6187|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.12k, False: 43.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.12k|    }                                                  \
  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  43.2k|                                             specs, value, loc));
 6189|       |
 6190|  43.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 43.2k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  43.2k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  43.2k|        std::ptrdiff_t postfix_width = 0;
 6199|  43.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 42.2k, False: 932]
  ------------------
 6200|  42.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  42.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  42.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  42.2k|                                 value_width));
 6204|  42.2k|            std::tie(it, postfix_width) = postfix_result;
 6205|  42.2k|        }
 6206|       |
 6207|  43.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  43.2k|            specs, prefix_width, value_width, postfix_width));
 6209|  43.2k|        return it;
 6210|  43.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6214|  52.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  52.1k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  52.1k|            auto rd = make_reader<T, char_type>();
 6220|  52.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  52.1k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  52.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  52.1k|    {
 6150|  52.1k|        const bool need_skipped_width =
 6151|  52.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 52.1k]
  |  Branch (6151:33): [True: 0, False: 52.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  52.1k|        auto it = rng.begin();
 6155|  52.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  52.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 52.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  52.1k|        else {
 6164|  52.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.35k, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.35k|    }                                                  \
  |  |  |  | 3939|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  50.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  50.8k|        }
 6167|  50.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  50.8k|        std::ptrdiff_t value_width = 0;
 6171|  50.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 50.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  50.8k|        else {
 6187|  50.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.01k, False: 43.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.01k|    }                                                  \
  |  | 3939|  50.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  43.8k|                                             specs, value, loc));
 6189|       |
 6190|  43.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 43.8k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  43.8k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  43.8k|        std::ptrdiff_t postfix_width = 0;
 6199|  43.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 42.7k, False: 1.03k]
  ------------------
 6200|  42.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  42.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  42.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  42.7k|                                 value_width));
 6204|  42.7k|            std::tie(it, postfix_width) = postfix_result;
 6205|  42.7k|        }
 6206|       |
 6207|  43.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  43.8k|            specs, prefix_width, value_width, postfix_width));
 6209|  43.8k|        return it;
 6210|  43.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5899|  4.29k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.29k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.29k|            auto rd = make_reader<T, char_type>();
 5905|  4.29k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.29k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.29k|    {
 5892|  4.29k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.23k|                        .transform_error(make_eof_scan_error));
 5894|  4.23k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.29k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|  25.8k|{
 5824|  25.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 141, False: 25.7k]
  |  |  ------------------
  ------------------
 5825|    141|        return unexpected(e);
 5826|    141|    }
 5827|       |
 5828|  25.7k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 25.7k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  25.7k|    return skip_classic_whitespace(range);
 5833|  25.7k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.23k|    {
 3568|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.23k|        return read_default_with_base(range, value, 10);
 3570|  4.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.23k|    {
 3532|  4.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.23k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.23k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.45k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.45k|                parse_integer_digits_without_thsep(
 3551|  8.45k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.45k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.45k|        auto buf = make_contiguous_buffer(
 3555|  8.45k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.45k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.11k, False: 105]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.11k|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    105|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    105|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    105|                                    prefix_result.parsed_base));
 3559|       |
 3560|    105|        return ranges::next(prefix_result.iterator,
 3561|    105|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.45k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|  4.32k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.32k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.32k|            auto rd = make_reader<T, char_type>();
 5905|  4.32k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.32k|    {
 5892|  4.32k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 4.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.25k|                        .transform_error(make_eof_scan_error));
 5894|  4.25k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.32k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.25k|    {
 3568|  4.25k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.25k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.25k|        return read_default_with_base(range, value, 10);
 3570|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.25k|    {
 3532|  4.25k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.25k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.25k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.25k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.50k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.50k|                parse_integer_digits_without_thsep(
 3551|  8.50k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.50k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.50k|        auto buf = make_contiguous_buffer(
 3555|  8.50k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.50k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.11k, False: 135]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.11k|    }                                                  \
  |  |  |  | 3939|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    135|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    135|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    135|                                    prefix_result.parsed_base));
 3559|       |
 3560|    135|        return ranges::next(prefix_result.iterator,
 3561|    135|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.50k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5899|  4.35k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.35k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.35k|            auto rd = make_reader<T, char_type>();
 5905|  4.35k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.35k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.35k|    {
 5892|  4.35k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|  4.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.29k|                        .transform_error(make_eof_scan_error));
 5894|  4.29k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.35k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.29k|    {
 3568|  4.29k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.29k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.29k|        return read_default_with_base(range, value, 10);
 3570|  4.29k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.29k|    {
 3532|  4.29k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.29k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.29k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.29k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.57k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.57k|                parse_integer_digits_without_thsep(
 3551|  8.57k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.57k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.57k|        auto buf = make_contiguous_buffer(
 3555|  8.57k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.57k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.11k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.11k|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    168|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    168|                                    prefix_result.parsed_base));
 3559|       |
 3560|    168|        return ranges::next(prefix_result.iterator,
 3561|    168|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.57k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5899|  4.27k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.27k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.27k|            auto rd = make_reader<T, char_type>();
 5905|  4.27k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.27k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.27k|    {
 5892|  4.27k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.21k|                        .transform_error(make_eof_scan_error));
 5894|  4.21k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.27k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.21k|    {
 3568|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.21k|        return read_default_with_base(range, value, 10);
 3570|  4.21k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.21k|    {
 3532|  4.21k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.21k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.21k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.21k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.16k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.21k|        }
 3543|       |
 3544|  4.21k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.21k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.43k|                parse_integer_digits_without_thsep(
 3551|  8.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.43k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.43k|        auto buf = make_contiguous_buffer(
 3555|  8.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.07k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.07k|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    138|                                    prefix_result.parsed_base));
 3559|       |
 3560|    138|        return ranges::next(prefix_result.iterator,
 3561|    138|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.43k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|  4.29k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.29k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.29k|            auto rd = make_reader<T, char_type>();
 5905|  4.29k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.29k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.29k|    {
 5892|  4.29k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.23k|                        .transform_error(make_eof_scan_error));
 5894|  4.23k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.29k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.23k|    {
 3568|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.23k|        return read_default_with_base(range, value, 10);
 3570|  4.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.23k|    {
 3532|  4.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.23k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.23k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.18k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.23k|        }
 3543|       |
 3544|  4.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.23k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.46k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.46k|                parse_integer_digits_without_thsep(
 3551|  8.46k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.46k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.46k|        auto buf = make_contiguous_buffer(
 3555|  8.46k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.46k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.07k, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.07k|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    156|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    156|                                    prefix_result.parsed_base));
 3559|       |
 3560|    156|        return ranges::next(prefix_result.iterator,
 3561|    156|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.46k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5899|  4.31k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.31k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.31k|            auto rd = make_reader<T, char_type>();
 5905|  4.31k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.31k|    {
 5892|  4.31k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|  4.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.26k|                        .transform_error(make_eof_scan_error));
 5894|  4.26k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.31k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.26k|    {
 3568|  4.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.26k|        return read_default_with_base(range, value, 10);
 3570|  4.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.26k|    {
 3532|  4.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.26k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.26k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.26k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 60, False: 4.20k]
  ------------------
 3537|     60|                return detail::unexpected_scan_error(
 3538|     60|                    scan_error::invalid_scanned_value,
 3539|     60|                    "Unexpected '-' sign when parsing an "
 3540|     60|                    "unsigned value");
 3541|     60|            }
 3542|  4.26k|        }
 3543|       |
 3544|  4.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.26k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.51k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.51k|                parse_integer_digits_without_thsep(
 3551|  8.51k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.51k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.51k|        auto buf = make_contiguous_buffer(
 3555|  8.51k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.51k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.07k, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.07k|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    186|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    186|                                    prefix_result.parsed_base));
 3559|       |
 3560|    186|        return ranges::next(prefix_result.iterator,
 3561|    186|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.51k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2974|   153k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   153k|    static_cast<    \
  |  |  935|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   153k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   153k|          m_current(m_range.begin())
 2977|   153k|    {
 2978|   153k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2986|   105k|    {
 2987|   105k|        return m_range.end();
 2988|   105k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3001|  2.53k|    {
 3002|  2.53k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|  2.53k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|  2.53k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 2.53k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|  2.53k|        }
 3008|  2.53k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  2.53k|    static_cast<    \
  |  |  935|  2.53k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|  2.53k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2991|   103k|    {
 2992|   103k|        return ranges::subrange{begin(), end()};
 2993|   103k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6214|  17.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.1k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.1k|            auto rd = make_reader<T, char_type>();
 6220|  17.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.1k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.1k|    {
 6150|  17.1k|        const bool need_skipped_width =
 6151|  17.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.1k]
  |  Branch (6151:33): [True: 0, False: 17.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.1k|        auto it = rng.begin();
 6155|  17.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.1k|        else {
 6164|  17.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.8k|        }
 6167|  16.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.8k|        std::ptrdiff_t value_width = 0;
 6171|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.8k|        else {
 6187|  16.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 380]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.4k|    }                                                  \
  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    380|                                             specs, value, loc));
 6189|       |
 6190|    380|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 380]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    380|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    380|        std::ptrdiff_t postfix_width = 0;
 6199|    380|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 270, False: 110]
  ------------------
 6200|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    270|                                 value_width));
 6204|    270|            std::tie(it, postfix_width) = postfix_result;
 6205|    270|        }
 6206|       |
 6207|    380|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    380|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 380]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    380|            specs, prefix_width, value_width, postfix_width));
 6209|    380|        return it;
 6210|    380|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   103k|    {
 6063|   103k|        const bool need_skipped_width =
 6064|   103k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 103k]
  |  Branch (6064:33): [True: 0, False: 103k]
  ------------------
 6065|   103k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   103k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 103k]
  ------------------
 6069|   103k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 103k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   103k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 103k, False: 0]
  |  Branch (6073:56): [True: 103k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   103k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 103k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   204k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   204k|                            make_eof_scan_error));
 6084|       |
 6085|   204k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 101k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   101k|            return result_type{it, 0};
 6093|   204k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   103k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|  1.92k|    {
 6105|  1.92k|        const bool need_skipped_width =
 6106|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 1.92k]
  |  Branch (6106:33): [True: 0, False: 1.92k]
  ------------------
 6107|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 1.92k]
  ------------------
 6110|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 1.92k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 1.92k, False: 0]
  ------------------
 6119|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.92k]
  ------------------
 6120|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|  1.92k|        return result_type{rng.begin(), 0};
 6144|  1.92k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  17.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.2k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.2k|            auto rd = make_reader<T, char_type>();
 6220|  17.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.2k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.2k|    {
 6150|  17.2k|        const bool need_skipped_width =
 6151|  17.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.2k]
  |  Branch (6151:33): [True: 0, False: 17.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.2k|        auto it = rng.begin();
 6155|  17.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.2k|        else {
 6164|  17.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 272, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    272|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.9k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.9k|        }
 6167|  16.9k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.9k|        std::ptrdiff_t value_width = 0;
 6171|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.9k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.9k|        else {
 6187|  16.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 466]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.4k|    }                                                  \
  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    466|                                             specs, value, loc));
 6189|       |
 6190|    466|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 466]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    466|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    466|        std::ptrdiff_t postfix_width = 0;
 6199|    466|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 344, False: 122]
  ------------------
 6200|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    344|                                 value_width));
 6204|    344|            std::tie(it, postfix_width) = postfix_result;
 6205|    344|        }
 6206|       |
 6207|    466|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    466|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 466]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    466|            specs, prefix_width, value_width, postfix_width));
 6209|    466|        return it;
 6210|    466|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.3k|            auto rd = make_reader<T, char_type>();
 6220|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 272, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    272|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.4k, False: 550]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.4k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    550|                                             specs, value, loc));
 6189|       |
 6190|    550|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 550]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    550|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    550|        std::ptrdiff_t postfix_width = 0;
 6199|    550|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 428, False: 122]
  ------------------
 6200|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    428|                                 value_width));
 6204|    428|            std::tie(it, postfix_width) = postfix_result;
 6205|    428|        }
 6206|       |
 6207|    550|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    550|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 550]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    550|            specs, prefix_width, value_width, postfix_width));
 6209|    550|        return it;
 6210|    550|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6214|  17.0k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.0k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.0k|            auto rd = make_reader<T, char_type>();
 6220|  17.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.0k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.0k|    {
 6150|  17.0k|        const bool need_skipped_width =
 6151|  17.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.0k]
  |  Branch (6151:33): [True: 0, False: 17.0k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.0k|        auto it = rng.begin();
 6155|  17.0k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.0k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.0k|        else {
 6164|  17.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.8k|        }
 6167|  16.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.8k|        std::ptrdiff_t value_width = 0;
 6171|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.8k|        else {
 6187|  16.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.5k, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.5k|    }                                                  \
  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    326|                                             specs, value, loc));
 6189|       |
 6190|    326|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 326]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    326|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    326|        std::ptrdiff_t postfix_width = 0;
 6199|    326|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 242, False: 84]
  ------------------
 6200|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    242|                                 value_width));
 6204|    242|            std::tie(it, postfix_width) = postfix_result;
 6205|    242|        }
 6206|       |
 6207|    326|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    326|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    326|            specs, prefix_width, value_width, postfix_width));
 6209|    326|        return it;
 6210|    326|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  17.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.1k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.1k|            auto rd = make_reader<T, char_type>();
 6220|  17.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.1k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.1k|    {
 6150|  17.1k|        const bool need_skipped_width =
 6151|  17.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.1k]
  |  Branch (6151:33): [True: 0, False: 17.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.1k|        auto it = rng.begin();
 6155|  17.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.1k|        else {
 6164|  17.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.8k|        }
 6167|  16.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.8k|        std::ptrdiff_t value_width = 0;
 6171|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.8k|        else {
 6187|  16.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.5k, False: 372]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.5k|    }                                                  \
  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    372|                                             specs, value, loc));
 6189|       |
 6190|    372|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 372]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    372|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    372|        std::ptrdiff_t postfix_width = 0;
 6199|    372|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 288, False: 84]
  ------------------
 6200|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    288|                                 value_width));
 6204|    288|            std::tie(it, postfix_width) = postfix_result;
 6205|    288|        }
 6206|       |
 6207|    372|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    372|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 372]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    372|            specs, prefix_width, value_width, postfix_width));
 6209|    372|        return it;
 6210|    372|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6214|  17.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.1k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.1k|            auto rd = make_reader<T, char_type>();
 6220|  17.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.1k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.1k|    {
 6150|  17.1k|        const bool need_skipped_width =
 6151|  17.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.1k]
  |  Branch (6151:33): [True: 0, False: 17.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.1k|        auto it = rng.begin();
 6155|  17.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.1k|        else {
 6164|  17.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  16.9k|            std::tie(it, prefix_width) = prefix_result;
 6166|  16.9k|        }
 6167|  16.9k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  16.9k|        std::ptrdiff_t value_width = 0;
 6171|  16.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 16.9k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  16.9k|        else {
 6187|  16.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.5k, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.5k|    }                                                  \
  |  | 3939|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    438|                                             specs, value, loc));
 6189|       |
 6190|    438|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 438]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    438|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    438|        std::ptrdiff_t postfix_width = 0;
 6199|    438|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 354, False: 84]
  ------------------
 6200|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    354|                                 value_width));
 6204|    354|            std::tie(it, postfix_width) = postfix_result;
 6205|    354|        }
 6206|       |
 6207|    438|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    438|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    438|            specs, prefix_width, value_width, postfix_width));
 6209|    438|        return it;
 6210|    438|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.29k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.29k|            auto rd = make_reader<T, char_type>();
 5909|  4.29k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.29k, False: 0]
  ------------------
 5910|  4.29k|                return impl(rd, range, value);
 5911|  4.29k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.29k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.29k|    {
 5892|  4.29k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.23k|                        .transform_error(make_eof_scan_error));
 5894|  4.23k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.29k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|  25.8k|{
 5824|  25.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 141, False: 25.7k]
  |  |  ------------------
  ------------------
 5825|    141|        return unexpected(e);
 5826|    141|    }
 5827|       |
 5828|  25.7k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 25.7k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  25.7k|    return skip_classic_whitespace(range);
 5833|  25.7k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.23k|    {
 3568|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.23k|        return read_default_with_base(range, value, 10);
 3570|  4.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.23k|    {
 3532|  4.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.23k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.23k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.37k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.08k, False: 147]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.08k|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    147|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.37k|                parse_integer_digits_without_thsep(
 3551|  4.37k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.37k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.37k|        auto buf = make_contiguous_buffer(
 3555|  4.37k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.37k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    147|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    147|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    147|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    147|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 105]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    147|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    105|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    105|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    105|                                    prefix_result.parsed_base));
 3559|       |
 3560|    105|        return ranges::next(prefix_result.iterator,
 3561|    105|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.32k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.32k|            auto rd = make_reader<T, char_type>();
 5909|  4.32k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.32k, False: 0]
  ------------------
 5910|  4.32k|                return impl(rd, range, value);
 5911|  4.32k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.32k|    {
 5892|  4.32k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 4.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.25k|                        .transform_error(make_eof_scan_error));
 5894|  4.25k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.32k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.25k|    {
 3568|  4.25k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.25k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.25k|        return read_default_with_base(range, value, 10);
 3570|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.25k|    {
 3532|  4.25k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.25k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.25k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.25k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.41k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.10k, False: 153]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.10k|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    153|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.41k|                parse_integer_digits_without_thsep(
 3551|  4.41k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.41k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.41k|        auto buf = make_contiguous_buffer(
 3555|  4.41k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.41k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    153|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    153|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    153|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    153|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 135]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    153|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    135|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    135|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    135|                                    prefix_result.parsed_base));
 3559|       |
 3560|    135|        return ranges::next(prefix_result.iterator,
 3561|    135|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.41k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.35k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.35k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.35k|            auto rd = make_reader<T, char_type>();
 5909|  4.35k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.35k, False: 0]
  ------------------
 5910|  4.35k|                return impl(rd, range, value);
 5911|  4.35k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.35k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.35k|    {
 5892|  4.35k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|  4.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.29k|                        .transform_error(make_eof_scan_error));
 5894|  4.29k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.35k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.29k|    {
 3568|  4.29k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.29k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.29k|        return read_default_with_base(range, value, 10);
 3570|  4.29k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.29k|    {
 3532|  4.29k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.29k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.29k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.29k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.45k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.12k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.12k|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.45k|                parse_integer_digits_without_thsep(
 3551|  4.45k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.45k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.45k|        auto buf = make_contiguous_buffer(
 3555|  4.45k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.45k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    168|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    168|                                    prefix_result.parsed_base));
 3559|       |
 3560|    168|        return ranges::next(prefix_result.iterator,
 3561|    168|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.45k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.27k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.27k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.27k|            auto rd = make_reader<T, char_type>();
 5909|  4.27k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.27k, False: 0]
  ------------------
 5910|  4.27k|                return impl(rd, range, value);
 5911|  4.27k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.27k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.27k|    {
 5892|  4.27k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.21k|                        .transform_error(make_eof_scan_error));
 5894|  4.21k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.27k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.21k|    {
 3568|  4.21k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.21k|        return read_default_with_base(range, value, 10);
 3570|  4.21k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.21k|    {
 3532|  4.21k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.21k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.21k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.21k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.16k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.21k|        }
 3543|       |
 3544|  4.21k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.21k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.04k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.04k|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.38k|                parse_integer_digits_without_thsep(
 3551|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.38k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.38k|        auto buf = make_contiguous_buffer(
 3555|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    171|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    171|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    171|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    171|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 33, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     33|    }                                                  \
  |  |  |  | 3939|    171|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    138|                                    prefix_result.parsed_base));
 3559|       |
 3560|    138|        return ranges::next(prefix_result.iterator,
 3561|    138|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.38k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.29k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.29k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.29k|            auto rd = make_reader<T, char_type>();
 5909|  4.29k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.29k, False: 0]
  ------------------
 5910|  4.29k|                return impl(rd, range, value);
 5911|  4.29k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.29k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.29k|    {
 5892|  4.29k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.23k|                        .transform_error(make_eof_scan_error));
 5894|  4.23k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.29k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.23k|    {
 3568|  4.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.23k|        return read_default_with_base(range, value, 10);
 3570|  4.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.23k|    {
 3532|  4.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.23k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.23k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.23k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.18k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.23k|        }
 3543|       |
 3544|  4.23k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.23k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.41k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.06k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.06k|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.41k|                parse_integer_digits_without_thsep(
 3551|  4.41k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.41k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.41k|        auto buf = make_contiguous_buffer(
 3555|  4.41k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.41k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    156|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    156|                                    prefix_result.parsed_base));
 3559|       |
 3560|    156|        return ranges::next(prefix_result.iterator,
 3561|    156|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.41k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.31k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.31k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.31k|            auto rd = make_reader<T, char_type>();
 5909|  4.31k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.31k, False: 0]
  ------------------
 5910|  4.31k|                return impl(rd, range, value);
 5911|  4.31k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.31k|    {
 5892|  4.31k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|  4.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.26k|                        .transform_error(make_eof_scan_error));
 5894|  4.26k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.31k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.26k|    {
 3568|  4.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.26k|        return read_default_with_base(range, value, 10);
 3570|  4.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.26k|    {
 3532|  4.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.26k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.26k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.26k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 60, False: 4.20k]
  ------------------
 3537|     60|                return detail::unexpected_scan_error(
 3538|     60|                    scan_error::invalid_scanned_value,
 3539|     60|                    "Unexpected '-' sign when parsing an "
 3540|     60|                    "unsigned value");
 3541|     60|            }
 3542|  4.26k|        }
 3543|       |
 3544|  4.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.26k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.44k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.07k, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.07k|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.44k|                parse_integer_digits_without_thsep(
 3551|  4.44k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.44k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.44k|        auto buf = make_contiguous_buffer(
 3555|  4.44k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.44k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    186|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    186|                                    prefix_result.parsed_base));
 3559|       |
 3560|    186|        return ranges::next(prefix_result.iterator,
 3561|    186|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.44k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  15.6k|    {
 3532|  15.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  15.6k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  15.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 15.6k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  31.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 45, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     45|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  31.2k|                parse_integer_digits_without_thsep(
 3551|  31.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  31.2k|                    prefix_result.parsed_base));
 3553|       |
 3554|  31.2k|        auto buf = make_contiguous_buffer(
 3555|  31.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  31.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.65k, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.65k|    }                                                  \
  |  |  |  | 3939|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.9k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.9k|        return ranges::next(prefix_result.iterator,
 3561|  13.9k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  31.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  18.0k|    {
 3532|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  18.0k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 18.0k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  35.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  35.9k|                parse_integer_digits_without_thsep(
 3551|  35.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  35.9k|                    prefix_result.parsed_base));
 3553|       |
 3554|  35.9k|        auto buf = make_contiguous_buffer(
 3555|  35.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  35.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.51k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.51k|    }                                                  \
  |  |  |  | 3939|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  16.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  16.4k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  16.4k|        return ranges::next(prefix_result.iterator,
 3561|  16.4k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  35.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  18.3k|    {
 3532|  18.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  18.3k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  18.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 18.3k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  36.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 81, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     81|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  36.5k|                parse_integer_digits_without_thsep(
 3551|  36.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  36.5k|                    prefix_result.parsed_base));
 3553|       |
 3554|  36.5k|        auto buf = make_contiguous_buffer(
 3555|  36.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  36.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.45k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.45k|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  16.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  16.7k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  16.7k|        return ranges::next(prefix_result.iterator,
 3561|  16.7k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  36.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  13.1k|    {
 3532|  13.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  13.1k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  13.1k|        if constexpr (!std::is_signed_v<T>) {
 3536|  13.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 771, False: 12.3k]
  ------------------
 3537|    771|                return detail::unexpected_scan_error(
 3538|    771|                    scan_error::invalid_scanned_value,
 3539|    771|                    "Unexpected '-' sign when parsing an "
 3540|    771|                    "unsigned value");
 3541|    771|            }
 3542|  13.1k|        }
 3543|       |
 3544|  13.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 13.1k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  26.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  26.2k|                parse_integer_digits_without_thsep(
 3551|  26.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  26.2k|                    prefix_result.parsed_base));
 3553|       |
 3554|  26.2k|        auto buf = make_contiguous_buffer(
 3555|  26.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  26.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.03k, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.03k|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  12.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  12.0k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  12.0k|        return ranges::next(prefix_result.iterator,
 3561|  12.0k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  26.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  14.3k|    {
 3532|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.3k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 798, False: 13.5k]
  ------------------
 3537|    798|                return detail::unexpected_scan_error(
 3538|    798|                    scan_error::invalid_scanned_value,
 3539|    798|                    "Unexpected '-' sign when parsing an "
 3540|    798|                    "unsigned value");
 3541|    798|            }
 3542|  14.3k|        }
 3543|       |
 3544|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.3k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  28.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  28.7k|                parse_integer_digits_without_thsep(
 3551|  28.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  28.7k|                    prefix_result.parsed_base));
 3553|       |
 3554|  28.7k|        auto buf = make_contiguous_buffer(
 3555|  28.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  28.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 942, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    942|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    942|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    942|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    942|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    942|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.4k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.4k|        return ranges::next(prefix_result.iterator,
 3561|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  28.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  14.5k|    {
 3532|  14.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.5k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.5k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 831, False: 13.7k]
  ------------------
 3537|    831|                return detail::unexpected_scan_error(
 3538|    831|                    scan_error::invalid_scanned_value,
 3539|    831|                    "Unexpected '-' sign when parsing an "
 3540|    831|                    "unsigned value");
 3541|    831|            }
 3542|  14.5k|        }
 3543|       |
 3544|  14.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.5k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  29.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  29.0k|                parse_integer_digits_without_thsep(
 3551|  29.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  29.0k|                    prefix_result.parsed_base));
 3553|       |
 3554|  29.0k|        auto buf = make_contiguous_buffer(
 3555|  29.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  29.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 882, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    882|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.6k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.6k|        return ranges::next(prefix_result.iterator,
 3561|  13.6k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  29.0k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    698|{
   52|    698|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    698|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    698|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    698|    string_buffer.resize(size);
   56|    698|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    698|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    698|    const auto wsv_reinterpret_size =
   61|    698|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 105, False: 593]
  ------------------
   62|    698|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    698|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    698|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    698|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    698|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    698|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    698|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    698|{
  122|    698|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    698|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    698|    buf.resize(sizeof...(Args));
  125|    698|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    698|    return buf;
  127|    698|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    698|{
  108|    698|    if constexpr (std::is_same_v<CharT, char>) {
  109|    698|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    698|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    698|{
  185|    698|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    698|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    698|                                   format_strings);
  188|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  34.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.3k|            auto result = scn::scan<T>(
  139|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.3k|                scn::runtime_format(f));
  141|  34.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 27.3k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  27.3k|            it = result->begin();
  145|  27.3k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  34.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.3k|            auto result = scn::scan<T>(
  154|  34.3k|                global_locale,
  155|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.3k|                scn::runtime_format(f));
  157|  34.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 27.3k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  27.3k|            it = result->begin();
  161|  27.3k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  5.35k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.35k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.35k|            auto result = scn::scan_value<T>(
  170|  5.35k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.35k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 4.65k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  4.65k|            it = result->begin();
  175|  4.65k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  30.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.2k|            auto result = scn::scan<T>(
  139|  30.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.2k|                scn::runtime_format(f));
  141|  30.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 23.3k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  23.3k|            it = result->begin();
  145|  23.3k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  30.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.2k|            auto result = scn::scan<T>(
  154|  30.2k|                global_locale,
  155|  30.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.2k|                scn::runtime_format(f));
  157|  30.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 23.3k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  23.3k|            it = result->begin();
  161|  23.3k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  4.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.46k|            auto result = scn::scan_value<T>(
  170|  4.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 3.77k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  3.77k|            it = result->begin();
  175|  3.77k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  40.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.1k|            auto result = scn::scan<T>(
  139|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.1k|                scn::runtime_format(f));
  141|  40.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 33.1k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  33.1k|            it = result->begin();
  145|  33.1k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  40.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.1k|            auto result = scn::scan<T>(
  154|  40.1k|                global_locale,
  155|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.1k|                scn::runtime_format(f));
  157|  40.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 33.1k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  33.1k|            it = result->begin();
  161|  33.1k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  6.18k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.18k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.18k|            auto result = scn::scan_value<T>(
  170|  6.18k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.18k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 5.48k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  5.48k|            it = result->begin();
  175|  5.48k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  32.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  32.8k|            auto result = scn::scan<T>(
  139|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  32.8k|                scn::runtime_format(f));
  141|  32.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 25.8k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  25.8k|            it = result->begin();
  145|  25.8k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  32.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  32.8k|            auto result = scn::scan<T>(
  154|  32.8k|                global_locale,
  155|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  32.8k|                scn::runtime_format(f));
  157|  32.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 25.8k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  25.8k|            it = result->begin();
  161|  25.8k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  4.91k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.91k|            auto result = scn::scan_value<T>(
  170|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.91k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 4.21k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  4.21k|            it = result->begin();
  175|  4.21k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  40.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.8k|            auto result = scn::scan<T>(
  139|  40.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.8k|                scn::runtime_format(f));
  141|  40.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 33.9k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  33.9k|            it = result->begin();
  145|  33.9k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  40.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.8k|            auto result = scn::scan<T>(
  154|  40.8k|                global_locale,
  155|  40.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.8k|                scn::runtime_format(f));
  157|  40.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 33.9k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  33.9k|            it = result->begin();
  161|  33.9k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  6.29k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.29k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.29k|            auto result = scn::scan_value<T>(
  170|  6.29k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.29k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 5.59k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  5.59k|            it = result->begin();
  175|  5.59k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  33.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.1k|            auto result = scn::scan<T>(
  139|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.1k|                scn::runtime_format(f));
  141|  33.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 26.1k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  26.1k|            it = result->begin();
  145|  26.1k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  33.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.1k|            auto result = scn::scan<T>(
  154|  33.1k|                global_locale,
  155|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.1k|                scn::runtime_format(f));
  157|  33.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 26.1k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  26.1k|            it = result->begin();
  161|  26.1k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  4.97k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.97k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.97k|            auto result = scn::scan_value<T>(
  170|  4.97k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.97k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 4.27k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  4.27k|            it = result->begin();
  175|  4.27k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  34.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.3k|            auto result = scn::scan<T>(
  139|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.3k|                scn::runtime_format(f));
  141|  34.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 27.3k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  27.3k|            it = result->begin();
  145|  27.3k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  34.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.3k|            auto result = scn::scan<T>(
  154|  34.3k|                global_locale,
  155|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.3k|                scn::runtime_format(f));
  157|  34.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 27.3k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  27.3k|            it = result->begin();
  161|  27.3k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  5.34k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.34k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.34k|            auto result = scn::scan_value<T>(
  170|  5.34k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.34k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 4.65k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  4.65k|            it = result->begin();
  175|  4.65k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  30.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.2k|            auto result = scn::scan<T>(
  139|  30.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.2k|                scn::runtime_format(f));
  141|  30.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 23.3k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  23.3k|            it = result->begin();
  145|  23.3k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  30.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.2k|            auto result = scn::scan<T>(
  154|  30.2k|                global_locale,
  155|  30.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.2k|                scn::runtime_format(f));
  157|  30.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 23.3k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  23.3k|            it = result->begin();
  161|  23.3k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  4.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.46k|            auto result = scn::scan_value<T>(
  170|  4.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 3.76k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  3.76k|            it = result->begin();
  175|  3.76k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  40.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.0k|            auto result = scn::scan<T>(
  139|  40.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.0k|                scn::runtime_format(f));
  141|  40.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 33.0k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  33.0k|            it = result->begin();
  145|  33.0k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  40.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.0k|            auto result = scn::scan<T>(
  154|  40.0k|                global_locale,
  155|  40.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.0k|                scn::runtime_format(f));
  157|  40.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 33.0k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  33.0k|            it = result->begin();
  161|  33.0k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  5.98k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.98k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.98k|            auto result = scn::scan_value<T>(
  170|  5.98k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.98k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 5.28k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  5.28k|            it = result->begin();
  175|  5.28k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  32.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  32.8k|            auto result = scn::scan<T>(
  139|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  32.8k|                scn::runtime_format(f));
  141|  32.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 25.8k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  25.8k|            it = result->begin();
  145|  25.8k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  32.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  32.8k|            auto result = scn::scan<T>(
  154|  32.8k|                global_locale,
  155|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  32.8k|                scn::runtime_format(f));
  157|  32.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 25.8k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  25.8k|            it = result->begin();
  161|  25.8k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  4.88k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.88k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.88k|            auto result = scn::scan_value<T>(
  170|  4.88k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.88k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 4.19k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  4.19k|            it = result->begin();
  175|  4.19k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  40.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.7k|            auto result = scn::scan<T>(
  139|  40.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.7k|                scn::runtime_format(f));
  141|  40.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 33.7k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  33.7k|            it = result->begin();
  145|  33.7k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  40.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.7k|            auto result = scn::scan<T>(
  154|  40.7k|                global_locale,
  155|  40.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.7k|                scn::runtime_format(f));
  157|  40.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 33.7k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  33.7k|            it = result->begin();
  161|  33.7k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  6.08k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.08k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.08k|            auto result = scn::scan_value<T>(
  170|  6.08k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.08k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 5.38k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  5.38k|            it = result->begin();
  175|  5.38k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    698|{
  133|       |    // Regular scan
  134|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.98k, False: 698]
  ------------------
  135|  6.98k|        auto it = scn::ranges::begin(source);
  136|  33.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.1k|            auto result = scn::scan<T>(
  139|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.1k|                scn::runtime_format(f));
  141|  33.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.98k, False: 26.2k]
  ------------------
  142|  6.98k|                break;
  143|  6.98k|            }
  144|  26.2k|            it = result->begin();
  145|  26.2k|        }
  146|  6.98k|    }
  147|       |
  148|       |    // scan localized
  149|  6.98k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.98k, False: 698]
  ------------------
  150|  6.98k|        auto it = scn::ranges::begin(source);
  151|  33.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.1k|            auto result = scn::scan<T>(
  154|  33.1k|                global_locale,
  155|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.1k|                scn::runtime_format(f));
  157|  33.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.98k, False: 26.2k]
  ------------------
  158|  6.98k|                break;
  159|  6.98k|            }
  160|  26.2k|            it = result->begin();
  161|  26.2k|        }
  162|  6.98k|    }
  163|       |
  164|       |    // scan_value
  165|    698|    {
  166|    698|        auto it = scn::ranges::begin(source);
  167|  4.95k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.95k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.95k|            auto result = scn::scan_value<T>(
  170|  4.95k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.95k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 698, False: 4.25k]
  ------------------
  172|    698|                break;
  173|    698|            }
  174|  4.25k|            it = result->begin();
  175|  4.25k|        }
  176|    698|    }
  177|    698|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    698|{
   90|    698|    using char_type = ranges::range_value_t<Source>;
   91|    698|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    698|    deque.clear();
   93|    698|    std::copy(ranges::begin(source), ranges::end(source),
   94|    698|              std::back_inserter(deque));
   95|    698|    return deque;
   96|    698|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    698|{
   79|    698|    if constexpr (std::is_same_v<CharT, char>) {
   80|    698|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    698|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    698|{
  122|    698|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    698|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    698|    buf.resize(sizeof...(Args));
  125|    698|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    698|    return buf;
  127|    698|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    698|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    698|    else {
  112|    698|        return wformat_string_view_buffer;
  113|    698|    }
  114|    698|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.39k|{
  185|  1.39k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.39k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.39k|                                   format_strings);
  188|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.1k|            auto result = scn::scan<T>(
  139|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.1k|                scn::runtime_format(f));
  141|  14.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 225]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    225|            it = result->begin();
  145|    225|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.1k|            auto result = scn::scan<T>(
  154|  14.1k|                global_locale,
  155|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.1k|                scn::runtime_format(f));
  157|  14.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 225]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    225|            it = result->begin();
  161|    225|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.43k|            auto result = scn::scan_value<T>(
  170|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 35]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.1k|            auto result = scn::scan<T>(
  139|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.1k|                scn::runtime_format(f));
  141|  14.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 191]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.1k|            auto result = scn::scan<T>(
  154|  14.1k|                global_locale,
  155|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.1k|                scn::runtime_format(f));
  157|  14.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 191]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.42k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.42k|            auto result = scn::scan_value<T>(
  170|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.42k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 28]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     28|            it = result->begin();
  175|     28|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.2k|            auto result = scn::scan<T>(
  139|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.2k|                scn::runtime_format(f));
  141|  14.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 278]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    278|            it = result->begin();
  145|    278|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.2k|            auto result = scn::scan<T>(
  154|  14.2k|                global_locale,
  155|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.2k|                scn::runtime_format(f));
  157|  14.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 278]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    278|            it = result->begin();
  161|    278|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 45]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.1k|            auto result = scn::scan<T>(
  139|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.1k|                scn::runtime_format(f));
  141|  14.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 220]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.1k|            auto result = scn::scan<T>(
  154|  14.1k|                global_locale,
  155|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.1k|                scn::runtime_format(f));
  157|  14.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 220]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.43k|            auto result = scn::scan_value<T>(
  170|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 34]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     34|            it = result->begin();
  175|     34|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.2k|            auto result = scn::scan<T>(
  139|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.2k|                scn::runtime_format(f));
  141|  14.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 331]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    331|            it = result->begin();
  145|    331|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.2k|            auto result = scn::scan<T>(
  154|  14.2k|                global_locale,
  155|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.2k|                scn::runtime_format(f));
  157|  14.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 331]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    331|            it = result->begin();
  161|    331|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 56]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     56|            it = result->begin();
  175|     56|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.2k|            auto result = scn::scan<T>(
  139|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.2k|                scn::runtime_format(f));
  141|  14.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 261]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.2k|            auto result = scn::scan<T>(
  154|  14.2k|                global_locale,
  155|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.2k|                scn::runtime_format(f));
  157|  14.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 261]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.43k|            auto result = scn::scan_value<T>(
  170|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 42]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     42|            it = result->begin();
  175|     42|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.1k|            auto result = scn::scan<T>(
  139|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.1k|                scn::runtime_format(f));
  141|  14.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 225]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    225|            it = result->begin();
  145|    225|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.1k|            auto result = scn::scan<T>(
  154|  14.1k|                global_locale,
  155|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.1k|                scn::runtime_format(f));
  157|  14.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 225]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    225|            it = result->begin();
  161|    225|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.43k|            auto result = scn::scan_value<T>(
  170|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 35]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.1k|            auto result = scn::scan<T>(
  139|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.1k|                scn::runtime_format(f));
  141|  14.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 191]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.1k|            auto result = scn::scan<T>(
  154|  14.1k|                global_locale,
  155|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.1k|                scn::runtime_format(f));
  157|  14.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 191]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.42k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.42k|            auto result = scn::scan_value<T>(
  170|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.42k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 28]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     28|            it = result->begin();
  175|     28|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.2k|            auto result = scn::scan<T>(
  139|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.2k|                scn::runtime_format(f));
  141|  14.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 278]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    278|            it = result->begin();
  145|    278|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.2k|            auto result = scn::scan<T>(
  154|  14.2k|                global_locale,
  155|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.2k|                scn::runtime_format(f));
  157|  14.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 278]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    278|            it = result->begin();
  161|    278|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 45]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.1k|            auto result = scn::scan<T>(
  139|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.1k|                scn::runtime_format(f));
  141|  14.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 220]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.1k|            auto result = scn::scan<T>(
  154|  14.1k|                global_locale,
  155|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.1k|                scn::runtime_format(f));
  157|  14.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 220]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.43k|            auto result = scn::scan_value<T>(
  170|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 34]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     34|            it = result->begin();
  175|     34|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.2k|            auto result = scn::scan<T>(
  139|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.2k|                scn::runtime_format(f));
  141|  14.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 331]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    331|            it = result->begin();
  145|    331|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.2k|            auto result = scn::scan<T>(
  154|  14.2k|                global_locale,
  155|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.2k|                scn::runtime_format(f));
  157|  14.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 331]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    331|            it = result->begin();
  161|    331|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 56]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     56|            it = result->begin();
  175|     56|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.39k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 1.39k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|  14.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.2k|            auto result = scn::scan<T>(
  139|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.2k|                scn::runtime_format(f));
  141|  14.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 261]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 1.39k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|  14.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.2k|            auto result = scn::scan<T>(
  154|  14.2k|                global_locale,
  155|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.2k|                scn::runtime_format(f));
  157|  14.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 261]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  1.39k|    {
  166|  1.39k|        auto it = scn::ranges::begin(source);
  167|  1.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.43k|            auto result = scn::scan_value<T>(
  170|  1.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.39k, False: 42]
  ------------------
  172|  1.39k|                break;
  173|  1.39k|            }
  174|     42|            it = result->begin();
  175|     42|        }
  176|  1.39k|    }
  177|  1.39k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.39k|{
   90|  1.39k|    using char_type = ranges::range_value_t<Source>;
   91|  1.39k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.39k|    deque.clear();
   93|  1.39k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.39k|              std::back_inserter(deque));
   95|  1.39k|    return deque;
   96|  1.39k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.39k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.39k|    else {
   83|  1.39k|        return wnoncontiguous_buffer;
   84|  1.39k|    }
   85|  1.39k|}

LLVMFuzzerTestOneInput:
   59|    698|{
   60|    698|    scn::fuzz::run(data, size);
   61|    698|    return 0;
   62|    698|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    698|{
   36|    698|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 698]
  |  Branch (36:35): [True: 0, False: 698]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    698|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    698|    const auto& f =
   43|    698|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    698|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    698|    do_basic_run(sv, f);
   46|       |
   47|    698|    const auto& wf = get_format_strings<wchar_t>(
   48|    698|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    698|        L"{:'}", L"{:'L}");
   50|    698|    do_basic_run(wsv_reinterpret, wf);
   51|    698|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 698, False: 0]
  ------------------
   52|    698|        do_basic_run(wsv_transcode, wf);
   53|    698|    }
   54|    698|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    698|{
   25|    698|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    698|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    698|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    698|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    698|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    698|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    698|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    698|{
   25|    698|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    698|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    698|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    698|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    698|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    698|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    698|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.39k|{
   25|  1.39k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.39k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.39k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.39k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.39k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.39k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.39k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.39k|{
   25|  1.39k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.39k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.39k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.39k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.39k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.39k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.39k|}

