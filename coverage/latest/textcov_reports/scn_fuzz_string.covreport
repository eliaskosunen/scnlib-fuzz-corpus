_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.17M|{
 3807|  3.17M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.17M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.17M|    }
 3810|  3.17M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.17M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.17M|    }
 3813|  3.17M|    else {
 3814|       |        // utf-32
 3815|  3.17M|        static_assert(sizeof(U) == 4);
 3816|  3.17M|        SCN_UNUSED(ch);
 3817|  3.17M|        return 1;
 3818|  3.17M|    }
 3819|  3.17M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.17M|{
 3771|  3.17M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.17M|    SCN_GCC_COMPAT_PUSH
 3774|  3.17M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.17M|    constexpr char lengths[] =
 3776|  3.17M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.17M|        "\1\1\1\1\1\1\1\1"
 3778|  3.17M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.17M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.17M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.17M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.17M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.17M|    SCN_GCC_COMPAT_POP
 3785|  3.17M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.02M|{
 4013|  3.02M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  3.02M|        return decode_utf8_code_point_exhaustive(input);
 4015|  3.02M|    }
 4016|  3.02M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  3.02M|        return decode_utf16_code_point_exhaustive(input);
 4018|  3.02M|    }
 4019|  3.02M|    else {
 4020|  3.02M|        SCN_EXPECT(input.size() == 1);
 4021|  3.02M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.02M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  3.02M|            return invalid_code_point;
 4024|  3.02M|        }
 4025|  3.02M|        return cp;
 4026|  3.02M|    }
 4027|  3.02M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.02M|{
 3826|  3.02M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.02M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.02M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.02M|    };
 3831|       |
 3832|  3.02M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.59M, False: 434k]
  ------------------
 3833|  2.59M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 206, False: 2.59M]
  ------------------
 3834|    206|            SCN_UNLIKELY_ATTR
 3835|    206|            return invalid_code_point;
 3836|    206|        }
 3837|  2.59M|        return static_cast<char32_t>(input[0]);
 3838|  2.59M|    }
 3839|       |
 3840|   434k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 175k, False: 258k]
  ------------------
 3841|   175k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 97, False: 175k]
  ------------------
 3842|     97|            SCN_UNLIKELY_ATTR
 3843|     97|            return invalid_code_point;
 3844|     97|        }
 3845|   175k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 16.2k, False: 159k]
  ------------------
 3846|  16.2k|            SCN_UNLIKELY_ATTR
 3847|  16.2k|            return invalid_code_point;
 3848|  16.2k|        }
 3849|       |
 3850|   159k|        char32_t cp{};
 3851|   159k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   159k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   159k|        return cp;
 3854|   175k|    }
 3855|       |
 3856|   258k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 240k, False: 17.7k]
  ------------------
 3857|   240k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 22, False: 240k]
  ------------------
 3858|     22|            SCN_UNLIKELY_ATTR
 3859|     22|            return invalid_code_point;
 3860|     22|        }
 3861|   240k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 17.0k, False: 223k]
  ------------------
 3862|   240k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.11k, False: 222k]
  ------------------
 3863|  18.1k|            SCN_UNLIKELY_ATTR
 3864|  18.1k|            return invalid_code_point;
 3865|  18.1k|        }
 3866|       |
 3867|   222k|        char32_t cp{};
 3868|   222k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   222k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   222k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   222k|        return cp;
 3872|   240k|    }
 3873|       |
 3874|  17.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 17.7k, False: 0]
  ------------------
 3875|  17.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 17.7k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  17.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 6.65k, False: 11.1k]
  ------------------
 3880|  6.65k|            SCN_UNLIKELY_ATTR
 3881|  6.65k|            return invalid_code_point;
 3882|  6.65k|        }
 3883|  11.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.12k, False: 9.01k]
  ------------------
 3884|  11.1k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 285, False: 8.73k]
  ------------------
 3885|  11.1k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 206, False: 8.52k]
  ------------------
 3886|  2.61k|            SCN_UNLIKELY_ATTR
 3887|  2.61k|            return invalid_code_point;
 3888|  2.61k|        }
 3889|       |
 3890|  8.52k|        char32_t cp{};
 3891|  8.52k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  8.52k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  8.52k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  8.52k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  8.52k|        return cp;
 3896|  11.1k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   669k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   669k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   669k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  2.77M|{
 3699|  2.77M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  2.77M|                                          decltype(first), decltype(last)> &&
 3701|  2.77M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.77M|        return {first, last};
 3703|  2.77M|    }
 3704|  2.77M|    else {
 3705|  2.77M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  2.77M|                                       to_address(first), to_address(last)))};
 3707|  2.77M|    }
 3708|  2.77M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  8.63M|{
  326|  8.63M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  8.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  8.63M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  8.81M|{
  304|  8.81M|    return p;
  305|  8.81M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  1.34M|{
 3730|  1.34M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  1.34M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  1.34M|                      decltype(it)> &&
 3733|  1.34M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  1.34M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  1.34M|        return it;
 3736|  1.34M|    }
 3737|  1.34M|    else {
 3738|  1.34M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  1.34M|    }
 3740|  1.34M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  20.4k|    {
 2724|  20.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  20.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  20.4k|    {
 2705|  20.4k|        return decay_copy(t.begin());
 2706|  20.4k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  1.57M|{
 1949|  1.57M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.57M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   368k|    {
 2781|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   368k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   368k|    {
 2763|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   368k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|  37.4k|{
 8867|  37.4k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  37.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  37.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   151k|{
 5396|   151k|    detail::check_scan_arg_types<Args...>();
 5397|   151k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   151k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   186k|{
 5135|   186k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   186k|                  "Scan argument types must be default constructible");
 5137|   186k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   186k|                  "Scan argument types must be Destructible");
 5139|   186k|    static_assert(
 5140|   186k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   186k|        "Scan argument types must not be references");
 5142|   186k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|   151k|    {
 5349|   151k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   151k|    {
 5360|   151k|        return {detail::make_arg<
 5361|   151k|            kind, Context,
 5362|   151k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   151k|                                 typename Context::char_type>::value>(args)...};
 5364|   151k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   151k|{
 5170|   151k|    return make_value<Context>(value).ref_value;
 5171|   151k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   186k|{
 5120|   186k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   186k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   186k|                                  needs_context_tag>) {
 5124|   186k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   186k|    }
 5126|   186k|    else {
 5127|   186k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   186k|            value, context_tag<Context>{}));
 5129|   186k|    }
 5130|   186k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   186k|    {                                                                        \
 4959|   186k|        return val;                                                          \
 4960|   186k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   186k|{
 5089|   186k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   186k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   186k|    constexpr bool scannable_char =
 5093|   186k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   186k|    static_assert(scannable_char,
 5095|   186k|                  "Cannot scan an argument of an unsupported character "
 5096|   186k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   186k|    constexpr bool scannable_const =
 5099|   186k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   186k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   186k|    constexpr bool scannable_disabled =
 5103|   186k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   186k|    static_assert(scannable_disabled,
 5105|   186k|                  "Cannot scan an argument that has been disabled by "
 5106|   186k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   186k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   186k|    static_assert(
 5110|   186k|        scannable,
 5111|   186k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   186k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   186k|    return arg_value{arg};
 5115|   186k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   186k|    {
 4902|   186k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  74.9k|{
 8654|  74.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  74.9k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  74.9k|{
 8591|  74.9k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  74.9k|    auto result = vscan_impl(buffer, format, args);
 8594|  74.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 65.8k]
  |  |  ------------------
  ------------------
 8595|  9.08k|        return unexpected(result.error());
 8596|  9.08k|    }
 8597|  65.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  65.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  74.9k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   184k|{
 4720|   184k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   184k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   184k|                  "\n"
 4724|   184k|                  "Unsupported range type given as input to a scanning "
 4725|   184k|                  "function.\n"
 4726|   184k|                  "A range needs to have a character type (value type) "
 4727|   184k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   184k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   184k|                  "to be included.\n"
 4730|   184k|                  "See the scnlib documentation for more details.");
 4731|   184k|    static_assert(
 4732|   184k|        !std::is_same_v<T, custom_char_traits>,
 4733|   184k|        "\n"
 4734|   184k|        "Unsupported range type given as input to a scanning "
 4735|   184k|        "function.\n"
 4736|   184k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   184k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   184k|        "not supported.");
 4739|   184k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   184k|                  "\n"
 4741|   184k|                  "Unsupported range type given as input to a scanning "
 4742|   184k|                  "function.\n"
 4743|   184k|                  "file_marker_found cannot be used as an "
 4744|   184k|                  "source range type to scn::scan.\n"
 4745|   184k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   184k|                  "and do not provide an explicit source range, "
 4747|   184k|                  "or use scn::scan with a FILE* directly.");
 4748|   184k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   184k|                  "\n"
 4750|   184k|                  "Unsupported range type given as input to a scanning "
 4751|   184k|                  "function.\n"
 4752|   184k|                  "In order to be scannable, a range needs to satisfy "
 4753|   184k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   184k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   184k|                  "\n"
 4756|   184k|                  "Unsupported range type given as input to a scanning "
 4757|   184k|                  "function.\n"
 4758|   184k|                  "A range needs to model forward_range and have a valid "
 4759|   184k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   184k|                  "Examples of scannable ranges are std::string, "
 4761|   184k|                  "std::string_view, "
 4762|   184k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   184k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   184k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   184k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   184k|{
 4659|   184k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   184k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   184k|    }
 4662|   184k|    else {
 4663|   184k|        return invalid_char_type{};
 4664|   184k|    }
 4665|   184k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   184k|    {
 2855|   184k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   184k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   184k|    {
 2836|   184k|        return t.data();
 2837|   184k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   184k|    {
 3231|   184k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.63k, False: 182k]
  ------------------
 3232|   184k|                   ? nullptr
 3233|   184k|                   : std::addressof(*ranges::begin(derived()));
 3234|   184k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   184k|    {
 3005|   184k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   184k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   184k|    {
 2978|   184k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   184k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|   689k|    {
 3339|   689k|        return m_iterator == m_sentinel;
 3340|   689k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   366k|    {
 3185|   366k|        return static_cast<const D&>(*this);
 3186|   366k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   346k|    {
 2724|   346k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   346k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   346k|    {
 2705|   346k|        return decay_copy(t.begin());
 2706|   346k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  2.02M|    {
 3330|  2.02M|        return m_iterator;
 3331|  2.02M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   184k|    {
 2930|   184k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   184k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   184k|    {
 2896|   184k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   184k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  18.7M|{
 1949|  18.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  18.7M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|   689k|    {
 3346|   689k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   689k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  37.5M|    {
 1598|  37.5M|        return has_value();
 1599|  37.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  75.1M|    {
  485|  75.1M|        return m_has_value;
  486|  75.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  88.5k|    {
 1604|  88.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  88.5k|        return this->get_unexpected().error();
 1606|  88.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  88.5k|    {
  468|  88.5k|        return m_unexpected;
  469|  88.5k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   665k|    {
  361|   665k|        return m_unexpected;
  362|   665k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   338k|    {
  347|   338k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   338k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   338k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  19.6k|    {
 1476|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  19.6k|    {
  447|  19.6k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   385k|    {
  356|   385k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   385k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   385k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   184k|    {
 1177|   184k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   164k|{
 5923|   164k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   164k|                      ranges::iterator_t<SourceRange>>) {
 5925|   164k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   164k|    }
 5927|   164k|    else {
 5928|   164k|        auto it = ranges::begin(source);
 5929|   164k|        while (n > 0) {
 5930|   164k|            --n;
 5931|   164k|            ++it;
 5932|   164k|        }
 5933|   164k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   164k|    }
 5935|   164k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   669k|    {
 2724|   669k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   669k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   669k|    {
 2705|   669k|        return decay_copy(t.begin());
 2706|   669k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   164k|{
 5910|   164k|    return ranges::end(source);
 5911|   164k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   164k|    {
 2781|   164k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   164k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   164k|    {
 2763|   164k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   164k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.05M|    {
 3334|  1.05M|        return m_sentinel;
 3335|  1.05M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  37.4M|    {
 1653|  37.4M|        return value();
 1654|  37.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  37.4M|    {
 1627|  37.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  37.4M|        return this->get_value();
 1629|  37.4M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  37.4M|    {
  451|  37.4M|        return m_value;
  452|  37.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   164k|    {
 1430|   164k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   164k|    {
  437|   164k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|  74.9k|    {
 7975|  74.9k|        return m_str;
 7976|  74.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   151k|    {
 5426|   151k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   151k|    {
 5379|   151k|        return m_argptrs;
 5380|   151k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   226k|    {
 5478|   226k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  74.9k|{
 8820|  74.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 65.8k]
  |  |  ------------------
  ------------------
 8821|  9.08k|        return unexpected(result.error());
 8822|  9.08k|    }
 8823|  65.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.8k|    static_cast<    \
  |  |  929|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.8k|    static_cast<    \
  |  |  929|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   184k|    {
 1598|   184k|        return has_value();
 1599|   184k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   368k|    {
  485|   368k|        return m_has_value;
  486|   368k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  19.6k|    {
 1604|  19.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.6k|        return this->get_unexpected().error();
 1606|  19.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.6k|    {
  468|  19.6k|        return m_unexpected;
  469|  19.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  9.84k|    {
 1476|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  9.84k|    {
  626|  9.84k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  9.84k|    {
  689|  9.84k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.84k|                                  std::forward<Args>(args)...);
  691|  9.84k|        m_has_value = false;
  692|  9.84k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  59.0k|{
  392|  59.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  59.0k|        T(std::forward<Args>(args)...);
  394|  59.0k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  19.6k|    {
  718|  19.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  19.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  19.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  19.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  92.0k|    {
 1177|  92.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   131k|    {
 1653|   131k|        return value();
 1654|   131k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   164k|    {
 1627|   164k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   164k|        return this->get_value();
 1629|   164k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   164k|    {
  451|   164k|        return m_value;
  452|   164k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  82.2k|    {
 5830|  82.2k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   164k|    {
 5681|   164k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|   166k|    {
 5616|   166k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  82.2k|    {
 1430|  82.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  82.2k|    {
  616|  82.2k|        construct(std::forward<Args>(args)...);
  617|  82.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  82.2k|    {
  682|  82.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  82.2k|        m_has_value = true;
  684|  82.2k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  82.2k|{
  392|  82.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  82.2k|        T(std::forward<Args>(args)...);
  394|  82.2k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  82.2k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   246k|    {
  706|   246k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   246k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   246k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   164k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   151k|    {
 5374|   151k|        return m_args;
 5375|   151k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   151k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.18M|    {
 3316|  1.18M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   226k|{
 7691|   226k|    return s;
 7692|   226k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   226k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  74.9k|    {
 7971|  74.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  92.0k|    {
 1598|  92.0k|        return has_value();
 1599|  92.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   266k|    {
  675|   266k|        return m_has_value;
  676|   266k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  82.2k|    {
 1673|  82.2k|        return &value();
 1674|  82.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  82.2k|    {
 1627|  82.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  82.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  82.2k|        return this->get_value();
 1629|  82.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  82.2k|    {
  641|  82.2k|        return *value_ptr();
  642|  82.2k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   164k|    {
 5698|   164k|        return ranges::begin(m_range);
 5699|   164k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  92.0k|    {
  631|  92.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 82.2k, False: 9.84k]
  ------------------
  632|  82.2k|            destroy_value();
  633|  82.2k|        }
  634|  9.84k|        else {
  635|  9.84k|            destroy_unexpected();
  636|  9.84k|        }
  637|  92.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  82.2k|    {
  696|  82.2k|        scn::detail::destroy_at(value_ptr());
  697|  82.2k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  82.2k|{
  398|  82.2k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  82.2k|        for (auto& elem : *p) {
  400|  82.2k|            scn::detail::destroy_at(&elem);
  401|  82.2k|        }
  402|  82.2k|    }
  403|  82.2k|    else {
  404|  82.2k|        p->~T();
  405|  82.2k|    }
  406|  82.2k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.84k|    {
  700|  9.84k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.84k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  59.0k|{
  398|  59.0k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  59.0k|        for (auto& elem : *p) {
  400|  59.0k|            scn::detail::destroy_at(&elem);
  401|  59.0k|        }
  402|  59.0k|    }
  403|  59.0k|    else {
  404|  59.0k|        p->~T();
  405|  59.0k|    }
  406|  59.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|  37.4k|{
 8934|  37.4k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  37.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  37.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  74.9k|{
 8672|  74.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  74.9k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  74.9k|{
 8607|  74.9k|#if !SCN_DISABLE_LOCALE
 8608|  74.9k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  74.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  74.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  74.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  74.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 65.8k]
  |  |  ------------------
  ------------------
 8615|  9.08k|        return unexpected(result.error());
 8616|  9.08k|    }
 8617|  65.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  65.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  74.9k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  17.0k|{
 8973|  17.0k|    T value;
 8974|  17.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  17.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 757, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    757|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    757|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    757|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    757|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    757|    }                                                  \
  |  |  |  | 3671|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  16.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.3k|    static_cast<    \
  |  |  929|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.3k|    static_cast<    \
  |  |  929|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  17.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  34.6k|{
 5155|  34.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  34.6k|    basic_scan_arg<Context> arg;
 5158|  34.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  34.6k|    arg.m_value = make_value<Context>(value);
 5160|  34.6k|    return arg;
 5161|  34.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   278k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  28.1M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  34.1k|{
 8685|  34.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  34.1k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  34.1k|{
 8631|  34.1k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  34.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  34.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 32.6k]
  |  |  ------------------
  ------------------
 8635|  1.51k|        return unexpected(result.error());
 8636|  1.51k|    }
 8637|  32.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  34.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  32.6k|    {
 1663|  32.6k|        return std::move(value());
 1664|  32.6k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|  37.4k|{
 8867|  37.4k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  37.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  37.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  74.9k|{
 5396|  74.9k|    detail::check_scan_arg_types<Args...>();
 5397|  74.9k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  74.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  92.0k|{
 5135|  92.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  92.0k|                  "Scan argument types must be default constructible");
 5137|  92.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  92.0k|                  "Scan argument types must be Destructible");
 5139|  92.0k|    static_assert(
 5140|  92.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  92.0k|        "Scan argument types must not be references");
 5142|  92.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  74.9k|    {
 5349|  74.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  74.9k|    {
 5360|  74.9k|        return {detail::make_arg<
 5361|  74.9k|            kind, Context,
 5362|  74.9k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  74.9k|                                 typename Context::char_type>::value>(args)...};
 5364|  74.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  74.9k|{
 5170|  74.9k|    return make_value<Context>(value).ref_value;
 5171|  74.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  92.0k|{
 5120|  92.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  92.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  92.0k|                                  needs_context_tag>) {
 5124|  92.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  92.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  92.0k|    }
 5126|  92.0k|    else {
 5127|  92.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  92.0k|            value, context_tag<Context>{}));
 5129|  92.0k|    }
 5130|  92.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  92.0k|    {                                                                        \
 4959|  92.0k|        return val;                                                          \
 4960|  92.0k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  92.0k|{
 5089|  92.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  92.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  92.0k|    constexpr bool scannable_char =
 5093|  92.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  92.0k|    static_assert(scannable_char,
 5095|  92.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  92.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  92.0k|    constexpr bool scannable_const =
 5099|  92.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  92.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  92.0k|    constexpr bool scannable_disabled =
 5103|  92.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  92.0k|    static_assert(scannable_disabled,
 5105|  92.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  92.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  92.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  92.0k|    static_assert(
 5110|  92.0k|        scannable,
 5111|  92.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  92.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  92.0k|    return arg_value{arg};
 5115|  92.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  92.0k|    {
 4902|  92.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|  74.9k|    {
 7975|  74.9k|        return m_str;
 7976|  74.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  74.9k|    {
 5426|  74.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  74.9k|    {
 5379|  74.9k|        return m_argptrs;
 5380|  74.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  74.9k|{
 8820|  74.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 65.8k]
  |  |  ------------------
  ------------------
 8821|  9.08k|        return unexpected(result.error());
 8822|  9.08k|    }
 8823|  65.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.8k|    static_cast<    \
  |  |  929|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.8k|    static_cast<    \
  |  |  929|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  74.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  9.84k|    {
 1476|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  9.84k|    {
  447|  9.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  92.0k|    {
 1177|  92.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  82.2k|    {
 5830|  82.2k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  82.2k|    {
 5616|  82.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  82.2k|    {
 1430|  82.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  82.2k|    {
  437|  82.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  74.9k|    {
 5374|  74.9k|        return m_args;
 5375|  74.9k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  74.9k|    {
 7971|  74.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  92.0k|    {
 1598|  92.0k|        return has_value();
 1599|  92.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   174k|    {
  485|   174k|        return m_has_value;
  486|   174k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  82.2k|    {
 1673|  82.2k|        return &value();
 1674|  82.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|  82.2k|    {
 1627|  82.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  82.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  82.2k|        return this->get_value();
 1629|  82.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  82.2k|    {
  451|  82.2k|        return m_value;
  452|  82.2k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|  37.4k|{
 8934|  37.4k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  37.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  37.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.4k|    static_cast<    \
  |  |  929|  37.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  37.4k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  17.0k|{
 8973|  17.0k|    T value;
 8974|  17.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  17.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 757, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    757|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    757|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    757|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    757|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    757|    }                                                  \
  |  |  |  | 3671|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  16.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.3k|    static_cast<    \
  |  |  929|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.3k|    static_cast<    \
  |  |  929|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  17.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  17.0k|{
 5155|  17.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  17.0k|    basic_scan_arg<Context> arg;
 5158|  17.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  17.0k|    arg.m_value = make_value<Context>(value);
 5160|  17.0k|    return arg;
 5161|  17.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  9.84k|    {
 2724|  9.84k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  9.84k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  9.84k|    {
 2705|  9.84k|        return decay_copy(t.begin());
 2706|  9.84k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  3.89M|{
 1949|  3.89M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.89M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   188k|    {
 2781|   188k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   188k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   188k|    {
 2763|   188k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   188k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|  38.4k|{
 8867|  38.4k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  38.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  38.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.4k|    static_cast<    \
  |  |  929|  38.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.4k|    static_cast<    \
  |  |  929|  38.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  38.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  38.4k|{
 8654|  38.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  38.4k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  38.4k|{
 8591|  38.4k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  38.4k|    auto result = vscan_impl(buffer, format, args);
 8594|  38.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 33.9k]
  |  |  ------------------
  ------------------
 8595|  4.54k|        return unexpected(result.error());
 8596|  4.54k|    }
 8597|  33.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  38.4k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  94.4k|{
 4720|  94.4k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  94.4k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  94.4k|                  "\n"
 4724|  94.4k|                  "Unsupported range type given as input to a scanning "
 4725|  94.4k|                  "function.\n"
 4726|  94.4k|                  "A range needs to have a character type (value type) "
 4727|  94.4k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  94.4k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  94.4k|                  "to be included.\n"
 4730|  94.4k|                  "See the scnlib documentation for more details.");
 4731|  94.4k|    static_assert(
 4732|  94.4k|        !std::is_same_v<T, custom_char_traits>,
 4733|  94.4k|        "\n"
 4734|  94.4k|        "Unsupported range type given as input to a scanning "
 4735|  94.4k|        "function.\n"
 4736|  94.4k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  94.4k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  94.4k|        "not supported.");
 4739|  94.4k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  94.4k|                  "\n"
 4741|  94.4k|                  "Unsupported range type given as input to a scanning "
 4742|  94.4k|                  "function.\n"
 4743|  94.4k|                  "file_marker_found cannot be used as an "
 4744|  94.4k|                  "source range type to scn::scan.\n"
 4745|  94.4k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  94.4k|                  "and do not provide an explicit source range, "
 4747|  94.4k|                  "or use scn::scan with a FILE* directly.");
 4748|  94.4k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  94.4k|                  "\n"
 4750|  94.4k|                  "Unsupported range type given as input to a scanning "
 4751|  94.4k|                  "function.\n"
 4752|  94.4k|                  "In order to be scannable, a range needs to satisfy "
 4753|  94.4k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  94.4k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  94.4k|                  "\n"
 4756|  94.4k|                  "Unsupported range type given as input to a scanning "
 4757|  94.4k|                  "function.\n"
 4758|  94.4k|                  "A range needs to model forward_range and have a valid "
 4759|  94.4k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  94.4k|                  "Examples of scannable ranges are std::string, "
 4761|  94.4k|                  "std::string_view, "
 4762|  94.4k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  94.4k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  94.4k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  94.4k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  94.4k|{
 4690|  94.4k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  94.4k|        return file_marker_found{};
 4692|  94.4k|    }
 4693|  94.4k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  94.4k|        if constexpr (ranges::range<Range>) {
 4695|  94.4k|            return insufficient_range{};
 4696|  94.4k|        }
 4697|  94.4k|        else {
 4698|  94.4k|            return invalid_input_range{};
 4699|  94.4k|        }
 4700|  94.4k|    }
 4701|  94.4k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  94.4k|        return invalid_char_type{};
 4703|  94.4k|    }
 4704|  94.4k|    else {
 4705|  94.4k|        return make_forward_scan_buffer(r);
 4706|  94.4k|    }
 4707|  94.4k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  94.4k|{
 4524|  94.4k|    return basic_scan_forward_buffer_impl(range);
 4525|  94.4k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  94.4k|    {
 4411|  94.4k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  94.4k|    {
 4382|  94.4k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  94.4k|    {
 4151|  94.4k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  94.4k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   179k|    {
 2724|   179k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   179k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   179k|    {
 2705|   179k|        return decay_copy(t.begin());
 2706|   179k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   263k|    {
 3330|   263k|        return m_iterator;
 3331|   263k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  1.12M|    {
 4415|  1.12M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 13.3k, False: 1.11M]
  ------------------
 4416|  13.3k|            return false;
 4417|  13.3k|        }
 4418|  1.11M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.11M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.11M|        }
 4421|  1.11M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.02M, False: 88.9k]
  ------------------
 4422|  1.02M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.02M|                                          this->m_current_view.begin(),
 4424|  1.02M|                                          this->m_current_view.end());
 4425|  1.02M|        }
 4426|  1.11M|        m_latest = *m_cursor;
 4427|  1.11M|        ++m_cursor;
 4428|  1.11M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.11M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.11M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.11M|        }
 4432|  1.11M|        return true;
 4433|  1.11M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.35M|    {
 2781|  3.35M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.35M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.35M|    {
 2763|  3.35M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.35M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  3.43M|    {
 3334|  3.43M|        return m_sentinel;
 3335|  3.43M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  94.4k|    {
 4071|  94.4k|        SCN_UNUSED(position);
  ------------------
  |  |  909|  94.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  94.4k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  9.84k|    {
 1476|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  9.84k|    {
  447|  9.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  94.4k|    {
 1177|  94.4k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  84.5k|{
 5923|  84.5k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  84.5k|                      ranges::iterator_t<SourceRange>>) {
 5925|  84.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  84.5k|    }
 5927|  84.5k|    else {
 5928|  84.5k|        auto it = ranges::begin(source);
 5929|  84.5k|        while (n > 0) {
 5930|  84.5k|            --n;
 5931|  84.5k|            ++it;
 5932|  84.5k|        }
 5933|  84.5k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  84.5k|    }
 5935|  84.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  84.5k|    {
 2724|  84.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  84.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  84.5k|    {
 2705|  84.5k|        return decay_copy(t.begin());
 2706|  84.5k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  84.5k|{
 5910|  84.5k|    return ranges::end(source);
 5911|  84.5k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  84.5k|    {
 2781|  84.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  84.5k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  84.5k|    {
 2763|  84.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  84.5k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  84.5k|    {
 1430|  84.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  84.5k|    {
  437|  84.5k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|  76.8k|    {
 7975|  76.8k|        return m_str;
 7976|  76.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  76.8k|{
 8820|  76.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 67.8k]
  |  |  ------------------
  ------------------
 8821|  9.08k|        return unexpected(result.error());
 8822|  9.08k|    }
 8823|  67.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.8k|    static_cast<    \
  |  |  929|  67.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.8k|    static_cast<    \
  |  |  929|  67.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  76.8k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  94.4k|    {
 1598|  94.4k|        return has_value();
 1599|  94.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   188k|    {
  485|   188k|        return m_has_value;
  486|   188k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  9.84k|    {
 1604|  9.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.84k|        return this->get_unexpected().error();
 1606|  9.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.84k|    {
  468|  9.84k|        return m_unexpected;
  469|  9.84k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  9.84k|    {
 1476|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  9.84k|    {
  626|  9.84k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  9.84k|    {
  689|  9.84k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.84k|                                  std::forward<Args>(args)...);
  691|  9.84k|        m_has_value = false;
  692|  9.84k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  19.6k|    {
  718|  19.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  19.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  19.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  19.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  94.4k|    {
 1177|  94.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  67.8k|    {
 1653|  67.8k|        return value();
 1654|  67.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  84.5k|    {
 1627|  84.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  84.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  84.5k|        return this->get_value();
 1629|  84.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  84.5k|    {
  451|  84.5k|        return m_value;
  452|  84.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|  84.5k|    {
 5830|  84.5k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  84.5k|    {
 5681|  84.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|  84.5k|    {
 1430|  84.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|  84.5k|    {
  616|  84.5k|        construct(std::forward<Args>(args)...);
  617|  84.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  84.5k|    {
  682|  84.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  84.5k|        m_has_value = true;
  684|  84.5k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  84.5k|{
  392|  84.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  84.5k|        T(std::forward<Args>(args)...);
  394|  84.5k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|  84.5k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   253k|    {
  706|   253k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   253k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   253k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   169k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   179k|    {
 3316|   179k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  76.8k|    {
 7971|  76.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  94.4k|    {
 1598|  94.4k|        return has_value();
 1599|  94.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   273k|    {
  675|   273k|        return m_has_value;
  676|   273k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  84.5k|    {
 1673|  84.5k|        return &value();
 1674|  84.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|  84.5k|    {
 1627|  84.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  84.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  84.5k|        return this->get_value();
 1629|  84.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  84.5k|    {
  641|  84.5k|        return *value_ptr();
  642|  84.5k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  84.5k|    {
 5698|  84.5k|        return ranges::begin(m_range);
 5699|  84.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  94.4k|    {
  631|  94.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 84.5k, False: 9.84k]
  ------------------
  632|  84.5k|            destroy_value();
  633|  84.5k|        }
  634|  9.84k|        else {
  635|  9.84k|            destroy_unexpected();
  636|  9.84k|        }
  637|  94.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  84.5k|    {
  696|  84.5k|        scn::detail::destroy_at(value_ptr());
  697|  84.5k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|  84.5k|{
  398|  84.5k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  84.5k|        for (auto& elem : *p) {
  400|  84.5k|            scn::detail::destroy_at(&elem);
  401|  84.5k|        }
  402|  84.5k|    }
  403|  84.5k|    else {
  404|  84.5k|        p->~T();
  405|  84.5k|    }
  406|  84.5k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.84k|    {
  700|  9.84k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.84k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|  38.4k|{
 8934|  38.4k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  38.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  38.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.4k|    static_cast<    \
  |  |  929|  38.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.4k|    static_cast<    \
  |  |  929|  38.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  38.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  38.4k|{
 8672|  38.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  38.4k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  38.4k|{
 8607|  38.4k|#if !SCN_DISABLE_LOCALE
 8608|  38.4k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  38.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  38.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  38.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  38.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 33.9k]
  |  |  ------------------
  ------------------
 8615|  4.54k|        return unexpected(result.error());
 8616|  4.54k|    }
 8617|  33.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  38.4k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  17.5k|{
 8973|  17.5k|    T value;
 8974|  17.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  17.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 757, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    757|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    757|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    757|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    757|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    757|    }                                                  \
  |  |  |  | 3671|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  16.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.7k|    static_cast<    \
  |  |  929|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.7k|    static_cast<    \
  |  |  929|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  17.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  17.5k|{
 8685|  17.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  17.5k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  17.5k|{
 8631|  17.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  17.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  17.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 757, False: 16.7k]
  |  |  ------------------
  ------------------
 8635|    757|        return unexpected(result.error());
 8636|    757|    }
 8637|  16.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  17.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  16.7k|    {
 1663|  16.7k|        return std::move(value());
 1664|  16.7k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  40.8k|    {
 2724|  40.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  40.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  40.8k|    {
 2705|  40.8k|        return decay_copy(t.begin());
 2706|  40.8k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   130M|{
 1949|   130M|    return SCN_FWD(t);
  ------------------
  |  |  930|   130M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   130M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  37.1M|    {
 2781|  37.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  37.1M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  37.1M|    {
 2763|  37.1M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  37.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  37.1M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  14.8M|{
 5396|  14.8M|    detail::check_scan_arg_types<Args...>();
 5397|  14.8M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  14.8M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  18.5M|{
 5135|  18.5M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  18.5M|                  "Scan argument types must be default constructible");
 5137|  18.5M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  18.5M|                  "Scan argument types must be Destructible");
 5139|  18.5M|    static_assert(
 5140|  18.5M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  18.5M|        "Scan argument types must not be references");
 5142|  18.5M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  14.8M|    {
 5349|  14.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  14.8M|    {
 5360|  14.8M|        return {detail::make_arg<
 5361|  14.8M|            kind, Context,
 5362|  14.8M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  14.8M|                                 typename Context::char_type>::value>(args)...};
 5364|  14.8M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  14.8M|{
 5170|  14.8M|    return make_value<Context>(value).ref_value;
 5171|  14.8M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  18.5M|{
 5120|  18.5M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  18.5M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  18.5M|                                  needs_context_tag>) {
 5124|  18.5M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  18.5M|    }
 5126|  18.5M|    else {
 5127|  18.5M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  18.5M|            value, context_tag<Context>{}));
 5129|  18.5M|    }
 5130|  18.5M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  18.5M|    {                                                                        \
 4959|  18.5M|        return val;                                                          \
 4960|  18.5M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  18.5M|{
 5089|  18.5M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  18.5M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  18.5M|    constexpr bool scannable_char =
 5093|  18.5M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  18.5M|    static_assert(scannable_char,
 5095|  18.5M|                  "Cannot scan an argument of an unsupported character "
 5096|  18.5M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  18.5M|    constexpr bool scannable_const =
 5099|  18.5M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  18.5M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  18.5M|    constexpr bool scannable_disabled =
 5103|  18.5M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  18.5M|    static_assert(scannable_disabled,
 5105|  18.5M|                  "Cannot scan an argument that has been disabled by "
 5106|  18.5M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  18.5M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  18.5M|    static_assert(
 5110|  18.5M|        scannable,
 5111|  18.5M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  18.5M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  18.5M|    return arg_value{arg};
 5115|  18.5M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  18.5M|    {
 4902|  18.5M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  7.44M|{
 8591|  7.44M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  7.44M|    auto result = vscan_impl(buffer, format, args);
 8594|  7.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 7.42M]
  |  |  ------------------
  ------------------
 8595|  18.1k|        return unexpected(result.error());
 8596|  18.1k|    }
 8597|  7.42M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  7.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  7.44M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  18.5M|{
 4720|  18.5M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  18.5M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  18.5M|                  "\n"
 4724|  18.5M|                  "Unsupported range type given as input to a scanning "
 4725|  18.5M|                  "function.\n"
 4726|  18.5M|                  "A range needs to have a character type (value type) "
 4727|  18.5M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  18.5M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  18.5M|                  "to be included.\n"
 4730|  18.5M|                  "See the scnlib documentation for more details.");
 4731|  18.5M|    static_assert(
 4732|  18.5M|        !std::is_same_v<T, custom_char_traits>,
 4733|  18.5M|        "\n"
 4734|  18.5M|        "Unsupported range type given as input to a scanning "
 4735|  18.5M|        "function.\n"
 4736|  18.5M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  18.5M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  18.5M|        "not supported.");
 4739|  18.5M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  18.5M|                  "\n"
 4741|  18.5M|                  "Unsupported range type given as input to a scanning "
 4742|  18.5M|                  "function.\n"
 4743|  18.5M|                  "file_marker_found cannot be used as an "
 4744|  18.5M|                  "source range type to scn::scan.\n"
 4745|  18.5M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  18.5M|                  "and do not provide an explicit source range, "
 4747|  18.5M|                  "or use scn::scan with a FILE* directly.");
 4748|  18.5M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  18.5M|                  "\n"
 4750|  18.5M|                  "Unsupported range type given as input to a scanning "
 4751|  18.5M|                  "function.\n"
 4752|  18.5M|                  "In order to be scannable, a range needs to satisfy "
 4753|  18.5M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  18.5M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  18.5M|                  "\n"
 4756|  18.5M|                  "Unsupported range type given as input to a scanning "
 4757|  18.5M|                  "function.\n"
 4758|  18.5M|                  "A range needs to model forward_range and have a valid "
 4759|  18.5M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  18.5M|                  "Examples of scannable ranges are std::string, "
 4761|  18.5M|                  "std::string_view, "
 4762|  18.5M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  18.5M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  18.5M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  18.5M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  18.5M|{
 4659|  18.5M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  18.5M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  18.5M|    }
 4662|  18.5M|    else {
 4663|  18.5M|        return invalid_char_type{};
 4664|  18.5M|    }
 4665|  18.5M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  18.5M|    {
 2855|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  18.5M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  18.5M|    {
 2836|  18.5M|        return t.data();
 2837|  18.5M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  18.5M|    {
 3231|  18.5M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 5.61k, False: 18.5M]
  ------------------
 3232|  18.5M|                   ? nullptr
 3233|  18.5M|                   : std::addressof(*ranges::begin(derived()));
 3234|  18.5M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  18.5M|    {
 3005|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  18.5M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  18.5M|    {
 2978|  18.5M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  18.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  37.1M|    {
 3339|  37.1M|        return m_iterator == m_sentinel;
 3340|  37.1M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  37.1M|    {
 3185|  37.1M|        return static_cast<const D&>(*this);
 3186|  37.1M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  37.1M|    {
 2724|  37.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  37.1M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  37.1M|    {
 2705|  37.1M|        return decay_copy(t.begin());
 2706|  37.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   900M|    {
 3330|   900M|        return m_iterator;
 3331|   900M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  18.5M|    {
 2930|  18.5M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  18.5M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  18.5M|    {
 2896|  18.5M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  18.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  37.1M|    {
 3346|  37.1M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  37.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  39.3k|    {
 1476|  39.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  39.3k|    {
  447|  39.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.5M|    {
 1177|  18.5M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  18.5M|{
 5923|  18.5M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  18.5M|                      ranges::iterator_t<SourceRange>>) {
 5925|  18.5M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  18.5M|    }
 5927|  18.5M|    else {
 5928|  18.5M|        auto it = ranges::begin(source);
 5929|  18.5M|        while (n > 0) {
 5930|  18.5M|            --n;
 5931|  18.5M|            ++it;
 5932|  18.5M|        }
 5933|  18.5M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  18.5M|    }
 5935|  18.5M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  37.1M|    {
 2724|  37.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  37.1M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  37.1M|    {
 2705|  37.1M|        return decay_copy(t.begin());
 2706|  37.1M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  18.5M|{
 5910|  18.5M|    return ranges::end(source);
 5911|  18.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  18.5M|    {
 2781|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  18.5M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  18.5M|    {
 2763|  18.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  18.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   814M|    {
 3334|   814M|        return m_sentinel;
 3335|   814M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  18.5M|    {
 1430|  18.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  18.5M|    {
  437|  18.5M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|  7.44M|    {
 7975|  7.44M|        return m_str;
 7976|  7.44M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  14.8M|    {
 5426|  14.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  14.8M|    {
 5379|  14.8M|        return m_argptrs;
 5380|  14.8M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|  22.3M|    {
 5478|  22.3M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  7.44M|{
 8820|  7.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 7.42M]
  |  |  ------------------
  ------------------
 8821|  18.1k|        return unexpected(result.error());
 8822|  18.1k|    }
 8823|  7.42M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  7.44M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  18.5M|    {
 1598|  18.5M|        return has_value();
 1599|  18.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  37.1M|    {
  485|  37.1M|        return m_has_value;
  486|  37.1M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  39.3k|    {
 1604|  39.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  39.3k|        return this->get_unexpected().error();
 1606|  39.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  39.3k|    {
  468|  39.3k|        return m_unexpected;
  469|  39.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  19.6k|    {
 1476|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  19.6k|    {
  626|  19.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.6k|    {
  689|  19.6k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.6k|                                  std::forward<Args>(args)...);
  691|  19.6k|        m_has_value = false;
  692|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.3k|    {
  718|  39.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.29M|    {
 1177|  9.29M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  14.8M|    {
 1653|  14.8M|        return value();
 1654|  14.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  18.5M|    {
 1627|  18.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.5M|        return this->get_value();
 1629|  18.5M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  18.5M|    {
  451|  18.5M|        return m_value;
  452|  18.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  9.27M|    {
 5830|  9.27M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  18.5M|    {
 5681|  18.5M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  18.5M|    {
 5616|  18.5M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  9.27M|    {
 1430|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  9.27M|    {
  616|  9.27M|        construct(std::forward<Args>(args)...);
  617|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  9.27M|    {
  682|  9.27M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  9.27M|        m_has_value = true;
  684|  9.27M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  9.27M|{
  392|  9.27M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  9.27M|        T(std::forward<Args>(args)...);
  394|  9.27M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  9.27M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  27.8M|    {
  706|  27.8M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  27.8M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  27.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  18.5M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  14.8M|    {
 5374|  14.8M|        return m_args;
 5375|  14.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  14.8M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   371M|    {
 3316|   371M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  22.3M|{
 7696|  22.3M|    return s;
 7697|  22.3M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  22.3M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  7.44M|    {
 7971|  7.44M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  9.29M|    {
 1598|  9.29M|        return has_value();
 1599|  9.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  27.8M|    {
  675|  27.8M|        return m_has_value;
  676|  27.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  9.27M|    {
 1673|  9.27M|        return &value();
 1674|  9.27M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  9.27M|    {
 1627|  9.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.27M|        return this->get_value();
 1629|  9.27M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  9.27M|    {
  641|  9.27M|        return *value_ptr();
  642|  9.27M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  18.5M|    {
 5698|  18.5M|        return ranges::begin(m_range);
 5699|  18.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  9.29M|    {
  631|  9.29M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 9.27M, False: 19.6k]
  ------------------
  632|  9.27M|            destroy_value();
  633|  9.27M|        }
  634|  19.6k|        else {
  635|  19.6k|            destroy_unexpected();
  636|  19.6k|        }
  637|  9.29M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  9.27M|    {
  696|  9.27M|        scn::detail::destroy_at(value_ptr());
  697|  9.27M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  9.27M|{
  398|  9.27M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  9.27M|        for (auto& elem : *p) {
  400|  9.27M|            scn::detail::destroy_at(&elem);
  401|  9.27M|        }
  402|  9.27M|    }
  403|  9.27M|    else {
  404|  9.27M|        p->~T();
  405|  9.27M|    }
  406|  9.27M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.6k|    {
  700|  19.6k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.6k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  7.44M|{
 8607|  7.44M|#if !SCN_DISABLE_LOCALE
 8608|  7.44M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  7.44M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  7.44M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  7.44M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  7.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 7.42M]
  |  |  ------------------
  ------------------
 8615|  18.1k|        return unexpected(result.error());
 8616|  18.1k|    }
 8617|  7.42M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  7.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  7.44M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  3.71M|{
 5155|  3.71M|    check_scan_arg_types<T>();
 5156|       |
 5157|  3.71M|    basic_scan_arg<Context> arg;
 5158|  3.71M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  3.71M|    arg.m_value = make_value<Context>(value);
 5160|  3.71M|    return arg;
 5161|  3.71M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  27.8M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  3.71M|{
 8631|  3.71M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  3.71M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  3.71M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 3.71M]
  |  |  ------------------
  ------------------
 8635|  3.02k|        return unexpected(result.error());
 8636|  3.02k|    }
 8637|  3.71M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  3.71M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.71M|    {
 1663|  3.71M|        return std::move(value());
 1664|  3.71M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  7.44M|{
 5396|  7.44M|    detail::check_scan_arg_types<Args...>();
 5397|  7.44M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  7.44M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  9.29M|{
 5135|  9.29M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  9.29M|                  "Scan argument types must be default constructible");
 5137|  9.29M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  9.29M|                  "Scan argument types must be Destructible");
 5139|  9.29M|    static_assert(
 5140|  9.29M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  9.29M|        "Scan argument types must not be references");
 5142|  9.29M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  7.44M|    {
 5349|  7.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  7.44M|    {
 5360|  7.44M|        return {detail::make_arg<
 5361|  7.44M|            kind, Context,
 5362|  7.44M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  7.44M|                                 typename Context::char_type>::value>(args)...};
 5364|  7.44M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  7.44M|{
 5170|  7.44M|    return make_value<Context>(value).ref_value;
 5171|  7.44M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  9.29M|{
 5120|  9.29M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  9.29M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  9.29M|                                  needs_context_tag>) {
 5124|  9.29M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  9.29M|    }
 5126|  9.29M|    else {
 5127|  9.29M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  9.29M|            value, context_tag<Context>{}));
 5129|  9.29M|    }
 5130|  9.29M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  9.29M|    {                                                                        \
 4959|  9.29M|        return val;                                                          \
 4960|  9.29M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  9.29M|{
 5089|  9.29M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  9.29M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  9.29M|    constexpr bool scannable_char =
 5093|  9.29M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  9.29M|    static_assert(scannable_char,
 5095|  9.29M|                  "Cannot scan an argument of an unsupported character "
 5096|  9.29M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  9.29M|    constexpr bool scannable_const =
 5099|  9.29M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  9.29M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  9.29M|    constexpr bool scannable_disabled =
 5103|  9.29M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  9.29M|    static_assert(scannable_disabled,
 5105|  9.29M|                  "Cannot scan an argument that has been disabled by "
 5106|  9.29M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  9.29M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  9.29M|    static_assert(
 5110|  9.29M|        scannable,
 5111|  9.29M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  9.29M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  9.29M|    return arg_value{arg};
 5115|  9.29M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  9.29M|    {
 4902|  9.29M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|  7.44M|    {
 7975|  7.44M|        return m_str;
 7976|  7.44M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  7.44M|    {
 5426|  7.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  7.44M|    {
 5379|  7.44M|        return m_argptrs;
 5380|  7.44M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  7.44M|{
 8820|  7.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 7.42M]
  |  |  ------------------
  ------------------
 8821|  18.1k|        return unexpected(result.error());
 8822|  18.1k|    }
 8823|  7.42M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  7.44M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  19.6k|    {
 1476|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  19.6k|    {
  447|  19.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.29M|    {
 1177|  9.29M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  9.27M|    {
 5830|  9.27M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  9.27M|    {
 5616|  9.27M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  9.27M|    {
 1430|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  9.27M|    {
  437|  9.27M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  7.44M|    {
 5374|  7.44M|        return m_args;
 5375|  7.44M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  7.44M|    {
 7971|  7.44M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  9.29M|    {
 1598|  9.29M|        return has_value();
 1599|  9.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  18.5M|    {
  485|  18.5M|        return m_has_value;
  486|  18.5M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  9.27M|    {
 1673|  9.27M|        return &value();
 1674|  9.27M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|  9.27M|    {
 1627|  9.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.27M|        return this->get_value();
 1629|  9.27M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  9.27M|    {
  451|  9.27M|        return m_value;
  452|  9.27M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  1.85M|{
 5155|  1.85M|    check_scan_arg_types<T>();
 5156|       |
 5157|  1.85M|    basic_scan_arg<Context> arg;
 5158|  1.85M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  1.85M|    arg.m_value = make_value<Context>(value);
 5160|  1.85M|    return arg;
 5161|  1.85M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  19.6k|    {
 2724|  19.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  19.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  19.6k|    {
 2705|  19.6k|        return decay_copy(t.begin());
 2706|  19.6k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   396M|{
 1949|   396M|    return SCN_FWD(t);
  ------------------
  |  |  930|   396M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   396M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  18.5M|    {
 2781|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  18.5M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  18.5M|    {
 2763|  18.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  18.5M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  3.72M|{
 8591|  3.72M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  3.72M|    auto result = vscan_impl(buffer, format, args);
 8594|  3.72M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 3.71M]
  |  |  ------------------
  ------------------
 8595|  9.08k|        return unexpected(result.error());
 8596|  9.08k|    }
 8597|  3.71M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  3.72M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|  9.29M|{
 4720|  9.29M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  9.29M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  9.29M|                  "\n"
 4724|  9.29M|                  "Unsupported range type given as input to a scanning "
 4725|  9.29M|                  "function.\n"
 4726|  9.29M|                  "A range needs to have a character type (value type) "
 4727|  9.29M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  9.29M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  9.29M|                  "to be included.\n"
 4730|  9.29M|                  "See the scnlib documentation for more details.");
 4731|  9.29M|    static_assert(
 4732|  9.29M|        !std::is_same_v<T, custom_char_traits>,
 4733|  9.29M|        "\n"
 4734|  9.29M|        "Unsupported range type given as input to a scanning "
 4735|  9.29M|        "function.\n"
 4736|  9.29M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  9.29M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  9.29M|        "not supported.");
 4739|  9.29M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  9.29M|                  "\n"
 4741|  9.29M|                  "Unsupported range type given as input to a scanning "
 4742|  9.29M|                  "function.\n"
 4743|  9.29M|                  "file_marker_found cannot be used as an "
 4744|  9.29M|                  "source range type to scn::scan.\n"
 4745|  9.29M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  9.29M|                  "and do not provide an explicit source range, "
 4747|  9.29M|                  "or use scn::scan with a FILE* directly.");
 4748|  9.29M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  9.29M|                  "\n"
 4750|  9.29M|                  "Unsupported range type given as input to a scanning "
 4751|  9.29M|                  "function.\n"
 4752|  9.29M|                  "In order to be scannable, a range needs to satisfy "
 4753|  9.29M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  9.29M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  9.29M|                  "\n"
 4756|  9.29M|                  "Unsupported range type given as input to a scanning "
 4757|  9.29M|                  "function.\n"
 4758|  9.29M|                  "A range needs to model forward_range and have a valid "
 4759|  9.29M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  9.29M|                  "Examples of scannable ranges are std::string, "
 4761|  9.29M|                  "std::string_view, "
 4762|  9.29M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  9.29M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  9.29M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  9.29M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  9.29M|{
 4690|  9.29M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  9.29M|        return file_marker_found{};
 4692|  9.29M|    }
 4693|  9.29M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  9.29M|        if constexpr (ranges::range<Range>) {
 4695|  9.29M|            return insufficient_range{};
 4696|  9.29M|        }
 4697|  9.29M|        else {
 4698|  9.29M|            return invalid_input_range{};
 4699|  9.29M|        }
 4700|  9.29M|    }
 4701|  9.29M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  9.29M|        return invalid_char_type{};
 4703|  9.29M|    }
 4704|  9.29M|    else {
 4705|  9.29M|        return make_forward_scan_buffer(r);
 4706|  9.29M|    }
 4707|  9.29M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|  9.29M|{
 4524|  9.29M|    return basic_scan_forward_buffer_impl(range);
 4525|  9.29M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  9.29M|    {
 4411|  9.29M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|  9.29M|    {
 4382|  9.29M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|  9.29M|    {
 4151|  9.29M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|  9.29M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  18.5M|    {
 2724|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  18.5M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  18.5M|    {
 2705|  18.5M|        return decay_copy(t.begin());
 2706|  18.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  27.8M|    {
 3330|  27.8M|        return m_iterator;
 3331|  27.8M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|   113M|    {
 4415|   113M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 29.0k, False: 113M]
  ------------------
 4416|  29.0k|            return false;
 4417|  29.0k|        }
 4418|   113M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|   113M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|   113M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|   113M|        }
 4421|   113M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 104M, False: 9.28M]
  ------------------
 4422|   104M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|   104M|                                          this->m_current_view.begin(),
 4424|   104M|                                          this->m_current_view.end());
 4425|   104M|        }
 4426|   113M|        m_latest = *m_cursor;
 4427|   113M|        ++m_cursor;
 4428|   113M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|   113M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|   113M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|   113M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|   113M|        }
 4432|   113M|        return true;
 4433|   113M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   340M|    {
 2781|   340M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   340M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   340M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   340M|    {
 2763|   340M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   340M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   340M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|   349M|    {
 3334|   349M|        return m_sentinel;
 3335|   349M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|  9.29M|    {
 4071|  9.29M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  9.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  9.29M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  19.6k|    {
 1476|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  19.6k|    {
  447|  19.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.29M|    {
 1177|  9.29M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  9.27M|{
 5923|  9.27M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  9.27M|                      ranges::iterator_t<SourceRange>>) {
 5925|  9.27M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  9.27M|    }
 5927|  9.27M|    else {
 5928|  9.27M|        auto it = ranges::begin(source);
 5929|  9.27M|        while (n > 0) {
 5930|  9.27M|            --n;
 5931|  9.27M|            ++it;
 5932|  9.27M|        }
 5933|  9.27M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  9.27M|    }
 5935|  9.27M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  9.27M|    {
 2724|  9.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  9.27M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  9.27M|    {
 2705|  9.27M|        return decay_copy(t.begin());
 2706|  9.27M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  9.27M|{
 5910|  9.27M|    return ranges::end(source);
 5911|  9.27M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  9.27M|    {
 2781|  9.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  9.27M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  9.27M|    {
 2763|  9.27M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  9.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  9.27M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  9.27M|    {
 1430|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  9.27M|    {
  437|  9.27M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|  7.44M|    {
 7975|  7.44M|        return m_str;
 7976|  7.44M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  7.44M|{
 8820|  7.44M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 7.42M]
  |  |  ------------------
  ------------------
 8821|  18.1k|        return unexpected(result.error());
 8822|  18.1k|    }
 8823|  7.42M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  7.44M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  9.29M|    {
 1598|  9.29M|        return has_value();
 1599|  9.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  18.5M|    {
  485|  18.5M|        return m_has_value;
  486|  18.5M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  19.6k|    {
 1604|  19.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.6k|        return this->get_unexpected().error();
 1606|  19.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.6k|    {
  468|  19.6k|        return m_unexpected;
  469|  19.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  19.6k|    {
 1476|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  19.6k|    {
  626|  19.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  19.6k|    {
  689|  19.6k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.6k|                                  std::forward<Args>(args)...);
  691|  19.6k|        m_has_value = false;
  692|  19.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  39.3k|    {
  718|  39.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  39.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  39.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  39.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.29M|    {
 1177|  9.29M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  7.42M|    {
 1653|  7.42M|        return value();
 1654|  7.42M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  9.27M|    {
 1627|  9.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.27M|        return this->get_value();
 1629|  9.27M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  9.27M|    {
  451|  9.27M|        return m_value;
  452|  9.27M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|  9.27M|    {
 5830|  9.27M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|  9.27M|    {
 5681|  9.27M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|  9.27M|    {
 1430|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|  9.27M|    {
  616|  9.27M|        construct(std::forward<Args>(args)...);
  617|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  9.27M|    {
  682|  9.27M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  9.27M|        m_has_value = true;
  684|  9.27M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  9.27M|{
  392|  9.27M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  9.27M|        T(std::forward<Args>(args)...);
  394|  9.27M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|  9.27M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  27.8M|    {
  706|  27.8M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  27.8M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  27.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  18.5M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  18.5M|    {
 3316|  18.5M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  7.44M|    {
 7971|  7.44M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  9.29M|    {
 1598|  9.29M|        return has_value();
 1599|  9.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  27.8M|    {
  675|  27.8M|        return m_has_value;
  676|  27.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  9.27M|    {
 1673|  9.27M|        return &value();
 1674|  9.27M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|  9.27M|    {
 1627|  9.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.27M|        return this->get_value();
 1629|  9.27M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  9.27M|    {
  641|  9.27M|        return *value_ptr();
  642|  9.27M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  9.27M|    {
 5698|  9.27M|        return ranges::begin(m_range);
 5699|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  9.29M|    {
  631|  9.29M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 9.27M, False: 19.6k]
  ------------------
  632|  9.27M|            destroy_value();
  633|  9.27M|        }
  634|  19.6k|        else {
  635|  19.6k|            destroy_unexpected();
  636|  19.6k|        }
  637|  9.29M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  9.27M|    {
  696|  9.27M|        scn::detail::destroy_at(value_ptr());
  697|  9.27M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  9.27M|{
  398|  9.27M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  9.27M|        for (auto& elem : *p) {
  400|  9.27M|            scn::detail::destroy_at(&elem);
  401|  9.27M|        }
  402|  9.27M|    }
  403|  9.27M|    else {
  404|  9.27M|        p->~T();
  405|  9.27M|    }
  406|  9.27M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.6k|    {
  700|  19.6k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.6k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  3.72M|{
 8607|  3.72M|#if !SCN_DISABLE_LOCALE
 8608|  3.72M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  3.72M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  3.72M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  3.72M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  3.72M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 3.71M]
  |  |  ------------------
  ------------------
 8615|  9.08k|        return unexpected(result.error());
 8616|  9.08k|    }
 8617|  3.71M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  3.72M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  1.85M|{
 8631|  1.85M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  1.85M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  1.85M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 1.85M]
  |  |  ------------------
  ------------------
 8635|  1.51k|        return unexpected(result.error());
 8636|  1.51k|    }
 8637|  1.85M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  1.85M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  1.85M|    {
 1663|  1.85M|        return std::move(value());
 1664|  1.85M|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   115k|    {
 3568|   115k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   115k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  86.4M|    {
 3574|  86.4M|        return m_code == good;
 3575|  86.4M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  40.8k|    {
 3585|  40.8k|        return m_code;
 3586|  40.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  3.60M|    {
 3330|  3.60M|        return m_iterator;
 3331|  3.60M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   422M|    {
 3330|   422M|        return m_iterator;
 3331|   422M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  11.3M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  27.2k|    {
 6282|  27.2k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 27.2k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  27.2k|        m_specs.width = width;
 6289|  27.2k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  11.2M|    {
 6303|  11.2M|        m_specs.type = type;
 6304|  11.2M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  31.4k|    {
 6320|  31.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  31.4k|        const auto end_value = static_cast<unsigned>(end);
 6322|  31.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  31.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  31.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  31.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 31.4k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  31.4k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  31.4k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   847k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 816k, False: 31.4k]
  ------------------
 6329|   816k|                m_specs.charset_literals[v / 8] |=
 6330|   816k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   816k|            }
 6332|  31.4k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  31.4k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  27.2k|    {
 6365|  27.2k|        SCN_UNLIKELY_ATTR
 6366|  27.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  27.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  11.3M|    {
 6376|  11.3M|        return static_cast<bool>(m_error);
 6377|  11.3M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  40.8k|{
 3609|  40.8k|    return a.code() == b;
 3610|  40.8k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  40.8k|{
 3613|  40.8k|    return !(a == b);
 3614|  40.8k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  13.6k|{
 7063|  13.6k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 13.6k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 13.6k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 13.6k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 13.6k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 13.6k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 13.6k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 13.6k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 13.6k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 13.6k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 13.6k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 13.6k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 13.6k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 13.6k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 13.6k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 13.6k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 13.6k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 13.6k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 13.6k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 13.6k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  1.51k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 1.51k, False: 12.1k]
  ------------------
 7096|  4.54k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 3.02k, False: 10.5k]
  ------------------
 7097|  7.57k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 3.02k, False: 10.5k]
  ------------------
 7098|  13.6k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 6.05k, False: 7.57k]
  ------------------
 7099|  13.6k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 13.6k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 13.6k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  13.6k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  13.6k|            SCN_CLANG_POP
 7110|  13.6k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  13.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  13.6k|{
 3654|  13.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  13.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  10.6k|{
 3654|  10.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  10.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  5.37k|{
 3654|  5.37k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.37k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  11.2M|{
 7205|  11.2M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 11.2M]
  ------------------
 7206|  11.2M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 11.2M, False: 29.3k]
  ------------------
 7207|  11.2M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 15.7k, False: 13.6k]
  ------------------
 7208|  11.2M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 13.6k]
  ------------------
 7209|  11.2M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 13.6k]
  ------------------
 7210|  11.2M|        return;
 7211|  11.2M|    }
 7212|  13.6k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 13.6k, False: 0]
  ------------------
 7213|  13.6k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  13.6k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  13.6k|        }
 7218|      0|        return;
 7219|  13.6k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  20.5M|    {
 4195|  20.5M|        return m_end == nullptr;
 4196|  20.5M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  83.6k|{
 3715|  83.6k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  83.6k|                                          const CharT*, const CharT*>) {
 3717|  83.6k|        return {first, last};
 3718|  83.6k|    }
 3719|  83.6k|    else {
 3720|  83.6k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  83.6k|    }
 3722|  83.6k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|   436k|    {
 4211|   436k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 436k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   436k|        return parent()->get_segment_starting_at(position());
 4217|   436k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  11.9M|    {
 4205|  11.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  11.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  11.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|   436k|    {
 4101|   436k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 251k, False: 184k]
  |  |  ------------------
  ------------------
 4102|   436k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   251k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   251k|        }
 4105|   184k|        const auto start = pos - m_putback_buffer.size();
 4106|   184k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   184k|        return m_current_view.substr(start);
 4108|   184k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|   492k|    {
 4190|   492k|        return m_position;
 4191|   492k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|   283k|    {
 4123|   283k|        return m_is_contiguous;
 4124|   283k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  2.09G|    {
 4195|  2.09G|        return m_end == nullptr;
 4196|  2.09G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  9.27M|{
 3715|  9.27M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  9.27M|                                          const CharT*, const CharT*>) {
 3717|  9.27M|        return {first, last};
 3718|  9.27M|    }
 3719|  9.27M|    else {
 3720|  9.27M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  9.27M|    }
 3722|  9.27M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  27.8M|    {
 4211|  27.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 27.8M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  27.8M|        return parent()->get_segment_starting_at(position());
 4217|  27.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  1.22G|    {
 4205|  1.22G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.22G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  1.22G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  1.22G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  27.8M|    {
 4101|  27.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  27.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5M, False: 9.29M]
  |  |  ------------------
  ------------------
 4102|  27.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  18.5M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  18.5M|        }
 4105|  9.29M|        const auto start = pos - m_putback_buffer.size();
 4106|  9.29M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  9.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  9.29M|        return m_current_view.substr(start);
 4108|  9.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  33.4M|    {
 4190|  33.4M|        return m_position;
 4191|  33.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  27.8M|    {
 4123|  27.8M|        return m_is_contiguous;
 4124|  27.8M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.01M|    {
 3180|  1.01M|        return static_cast<D&>(*this);
 3181|  1.01M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   505k|    {
 2978|   505k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   505k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   505k|    {
 3005|   505k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   505k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   505k|    {
 3221|   505k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 636, False: 505k]
  ------------------
 3222|   505k|                   ? nullptr
 3223|   505k|                   : std::addressof(*ranges::begin(derived()));
 3224|   505k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  37.1M|    {
 3180|  37.1M|        return static_cast<D&>(*this);
 3181|  37.1M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  18.5M|    {
 2978|  18.5M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  18.5M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  18.5M|    {
 3005|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  18.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  18.5M|    {
 3221|  18.5M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 18.5M]
  ------------------
 3222|  18.5M|                   ? nullptr
 3223|  18.5M|                   : std::addressof(*ranges::begin(derived()));
 3224|  18.5M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  38.7k|    {
 8169|  38.7k|        return ranges::subrange{begin(), end()};
 8170|  38.7k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   114k|    {
 8153|   114k|        return m_current;
 8154|   114k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  38.7k|    {
 8161|  38.7k|        return ranges::default_sentinel;
 8162|  38.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  1.32M|    {
 3316|  1.32M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  28.1M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  87.7k|    {
 1837|  87.7k|        return detail::transform_error_impl(std::move(*this),
 1838|  87.7k|                                            std::forward<F>(f));
 1839|  87.7k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  87.7k|{
 1323|  87.7k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  87.7k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  87.7k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  87.7k|            return result(*std::forward<Exp>(exp));
 1327|  87.7k|        }
 1328|       |
 1329|  87.7k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  87.7k|        return result(unexpect, monostate{});
 1331|  87.7k|    }
 1332|  87.7k|    else {
 1333|  87.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  87.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  87.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 85.9k, False: 1.79k]
  |  |  ------------------
  ------------------
 1335|  87.7k|                   ? result(*std::forward<Exp>(exp))
 1336|  87.7k|                   : result(unexpect,
 1337|  1.79k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.79k|                                           std::forward<Exp>(exp).error()));
 1339|  87.7k|    }
 1340|  87.7k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   175k|    {
  485|   175k|        return m_has_value;
  486|   175k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  85.9k|    {
 1663|  85.9k|        return std::move(value());
 1664|  85.9k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  85.9k|    {
 1627|  85.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  85.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  85.9k|        return this->get_value();
 1629|  85.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  85.9k|    {
  451|  85.9k|        return m_value;
  452|  85.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   204k|    {
 1430|   204k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   204k|    {
  437|   204k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   217k|    {
 1177|   217k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  18.0k|{
 1211|  18.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  18.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  1.79k|    {
 1614|  1.79k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.79k|        return std::move(this->get_unexpected().error());
 1616|  1.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  1.79k|    {
  468|  1.79k|        return m_unexpected;
  469|  1.79k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  36.1k|    {
  361|  36.1k|        return m_unexpected;
  362|  36.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.79k|    {
 1486|  1.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  12.4k|    {
  447|  12.4k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|  3.72M|    {
 8169|  3.72M|        return ranges::subrange{begin(), end()};
 8170|  3.72M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  11.1M|    {
 8153|  11.1M|        return m_current;
 8154|  11.1M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|  3.72M|    {
 8161|  3.72M|        return ranges::default_sentinel;
 8162|  3.72M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|   158M|    {
 3316|   158M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  9.28M|    {
 1837|  9.28M|        return detail::transform_error_impl(std::move(*this),
 1838|  9.28M|                                            std::forward<F>(f));
 1839|  9.28M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  9.28M|{
 1323|  9.28M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  9.28M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  9.28M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  9.28M|            return result(*std::forward<Exp>(exp));
 1327|  9.28M|        }
 1328|       |
 1329|  9.28M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  9.28M|        return result(unexpect, monostate{});
 1331|  9.28M|    }
 1332|  9.28M|    else {
 1333|  9.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  9.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.28M, False: 4.32k]
  |  |  ------------------
  ------------------
 1335|  9.28M|                   ? result(*std::forward<Exp>(exp))
 1336|  9.28M|                   : result(unexpect,
 1337|  4.32k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.32k|                                           std::forward<Exp>(exp).error()));
 1339|  9.28M|    }
 1340|  9.28M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  18.5M|    {
  485|  18.5M|        return m_has_value;
  486|  18.5M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  9.28M|    {
 1663|  9.28M|        return std::move(value());
 1664|  9.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  9.28M|    {
 1627|  9.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.28M|        return this->get_value();
 1629|  9.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  9.28M|    {
  451|  9.28M|        return m_value;
  452|  9.28M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  22.2M|    {
 1430|  22.2M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  22.2M|    {
  437|  22.2M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  22.3M|    {
 1177|  22.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.32k|    {
 1614|  4.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.32k|        return std::move(this->get_unexpected().error());
 1616|  4.32k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.32k|    {
  468|  4.32k|        return m_unexpected;
  469|  4.32k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  4.32k|    {
 1486|  4.32k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  25.3k|    {
  447|  25.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  29.6k|    {
  347|  29.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  21.3k|    {
 1476|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  24.7k|    {
  447|  24.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   424k|    {
 1177|   424k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   398k|    {
 1430|   398k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   398k|    {
  437|   398k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   424k|    {
 1598|   424k|        return has_value();
 1599|   424k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   848k|    {
  485|   848k|        return m_has_value;
  486|   848k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  24.7k|    {
 1604|  24.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  24.7k|        return this->get_unexpected().error();
 1606|  24.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  24.7k|    {
  468|  24.7k|        return m_unexpected;
  469|  24.7k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   331k|    {
 1663|   331k|        return std::move(value());
 1664|   331k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   399k|    {
 1627|   399k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   399k|        return this->get_value();
 1629|   399k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   399k|    {
  451|   399k|        return m_value;
  452|   399k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  41.9k|    {
 1476|  41.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  50.6k|    {
  447|  50.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  44.6M|    {
 1177|  44.6M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  44.5M|    {
 1430|  44.5M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  44.5M|    {
  437|  44.5M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  44.6M|    {
 1598|  44.6M|        return has_value();
 1599|  44.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  89.2M|    {
  485|  89.2M|        return m_has_value;
  486|  89.2M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  50.6k|    {
 1604|  50.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  50.6k|        return this->get_unexpected().error();
 1606|  50.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  50.6k|    {
  468|  50.6k|        return m_unexpected;
  469|  50.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  37.1M|    {
 1663|  37.1M|        return std::move(value());
 1664|  37.1M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  44.5M|    {
 1627|  44.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  44.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  44.5M|        return this->get_value();
 1629|  44.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  44.5M|    {
  451|  44.5M|        return m_value;
  452|  44.5M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   170k|    {
 1837|   170k|        return detail::transform_error_impl(std::move(*this),
 1838|   170k|                                            std::forward<F>(f));
 1839|   170k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   170k|{
 1323|   170k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   170k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   170k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   170k|            return result(*std::forward<Exp>(exp));
 1327|   170k|        }
 1328|       |
 1329|   170k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   170k|        return result(unexpect, monostate{});
 1331|   170k|    }
 1332|   170k|    else {
 1333|   170k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   170k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   170k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 167k, False: 3.32k]
  |  |  ------------------
  ------------------
 1335|   170k|                   ? result(*std::forward<Exp>(exp))
 1336|   170k|                   : result(unexpect,
 1337|  3.32k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.32k|                                           std::forward<Exp>(exp).error()));
 1339|   170k|    }
 1340|   170k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   341k|    {
  485|   341k|        return m_has_value;
  486|   341k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   167k|    {
 1663|   167k|        return std::move(value());
 1664|   167k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   167k|    {
 1627|   167k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   167k|        return this->get_value();
 1629|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   167k|    {
  451|   167k|        return m_value;
  452|   167k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.32k|    {
 1614|  3.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.32k|        return std::move(this->get_unexpected().error());
 1616|  3.32k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.32k|    {
  468|  3.32k|        return m_unexpected;
  469|  3.32k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.32k|    {
 1486|  3.32k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  63.8M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.6k|    {
 1476|  10.6k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  1.02M|    {
 4280|  1.02M|        return x.is_at_end();
 4281|  1.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  2.16M|    {
 4324|  2.16M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 2.16M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  2.16M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 2.16M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  2.16M|        return !read_at_position();
 4331|  2.16M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  6.14M|    {
 4304|  6.14M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  6.14M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 6.14M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  6.14M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  6.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.02M, False: 1.12M]
  |  |  ------------------
  ------------------
 4311|  5.02M|            return true;
 4312|  5.02M|        }
 4313|       |
 4314|  2.23M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.12M, False: 1.11M]
  ------------------
 4315|  1.12M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 13.3k, False: 1.11M]
  ------------------
 4316|  13.3k|                return false;
 4317|  13.3k|            }
 4318|  1.12M|        }
 4319|  1.11M|        return true;
 4320|  1.12M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  8.38M|    {
 4081|  8.38M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  8.38M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  2.00M|    {
 4239|  2.00M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  2.00M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 2.00M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  2.00M|        auto res = read_at_position();
 4248|  2.00M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  2.00M|        return parent()->get_character_at(m_position);
 4250|  2.00M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  2.00M|    {
 4112|  2.00M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.12M, False: 876k]
  |  |  ------------------
  ------------------
 4113|  2.00M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  1.12M|            return m_putback_buffer[pos];
 4115|  1.12M|        }
 4116|   876k|        const auto start = pos - m_putback_buffer.size();
 4117|   876k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   876k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   876k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   876k|        return m_current_view[start];
 4119|   876k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  85.9k|    {
 1430|  85.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  85.9k|    {
  437|  85.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  87.7k|    {
 1177|  87.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.79k|    {
 1476|  1.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.79k|    {
  447|  1.79k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  18.0k|    {
  356|  18.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  18.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  18.0k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|   968k|    {
 4274|   968k|        return !(lhs == rhs);
 4275|   968k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|   970k|    {
 4269|   970k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 970k, False: 0]
  |  Branch (4269:46): [True: 177k, False: 793k]
  ------------------
 4270|   970k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  1.97M|    {
 4225|  1.97M|        ++m_position;
 4226|  1.97M|        (void)read_at_position();
 4227|  1.97M|        return *this;
 4228|  1.97M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  18.0k|    {
  347|  18.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  18.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  18.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    744|    {
 1476|    744|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    744|    {
  447|    744|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.1k|    {
 1177|  71.1k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  70.3k|    {
 1430|  70.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  70.3k|    {
  437|  70.3k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  71.1k|    {
 1598|  71.1k|        return has_value();
 1599|  71.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   142k|    {
  485|   142k|        return m_has_value;
  486|   142k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|    744|    {
 1604|    744|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    744|        return this->get_unexpected().error();
 1606|    744|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    744|    {
  468|    744|        return m_unexpected;
  469|    744|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  70.3k|    {
 1663|  70.3k|        return std::move(value());
 1664|  70.3k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  70.3k|    {
 1627|  70.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  70.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  70.3k|        return this->get_value();
 1629|  70.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  70.3k|    {
  451|  70.3k|        return m_value;
  452|  70.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  3.24M|    {
 3334|  3.24M|        return m_sentinel;
 3335|  3.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  92.5k|    {
 3330|  92.5k|        return m_iterator;
 3331|  92.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  92.5k|    {
 3334|  92.5k|        return m_sentinel;
 3335|  92.5k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   217k|    {
 1598|   217k|        return has_value();
 1599|   217k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   435k|    {
  485|   435k|        return m_has_value;
  486|   435k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  12.4k|    {
 1604|  12.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.4k|        return this->get_unexpected().error();
 1606|  12.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.4k|    {
  468|  12.4k|        return m_unexpected;
  469|  12.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   170k|    {
 1663|   170k|        return std::move(value());
 1664|   170k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   205k|    {
 1627|   205k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   205k|        return this->get_value();
 1629|   205k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   205k|    {
  451|   205k|        return m_value;
  452|   205k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   173k|{
  326|   173k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   173k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  86.5k|    {
 3316|  86.5k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.14M|    {
 4291|  1.14M|        return !x.is_at_end();
 4292|  1.14M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  3.32k|    {
 1476|  3.32k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.32k|    {
  447|  3.32k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   170k|    {
 1177|   170k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   167k|    {
 1430|   167k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   167k|    {
  437|   167k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.32k|    {
 1476|  1.32k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  1.32k|    {
  447|  1.32k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   138k|    {
 1177|   138k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   137k|    {
 1430|   137k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   137k|    {
  437|   137k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   138k|    {
 1598|   138k|        return has_value();
 1599|   138k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   276k|    {
  485|   276k|        return m_has_value;
  486|   276k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.32k|    {
 1604|  1.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.32k|        return this->get_unexpected().error();
 1606|  1.32k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.32k|    {
  468|  1.32k|        return m_unexpected;
  469|  1.32k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   137k|    {
 1663|   137k|        return std::move(value());
 1664|   137k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   137k|    {
 1627|   137k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   137k|        return this->get_value();
 1629|   137k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   137k|    {
  451|   137k|        return m_value;
  452|   137k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   505k|    {
 2855|   505k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   505k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   505k|    {
 2836|   505k|        return t.data();
 2837|   505k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  88.5k|    {
 1476|  88.5k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  88.5k|    {
  447|  88.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1M|    {
 1177|  28.1M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  28.0M|    {
 1430|  28.0M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  28.0M|    {
  437|  28.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  34.8k|    {
 1653|  34.8k|        return value();
 1654|  34.8k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  67.8k|    {
 1653|  67.8k|        return value();
 1654|  67.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|    650|    {
 1430|    650|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|    650|    {
  437|    650|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.30k|    {
 1430|  1.30k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.30k|    {
  437|  1.30k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  20.9k|    {
 1476|  20.9k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|   128M|    {
 4280|   128M|        return x.is_at_end();
 4281|   128M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|   245M|    {
 4324|   245M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 245M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|   245M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 245M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|   245M|        return !read_at_position();
 4331|   245M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   624M|    {
 4304|   624M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   624M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   624M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   624M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 624M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   624M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   624M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 511M, False: 113M]
  |  |  ------------------
  ------------------
 4311|   511M|            return true;
 4312|   511M|        }
 4313|       |
 4314|   226M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 113M, False: 113M]
  ------------------
 4315|   113M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 29.0k, False: 113M]
  ------------------
 4316|  29.0k|                return false;
 4317|  29.0k|            }
 4318|   113M|        }
 4319|   113M|        return true;
 4320|   113M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   851M|    {
 4081|   851M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   851M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|   227M|    {
 4239|   227M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   227M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|   227M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 227M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|   227M|        auto res = read_at_position();
 4248|   227M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   227M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|   227M|        return parent()->get_character_at(m_position);
 4250|   227M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|   227M|    {
 4112|   227M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   227M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 123M, False: 104M]
  |  |  ------------------
  ------------------
 4113|   227M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|   123M|            return m_putback_buffer[pos];
 4115|   123M|        }
 4116|   104M|        const auto start = pos - m_putback_buffer.size();
 4117|   104M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   104M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   104M|        return m_current_view[start];
 4119|   104M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   577M|{
 3807|   577M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   577M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   577M|    }
 3810|   577M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   577M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   577M|    }
 3813|   577M|    else {
 3814|       |        // utf-32
 3815|   577M|        static_assert(sizeof(U) == 4);
 3816|   577M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   577M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   577M|        return 1;
 3818|   577M|    }
 3819|   577M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  9.28M|    {
 1430|  9.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  9.28M|    {
  437|  9.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.28M|    {
 1177|  9.28M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  4.32k|    {
 1476|  4.32k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  4.32k|    {
  447|  4.32k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  41.9M|    {
 4274|  41.9M|        return !(lhs == rhs);
 4275|  41.9M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  41.9M|    {
 4269|  41.9M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 41.9M, False: 0]
  |  Branch (4269:46): [True: 3.72M, False: 38.2M]
  ------------------
 4270|  41.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|   151M|    {
 4225|   151M|        ++m_position;
 4226|   151M|        (void)read_at_position();
 4227|   151M|        return *this;
 4228|   151M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   577M|{
 4013|   577M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   577M|        return decode_utf8_code_point_exhaustive(input);
 4015|   577M|    }
 4016|   577M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   577M|        return decode_utf16_code_point_exhaustive(input);
 4018|   577M|    }
 4019|   577M|    else {
 4020|   577M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   577M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   577M|        auto cp = static_cast<char32_t>(input.front());
 4022|   577M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   577M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 629k, False: 576M]
  |  |  ------------------
  ------------------
 4023|   629k|            return invalid_code_point;
 4024|   629k|        }
 4025|   576M|        return cp;
 4026|   577M|    }
 4027|   577M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.73k|    {
 1476|  1.73k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.73k|    {
  447|  1.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.42M|    {
 1177|  7.42M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  7.42M|    {
 1430|  7.42M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  7.42M|    {
  437|  7.42M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  7.42M|    {
 1598|  7.42M|        return has_value();
 1599|  7.42M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  14.8M|    {
  485|  14.8M|        return m_has_value;
  486|  14.8M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.73k|    {
 1604|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.73k|        return this->get_unexpected().error();
 1606|  1.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.73k|    {
  468|  1.73k|        return m_unexpected;
  469|  1.73k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  7.42M|    {
 1663|  7.42M|        return std::move(value());
 1664|  7.42M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  7.42M|    {
 1627|  7.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.42M|        return this->get_value();
 1629|  7.42M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  7.42M|    {
  451|  7.42M|        return m_value;
  452|  7.42M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   390M|    {
 3334|   390M|        return m_sentinel;
 3335|   390M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|  9.29M|    {
 3330|  9.29M|        return m_iterator;
 3331|  9.29M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|  9.29M|    {
 3334|  9.29M|        return m_sentinel;
 3335|  9.29M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  22.3M|    {
 1598|  22.3M|        return has_value();
 1599|  22.3M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  44.6M|    {
  485|  44.6M|        return m_has_value;
  486|  44.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  25.3k|    {
 1604|  25.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  25.3k|        return this->get_unexpected().error();
 1606|  25.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  25.3k|    {
  468|  25.3k|        return m_unexpected;
  469|  25.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  18.5M|    {
 1663|  18.5M|        return std::move(value());
 1664|  18.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  22.2M|    {
 1627|  22.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  22.2M|        return this->get_value();
 1629|  22.2M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  22.2M|    {
  451|  22.2M|        return m_value;
  452|  22.2M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|   236M|{
 3699|   236M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|   236M|                                          decltype(first), decltype(last)> &&
 3701|   236M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   236M|        return {first, last};
 3703|   236M|    }
 3704|   236M|    else {
 3705|   236M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|   236M|                                       to_address(first), to_address(last)))};
 3707|   236M|    }
 3708|   236M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   710M|{
  326|   710M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   710M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   710M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   729M|{
  304|   729M|    return p;
  305|   729M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  18.5M|{
  326|  18.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  18.5M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  9.28M|    {
 3316|  9.28M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|   117M|    {
 4291|   117M|        return !x.is_at_end();
 4292|   117M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  8.65k|    {
 1476|  8.65k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  8.65k|    {
  447|  8.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.5M|    {
 1177|  18.5M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  18.5M|    {
 1430|  18.5M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  18.5M|    {
  437|  18.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  37.1M|    {
  485|  37.1M|        return m_has_value;
  486|  37.1M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  18.5M|    {
 1627|  18.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.5M|        return this->get_value();
 1629|  18.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  18.5M|    {
  451|  18.5M|        return m_value;
  452|  18.5M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.46k|    {
 1476|  3.46k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  3.46k|    {
  447|  3.46k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.8M|    {
 1177|  14.8M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  14.8M|    {
 1430|  14.8M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  14.8M|    {
  437|  14.8M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  18.5M|    {
 1837|  18.5M|        return detail::transform_error_impl(std::move(*this),
 1838|  18.5M|                                            std::forward<F>(f));
 1839|  18.5M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  18.5M|{
 1323|  18.5M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  18.5M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  18.5M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  18.5M|            return result(*std::forward<Exp>(exp));
 1327|  18.5M|        }
 1328|       |
 1329|  18.5M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  18.5M|        return result(unexpect, monostate{});
 1331|  18.5M|    }
 1332|  18.5M|    else {
 1333|  18.5M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  18.5M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  18.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.5M, False: 8.65k]
  |  |  ------------------
  ------------------
 1335|  18.5M|                   ? result(*std::forward<Exp>(exp))
 1336|  18.5M|                   : result(unexpect,
 1337|  8.65k|                            trivial_invoke(std::forward<F>(f),
 1338|  8.65k|                                           std::forward<Exp>(exp).error()));
 1339|  18.5M|    }
 1340|  18.5M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  18.5M|    {
 1663|  18.5M|        return std::move(value());
 1664|  18.5M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  8.65k|    {
 1614|  8.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  8.65k|        return std::move(this->get_unexpected().error());
 1616|  8.65k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  8.65k|    {
  468|  8.65k|        return m_unexpected;
  469|  8.65k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  8.65k|    {
 1486|  8.65k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  14.8M|    {
 1598|  14.8M|        return has_value();
 1599|  14.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  29.7M|    {
  485|  29.7M|        return m_has_value;
  486|  29.7M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  3.46k|    {
 1604|  3.46k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.46k|        return this->get_unexpected().error();
 1606|  3.46k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.46k|    {
  468|  3.46k|        return m_unexpected;
  469|  3.46k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  14.8M|    {
 1663|  14.8M|        return std::move(value());
 1664|  14.8M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  14.8M|    {
 1627|  14.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  14.8M|        return this->get_value();
 1629|  14.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  14.8M|    {
  451|  14.8M|        return m_value;
  452|  14.8M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  18.5M|    {
 2855|  18.5M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  18.5M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  18.5M|    {
 2836|  18.5M|        return t.data();
 2837|  18.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.71M|    {
 1653|  3.71M|        return value();
 1654|  3.71M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  7.42M|    {
 1653|  7.42M|        return value();
 1654|  7.42M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|     42|    {
 1430|     42|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|     42|    {
  437|     42|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|     84|    {
 1430|     84|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|     84|    {
  437|     84|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   226k|    {
 5466|   226k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   226k|        return static_cast<std::size_t>(m_desc &
 5471|   226k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   226k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   453k|    {
 5491|   453k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   453k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   226k|    {
 5434|   226k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   226k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   226k|        const auto t = type(id);
 5446|   226k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   226k|        basic_scan_arg<Context> arg;
 5451|   226k|        arg.m_type = t;
 5452|   226k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 226k, False: 0]
  ------------------
 5453|   226k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   226k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   226k|        return arg;
 5459|   226k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   226k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   226k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   226k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   226k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   226k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   226k|    {
 5495|   226k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   226k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   392k|    {
 5247|   392k|        return m_type != detail::arg_type::none_type;
 5248|   392k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   102k|{
 8417|   102k|#define SCN_VISIT(Type)                                         \
 8418|   102k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   102k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   102k|    }                                                           \
 8421|   102k|    else {                                                      \
 8422|   102k|        return vis(monostate_val);                              \
 8423|   102k|    }
 8424|       |
 8425|   102k|    monostate monostate_val{};
 8426|       |
 8427|   102k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 102k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 102k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 102k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 102k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 102k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 102k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 102k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 102k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 102k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 102k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 102k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 102k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 102k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 102k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 102k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 102k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 102k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 102k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  51.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 51.2k, False: 51.2k]
  ------------------
 8465|  51.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  51.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  51.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  51.2k|    }                                                           \
  |  | 8421|  51.2k|    else {                                                      \
  |  | 8422|  51.2k|        return vis(monostate_val);                              \
  |  | 8423|  51.2k|    }
  ------------------
 8466|  51.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 51.2k, False: 51.2k]
  ------------------
 8467|  51.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  51.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  51.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  51.2k|    }                                                           \
  |  | 8421|  51.2k|    else {                                                      \
  |  | 8422|  51.2k|        return vis(monostate_val);                              \
  |  | 8423|  51.2k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 102k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 102k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 102k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 102k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 102k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 102k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 102k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   102k|            SCN_CLANG_POP
 8495|   102k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   123k|    {
 5545|   123k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  41.7k|    {
 8138|  41.7k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   123k|    {
 8056|   123k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  94.4k|{
 4344|  94.4k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 94.4k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  94.4k|    return ranges::subrange{forward_iterator{this, 0},
 4349|  94.4k|                            ranges::default_sentinel};
 4350|  94.4k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  94.4k|    {
 4177|  94.4k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  94.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  94.4k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  94.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  94.4k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  52.6k|{
 8417|  52.6k|#define SCN_VISIT(Type)                                         \
 8418|  52.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  52.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  52.6k|    }                                                           \
 8421|  52.6k|    else {                                                      \
 8422|  52.6k|        return vis(monostate_val);                              \
 8423|  52.6k|    }
 8424|       |
 8425|  52.6k|    monostate monostate_val{};
 8426|       |
 8427|  52.6k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 52.6k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 52.6k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 52.6k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 52.6k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 52.6k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 52.6k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 52.6k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 52.6k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 52.6k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 52.6k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 52.6k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 52.6k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 52.6k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 52.6k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 52.6k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 52.6k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 52.6k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 52.6k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 52.6k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  52.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 52.6k, False: 0]
  ------------------
 8467|  52.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  52.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  52.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.6k|    }                                                           \
  |  | 8421|  52.6k|    else {                                                      \
  |  | 8422|  52.6k|        return vis(monostate_val);                              \
  |  | 8423|  52.6k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 52.6k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 52.6k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 52.6k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 52.6k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 52.6k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 52.6k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 52.6k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  52.6k|            SCN_CLANG_POP
 8495|  52.6k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  81.6k|{
 7044|  81.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  81.6k|    handler.check_args_exhausted();
 7046|  81.6k|    return handler.get_error();
 7047|  81.6k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  81.6k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  81.6k|    auto begin = format.data();
 7013|  81.6k|    auto it = begin;
 7014|  81.6k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   148k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 81.6k, False: 66.5k]
  ------------------
 7017|  81.6k|        const auto ch = *it++;
 7018|  81.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 81.6k, False: 0]
  ------------------
 7019|  81.6k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  81.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  81.6k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 15.1k, False: 66.5k]
  ------------------
 7023|  15.1k|                return;
 7024|  15.1k|            }
 7025|  81.6k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  81.6k|    }
 7036|       |
 7037|  66.5k|    handler.on_literal_text(begin, end);
 7038|  66.5k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  81.6k|{
 6942|  81.6k|    struct id_adapter {
 6943|  81.6k|        constexpr void operator()()
 6944|  81.6k|        {
 6945|  81.6k|            arg_id = handler.on_arg_id();
 6946|  81.6k|        }
 6947|  81.6k|        constexpr void operator()(std::size_t id)
 6948|  81.6k|        {
 6949|  81.6k|            arg_id = handler.on_arg_id(id);
 6950|  81.6k|        }
 6951|       |
 6952|  81.6k|        constexpr void on_error(const char* msg)
 6953|  81.6k|        {
 6954|  81.6k|            SCN_UNLIKELY_ATTR
 6955|  81.6k|            handler.on_error(msg);
 6956|  81.6k|        }
 6957|       |
 6958|  81.6k|        Handler& handler;
 6959|  81.6k|        std::size_t arg_id;
 6960|  81.6k|    };
 6961|       |
 6962|  81.6k|    ++begin;
 6963|  81.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  81.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 81.6k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  81.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 81.6k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  81.6k|    else {
 6975|  81.6k|        auto adapter = id_adapter{handler, 0};
 6976|  81.6k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  81.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  81.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 81.6k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  81.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 81.6k, False: 0]
  ------------------
 6987|  81.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  81.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  81.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.05k, False: 75.6k]
  |  |  |  Branch (859:45): [True: 0, False: 81.6k]
  |  |  |  Branch (859:45): [True: 6.05k, False: 75.6k]
  |  |  ------------------
  ------------------
 6993|  6.05k|                handler.on_error("Unknown format specifier");
 6994|  6.05k|                return begin;
 6995|  6.05k|            }
 6996|  81.6k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  81.6k|    }
 7003|  75.6k|    return begin + 1;
 7004|  81.6k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   123k|    {
 8039|   123k|        return m_args.get(id);
 8040|   123k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   114k|    {
 8049|   114k|        return m_locale;
 8050|   114k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   123k|    {
 5566|   123k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   123k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   123k|        do_check_arg_id(id);
 5574|   123k|        return id;
 5575|   123k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   123k|{
 6054|   123k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   123k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   123k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  81.6k|{
 6443|  81.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  81.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  81.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 81.6k, False: 0]
  |  Branch (6444:26): [True: 0, False: 81.6k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  81.6k|    handler();
 6449|  81.6k|    return begin;
 6450|  81.6k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  9.08k|{
 6392|  9.08k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  9.08k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  9.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  9.08k|    unsigned long long value = 0;
 6396|  18.1k|    do {
 6397|  18.1k|        value *= 10;
 6398|  18.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  18.1k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 18.1k]
  ------------------
 6400|  18.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  18.1k|        ++begin;
 6404|  18.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 18.1k, False: 0]
  |  Branch (6404:30): [True: 18.1k, False: 0]
  |  Branch (6404:47): [True: 9.08k, False: 9.08k]
  ------------------
 6405|  9.08k|    return static_cast<int>(value);
 6406|  9.08k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  81.6k|        {
 6945|  81.6k|            arg_id = handler.on_arg_id();
 6946|  81.6k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   246k|    {
 5252|   246k|        return m_type;
 5253|   246k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   114k|    {
 5561|   114k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   114k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   237k|    {
 5550|   237k|        return m_format.data();
 5551|   237k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  81.6k|    {
 7122|  81.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  81.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  81.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  81.6k|{
 6858|  81.6k|    auto do_presentation = [&]() -> const CharT* {
 6859|  81.6k|        if (*begin == CharT{'['}) {
 6860|  81.6k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  81.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  81.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  81.6k|                return begin;
 6866|  81.6k|            }
 6867|  81.6k|            handler.on_character_set_string(set);
 6868|  81.6k|            return begin;
 6869|  81.6k|        }
 6870|  81.6k|        if (*begin == CharT{'/'}) {
 6871|  81.6k|            return parse_presentation_regex(begin, end, handler);
 6872|  81.6k|        }
 6873|  81.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  81.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  81.6k|            handler.on_error("Invalid type specifier in format string");
 6876|  81.6k|            return begin;
 6877|  81.6k|        }
 6878|  81.6k|        handler.on_type(type);
 6879|  81.6k|        return begin;
 6880|  81.6k|    };
 6881|       |
 6882|  81.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 81.6k, False: 0]
  |  Branch (6882:28): [True: 71.3k, False: 10.3k]
  ------------------
 6883|  81.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 71.3k, False: 0]
  |  Branch (6883:36): [True: 68.2k, False: 3.02k]
  ------------------
 6884|  68.2k|        return do_presentation();
 6885|  68.2k|    }
 6886|       |
 6887|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  13.4k|    begin = parse_align(begin, end, handler);
 6893|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  13.4k|    begin = parse_width(begin, end, handler);
 6899|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  13.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 13.4k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  13.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 3.02k, False: 10.3k]
  ------------------
 6918|  3.02k|        handler.on_localized();
 6919|  3.02k|        ++begin;
 6920|  3.02k|    }
 6921|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  13.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 13.4k, False: 0]
  |  Branch (6926:25): [True: 10.3k, False: 3.02k]
  ------------------
 6927|  10.3k|        do_presentation();
 6928|  10.3k|    }
 6929|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  13.4k|    return begin;
 6935|  13.4k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   107k|{
 6507|   107k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 103k, False: 4.54k]
  |  Branch (6507:33): [True: 103k, False: 0]
  ------------------
 6508|   107k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 4.54k, False: 0]
  |  Branch (6508:33): [True: 4.54k, False: 0]
  ------------------
 6509|   107k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  78.6k|    auto do_presentation = [&]() -> const CharT* {
 6859|  78.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.32k, False: 74.3k]
  ------------------
 6860|  4.32k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.32k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  4.32k|            handler.on_character_set_string(set);
 6868|  4.32k|            return begin;
 6869|  4.32k|        }
 6870|  74.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 74.3k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  74.3k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  74.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 71.3k]
  |  |  ------------------
  ------------------
 6875|  3.02k|            handler.on_error("Invalid type specifier in format string");
 6876|  3.02k|            return begin;
 6877|  3.02k|        }
 6878|  71.3k|        handler.on_type(type);
 6879|  71.3k|        return begin;
 6880|  74.3k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  4.32k|{
 6697|  4.32k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.32k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.32k|    auto start = begin;
 6701|  4.32k|    ++begin;
 6702|       |
 6703|  4.32k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  4.32k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 4.32k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  4.32k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 4.32k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  12.9k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 12.9k, False: 0]
  ------------------
 6728|  12.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.9k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  12.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.32k, False: 8.65k]
  ------------------
 6733|  4.32k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.32k|        }
 6735|       |
 6736|  8.65k|        parse_presentation_set_literal(begin, end, handler);
 6737|  8.65k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  4.32k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  8.65k|{
 6661|  8.65k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  8.65k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  8.65k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  8.65k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 8.65k, False: 0]
  |  Branch (6668:25): [True: 8.65k, False: 0]
  |  Branch (6668:49): [True: 8.65k, False: 0]
  ------------------
 6669|  8.65k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.65k, False: 0]
  ------------------
 6670|  8.65k|        ++begin;
 6671|       |
 6672|  8.65k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.65k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  8.65k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  8.65k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.65k|        return;
 6686|  8.65k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  17.3k|{
 6637|  17.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  17.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  17.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  Branch (859:45): [True: 0, False: 17.3k]
  |  |  |  Branch (859:45): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  17.3k|    const auto cp =
 6646|  17.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  17.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  17.3k|    begin += len;
 6653|  17.3k|    return cp;
 6654|  17.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  6.49k|    {
 6346|  6.49k|        m_specs.charset_string_data = fmt.data();
 6347|  6.49k|        m_specs.charset_string_size = fmt.size();
 6348|  6.49k|        on_type(presentation_type::string_set);
 6349|  6.49k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   112k|{
 6455|   112k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 112k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 112k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 112k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 112k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 112k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 112k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 112k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 112k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 112k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 112k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 112k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 112k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 112k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 112k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 112k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 112k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 112k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 112k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   103k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 103k, False: 9.08k]
  ------------------
 6486|   103k|            return presentation_type::string;
 6487|  4.54k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 4.54k, False: 107k]
  ------------------
 6488|  4.54k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 112k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 112k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 112k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 112k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  4.54k|        default:
  ------------------
  |  Branch (6499:9): [True: 4.54k, False: 107k]
  ------------------
 6500|  4.54k|            return presentation_type::none;
 6501|   112k|    }
 6502|   112k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  13.4k|{
 6532|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  13.4k|    auto check_align = [](wchar_t ch) {
 6535|  13.4k|        switch (ch) {
 6536|  13.4k|            case L'<':
 6537|  13.4k|                return align_type::left;
 6538|  13.4k|            case L'>':
 6539|  13.4k|                return align_type::right;
 6540|  13.4k|            case L'^':
 6541|  13.4k|                return align_type::center;
 6542|  13.4k|            default:
 6543|  13.4k|                return align_type::none;
 6544|  13.4k|        }
 6545|  13.4k|    };
 6546|       |
 6547|  13.4k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  13.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  |  Branch (859:45): [True: 0, False: 13.4k]
  |  |  |  Branch (859:45): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6549|  13.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  13.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  13.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  13.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  13.4k|    const auto begin_before_fill = begin;
 6559|  13.4k|    begin += potential_fill_len;
 6560|       |
 6561|  13.4k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 13.4k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  13.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  13.4k|    const auto begin_after_fill = begin;
 6567|  13.4k|    ++begin;
 6568|       |
 6569|  13.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 13.4k, False: 0]
  ------------------
 6570|  13.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  13.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.32k, False: 9.08k]
  ------------------
 6575|  4.32k|            return begin_before_fill;
 6576|  4.32k|        }
 6577|  13.4k|    }
 6578|       |
 6579|  9.08k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 9.08k, False: 0]
  ------------------
 6580|  9.08k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 9.08k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  9.08k|        return begin_before_fill;
 6585|  9.08k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  9.08k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  20.1k|{
 6514|  20.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  20.1k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  20.1k|        return 1;
 6517|  20.1k|    }
 6518|  20.1k|    else {
 6519|  20.1k|        const auto lengths =
 6520|  20.1k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  20.1k|            "\3\4";
 6522|  20.1k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  20.1k|        return len;
 6524|  20.1k|    }
 6525|  20.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  26.8k|    auto check_align = [](wchar_t ch) {
 6535|  26.8k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 26.8k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 26.8k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 26.8k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  26.8k|            default:
  ------------------
  |  Branch (6542:13): [True: 26.8k, False: 0]
  ------------------
 6543|  26.8k|                return align_type::none;
 6544|  26.8k|        }
 6545|  26.8k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  13.4k|{
 6597|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  13.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 13.4k, False: 0]
  |  Branch (6599:33): [True: 6.05k, False: 7.35k]
  ------------------
 6600|  6.05k|        int width = parse_simple_int(begin, end);
 6601|  6.05k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.05k, False: 0]
  |  |  ------------------
  ------------------
 6602|  6.05k|            handler.on_width(width);
 6603|  6.05k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  6.05k|    }
 6609|  13.4k|    return begin;
 6610|  13.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  3.02k|    {
 7127|  3.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  3.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 3.02k, False: 0]
  ------------------
 7129|  3.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 3.02k, False: 0]
  ------------------
 7130|  3.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 3.02k, False: 0]
  ------------------
 7131|  3.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 3.02k, False: 0]
  ------------------
 7132|  3.02k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  3.02k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  3.02k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  75.6k|{
 8417|  75.6k|#define SCN_VISIT(Type)                                         \
 8418|  75.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  75.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  75.6k|    }                                                           \
 8421|  75.6k|    else {                                                      \
 8422|  75.6k|        return vis(monostate_val);                              \
 8423|  75.6k|    }
 8424|       |
 8425|  75.6k|    monostate monostate_val{};
 8426|       |
 8427|  75.6k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 75.6k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 75.6k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 75.6k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 75.6k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 75.6k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 75.6k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 75.6k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 75.6k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 75.6k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 75.6k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 75.6k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 75.6k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 75.6k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 75.6k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 75.6k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 75.6k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 75.6k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 75.6k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  37.8k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 37.8k, False: 37.8k]
  ------------------
 8465|  37.8k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  37.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  37.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  37.8k|    }                                                           \
  |  | 8421|  37.8k|    else {                                                      \
  |  | 8422|  37.8k|        return vis(monostate_val);                              \
  |  | 8423|  37.8k|    }
  ------------------
 8466|  37.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 37.8k, False: 37.8k]
  ------------------
 8467|  37.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  37.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  37.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  37.8k|    }                                                           \
  |  | 8421|  37.8k|    else {                                                      \
  |  | 8422|  37.8k|        return vis(monostate_val);                              \
  |  | 8423|  37.8k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 75.6k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 75.6k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 75.6k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 75.6k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 75.6k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 75.6k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 75.6k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  75.6k|            SCN_CLANG_POP
 8495|  75.6k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  41.7k|{
 7044|  41.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  41.7k|    handler.check_args_exhausted();
 7046|  41.7k|    return handler.get_error();
 7047|  41.7k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  41.7k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  41.7k|    auto begin = format.data();
 7013|  41.7k|    auto it = begin;
 7014|  41.7k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  76.0k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 41.7k, False: 34.2k]
  ------------------
 7017|  41.7k|        const auto ch = *it++;
 7018|  41.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 41.7k, False: 0]
  ------------------
 7019|  41.7k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  41.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  41.7k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 7.57k, False: 34.2k]
  ------------------
 7023|  7.57k|                return;
 7024|  7.57k|            }
 7025|  41.7k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  41.7k|    }
 7036|       |
 7037|  34.2k|    handler.on_literal_text(begin, end);
 7038|  34.2k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  34.2k|    {
 8175|  34.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  34.2k|    static_cast<    \
  |  |  929|  34.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  34.2k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  41.7k|{
 6942|  41.7k|    struct id_adapter {
 6943|  41.7k|        constexpr void operator()()
 6944|  41.7k|        {
 6945|  41.7k|            arg_id = handler.on_arg_id();
 6946|  41.7k|        }
 6947|  41.7k|        constexpr void operator()(std::size_t id)
 6948|  41.7k|        {
 6949|  41.7k|            arg_id = handler.on_arg_id(id);
 6950|  41.7k|        }
 6951|       |
 6952|  41.7k|        constexpr void on_error(const char* msg)
 6953|  41.7k|        {
 6954|  41.7k|            SCN_UNLIKELY_ATTR
 6955|  41.7k|            handler.on_error(msg);
 6956|  41.7k|        }
 6957|       |
 6958|  41.7k|        Handler& handler;
 6959|  41.7k|        std::size_t arg_id;
 6960|  41.7k|    };
 6961|       |
 6962|  41.7k|    ++begin;
 6963|  41.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.7k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  41.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 41.7k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  41.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 41.7k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  41.7k|    else {
 6975|  41.7k|        auto adapter = id_adapter{handler, 0};
 6976|  41.7k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  41.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.7k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  41.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 41.7k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  41.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 41.7k, False: 0]
  ------------------
 6987|  41.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.7k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  41.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  41.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 38.7k]
  |  |  |  Branch (859:45): [True: 0, False: 41.7k]
  |  |  |  Branch (859:45): [True: 3.02k, False: 38.7k]
  |  |  ------------------
  ------------------
 6993|  3.02k|                handler.on_error("Unknown format specifier");
 6994|  3.02k|                return begin;
 6995|  3.02k|            }
 6996|  41.7k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  41.7k|    }
 7003|  38.7k|    return begin + 1;
 7004|  41.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  41.7k|{
 6443|  41.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  41.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 41.7k, False: 0]
  |  Branch (6444:26): [True: 0, False: 41.7k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  41.7k|    handler();
 6449|  41.7k|    return begin;
 6450|  41.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  41.7k|        {
 6945|  41.7k|            arg_id = handler.on_arg_id();
 6946|  41.7k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  41.7k|    {
 7122|  41.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  41.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  41.7k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  41.7k|{
 6858|  41.7k|    auto do_presentation = [&]() -> const CharT* {
 6859|  41.7k|        if (*begin == CharT{'['}) {
 6860|  41.7k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  41.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  41.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  41.7k|                return begin;
 6866|  41.7k|            }
 6867|  41.7k|            handler.on_character_set_string(set);
 6868|  41.7k|            return begin;
 6869|  41.7k|        }
 6870|  41.7k|        if (*begin == CharT{'/'}) {
 6871|  41.7k|            return parse_presentation_regex(begin, end, handler);
 6872|  41.7k|        }
 6873|  41.7k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  41.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  41.7k|            handler.on_error("Invalid type specifier in format string");
 6876|  41.7k|            return begin;
 6877|  41.7k|        }
 6878|  41.7k|        handler.on_type(type);
 6879|  41.7k|        return begin;
 6880|  41.7k|    };
 6881|       |
 6882|  41.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 41.7k, False: 0]
  |  Branch (6882:28): [True: 36.6k, False: 5.19k]
  ------------------
 6883|  41.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 36.6k, False: 0]
  |  Branch (6883:36): [True: 35.0k, False: 1.51k]
  ------------------
 6884|  35.0k|        return do_presentation();
 6885|  35.0k|    }
 6886|       |
 6887|  6.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  6.70k|    begin = parse_align(begin, end, handler);
 6893|  6.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  6.70k|    begin = parse_width(begin, end, handler);
 6899|  6.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  6.70k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 6.70k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  6.70k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 1.51k, False: 5.19k]
  ------------------
 6918|  1.51k|        handler.on_localized();
 6919|  1.51k|        ++begin;
 6920|  1.51k|    }
 6921|  6.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  6.70k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 6.70k, False: 0]
  |  Branch (6926:25): [True: 5.19k, False: 1.51k]
  ------------------
 6927|  5.19k|        do_presentation();
 6928|  5.19k|    }
 6929|  6.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  6.70k|    return begin;
 6935|  6.70k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  40.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  40.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.16k, False: 38.1k]
  ------------------
 6860|  2.16k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.16k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  2.16k|            handler.on_character_set_string(set);
 6868|  2.16k|            return begin;
 6869|  2.16k|        }
 6870|  38.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 38.1k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  38.1k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  38.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 36.6k]
  |  |  ------------------
  ------------------
 6875|  1.51k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.51k|            return begin;
 6877|  1.51k|        }
 6878|  36.6k|        handler.on_type(type);
 6879|  36.6k|        return begin;
 6880|  38.1k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  2.16k|{
 6697|  2.16k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.16k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.16k|    auto start = begin;
 6701|  2.16k|    ++begin;
 6702|       |
 6703|  2.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.16k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 2.16k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  2.16k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.16k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  6.49k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 6.49k, False: 0]
  ------------------
 6728|  6.49k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.49k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  6.49k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.16k, False: 4.32k]
  ------------------
 6733|  2.16k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.16k|        }
 6735|       |
 6736|  4.32k|        parse_presentation_set_literal(begin, end, handler);
 6737|  4.32k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.16k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  4.32k|{
 6661|  4.32k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  4.32k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  4.32k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  4.32k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 4.32k, False: 0]
  |  Branch (6668:25): [True: 4.32k, False: 0]
  |  Branch (6668:49): [True: 4.32k, False: 0]
  ------------------
 6669|  4.32k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 4.32k, False: 0]
  ------------------
 6670|  4.32k|        ++begin;
 6671|       |
 6672|  4.32k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  4.32k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  4.32k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  4.32k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  4.32k|        return;
 6686|  4.32k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  8.65k|{
 6637|  8.65k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  8.65k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  8.65k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  |  Branch (859:45): [True: 0, False: 8.65k]
  |  |  |  Branch (859:45): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  8.65k|    const auto cp =
 6646|  8.65k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  8.65k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  8.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.65k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  8.65k|    begin += len;
 6653|  8.65k|    return cp;
 6654|  8.65k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  6.70k|{
 6532|  6.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  6.70k|    auto check_align = [](wchar_t ch) {
 6535|  6.70k|        switch (ch) {
 6536|  6.70k|            case L'<':
 6537|  6.70k|                return align_type::left;
 6538|  6.70k|            case L'>':
 6539|  6.70k|                return align_type::right;
 6540|  6.70k|            case L'^':
 6541|  6.70k|                return align_type::center;
 6542|  6.70k|            default:
 6543|  6.70k|                return align_type::none;
 6544|  6.70k|        }
 6545|  6.70k|    };
 6546|       |
 6547|  6.70k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  6.70k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  |  Branch (859:45): [True: 0, False: 6.70k]
  |  |  |  Branch (859:45): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6549|  6.70k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  6.70k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  6.70k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  6.70k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  6.70k|    const auto begin_before_fill = begin;
 6559|  6.70k|    begin += potential_fill_len;
 6560|       |
 6561|  6.70k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 6.70k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  6.70k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  6.70k|    const auto begin_after_fill = begin;
 6567|  6.70k|    ++begin;
 6568|       |
 6569|  6.70k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 6.70k, False: 0]
  ------------------
 6570|  6.70k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  6.70k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 2.16k, False: 4.54k]
  ------------------
 6575|  2.16k|            return begin_before_fill;
 6576|  2.16k|        }
 6577|  6.70k|    }
 6578|       |
 6579|  4.54k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 4.54k, False: 0]
  ------------------
 6580|  4.54k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 4.54k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  4.54k|        return begin_before_fill;
 6585|  4.54k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  4.54k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  13.4k|    auto check_align = [](wchar_t ch) {
 6535|  13.4k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 13.4k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 13.4k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 13.4k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  13.4k|            default:
  ------------------
  |  Branch (6542:13): [True: 13.4k, False: 0]
  ------------------
 6543|  13.4k|                return align_type::none;
 6544|  13.4k|        }
 6545|  13.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  6.70k|{
 6597|  6.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  6.70k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 6.70k, False: 0]
  |  Branch (6599:33): [True: 3.02k, False: 3.67k]
  ------------------
 6600|  3.02k|        int width = parse_simple_int(begin, end);
 6601|  3.02k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.02k, False: 0]
  |  |  ------------------
  ------------------
 6602|  3.02k|            handler.on_width(width);
 6603|  3.02k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  3.02k|    }
 6609|  6.70k|    return begin;
 6610|  6.70k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  1.51k|    {
 7127|  1.51k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  1.51k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 1.51k, False: 0]
  ------------------
 7129|  1.51k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 1.51k, False: 0]
  ------------------
 7130|  1.51k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 1.51k, False: 0]
  ------------------
 7131|  1.51k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 1.51k, False: 0]
  ------------------
 7132|  1.51k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  1.51k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  1.51k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  38.7k|{
 8417|  38.7k|#define SCN_VISIT(Type)                                         \
 8418|  38.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  38.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  38.7k|    }                                                           \
 8421|  38.7k|    else {                                                      \
 8422|  38.7k|        return vis(monostate_val);                              \
 8423|  38.7k|    }
 8424|       |
 8425|  38.7k|    monostate monostate_val{};
 8426|       |
 8427|  38.7k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 38.7k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 38.7k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 38.7k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 38.7k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 38.7k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 38.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 38.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 38.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 38.7k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 38.7k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 38.7k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 38.7k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 38.7k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 38.7k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 38.7k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 38.7k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 38.7k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 38.7k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 38.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  38.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 38.7k, False: 0]
  ------------------
 8467|  38.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  38.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.7k|    }                                                           \
  |  | 8421|  38.7k|    else {                                                      \
  |  | 8422|  38.7k|        return vis(monostate_val);                              \
  |  | 8423|  38.7k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 38.7k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 38.7k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 38.7k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 38.7k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 38.7k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 38.7k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 38.7k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  38.7k|            SCN_CLANG_POP
 8495|  38.7k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  9.84k|    {
 4076|  9.84k|        sync(0);
 4077|  9.84k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  22.3M|    {
 5466|  22.3M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  22.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.3M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  22.3M|        return static_cast<std::size_t>(m_desc &
 5471|  22.3M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  22.3M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  44.6M|    {
 5491|  44.6M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  44.6M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  22.3M|    {
 5434|  22.3M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  22.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.3M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  22.3M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  22.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.3M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  22.3M|        const auto t = type(id);
 5446|  22.3M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  22.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.3M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  22.3M|        basic_scan_arg<Context> arg;
 5451|  22.3M|        arg.m_type = t;
 5452|  22.3M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 22.3M, False: 0]
  ------------------
 5453|  22.3M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  22.3M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  22.3M|        return arg;
 5459|  22.3M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  22.3M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  22.3M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  22.3M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  22.3M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  22.3M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  22.3M|    {
 5495|  22.3M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  22.3M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  39.0M|    {
 5247|  39.0M|        return m_type != detail::arg_type::none_type;
 5248|  39.0M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  11.1M|{
 8417|  11.1M|#define SCN_VISIT(Type)                                         \
 8418|  11.1M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  11.1M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  11.1M|    }                                                           \
 8421|  11.1M|    else {                                                      \
 8422|  11.1M|        return vis(monostate_val);                              \
 8423|  11.1M|    }
 8424|       |
 8425|  11.1M|    monostate monostate_val{};
 8426|       |
 8427|  11.1M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 11.1M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 11.1M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 11.1M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 11.1M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 11.1M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 11.1M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 11.1M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 11.1M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 11.1M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 11.1M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 11.1M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 11.1M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 11.1M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 11.1M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 11.1M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 11.1M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 11.1M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 11.1M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 11.1M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 11.1M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  5.57M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 5.57M, False: 5.57M]
  ------------------
 8469|  5.57M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  5.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.57M|    }                                                           \
  |  | 8421|  5.57M|    else {                                                      \
  |  | 8422|  5.57M|        return vis(monostate_val);                              \
  |  | 8423|  5.57M|    }
  ------------------
 8470|  5.57M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 5.57M, False: 5.57M]
  ------------------
 8471|  5.57M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  5.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.57M|    }                                                           \
  |  | 8421|  5.57M|    else {                                                      \
  |  | 8422|  5.57M|        return vis(monostate_val);                              \
  |  | 8423|  5.57M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 11.1M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 11.1M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 11.1M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 11.1M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 11.1M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  11.1M|            SCN_CLANG_POP
 8495|  11.1M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|  11.1M|    {
 5545|  11.1M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  3.72M|    {
 8138|  3.72M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|  11.1M|    {
 8056|  11.1M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  7.45M|{
 7044|  7.45M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  7.45M|    handler.check_args_exhausted();
 7046|  7.45M|    return handler.get_error();
 7047|  7.45M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  7.45M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  7.45M|    auto begin = format.data();
 7013|  7.45M|    auto it = begin;
 7014|  7.45M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  14.8M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 7.45M, False: 7.42M]
  ------------------
 7017|  7.45M|        const auto ch = *it++;
 7018|  7.45M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 7.45M, False: 0]
  ------------------
 7019|  7.45M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  7.45M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  7.45M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 30.2k, False: 7.42M]
  ------------------
 7023|  30.2k|                return;
 7024|  30.2k|            }
 7025|  7.45M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  7.45M|    }
 7036|       |
 7037|  7.42M|    handler.on_literal_text(begin, end);
 7038|  7.42M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  7.45M|{
 6942|  7.45M|    struct id_adapter {
 6943|  7.45M|        constexpr void operator()()
 6944|  7.45M|        {
 6945|  7.45M|            arg_id = handler.on_arg_id();
 6946|  7.45M|        }
 6947|  7.45M|        constexpr void operator()(std::size_t id)
 6948|  7.45M|        {
 6949|  7.45M|            arg_id = handler.on_arg_id(id);
 6950|  7.45M|        }
 6951|       |
 6952|  7.45M|        constexpr void on_error(const char* msg)
 6953|  7.45M|        {
 6954|  7.45M|            SCN_UNLIKELY_ATTR
 6955|  7.45M|            handler.on_error(msg);
 6956|  7.45M|        }
 6957|       |
 6958|  7.45M|        Handler& handler;
 6959|  7.45M|        std::size_t arg_id;
 6960|  7.45M|    };
 6961|       |
 6962|  7.45M|    ++begin;
 6963|  7.45M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.45M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  7.45M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 7.45M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  7.45M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 7.45M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  7.45M|    else {
 6975|  7.45M|        auto adapter = id_adapter{handler, 0};
 6976|  7.45M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  7.45M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.45M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  7.45M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 7.45M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  7.45M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 7.45M, False: 0]
  ------------------
 6987|  7.45M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.45M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  7.45M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  7.45M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 7.44M]
  |  |  |  Branch (859:45): [True: 0, False: 7.45M]
  |  |  |  Branch (859:45): [True: 12.1k, False: 7.44M]
  |  |  ------------------
  ------------------
 6993|  12.1k|                handler.on_error("Unknown format specifier");
 6994|  12.1k|                return begin;
 6995|  12.1k|            }
 6996|  7.45M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  7.45M|    }
 7003|  7.44M|    return begin + 1;
 7004|  7.45M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  11.1M|    {
 8039|  11.1M|        return m_args.get(id);
 8040|  11.1M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  11.1M|    {
 8049|  11.1M|        return m_locale;
 8050|  11.1M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  11.1M|    {
 5566|  11.1M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  11.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  11.1M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  11.1M|        do_check_arg_id(id);
 5574|  11.1M|        return id;
 5575|  11.1M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  11.1M|{
 6054|  11.1M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  11.1M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  11.1M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  7.45M|{
 6443|  7.45M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  7.45M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 7.45M, False: 0]
  |  Branch (6444:26): [True: 0, False: 7.45M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  7.45M|    handler();
 6449|  7.45M|    return begin;
 6450|  7.45M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  18.1k|{
 6392|  18.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  18.1k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  18.1k|    unsigned long long value = 0;
 6396|  36.3k|    do {
 6397|  36.3k|        value *= 10;
 6398|  36.3k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  36.3k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 36.3k]
  ------------------
 6400|  36.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  36.3k|        ++begin;
 6404|  36.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 36.3k, False: 0]
  |  Branch (6404:30): [True: 36.3k, False: 0]
  |  Branch (6404:47): [True: 18.1k, False: 18.1k]
  ------------------
 6405|  18.1k|    return static_cast<int>(value);
 6406|  18.1k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  7.45M|        {
 6945|  7.45M|            arg_id = handler.on_arg_id();
 6946|  7.45M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  22.3M|    {
 5252|  22.3M|        return m_type;
 5253|  22.3M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  11.1M|    {
 5561|  11.1M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  11.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|  9.29M|{
 4344|  9.29M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 9.29M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  9.29M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  9.29M|                            ranges::default_sentinel};
 4350|  9.29M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|  9.29M|    {
 4177|  9.29M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  9.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  9.29M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  9.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  9.29M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  22.3M|    {
 5550|  22.3M|        return m_format.data();
 5551|  22.3M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  7.45M|    {
 7122|  7.45M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  7.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  7.45M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  7.45M|{
 6858|  7.45M|    auto do_presentation = [&]() -> const CharT* {
 6859|  7.45M|        if (*begin == CharT{'['}) {
 6860|  7.45M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  7.45M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  7.45M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  7.45M|                return begin;
 6866|  7.45M|            }
 6867|  7.45M|            handler.on_character_set_string(set);
 6868|  7.45M|            return begin;
 6869|  7.45M|        }
 6870|  7.45M|        if (*begin == CharT{'/'}) {
 6871|  7.45M|            return parse_presentation_regex(begin, end, handler);
 6872|  7.45M|        }
 6873|  7.45M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  7.45M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  7.45M|            handler.on_error("Invalid type specifier in format string");
 6876|  7.45M|            return begin;
 6877|  7.45M|        }
 6878|  7.45M|        handler.on_type(type);
 6879|  7.45M|        return begin;
 6880|  7.45M|    };
 6881|       |
 6882|  7.45M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 7.45M, False: 0]
  |  Branch (6882:28): [True: 7.43M, False: 18.2k]
  ------------------
 6883|  7.45M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 7.43M, False: 0]
  |  Branch (6883:36): [True: 7.42M, False: 6.05k]
  ------------------
 6884|  7.42M|        return do_presentation();
 6885|  7.42M|    }
 6886|       |
 6887|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  24.3k|    begin = parse_align(begin, end, handler);
 6893|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  24.3k|    begin = parse_width(begin, end, handler);
 6899|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  24.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 24.3k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  24.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 6.05k, False: 18.2k]
  ------------------
 6918|  6.05k|        handler.on_localized();
 6919|  6.05k|        ++begin;
 6920|  6.05k|    }
 6921|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  24.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 24.3k, False: 0]
  |  Branch (6926:25): [True: 18.2k, False: 6.05k]
  ------------------
 6927|  18.2k|        do_presentation();
 6928|  18.2k|    }
 6929|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  24.3k|    return begin;
 6935|  24.3k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  11.1M|{
 6507|  11.1M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 11.1M, False: 9.08k]
  |  Branch (6507:33): [True: 11.1M, False: 0]
  ------------------
 6508|  11.1M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 9.08k, False: 0]
  |  Branch (6508:33): [True: 9.08k, False: 0]
  ------------------
 6509|  11.1M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  7.44M|    auto do_presentation = [&]() -> const CharT* {
 6859|  7.44M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 6.14k, False: 7.44M]
  ------------------
 6860|  6.14k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  6.14k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  6.14k|            handler.on_character_set_string(set);
 6868|  6.14k|            return begin;
 6869|  6.14k|        }
 6870|  7.44M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 7.44M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  7.44M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  7.44M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.05k, False: 7.43M]
  |  |  ------------------
  ------------------
 6875|  6.05k|            handler.on_error("Invalid type specifier in format string");
 6876|  6.05k|            return begin;
 6877|  6.05k|        }
 6878|  7.43M|        handler.on_type(type);
 6879|  7.43M|        return begin;
 6880|  7.44M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  6.14k|{
 6697|  6.14k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  6.14k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  6.14k|    auto start = begin;
 6701|  6.14k|    ++begin;
 6702|       |
 6703|  6.14k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  6.14k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 6.14k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  6.14k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 6.14k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  18.4k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 18.4k, False: 0]
  ------------------
 6728|  18.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  18.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 6.14k, False: 12.2k]
  ------------------
 6733|  6.14k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  6.14k|        }
 6735|       |
 6736|  12.2k|        parse_presentation_set_literal(begin, end, handler);
 6737|  12.2k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  6.14k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  12.2k|{
 6661|  12.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  12.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  12.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  12.2k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 12.2k, False: 0]
  |  Branch (6668:25): [True: 12.2k, False: 0]
  |  Branch (6668:49): [True: 12.2k, False: 0]
  ------------------
 6669|  12.2k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12.2k, False: 0]
  ------------------
 6670|  12.2k|        ++begin;
 6671|       |
 6672|  12.2k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  12.2k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  12.2k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  12.2k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  12.2k|        return;
 6686|  12.2k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  24.5k|{
 6637|  24.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  24.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  24.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.5k]
  |  |  |  Branch (859:45): [True: 0, False: 24.5k]
  |  |  |  Branch (859:45): [True: 0, False: 24.5k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  24.5k|    const auto cp =
 6646|  24.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  24.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.5k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  24.5k|    begin += len;
 6653|  24.5k|    return cp;
 6654|  24.5k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  9.21k|    {
 6346|  9.21k|        m_specs.charset_string_data = fmt.data();
 6347|  9.21k|        m_specs.charset_string_size = fmt.size();
 6348|  9.21k|        on_type(presentation_type::string_set);
 6349|  9.21k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  11.1M|{
 6455|  11.1M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 11.1M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 11.1M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 11.1M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 11.1M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 11.1M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 11.1M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 11.1M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 11.1M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 11.1M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 11.1M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 11.1M]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 11.1M]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 11.1M]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 11.1M]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 11.1M]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 11.1M]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 11.1M]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 11.1M]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|  11.1M|        case 's':
  ------------------
  |  Branch (6485:9): [True: 11.1M, False: 18.1k]
  ------------------
 6486|  11.1M|            return presentation_type::string;
 6487|  9.08k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 9.08k, False: 11.1M]
  ------------------
 6488|  9.08k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 11.1M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 11.1M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 11.1M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 11.1M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  9.08k|        default:
  ------------------
  |  Branch (6499:9): [True: 9.08k, False: 11.1M]
  ------------------
 6500|  9.08k|            return presentation_type::none;
 6501|  11.1M|    }
 6502|  11.1M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  24.3k|{
 6532|  24.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  24.3k|    auto check_align = [](wchar_t ch) {
 6535|  24.3k|        switch (ch) {
 6536|  24.3k|            case L'<':
 6537|  24.3k|                return align_type::left;
 6538|  24.3k|            case L'>':
 6539|  24.3k|                return align_type::right;
 6540|  24.3k|            case L'^':
 6541|  24.3k|                return align_type::center;
 6542|  24.3k|            default:
 6543|  24.3k|                return align_type::none;
 6544|  24.3k|        }
 6545|  24.3k|    };
 6546|       |
 6547|  24.3k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  24.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  |  Branch (859:45): [True: 0, False: 24.3k]
  |  |  |  Branch (859:45): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6549|  24.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  24.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  24.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  24.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  24.3k|    const auto begin_before_fill = begin;
 6559|  24.3k|    begin += potential_fill_len;
 6560|       |
 6561|  24.3k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 24.3k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  24.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  24.3k|    const auto begin_after_fill = begin;
 6567|  24.3k|    ++begin;
 6568|       |
 6569|  24.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 24.3k, False: 0]
  ------------------
 6570|  24.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  24.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 6.14k, False: 18.1k]
  ------------------
 6575|  6.14k|            return begin_before_fill;
 6576|  6.14k|        }
 6577|  24.3k|    }
 6578|       |
 6579|  18.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 18.1k, False: 0]
  ------------------
 6580|  18.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 18.1k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  18.1k|        return begin_before_fill;
 6585|  18.1k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  18.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  36.4k|{
 6514|  36.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  36.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  36.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  36.4k|        return 1;
 6517|  36.4k|    }
 6518|  36.4k|    else {
 6519|  36.4k|        const auto lengths =
 6520|  36.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  36.4k|            "\3\4";
 6522|  36.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  36.4k|        return len;
 6524|  36.4k|    }
 6525|  36.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  48.6k|    auto check_align = [](wchar_t ch) {
 6535|  48.6k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 48.6k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 48.6k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 48.6k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  48.6k|            default:
  ------------------
  |  Branch (6542:13): [True: 48.6k, False: 0]
  ------------------
 6543|  48.6k|                return align_type::none;
 6544|  48.6k|        }
 6545|  48.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  24.3k|{
 6597|  24.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  24.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 24.3k, False: 0]
  |  Branch (6599:33): [True: 12.1k, False: 12.1k]
  ------------------
 6600|  12.1k|        int width = parse_simple_int(begin, end);
 6601|  12.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  12.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
 6602|  12.1k|            handler.on_width(width);
 6603|  12.1k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  12.1k|    }
 6609|  24.3k|    return begin;
 6610|  24.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  6.05k|    {
 7127|  6.05k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  6.05k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 6.05k, False: 0]
  ------------------
 7129|  6.05k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 6.05k, False: 0]
  ------------------
 7130|  6.05k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 6.05k, False: 0]
  ------------------
 7131|  6.05k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 6.05k, False: 0]
  ------------------
 7132|  6.05k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  6.05k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  6.05k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  7.44M|{
 8417|  7.44M|#define SCN_VISIT(Type)                                         \
 8418|  7.44M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  7.44M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  7.44M|    }                                                           \
 8421|  7.44M|    else {                                                      \
 8422|  7.44M|        return vis(monostate_val);                              \
 8423|  7.44M|    }
 8424|       |
 8425|  7.44M|    monostate monostate_val{};
 8426|       |
 8427|  7.44M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 7.44M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 7.44M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 7.44M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 7.44M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 7.44M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 7.44M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 7.44M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 7.44M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 7.44M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 7.44M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 7.44M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 7.44M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 7.44M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 7.44M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 7.44M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 7.44M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 7.44M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 7.44M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 7.44M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 7.44M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  3.72M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 3.72M, False: 3.72M]
  ------------------
 8469|  3.72M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  3.72M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.72M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.72M|    }                                                           \
  |  | 8421|  3.72M|    else {                                                      \
  |  | 8422|  3.72M|        return vis(monostate_val);                              \
  |  | 8423|  3.72M|    }
  ------------------
 8470|  3.72M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 3.72M, False: 3.72M]
  ------------------
 8471|  3.72M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  3.72M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.72M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.72M|    }                                                           \
  |  | 8421|  3.72M|    else {                                                      \
  |  | 8422|  3.72M|        return vis(monostate_val);                              \
  |  | 8423|  3.72M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 7.44M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 7.44M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 7.44M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 7.44M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 7.44M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  7.44M|            SCN_CLANG_POP
 8495|  7.44M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.57M|{
 8417|  5.57M|#define SCN_VISIT(Type)                                         \
 8418|  5.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.57M|    }                                                           \
 8421|  5.57M|    else {                                                      \
 8422|  5.57M|        return vis(monostate_val);                              \
 8423|  5.57M|    }
 8424|       |
 8425|  5.57M|    monostate monostate_val{};
 8426|       |
 8427|  5.57M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.57M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.57M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 5.57M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.57M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.57M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.57M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.57M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 5.57M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.57M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.57M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 5.57M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.57M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.57M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.57M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.57M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.57M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 5.57M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.57M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.57M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 5.57M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.57M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  5.57M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 5.57M, False: 0]
  ------------------
 8471|  5.57M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  5.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  5.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  5.57M|    }                                                           \
  |  | 8421|  5.57M|    else {                                                      \
  |  | 8422|  5.57M|        return vis(monostate_val);                              \
  |  | 8423|  5.57M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.57M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.57M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.57M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.57M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.57M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.57M|            SCN_CLANG_POP
 8495|  5.57M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  3.72M|{
 7044|  3.72M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  3.72M|    handler.check_args_exhausted();
 7046|  3.72M|    return handler.get_error();
 7047|  3.72M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  3.72M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  3.72M|    auto begin = format.data();
 7013|  3.72M|    auto it = begin;
 7014|  3.72M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  7.43M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 3.72M, False: 3.71M]
  ------------------
 7017|  3.72M|        const auto ch = *it++;
 7018|  3.72M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 3.72M, False: 0]
  ------------------
 7019|  3.72M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  3.72M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  3.72M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 15.1k, False: 3.71M]
  ------------------
 7023|  15.1k|                return;
 7024|  15.1k|            }
 7025|  3.72M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  3.72M|    }
 7036|       |
 7037|  3.71M|    handler.on_literal_text(begin, end);
 7038|  3.71M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  3.71M|    {
 8175|  3.71M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  3.71M|    static_cast<    \
  |  |  929|  3.71M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  3.71M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|  3.72M|{
 6942|  3.72M|    struct id_adapter {
 6943|  3.72M|        constexpr void operator()()
 6944|  3.72M|        {
 6945|  3.72M|            arg_id = handler.on_arg_id();
 6946|  3.72M|        }
 6947|  3.72M|        constexpr void operator()(std::size_t id)
 6948|  3.72M|        {
 6949|  3.72M|            arg_id = handler.on_arg_id(id);
 6950|  3.72M|        }
 6951|       |
 6952|  3.72M|        constexpr void on_error(const char* msg)
 6953|  3.72M|        {
 6954|  3.72M|            SCN_UNLIKELY_ATTR
 6955|  3.72M|            handler.on_error(msg);
 6956|  3.72M|        }
 6957|       |
 6958|  3.72M|        Handler& handler;
 6959|  3.72M|        std::size_t arg_id;
 6960|  3.72M|    };
 6961|       |
 6962|  3.72M|    ++begin;
 6963|  3.72M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  3.72M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 3.72M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  3.72M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 3.72M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  3.72M|    else {
 6975|  3.72M|        auto adapter = id_adapter{handler, 0};
 6976|  3.72M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  3.72M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  3.72M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 3.72M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  3.72M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 3.72M, False: 0]
  ------------------
 6987|  3.72M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  3.72M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  3.72M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.05k, False: 3.72M]
  |  |  |  Branch (859:45): [True: 0, False: 3.72M]
  |  |  |  Branch (859:45): [True: 6.05k, False: 3.72M]
  |  |  ------------------
  ------------------
 6993|  6.05k|                handler.on_error("Unknown format specifier");
 6994|  6.05k|                return begin;
 6995|  6.05k|            }
 6996|  3.72M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  3.72M|    }
 7003|  3.72M|    return begin + 1;
 7004|  3.72M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  3.72M|{
 6443|  3.72M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  3.72M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 3.72M, False: 0]
  |  Branch (6444:26): [True: 0, False: 3.72M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  3.72M|    handler();
 6449|  3.72M|    return begin;
 6450|  3.72M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  3.72M|        {
 6945|  3.72M|            arg_id = handler.on_arg_id();
 6946|  3.72M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  3.72M|    {
 7122|  3.72M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  3.72M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|  3.72M|{
 6858|  3.72M|    auto do_presentation = [&]() -> const CharT* {
 6859|  3.72M|        if (*begin == CharT{'['}) {
 6860|  3.72M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  3.72M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  3.72M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  3.72M|                return begin;
 6866|  3.72M|            }
 6867|  3.72M|            handler.on_character_set_string(set);
 6868|  3.72M|            return begin;
 6869|  3.72M|        }
 6870|  3.72M|        if (*begin == CharT{'/'}) {
 6871|  3.72M|            return parse_presentation_regex(begin, end, handler);
 6872|  3.72M|        }
 6873|  3.72M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.72M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  3.72M|            handler.on_error("Invalid type specifier in format string");
 6876|  3.72M|            return begin;
 6877|  3.72M|        }
 6878|  3.72M|        handler.on_type(type);
 6879|  3.72M|        return begin;
 6880|  3.72M|    };
 6881|       |
 6882|  3.72M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 3.72M, False: 0]
  |  Branch (6882:28): [True: 3.71M, False: 9.12k]
  ------------------
 6883|  3.72M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 3.71M, False: 0]
  |  Branch (6883:36): [True: 3.71M, False: 3.02k]
  ------------------
 6884|  3.71M|        return do_presentation();
 6885|  3.71M|    }
 6886|       |
 6887|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  12.1k|    begin = parse_align(begin, end, handler);
 6893|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  12.1k|    begin = parse_width(begin, end, handler);
 6899|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  12.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 12.1k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  12.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 3.02k, False: 9.12k]
  ------------------
 6918|  3.02k|        handler.on_localized();
 6919|  3.02k|        ++begin;
 6920|  3.02k|    }
 6921|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  12.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 12.1k, False: 0]
  |  Branch (6926:25): [True: 9.12k, False: 3.02k]
  ------------------
 6927|  9.12k|        do_presentation();
 6928|  9.12k|    }
 6929|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  12.1k|    return begin;
 6935|  12.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  3.72M|    auto do_presentation = [&]() -> const CharT* {
 6859|  3.72M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 3.07k, False: 3.72M]
  ------------------
 6860|  3.07k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  3.07k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  3.07k|            handler.on_character_set_string(set);
 6868|  3.07k|            return begin;
 6869|  3.07k|        }
 6870|  3.72M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 3.72M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  3.72M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.72M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 3.71M]
  |  |  ------------------
  ------------------
 6875|  3.02k|            handler.on_error("Invalid type specifier in format string");
 6876|  3.02k|            return begin;
 6877|  3.02k|        }
 6878|  3.71M|        handler.on_type(type);
 6879|  3.71M|        return begin;
 6880|  3.72M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  3.07k|{
 6697|  3.07k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.07k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.07k|    auto start = begin;
 6701|  3.07k|    ++begin;
 6702|       |
 6703|  3.07k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  3.07k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 3.07k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  3.07k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 3.07k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  9.21k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 9.21k, False: 0]
  ------------------
 6728|  9.21k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  9.21k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.07k, False: 6.14k]
  ------------------
 6733|  3.07k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.07k|        }
 6735|       |
 6736|  6.14k|        parse_presentation_set_literal(begin, end, handler);
 6737|  6.14k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  3.07k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  6.14k|{
 6661|  6.14k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  6.14k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  6.14k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  6.14k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 6.14k, False: 0]
  |  Branch (6668:25): [True: 6.14k, False: 0]
  |  Branch (6668:49): [True: 6.14k, False: 0]
  ------------------
 6669|  6.14k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 6.14k, False: 0]
  ------------------
 6670|  6.14k|        ++begin;
 6671|       |
 6672|  6.14k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  6.14k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  6.14k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  6.14k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  6.14k|        return;
 6686|  6.14k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  12.2k|{
 6637|  12.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  12.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  12.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  |  Branch (859:45): [True: 0, False: 12.2k]
  |  |  |  Branch (859:45): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  12.2k|    const auto cp =
 6646|  12.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  12.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  12.2k|    begin += len;
 6653|  12.2k|    return cp;
 6654|  12.2k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  12.1k|{
 6532|  12.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  12.1k|    auto check_align = [](wchar_t ch) {
 6535|  12.1k|        switch (ch) {
 6536|  12.1k|            case L'<':
 6537|  12.1k|                return align_type::left;
 6538|  12.1k|            case L'>':
 6539|  12.1k|                return align_type::right;
 6540|  12.1k|            case L'^':
 6541|  12.1k|                return align_type::center;
 6542|  12.1k|            default:
 6543|  12.1k|                return align_type::none;
 6544|  12.1k|        }
 6545|  12.1k|    };
 6546|       |
 6547|  12.1k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  12.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  |  Branch (859:45): [True: 0, False: 12.1k]
  |  |  |  Branch (859:45): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6549|  12.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  12.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  12.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  12.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  12.1k|    const auto begin_before_fill = begin;
 6559|  12.1k|    begin += potential_fill_len;
 6560|       |
 6561|  12.1k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 12.1k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  12.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  12.1k|    const auto begin_after_fill = begin;
 6567|  12.1k|    ++begin;
 6568|       |
 6569|  12.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 12.1k, False: 0]
  ------------------
 6570|  12.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  12.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 3.07k, False: 9.08k]
  ------------------
 6575|  3.07k|            return begin_before_fill;
 6576|  3.07k|        }
 6577|  12.1k|    }
 6578|       |
 6579|  9.08k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 9.08k, False: 0]
  ------------------
 6580|  9.08k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 9.08k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  9.08k|        return begin_before_fill;
 6585|  9.08k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  9.08k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  24.3k|    auto check_align = [](wchar_t ch) {
 6535|  24.3k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 24.3k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 24.3k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 24.3k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  24.3k|            default:
  ------------------
  |  Branch (6542:13): [True: 24.3k, False: 0]
  ------------------
 6543|  24.3k|                return align_type::none;
 6544|  24.3k|        }
 6545|  24.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  12.1k|{
 6597|  12.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  12.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 12.1k, False: 0]
  |  Branch (6599:33): [True: 6.05k, False: 6.09k]
  ------------------
 6600|  6.05k|        int width = parse_simple_int(begin, end);
 6601|  6.05k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.05k, False: 0]
  |  |  ------------------
  ------------------
 6602|  6.05k|            handler.on_width(width);
 6603|  6.05k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  6.05k|    }
 6609|  12.1k|    return begin;
 6610|  12.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  3.02k|    {
 7127|  3.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  3.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 3.02k, False: 0]
  ------------------
 7129|  3.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 3.02k, False: 0]
  ------------------
 7130|  3.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 3.02k, False: 0]
  ------------------
 7131|  3.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 3.02k, False: 0]
  ------------------
 7132|  3.02k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  3.02k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  3.02k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  3.72M|{
 8417|  3.72M|#define SCN_VISIT(Type)                                         \
 8418|  3.72M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  3.72M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  3.72M|    }                                                           \
 8421|  3.72M|    else {                                                      \
 8422|  3.72M|        return vis(monostate_val);                              \
 8423|  3.72M|    }
 8424|       |
 8425|  3.72M|    monostate monostate_val{};
 8426|       |
 8427|  3.72M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 3.72M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 3.72M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 3.72M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 3.72M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 3.72M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 3.72M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 3.72M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 3.72M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 3.72M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 3.72M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 3.72M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 3.72M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 3.72M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 3.72M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 3.72M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 3.72M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 3.72M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 3.72M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 3.72M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 3.72M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 3.72M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  3.72M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 3.72M, False: 0]
  ------------------
 8471|  3.72M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  3.72M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  3.72M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  3.72M|    }                                                           \
  |  | 8421|  3.72M|    else {                                                      \
  |  | 8422|  3.72M|        return vis(monostate_val);                              \
  |  | 8423|  3.72M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 3.72M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 3.72M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 3.72M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 3.72M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 3.72M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  3.72M|            SCN_CLANG_POP
 8495|  3.72M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  19.6k|    {
 4076|  19.6k|        sync(0);
 4077|  19.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|  51.6k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  5.57M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  3.72M|{
   89|  3.72M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  3.72M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  3.72M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  3.72M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  7.44M|{
   44|  7.44M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  7.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  7.44M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  3.72M|{
  127|  3.72M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  3.72M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  3.72M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  3.72M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  7.44M|{
   60|  7.44M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  7.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  7.44M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|  1.85M|{
  163|  1.85M|    T value;
  164|  1.85M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.85M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  1.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 1.85M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|  1.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.85M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.85M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  3.71M|{
   72|  3.71M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  3.71M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  3.72M|{
   89|  3.72M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  3.72M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  3.72M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  3.72M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  3.72M|{
  127|  3.72M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  3.72M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  3.72M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  3.72M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|  1.85M|{
  163|  1.85M|    T value;
  164|  1.85M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.85M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  1.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 1.85M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|  1.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.85M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.85M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  3.72M|{
   89|  3.72M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  3.72M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  3.72M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  3.72M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  3.72M|{
   44|  3.72M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  3.72M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  3.72M|{
  127|  3.72M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  3.72M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  3.72M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  3.72M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  3.72M|{
   60|  3.72M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  3.72M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|  1.85M|{
  163|  1.85M|    T value;
  164|  1.85M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.85M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  1.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 1.85M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|  1.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.85M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.85M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  1.85M|{
   72|  1.85M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  1.85M|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  11.2M|{
  653|  11.2M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  11.2M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  74.9k|{
 2184|  74.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  74.9k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  38.4k|{
 2192|  38.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  38.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  38.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.9k, False: 4.54k]
  |  |  ------------------
  ------------------
 2194|  33.9k|        source.sync(*n);
 2195|  33.9k|    }
 2196|  4.54k|    else {
 2197|  4.54k|        source.sync_all();
 2198|  4.54k|    }
 2199|  38.4k|    return n;
 2200|  38.4k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  7.44M|{
 2208|  7.44M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  7.44M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  3.72M|{
 2216|  3.72M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  3.72M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  3.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.71M, False: 9.08k]
  |  |  ------------------
  ------------------
 2218|  3.71M|        source.sync(*n);
 2219|  3.71M|    }
 2220|  9.08k|    else {
 2221|  9.08k|        source.sync_all();
 2222|  9.08k|    }
 2223|  3.72M|    return n;
 2224|  3.72M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   253k|{
  194|   253k|    return find_classic_impl(
  195|   253k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   253k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   253k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   256k|{
  202|   256k|    return find_classic_impl(
  203|   256k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   256k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   256k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  74.9k|{
 2141|  74.9k|    return vscan_internal(source, format, args);
 2142|  74.9k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  38.4k|{
 2147|  38.4k|    auto n = vscan_internal(source, format, args);
 2148|  38.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  38.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.9k, False: 4.54k]
  |  |  ------------------
  ------------------
 2149|  33.9k|        source.sync(*n);
 2150|  33.9k|    }
 2151|  4.54k|    else {
 2152|  4.54k|        source.sync_all();
 2153|  4.54k|    }
 2154|  38.4k|    return n;
 2155|  38.4k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  7.44M|{
 2161|  7.44M|    return vscan_internal(source, format, args);
 2162|  7.44M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  3.72M|{
 2167|  3.72M|    auto n = vscan_internal(source, format, args);
 2168|  3.72M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  3.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.71M, False: 9.08k]
  |  |  ------------------
  ------------------
 2169|  3.71M|        source.sync(*n);
 2170|  3.71M|    }
 2171|  9.08k|    else {
 2172|  9.08k|        source.sync_all();
 2173|  9.08k|    }
 2174|  3.72M|    return n;
 2175|  3.72M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  34.1k|{
 2251|  34.1k|    return vscan_value_internal(source, arg);
 2252|  34.1k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  17.5k|{
 2256|  17.5k|    auto n = vscan_value_internal(source, arg);
 2257|  17.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  17.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.7k, False: 757]
  |  |  ------------------
  ------------------
 2258|  16.7k|        source.sync(*n);
 2259|  16.7k|    }
 2260|    757|    else {
 2261|    757|        source.sync_all();
 2262|    757|    }
 2263|  17.5k|    return n;
 2264|  17.5k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  3.71M|{
 2270|  3.71M|    return vscan_value_internal(source, arg);
 2271|  3.71M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  1.85M|{
 2276|  1.85M|    auto n = vscan_value_internal(source, arg);
 2277|  1.85M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.85M, False: 1.51k]
  |  |  ------------------
  ------------------
 2278|  1.85M|        source.sync(*n);
 2279|  1.85M|    }
 2280|  1.51k|    else {
 2281|  1.51k|        source.sync_all();
 2282|  1.51k|    }
 2283|  1.85M|    return n;
 2284|  1.85M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   253k|{
  118|   253k|    auto it = source.begin();
  119|       |
  120|   464k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 375k, False: 89.3k]
  ------------------
  121|   375k|        auto sv =
  122|   375k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   375k|                .substr(0, 8);
  124|       |
  125|   375k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 243k, False: 132k]
  ------------------
  126|   243k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   243k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   243k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 114k, False: 129k]
  ------------------
  129|   114k|                break;
  130|   114k|            }
  131|   129k|            continue;
  132|   243k|        }
  133|       |
  134|   389k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 307k, False: 82.4k]
  ------------------
  135|   307k|            auto tmp =
  136|   307k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   307k|            auto res = get_next_code_point(tmp);
  138|   307k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 49.8k, False: 257k]
  ------------------
  139|  49.8k|                return it;
  140|  49.8k|            }
  141|   257k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   257k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   257k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   257k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   257k|        }
  145|   132k|    }
  146|       |
  147|   203k|    return detail::make_string_view_iterator(source, it);
  148|   253k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   627k|{
  105|   627k|    static_assert(sizeof(*source.data()) == 1);
  106|   627k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   627k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   627k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   627k|    uint64_t word{};
  108|   627k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   627k|    return has_byte_greater(word, 127) != 0;
  111|   627k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  1.04M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   307k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   256k|{
  118|   256k|    auto it = source.begin();
  119|       |
  120|   338k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 252k, False: 85.9k]
  ------------------
  121|   252k|        auto sv =
  122|   252k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   252k|                .substr(0, 8);
  124|       |
  125|   252k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 195k, False: 57.0k]
  ------------------
  126|   195k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   195k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   195k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 115k, False: 79.6k]
  ------------------
  129|   115k|                break;
  130|   115k|            }
  131|  79.6k|            continue;
  132|   195k|        }
  133|       |
  134|   116k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 114k, False: 1.74k]
  ------------------
  135|   114k|            auto tmp =
  136|   114k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   114k|            auto res = get_next_code_point(tmp);
  138|   114k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 55.2k, False: 59.2k]
  ------------------
  139|  55.2k|                return it;
  140|  55.2k|            }
  141|  59.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  59.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  59.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  59.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  59.2k|        }
  145|  57.0k|    }
  146|       |
  147|   201k|    return detail::make_string_view_iterator(source, it);
  148|   256k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   563k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   114k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  76.8k|{
 2073|  76.8k|    const auto argcount = args.size();
 2074|  76.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 35.0k, False: 41.7k]
  |  Branch (2074:60): [True: 35.0k, False: 0]
  ------------------
 2075|  35.0k|        auto arg = args.get(0);
 2076|  35.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  35.0k|    }
 2078|       |
 2079|  41.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 41.7k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  41.7k|    SCN_UNLIKELY_ATTR
 2087|  41.7k|    {
 2088|  41.7k|        auto handler = format_handler<false, CharT>{
 2089|  41.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  41.7k|    static_cast<    \
  |  |  929|  41.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  41.7k|    static_cast<    \
  |  |  929|  41.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  41.7k|        return vscan_parse_format_string(format, handler);
 2091|  41.7k|    }
 2092|  41.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   226k|{
 1625|   226k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 123k, False: 103k]
  ------------------
 1626|   123k|        return false;
 1627|   123k|    }
 1628|   103k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 103k, False: 0]
  |  Branch (1628:39): [True: 103k, False: 0]
  ------------------
 1629|   226k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  52.6k|{
 1658|  52.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  52.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  52.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  52.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  52.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  52.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.27k, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.27k|    }                                                  \
  |  |  |  | 3671|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  50.3k|    return it.position();
 1675|  52.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  81.6k|    {
 1903|  81.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  11.3M|    {
 1722|  11.3M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  11.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  81.6k|    {
 1853|  81.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  81.6k|{
 2038|  81.6k|    const auto beg = handler.get_ctx().begin();
 2039|  81.6k|    detail::parse_format_string<false>(format, handler);
 2040|  81.6k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.1k, False: 66.5k]
  |  |  ------------------
  ------------------
 2041|  15.1k|        return unexpected(handler.error);
 2042|  15.1k|    }
 2043|  66.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  81.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   529k|    {
 2022|   529k|        return ctx.get();
 2023|   529k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   529k|    {
 1857|   529k|        return contiguous_ctx;
 1858|   529k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   148k|    {
 1907|   148k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 148k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   148k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  81.6k|{
 1681|  81.6k|    auto arg = ctx.arg(id);
 1682|  81.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.6k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  81.6k|    return arg;
 1686|  81.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  11.3M|    {
 1797|  11.3M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  11.3M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  11.3M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  11.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.3M, False: 0]
  |  |  ------------------
  ------------------
 1807|  11.3M|            visited_args_lower64 |= (1ull << id);
 1808|  11.3M|            return;
 1809|  11.3M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  11.3M|    {
 1782|  11.3M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  11.3M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  11.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.3M, False: 0]
  |  |  ------------------
  ------------------
 1788|  11.3M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  11.3M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  11.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  40.8k|    {
 1766|  40.8k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.8k, False: 0]
  |  |  ------------------
  ------------------
 1767|  40.8k|            error = err;
 1768|  40.8k|        }
 1769|  40.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  81.6k|    {
 1944|  81.6k|        return parse_ctx.next_arg_id();
 1945|  81.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  81.6k|    {
 1985|  81.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  81.6k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  81.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 81.6k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  81.6k|        auto specs = detail::format_specs{};
 1998|  81.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  81.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  81.6k|            arg.type()};
 2001|       |
 2002|  81.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  81.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 81.6k]
  |  Branch (2003:29): [True: 0, False: 81.6k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  81.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.05k, False: 75.6k]
  |  |  ------------------
  ------------------
 2009|  6.05k|            return parse_ctx.begin();
 2010|  6.05k|        }
 2011|  75.6k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  75.6k|        on_visit_scan_arg(
 2014|  75.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  75.6k|                                           get_ctx().locale()},
 2016|  75.6k|            arg);
 2017|  75.6k|        return parse_ctx.begin();
 2018|  81.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  81.6k|    {
 1701|  81.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  75.6k|    {
 1956|  75.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 75.6k]
  |  Branch (1956:23): [True: 0, False: 75.6k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  75.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  75.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 66.5k]
  |  |  ------------------
  ------------------
 1963|  9.08k|            on_error(r.error());
 1964|  9.08k|        }
 1965|  66.5k|        else {
 1966|  66.5k|            get_ctx().advance_to(*r);
 1967|  66.5k|        }
 1968|  75.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  27.2k|    {
 1761|  27.2k|        SCN_UNLIKELY_ATTR
 1762|  27.2k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  27.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  11.3M|    {
 1729|  11.3M|        {
 1730|  11.3M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 11.3M]
  ------------------
 1731|  11.3M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 11.3M]
  ------------------
 1732|  11.3M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  11.3M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  11.3M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 11.3M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  11.3M|        }
 1739|       |
 1740|  11.3M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 11.3M, False: 0]
  ------------------
 1741|  11.3M|            return;
 1742|  11.3M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  11.3M|    {
 1777|  11.3M|        return error;
 1778|  11.3M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  33.8M|    {
 1773|  33.8M|        return static_cast<bool>(error);
 1774|  33.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  41.7k|    {
 1903|  41.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  41.7k|    {
 1830|  41.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  41.7k|{
 2038|  41.7k|    const auto beg = handler.get_ctx().begin();
 2039|  41.7k|    detail::parse_format_string<false>(format, handler);
 2040|  41.7k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.57k, False: 34.2k]
  |  |  ------------------
  ------------------
 2041|  7.57k|        return unexpected(handler.error);
 2042|  7.57k|    }
 2043|  34.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  41.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   271k|    {
 2022|   271k|        return ctx.get();
 2023|   271k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   271k|    {
 1834|   271k|        return ctx;
 1835|   271k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  76.0k|    {
 1907|  76.0k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 76.0k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  76.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  41.7k|{
 1681|  41.7k|    auto arg = ctx.arg(id);
 1682|  41.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.7k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  41.7k|    return arg;
 1686|  41.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  41.7k|    {
 1944|  41.7k|        return parse_ctx.next_arg_id();
 1945|  41.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  41.7k|    {
 1985|  41.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  41.7k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  41.7k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 41.7k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  41.7k|        auto specs = detail::format_specs{};
 1998|  41.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  41.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  41.7k|            arg.type()};
 2001|       |
 2002|  41.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  41.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 41.7k]
  |  Branch (2003:29): [True: 0, False: 41.7k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  41.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 38.7k]
  |  |  ------------------
  ------------------
 2009|  3.02k|            return parse_ctx.begin();
 2010|  3.02k|        }
 2011|  38.7k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  38.7k|        on_visit_scan_arg(
 2014|  38.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  38.7k|                                           get_ctx().locale()},
 2016|  38.7k|            arg);
 2017|  38.7k|        return parse_ctx.begin();
 2018|  41.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  41.7k|    {
 1701|  41.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  38.7k|    {
 1956|  38.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 38.7k]
  |  Branch (1956:23): [True: 0, False: 38.7k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  38.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  38.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 34.2k]
  |  |  ------------------
  ------------------
 1963|  4.54k|            on_error(r.error());
 1964|  4.54k|        }
 1965|  34.2k|        else {
 1966|  34.2k|            get_ctx().advance_to(*r);
 1967|  34.2k|        }
 1968|  38.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   149k|{
 2053|   149k|    const auto argcount = args.size();
 2054|   149k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 68.2k, False: 81.6k]
  |  Branch (2054:60): [True: 68.2k, False: 0]
  ------------------
 2055|  68.2k|        auto arg = args.get(0);
 2056|  68.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  68.2k|    }
 2058|       |
 2059|  81.6k|    auto handler = format_handler<true, CharT>{
 2060|  81.6k|        ranges::subrange<const CharT*>{source.data(),
 2061|  81.6k|                                       source.data() + source.size()},
 2062|  81.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  81.6k|    static_cast<    \
  |  |  929|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  81.6k|    static_cast<    \
  |  |  929|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  81.6k|    return vscan_parse_format_string(format, handler);
 2064|   149k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   102k|{
 1638|   102k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   102k|    auto reader =
 1644|   102k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   102k|            ranges::subrange<const CharT*>{source.data(),
 1646|   102k|                                           source.data() + source.size()},
 1647|   102k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   102k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.54k, False: 97.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.54k|    }                                                  \
  |  |  |  | 3671|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  97.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  97.8k|    return ranges::distance(source.data(), it);
 1650|   102k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  14.8M|{
 2053|  14.8M|    const auto argcount = args.size();
 2054|  14.8M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 7.42M, False: 7.45M]
  |  Branch (2054:60): [True: 7.42M, False: 0]
  ------------------
 2055|  7.42M|        auto arg = args.get(0);
 2056|  7.42M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  7.42M|    }
 2058|       |
 2059|  7.45M|    auto handler = format_handler<true, CharT>{
 2060|  7.45M|        ranges::subrange<const CharT*>{source.data(),
 2061|  7.45M|                                       source.data() + source.size()},
 2062|  7.45M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  7.45M|    static_cast<    \
  |  |  929|  7.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  7.45M|    static_cast<    \
  |  |  929|  7.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  7.45M|    return vscan_parse_format_string(format, handler);
 2064|  14.8M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  22.3M|{
 1625|  22.3M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 11.1M, False: 11.1M]
  ------------------
 1626|  11.1M|        return false;
 1627|  11.1M|    }
 1628|  11.1M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 11.1M, False: 0]
  |  Branch (1628:39): [True: 11.1M, False: 0]
  ------------------
 1629|  22.3M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  11.1M|{
 1638|  11.1M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  11.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  11.1M|    auto reader =
 1644|  11.1M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  11.1M|            ranges::subrange<const CharT*>{source.data(),
 1646|  11.1M|                                           source.data() + source.size()},
 1647|  11.1M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  11.1M|    static_cast<    \
  |  |  929|  11.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  11.1M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  11.1M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.1M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.1M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.08k, False: 11.1M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.08k|    }                                                  \
  |  |  |  | 3671|  11.1M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  11.1M|    return ranges::distance(source.data(), it);
 1650|  11.1M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  7.45M|    {
 1903|  7.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  7.45M|    {
 1853|  7.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  7.45M|{
 2038|  7.45M|    const auto beg = handler.get_ctx().begin();
 2039|  7.45M|    detail::parse_format_string<false>(format, handler);
 2040|  7.45M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.2k, False: 7.42M]
  |  |  ------------------
  ------------------
 2041|  30.2k|        return unexpected(handler.error);
 2042|  30.2k|    }
 2043|  7.42M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  7.45M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  52.0M|    {
 2022|  52.0M|        return ctx.get();
 2023|  52.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  52.0M|    {
 1857|  52.0M|        return contiguous_ctx;
 1858|  52.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  14.8M|    {
 1907|  14.8M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 14.8M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  14.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  7.45M|{
 1681|  7.45M|    auto arg = ctx.arg(id);
 1682|  7.45M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.45M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  7.45M|    return arg;
 1686|  7.45M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  7.45M|    {
 1944|  7.45M|        return parse_ctx.next_arg_id();
 1945|  7.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  7.45M|    {
 1985|  7.45M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  7.45M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  7.45M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 7.45M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  7.45M|        auto specs = detail::format_specs{};
 1998|  7.45M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  7.45M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  7.45M|            arg.type()};
 2001|       |
 2002|  7.45M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  7.45M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 7.45M]
  |  Branch (2003:29): [True: 0, False: 7.45M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  7.45M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 7.44M]
  |  |  ------------------
  ------------------
 2009|  12.1k|            return parse_ctx.begin();
 2010|  12.1k|        }
 2011|  7.44M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  7.44M|        on_visit_scan_arg(
 2014|  7.44M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  7.44M|                                           get_ctx().locale()},
 2016|  7.44M|            arg);
 2017|  7.44M|        return parse_ctx.begin();
 2018|  7.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  7.45M|    {
 1701|  7.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  7.44M|    {
 1956|  7.44M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 7.44M]
  |  Branch (1956:23): [True: 0, False: 7.44M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  7.44M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  7.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  7.44M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  7.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 7.42M]
  |  |  ------------------
  ------------------
 1963|  18.1k|            on_error(r.error());
 1964|  18.1k|        }
 1965|  7.42M|        else {
 1966|  7.42M|            get_ctx().advance_to(*r);
 1967|  7.42M|        }
 1968|  7.44M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  7.44M|{
 2073|  7.44M|    const auto argcount = args.size();
 2074|  7.44M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 3.71M, False: 3.72M]
  |  Branch (2074:60): [True: 3.71M, False: 0]
  ------------------
 2075|  3.71M|        auto arg = args.get(0);
 2076|  3.71M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  3.71M|    static_cast<    \
  |  |  929|  3.71M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  3.71M|    }
 2078|       |
 2079|  3.72M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 3.72M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  3.72M|    SCN_UNLIKELY_ATTR
 2087|  3.72M|    {
 2088|  3.72M|        auto handler = format_handler<false, CharT>{
 2089|  3.72M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  3.72M|    static_cast<    \
  |  |  929|  3.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  3.72M|        return vscan_parse_format_string(format, handler);
 2091|  3.72M|    }
 2092|  3.72M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  5.57M|{
 1658|  5.57M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  5.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.57M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  5.57M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  5.57M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 5.57M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  5.57M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  5.57M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  5.57M|    static_cast<    \
  |  |  929|  5.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  5.57M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  5.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.54k, False: 5.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.54k|    }                                                  \
  |  |  |  | 3671|  5.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  5.56M|    return it.position();
 1675|  5.57M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  3.72M|    {
 1903|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  3.72M|    {
 1830|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  3.72M|{
 2038|  3.72M|    const auto beg = handler.get_ctx().begin();
 2039|  3.72M|    detail::parse_format_string<false>(format, handler);
 2040|  3.72M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.1k, False: 3.71M]
  |  |  ------------------
  ------------------
 2041|  15.1k|        return unexpected(handler.error);
 2042|  15.1k|    }
 2043|  3.71M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  3.72M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  26.0M|    {
 2022|  26.0M|        return ctx.get();
 2023|  26.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  26.0M|    {
 1834|  26.0M|        return ctx;
 1835|  26.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  7.43M|    {
 1907|  7.43M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 7.43M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  7.43M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  3.72M|{
 1681|  3.72M|    auto arg = ctx.arg(id);
 1682|  3.72M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  3.72M|    return arg;
 1686|  3.72M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|  3.72M|    {
 1944|  3.72M|        return parse_ctx.next_arg_id();
 1945|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|  3.72M|    {
 1985|  3.72M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  3.72M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  3.72M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 3.72M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  3.72M|        auto specs = detail::format_specs{};
 1998|  3.72M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  3.72M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  3.72M|            arg.type()};
 2001|       |
 2002|  3.72M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  3.72M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 3.72M]
  |  Branch (2003:29): [True: 0, False: 3.72M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  3.72M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.05k, False: 3.72M]
  |  |  ------------------
  ------------------
 2009|  6.05k|            return parse_ctx.begin();
 2010|  6.05k|        }
 2011|  3.72M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  3.72M|        on_visit_scan_arg(
 2014|  3.72M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  3.72M|                                           get_ctx().locale()},
 2016|  3.72M|            arg);
 2017|  3.72M|        return parse_ctx.begin();
 2018|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  3.72M|    {
 1701|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  3.72M|    {
 1956|  3.72M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 3.72M]
  |  Branch (1956:23): [True: 0, False: 3.72M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  3.72M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  3.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  3.72M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 3.71M]
  |  |  ------------------
  ------------------
 1963|  9.08k|            on_error(r.error());
 1964|  9.08k|        }
 1965|  3.71M|        else {
 1966|  3.71M|            get_ctx().advance_to(*r);
 1967|  3.71M|        }
 1968|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  34.1k|{
 2099|  34.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  34.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  17.5k|{
 2099|  17.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  17.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  3.71M|{
 2099|  3.71M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  3.71M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  1.85M|{
 2099|  1.85M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  1.85M|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    757|{
 1363|    757|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    757|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    757|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    757|            std::u32string tmp;
 1368|    757|            transcode_to_string_impl_to32(src, tmp);
 1369|    757|            return transcode_to_string_impl_32to16<false>(
 1370|    757|                std::u32string_view{tmp}, dest);
 1371|    757|        }
 1372|    757|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    757|            return transcode_to_string_impl_to32(src, dest);
 1374|    757|        }
 1375|    757|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    757|{
 1256|    757|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    757|    auto it = src.begin();
 1259|   188k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 187k, False: 757]
  ------------------
 1260|   187k|        auto res = get_next_code_point(
 1261|   187k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   187k|                                                                 src.end()));
 1263|   187k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.57k, False: 183k]
  |  |  ------------------
  ------------------
 1264|  4.57k|            dest.push_back(DestCharT{0xfffd});
 1265|  4.57k|        }
 1266|   183k|        else {
 1267|   183k|            dest.push_back(res.value);
 1268|   183k|        }
 1269|   187k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   187k|    }
 1271|    757|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   609k|{
 1169|   609k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   609k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   609k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   609k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   609k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.3k, False: 593k]
  |  |  ------------------
  ------------------
 1173|  15.3k|        return {get_start_for_next_code_point(input),
 1174|  15.3k|                detail::invalid_code_point};
 1175|  15.3k|    }
 1176|   593k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.68k, False: 589k]
  |  |  ------------------
  ------------------
 1177|  4.68k|        return {input.end(), detail::invalid_code_point};
 1178|  4.68k|    }
 1179|       |
 1180|   589k|    return {input.begin() + len,
 1181|   589k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   593k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  15.3k|{
 1155|  15.3k|    auto it = input.begin();
 1156|  81.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 81.1k, False: 852]
  ------------------
 1157|  81.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 14.5k, False: 66.6k]
  ------------------
 1158|  14.5k|            break;
 1159|  14.5k|        }
 1160|  81.1k|    }
 1161|  15.3k|    return it;
 1162|  15.3k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  13.6k|    {
 2931|  13.6k|        SCN_UNLIKELY_ATTR
 2932|  13.6k|        m_msg = msg;
 2933|  13.6k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  11.2M|    {
 2936|  11.2M|        return m_msg == nullptr;
 2937|  11.2M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  1.60M|{
  458|  1.60M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.60M|        static_cast<unsigned char>(ch))];
  460|  1.60M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  32.6k|{
  469|  32.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  32.6k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  9.25k|{
  474|  9.25k|#if WCHAR_MIN < 0
  475|  9.25k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 8.27k, False: 978]
  |  Branch (475:23): [True: 5.11k, False: 3.16k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  9.25k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   627k|{
  539|   627k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   627k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  44.9M|{
  784|  44.9M|    return e != eof_error::good;
  785|  44.9M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  18.0k|{
  798|  18.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  18.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  18.0k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   341M|{
 1200|       |    // Pattern_White_Space property
 1201|   341M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 241M, False: 100M]
  |  Branch (1201:27): [True: 30.4M, False: 210M]
  ------------------
 1202|   341M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 41.2M, False: 270M]
  ------------------
 1203|   341M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 2.39M, False: 267M]
  ------------------
 1204|   341M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 513k, False: 267M]
  ------------------
 1205|   341M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 397k, False: 266M]
  ------------------
 1206|   341M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 473k, False: 266M]
  ------------------
 1207|   341M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 15, False: 266M]
  ------------------
 1208|   341M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  11.2M|{
 6008|  11.2M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 11.2M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  11.2M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 11.2M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  11.2M|    return {};
 6023|  11.2M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   337k|    {
  304|   337k|        ranges::advance(x, n);
  305|   337k|        return x;
  306|   337k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   337k|    {
  268|   337k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   337k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   337k|    {
  151|   337k|        i += n;
  152|   337k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   821k|    {
  108|   821k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   821k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   821k|    {
   87|   821k|        return s - i;
   88|   821k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  18.5M|    {
  108|  18.5M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  18.5M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  18.5M|    {
   87|  18.5M|        return s - i;
   88|  18.5M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  89.8k|{
  981|  89.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  89.8k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  89.8k|        return true;
  984|  89.8k|    }
  985|  89.8k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  89.8k|                           ranges::const_iterator_t<Range>,
  987|  89.8k|                           typename detail::basic_scan_buffer<
  988|  89.8k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  89.8k|        auto beg = r.begin();
  990|  89.8k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 89.8k, False: 0]
  ------------------
  991|  89.8k|            return false;
  992|  89.8k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  89.8k|    else {
 1006|  89.8k|        return false;
 1007|  89.8k|    }
 1008|  89.8k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  29.0k|    {
  763|  29.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.49k|    {
  754|  6.49k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  14.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.5k|              cvref<T> obj = *get<T>(fn);
  745|  14.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.5k|              }
  748|  14.5k|              else {
  749|  14.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.5k|              }
  751|  14.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.5k|    {
  684|  14.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.5k|            return static_cast<T*>(s.m_cp);
  686|  14.5k|        }
  687|  14.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.5k|            return static_cast<T*>(s.m_p);
  689|  14.5k|        }
  690|  14.5k|        else {
  691|  14.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.5k|        }
  693|  14.5k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.49k|        {
  662|  6.49k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   416M|    {
  763|   416M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   416M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   416M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  27.9M|    {
  754|  27.9M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  75.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.3M|              cvref<T> obj = *get<T>(fn);
  745|  75.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.3M|              }
  748|  75.3M|              else {
  749|  75.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.3M|              }
  751|  75.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  75.3M|    {
  684|  75.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.3M|            return static_cast<T*>(s.m_cp);
  686|  75.3M|        }
  687|  75.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.3M|            return static_cast<T*>(s.m_p);
  689|  75.3M|        }
  690|  75.3M|        else {
  691|  75.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.3M|        }
  693|  75.3M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  27.9M|        {
  662|  27.9M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  37.2k|    {
 6037|  37.2k|        const bool need_skipped_width =
 6038|  37.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 37.2k]
  |  Branch (6038:33): [True: 0, False: 37.2k]
  ------------------
 6039|  37.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  37.2k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 37.2k]
  ------------------
 6043|  37.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 37.2k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  37.2k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 37.2k, False: 0]
  |  Branch (6047:56): [True: 35.0k, False: 2.16k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  35.0k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 35.0k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  69.4k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  35.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 744, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    744|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    744|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    744|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    744|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    744|    }                                                  \
  |  |  |  | 3671|  35.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  69.4k|                            make_eof_scan_error));
 6058|       |
 6059|  69.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 34.3k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  34.3k|            return result_type{it, 0};
 6067|  69.4k|        }
 6068|       |
 6069|  2.16k|        return result_type{rng.begin(), 0};
 6070|  37.2k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.16k|{
 1976|  2.16k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.16k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.16k|{
 1957|  2.16k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.16k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.16k|    }
 1960|  2.16k|    else {
 1961|  2.16k|        auto first = range.begin();
 1962|  4.88k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 4.83k, False: 48]
  ------------------
 1963|  4.83k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.11k, False: 2.71k]
  ------------------
 1964|  2.11k|                return first;
 1965|  2.11k|            }
 1966|  4.83k|        }
 1967|     48|        return first;
 1968|  2.16k|    }
 1969|  2.16k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  34.2k|    {
  108|  34.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.2k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  34.2k|    {
   94|  34.2k|        iter_difference_t<I> counter{0};
   95|   370k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 336k, False: 34.2k]
  ------------------
   96|   336k|            ++i;
   97|   336k|            ++counter;
   98|   336k|        }
   99|  34.2k|        return counter;
  100|  34.2k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   139k|{
  950|   139k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79k, False: 138k]
  |  |  ------------------
  ------------------
  951|  1.79k|        return eof_error::eof;
  952|  1.79k|    }
  953|   138k|    return eof_error::good;
  954|   139k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.02M|{
  944|  1.02M|    return is_range_eof(r.begin(), r.end());
  945|  1.02M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.02M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.02M|    {
  937|  1.02M|        return begin == end;
  938|  1.02M|    }
  939|  1.02M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|  86.5k|{
 1683|  86.5k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  86.5k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  86.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  86.5k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  86.5k|    }
 1688|  86.5k|    else {
 1689|  86.5k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  86.5k|    }
 1691|  86.5k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  86.5k|    {
 1537|  86.5k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  86.5k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  86.5k|    {
 1621|  86.5k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  86.5k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  86.5k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  86.5k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  86.5k|            m_storage.reset();
 1627|  86.5k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  86.5k|        }
 1629|  86.5k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  86.5k|                                          std::basic_string<CharT>>) {
 1631|  86.5k|            m_storage.emplace(SCN_FWD(range));
 1632|  86.5k|            m_view = string_view_type{*m_storage};
 1633|  86.5k|        }
 1634|  86.5k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  86.5k|                                          typename detail::basic_scan_buffer<
 1636|  86.5k|                                              value_t>::forward_iterator> &&
 1637|  86.5k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  86.5k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  86.5k|            auto end_seg = range.end().contiguous_segment();
 1640|  86.5k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  86.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.97k, False: 83.6k]
  |  |  ------------------
  ------------------
 1641|  86.5k|                             detail::to_address(end_seg.end()))) {
 1642|  2.97k|                auto& str = m_storage.emplace();
 1643|  2.97k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.97k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.97k|                m_view = string_view_type{str};
 1646|  2.97k|                return;
 1647|  2.97k|            }
 1648|       |
 1649|  83.6k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  83.6k|                                                            end_seg.data());
 1651|  83.6k|            m_storage.reset();
 1652|  83.6k|        }
 1653|  86.5k|        else {
 1654|  86.5k|            auto& str = m_storage.emplace();
 1655|  86.5k|            if constexpr (ranges::sized_range<Range>) {
 1656|  86.5k|                str.reserve(range.size());
 1657|  86.5k|            }
 1658|  86.5k|            if constexpr (ranges::common_range<Range>) {
 1659|  86.5k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  86.5k|                          std::back_inserter(str));
 1661|  86.5k|            }
 1662|  86.5k|            else {
 1663|  86.5k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  86.5k|                     ++it) {
 1665|  86.5k|                    str.push_back(*it);
 1666|  86.5k|                }
 1667|  86.5k|            }
 1668|  86.5k|            m_view = string_view_type{str};
 1669|  86.5k|        }
 1670|  86.5k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   169k|    {
 1582|   169k|        return m_view;
 1583|   169k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  86.5k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  33.8k|    {
 6079|  33.8k|        const bool need_skipped_width =
 6080|  33.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 33.8k]
  |  Branch (6080:33): [True: 0, False: 33.8k]
  ------------------
 6081|  33.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  33.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 33.8k]
  ------------------
 6084|  33.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 33.8k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  33.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 33.8k, False: 0]
  ------------------
 6093|  33.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 626, False: 33.2k]
  ------------------
 6094|  33.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 626]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    626|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 626]
  ------------------
 6096|    626|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  33.8k|        return result_type{rng.begin(), 0};
 6118|  33.8k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   272k|{
  950|   272k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.32k, False: 268k]
  |  |  ------------------
  ------------------
  951|  3.32k|        return eof_error::eof;
  952|  3.32k|    }
  953|   268k|    return eof_error::good;
  954|   272k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   272k|{
  944|   272k|    return is_range_eof(r.begin(), r.end());
  945|   272k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   272k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   272k|    {
  937|   272k|        return begin == end;
  938|   272k|    }
  939|   272k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   168k|{
 1683|   168k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   168k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   168k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   168k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   168k|    }
 1688|   168k|    else {
 1689|   168k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   168k|    }
 1691|   168k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   168k|    {
 1490|   168k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   925k|    {
 1503|   925k|        return sv;
 1504|   925k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.32k|{
 1976|  4.32k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.32k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  4.32k|{
 1957|  4.32k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.32k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.32k|    }
 1960|  4.32k|    else {
 1961|  4.32k|        auto first = range.begin();
 1962|  4.32k|        for (; first != range.end(); ++first) {
 1963|  4.32k|            if (pred(*first)) {
 1964|  4.32k|                return first;
 1965|  4.32k|            }
 1966|  4.32k|        }
 1967|  4.32k|        return first;
 1968|  4.32k|    }
 1969|  4.32k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   169k|{
 2951|   169k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 169k, False: 0]
  ------------------
 2952|   169k|        auto it = read_while_classic_space(range);
 2953|   169k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   169k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 167k]
  |  |  ------------------
  ------------------
 2955|  2.36k|            return unexpected(e);
 2956|  2.36k|        }
 2957|       |
 2958|   167k|        return it;
 2959|   169k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   169k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   169k|{
 2117|   169k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   169k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   169k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   169k|        auto buf = make_contiguous_buffer(range);
 2121|   169k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   169k|        return ranges::next(range.begin(),
 2123|   169k|                            ranges::distance(buf.view().begin(), it));
 2124|   169k|    }
 2125|   169k|    else {
 2126|   169k|        auto it = range.begin();
 2127|       |
 2128|   169k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   169k|            auto seg = get_contiguous_beginning(range);
 2130|   169k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   169k|                seg_it != seg.end()) {
 2132|   169k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   169k|            }
 2134|   169k|            ranges::advance(it, seg.size());
 2135|   169k|        }
 2136|       |
 2137|   169k|        return read_while_code_point(
 2138|   169k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   169k|    }
 2140|   169k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   337k|{
 1683|   337k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   337k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   337k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   337k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   337k|    }
 1688|   337k|    else {
 1689|   337k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   337k|    }
 1691|   337k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   337k|    {
 1490|   337k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.63k|    {
  304|  3.63k|        ranges::advance(x, n);
  305|  3.63k|        return x;
  306|  3.63k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   173k|    {
  268|   173k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   173k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   173k|    {
  181|   336k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 163k, False: 173k]
  ------------------
  182|   163k|            ++i;
  183|   163k|        }
  184|   173k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  86.6k|    {
 1587|  86.6k|        return m_storage.has_value();
 1588|  86.6k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.02k|    {
 1592|  2.02k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.02k|        return *m_storage;
 1594|  2.02k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|  38.7k|    {
 6193|  38.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  38.7k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  38.7k|            auto rd = make_reader<T, char_type>();
 6198|  38.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  38.7k|                return unexpected(e);
 6200|  38.7k|            }
 6201|       |
 6202|  38.7k|            return impl(rd, range, value);
 6203|  38.7k|        }
 6204|  38.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  38.7k|            auto rd = make_reader<T, char_type>();
 6206|  38.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 37.2k]
  |  |  ------------------
  ------------------
 6207|  1.51k|                return unexpected(e);
 6208|  1.51k|            }
 6209|       |
 6210|  37.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 37.2k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  37.2k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  37.2k|                return impl(rd, range, value);
 6213|  37.2k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  38.7k|        else {
 6221|  38.7k|            SCN_EXPECT(false);
 6222|  38.7k|            SCN_UNREACHABLE;
 6223|  38.7k|        }
 6224|  38.7k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   180k|{
 5809|   180k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   180k|        return reader_impl_for_bool<CharT>{};
 5811|   180k|    }
 5812|   180k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   180k|        return reader_impl_for_char<CharT>{};
 5814|   180k|    }
 5815|   180k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   180k|        return reader_impl_for_wchar<CharT>{};
 5817|   180k|    }
 5818|   180k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   180k|        return reader_impl_for_code_point<CharT>{};
 5820|   180k|    }
 5821|   180k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   180k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   180k|        return reader_impl_for_string<CharT>{};
 5824|   180k|    }
 5825|   180k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   180k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   180k|        return reader_impl_for_string<CharT>{};
 5828|   180k|    }
 5829|   180k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   180k|                       std::is_same_v<T, wregex_matches>) {
 5831|   180k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   180k|    }
 5833|   180k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   180k|        return reader_impl_for_voidptr<CharT>{};
 5835|   180k|    }
 5836|   180k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   180k|        return reader_impl_for_float<CharT>{};
 5838|   180k|    }
 5839|   180k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   180k|                       !std::is_same_v<T, wchar_t> &&
 5841|   180k|                       !std::is_same_v<T, char32_t> &&
 5842|   180k|                       !std::is_same_v<T, bool>) {
 5843|   180k|        return reader_impl_for_int<CharT>{};
 5844|   180k|    }
 5845|   180k|    else {
 5846|   180k|        return reader_impl_for_monostate<CharT>{};
 5847|   180k|    }
 5848|   180k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   269k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   114k|    {
 3040|   114k|        reader_error_handler eh{};
 3041|   114k|        get_derived().check_specs_impl(specs, eh);
 3042|   114k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 109k]
  |  |  ------------------
  ------------------
 3043|  4.54k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.54k|        }
 3045|   109k|        return {};
 3046|   114k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   114k|    {
 3051|   114k|        return static_cast<Derived&>(*this);
 3052|   114k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   114k|    {
 5210|   114k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   114k|        SCN_GCC_PUSH
 5213|   114k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   114k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   114k|        SCN_CLANG_PUSH
 5217|   114k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   114k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   114k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 114k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 114k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   103k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 103k, False: 11.0k]
  ------------------
 5226|   103k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 103k]
  ------------------
 5227|   103k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 103k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   103k|                else {
 5231|   103k|                    m_type = reader_type::word;
 5232|   103k|                }
 5233|   103k|                break;
 5234|      0|            }
 5235|       |
 5236|  4.54k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 4.54k, False: 109k]
  ------------------
 5237|  4.54k|                m_type = reader_type::character;
 5238|  4.54k|                break;
 5239|       |
 5240|  6.49k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 6.49k, False: 107k]
  ------------------
 5241|  6.49k|                m_type = reader_type::character_set;
 5242|  6.49k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 114k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 114k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   114k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   114k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  37.2k|    {
 6124|  37.2k|        const bool need_skipped_width =
 6125|  37.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 37.2k]
  |  Branch (6125:33): [True: 0, False: 37.2k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  37.2k|        auto it = rng.begin();
 6129|  37.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  37.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 37.2k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  37.2k|        else {
 6138|  37.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  37.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 744, False: 36.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    744|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    744|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    744|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    744|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    744|    }                                                  \
  |  |  |  | 3671|  37.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  36.5k|            std::tie(it, prefix_width) = prefix_result;
 6140|  36.5k|        }
 6141|  36.5k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  36.5k|        std::ptrdiff_t value_width = 0;
 6145|  36.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 36.5k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  36.5k|        else {
 6161|  36.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.28k, False: 34.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.28k|    }                                                  \
  |  | 3671|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  36.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  34.2k|                                             specs, value, loc));
 6163|       |
 6164|  34.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 34.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  34.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  34.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  34.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 33.8k, False: 376]
  ------------------
 6174|  33.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  33.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  33.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  33.8k|                                 value_width));
 6178|  33.8k|            std::tie(it, postfix_width) = postfix_result;
 6179|  33.8k|        }
 6180|       |
 6181|  34.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  34.2k|                                                 value_width, postfix_width);
 6183|  34.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 34.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  34.2k|        return it;
 6188|  34.2k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   364k|    {
 5259|   364k|        return m_type == reader_type::word;
 5260|   364k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   255k|{
 1132|   255k|    auto it = src.begin();
 1133|  1.78M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.54M, False: 249k]
  ------------------
 1134|  1.54M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.54M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 3.13k, False: 1.53M]
  ------------------
 1136|  3.13k|            return false;
 1137|  3.13k|        }
 1138|  1.53M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 411, False: 1.53M]
  ------------------
 1139|    411|            return false;
 1140|    411|        }
 1141|  1.53M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.53M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.53M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.69k, False: 1.53M]
  ------------------
 1144|  2.69k|            return false;
 1145|  2.69k|        }
 1146|  1.53M|        it += len;
 1147|  1.53M|    }
 1148|   249k|    return true;
 1149|   255k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  84.5k|{
 2993|  84.5k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  84.5k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 2.02k, False: 82.5k]
  ------------------
 2995|  2.02k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.02k|    static_cast<    \
  |  |  929|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  2.02k|        }
 2997|  82.5k|        else {
 2998|  82.5k|            dest.assign(source.view());
 2999|  82.5k|        }
 3000|  84.5k|    }
 3001|  84.5k|    else {
 3002|  84.5k|        return transcode_impl(source.view(), dest);
 3003|  84.5k|    }
 3004|       |
 3005|  84.5k|    return {};
 3006|  84.5k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  6.49k|        {
 5103|  6.49k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 6.49k, False: 0]
  ------------------
 5104|  6.49k|                return {};
 5105|  6.49k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  13.0k|        {
 5076|  13.0k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  13.0k|            const auto val =
 5078|  13.0k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  13.0k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  13.0k|                    (val % 8)) &
 5081|  13.0k|                   1u;
 5082|  13.0k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  14.5k|        {
 5129|  14.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.45k, False: 13.0k]
  ------------------
 5130|  1.45k|                return false;
 5131|  1.45k|            }
 5132|       |
 5133|  13.0k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  14.5k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  6.49k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  36.5k|    {
 5277|  36.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  36.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  36.5k|        return read_impl(range, specs, value);
 5279|  36.5k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  36.5k|    {
 5295|  36.5k|        SCN_CLANG_PUSH
 5296|  36.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  36.5k|        switch (m_type) {
 5299|  34.3k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 34.3k, False: 2.16k]
  ------------------
 5300|  34.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 36.5k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 36.5k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.16k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.16k, False: 34.3k]
  ------------------
 5310|  2.16k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.16k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 36.5k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 36.5k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 36.5k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  36.5k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  36.5k|        }
 5331|       |
 5332|  36.5k|        SCN_CLANG_POP
 5333|  36.5k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  85.9k|    {
 4820|  85.9k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  85.9k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  85.9k|{
 4752|  85.9k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  85.9k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  85.9k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 1.99k, False: 83.9k]
  ------------------
 4756|  1.99k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  1.99k|                                     "Invalid encoding in scanned string");
 4758|  1.99k|    }
 4759|  83.9k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  83.9k|    static_cast<    \
  |  |  929|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  83.9k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.9k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  83.9k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  83.9k|    static_cast<    \
  |  |  929|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  83.9k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  85.9k|{
 2088|  85.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  85.9k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  85.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  85.9k|        auto buf = make_contiguous_buffer(range);
 2092|  85.9k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  85.9k|        return ranges::next(range.begin(),
 2094|  85.9k|                            ranges::distance(buf.view().begin(), it));
 2095|  85.9k|    }
 2096|  85.9k|    else {
 2097|  85.9k|        auto it = range.begin();
 2098|       |
 2099|  85.9k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  85.9k|            auto seg = get_contiguous_beginning(range);
 2101|  85.9k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  85.9k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 85.9k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  85.9k|            ranges::advance(it, seg.size());
 2106|  85.9k|        }
 2107|       |
 2108|  85.9k|        return read_until_code_point(
 2109|  85.9k|            ranges::subrange{it, range.end()},
 2110|  85.9k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  85.9k|    }
 2112|  85.9k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   173k|{
 1039|   173k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   173k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   173k|        return r;
 1042|   173k|    }
 1043|   173k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   173k|                           ranges::const_iterator_t<Range>,
 1045|   173k|                           typename detail::basic_scan_buffer<
 1046|   173k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   173k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   173k|            auto seg = r.begin().contiguous_segment();
 1049|   173k|            auto dist =
 1050|   173k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   173k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   173k|        }
 1053|   173k|        else {
 1054|   173k|            return r.begin().contiguous_segment();
 1055|   173k|        }
 1056|   173k|    }
 1057|   173k|    else {
 1058|   173k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   173k|    }
 1060|   173k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   169k|{
 2061|   169k|    auto it = range.begin();
 2062|   888k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 885k, False: 3.01k]
  ------------------
 2063|   885k|        const auto val =
 2064|   885k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   885k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   885k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 878k, False: 7.85k]
  |  |  ------------------
  ------------------
 2066|   878k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   878k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   878k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 166k, False: 711k]
  ------------------
 2069|   166k|                return it;
 2070|   166k|            }
 2071|   878k|        }
 2072|   719k|        it = val.iterator;
 2073|   719k|    }
 2074|       |
 2075|  3.01k|    return it;
 2076|   169k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   885k|{
 1899|   885k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   885k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   885k|    auto it = range.begin();
 1903|   885k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   885k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   885k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.85k, False: 878k]
  |  |  ------------------
  ------------------
 1906|  7.85k|        ++it;
 1907|  7.85k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  7.85k|        return {it, {}};
 1909|  7.85k|    }
 1910|       |
 1911|   878k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 808k, False: 69.1k]
  ------------------
 1912|   808k|        ++it;
 1913|   808k|        return {it, string_type(1, *range.begin())};
 1914|   808k|    }
 1915|       |
 1916|  69.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  69.1k|    return {it, string_type{range.begin(), it}};
 1918|   878k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  7.85k|{
 1155|  7.85k|    auto it = input.begin();
 1156|  29.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 29.1k, False: 217]
  ------------------
 1157|  29.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 7.63k, False: 21.5k]
  ------------------
 1158|  7.63k|            break;
 1159|  7.63k|        }
 1160|  29.1k|    }
 1161|  7.85k|    return it;
 1162|  7.85k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  69.1k|    {
  283|  69.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  69.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  69.1k|    {
  252|  69.1k|        constexpr iter_difference_t<I> zero{0};
  253|  69.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|   252k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 183k, False: 68.8k]
  |  Branch (255:30): [True: 183k, False: 325]
  ------------------
  256|   183k|            ++i;
  257|   183k|            ++counter;
  258|   183k|        }
  259|       |
  260|  69.1k|        return counter;
  261|  69.1k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|   885k|    {
 1890|   885k|        return !codepoint.empty();
 1891|   885k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  85.9k|    {
  754|  85.9k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   554k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   554k|              cvref<T> obj = *get<T>(fn);
  745|   554k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   554k|                  obj(static_cast<decltype(args)>(args)...);
  747|   554k|              }
  748|   554k|              else {
  749|   554k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   554k|              }
  751|   554k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   554k|    {
  684|   554k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   554k|            return static_cast<T*>(s.m_cp);
  686|   554k|        }
  687|   554k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   554k|            return static_cast<T*>(s.m_p);
  689|   554k|        }
  690|   554k|        else {
  691|   554k|            return reinterpret_cast<T*>(s.m_fp);
  692|   554k|        }
  693|   554k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   554k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  85.9k|        {
  662|  85.9k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  2.16k|    {
 5048|  2.16k|        auto it = read_source_impl(range, {specs});
 5049|  2.16k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 650]
  |  |  ------------------
  ------------------
 5050|  1.51k|            return unexpected(it.error());
 5051|  1.51k|        }
 5052|       |
 5053|    650|        return read_string_impl(range, *it, value);
 5054|  2.16k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  2.16k|    {
 5153|  2.16k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.16k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.16k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.16k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.16k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 2.16k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  2.16k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.16k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.16k|        };
 5178|       |
 5179|  2.16k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 2.16k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  2.16k|        auto it = read_while_code_unit(range, cb);
 5184|  2.16k|        return check_nonempty(it, range);
 5185|  2.16k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  2.16k|    {
 5191|  2.16k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.51k, False: 650]
  ------------------
 5192|  1.51k|            return unexpected_scan_error(
 5193|  1.51k|                scan_error::invalid_scanned_value,
 5194|  1.51k|                "No characters matched in [character set]");
 5195|  1.51k|        }
 5196|       |
 5197|    650|        return it;
 5198|  2.16k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  83.5k|{
 2082|  83.5k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  83.5k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.16k|    {
  754|  2.16k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.83k|              cvref<T> obj = *get<T>(fn);
  745|  4.83k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.83k|              }
  748|  4.83k|              else {
  749|  4.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.83k|              }
  751|  4.83k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.83k|    {
  684|  4.83k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.83k|            return static_cast<T*>(s.m_cp);
  686|  4.83k|        }
  687|  4.83k|        else if constexpr (std::is_object_v<T>) {
  688|  4.83k|            return static_cast<T*>(s.m_p);
  689|  4.83k|        }
  690|  4.83k|        else {
  691|  4.83k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.83k|        }
  693|  4.83k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.83k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.83k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.83k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.16k|        {
  667|  2.16k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    650|{
 4752|    650|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    650|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    650|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 650]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    650|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    650|    static_cast<    \
  |  |  929|    650|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    650|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    650|    return SCN_MOVE(result);
  ------------------
  |  |  928|    650|    static_cast<    \
  |  |  929|    650|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    650|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  35.6k|    {
 5277|  35.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  35.6k|        return read_impl(range, specs, value);
 5279|  35.6k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  35.6k|    {
 5295|  35.6k|        SCN_CLANG_PUSH
 5296|  35.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  35.6k|        switch (m_type) {
 5299|  33.4k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 33.4k, False: 2.16k]
  ------------------
 5300|  33.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 35.6k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 35.6k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.16k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.16k, False: 33.4k]
  ------------------
 5310|  2.16k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.16k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 35.6k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 35.6k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 35.6k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  35.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  35.6k|        }
 5331|       |
 5332|  35.6k|        SCN_CLANG_POP
 5333|  35.6k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  83.6k|    {
 4820|  83.6k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  83.6k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  83.6k|{
 4752|  83.6k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  83.6k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  83.6k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 2.12k, False: 81.5k]
  ------------------
 4756|  2.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  2.12k|                                     "Invalid encoding in scanned string");
 4758|  2.12k|    }
 4759|  81.5k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  81.5k|    static_cast<    \
  |  |  929|  81.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  81.5k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.5k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  81.5k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  81.5k|    static_cast<    \
  |  |  929|  81.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  81.5k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  82.2k|{
 3012|  82.2k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  82.2k|        dest.assign(source.view());
 3014|  82.2k|    }
 3015|  82.2k|    else {
 3016|  82.2k|        return transcode_impl(source.view(), dest);
 3017|  82.2k|    }
 3018|       |
 3019|  82.2k|    return {};
 3020|  82.2k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   167k|{
 2088|   167k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   167k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   167k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   167k|        auto buf = make_contiguous_buffer(range);
 2092|   167k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   167k|        return ranges::next(range.begin(),
 2094|   167k|                            ranges::distance(buf.view().begin(), it));
 2095|   167k|    }
 2096|   167k|    else {
 2097|   167k|        auto it = range.begin();
 2098|       |
 2099|   167k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   167k|            auto seg = get_contiguous_beginning(range);
 2101|   167k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   167k|                seg_it != seg.end()) {
 2103|   167k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   167k|            }
 2105|   167k|            ranges::advance(it, seg.size());
 2106|   167k|        }
 2107|       |
 2108|   167k|        return read_until_code_point(
 2109|   167k|            ranges::subrange{it, range.end()},
 2110|   167k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   167k|    }
 2112|   167k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.16k|    {
 5048|  2.16k|        auto it = read_source_impl(range, {specs});
 5049|  2.16k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 650]
  |  |  ------------------
  ------------------
 5050|  1.51k|            return unexpected(it.error());
 5051|  1.51k|        }
 5052|       |
 5053|    650|        return read_string_impl(range, *it, value);
 5054|  2.16k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  4.32k|    {
 5153|  4.32k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.32k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.32k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.32k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.32k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 4.32k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  4.32k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.32k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.32k|        };
 5178|       |
 5179|  4.32k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 4.32k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  4.32k|        auto it = read_while_code_unit(range, cb);
 5184|  4.32k|        return check_nonempty(it, range);
 5185|  4.32k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  4.32k|    {
 5191|  4.32k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 3.02k, False: 1.30k]
  ------------------
 5192|  3.02k|            return unexpected_scan_error(
 5193|  3.02k|                scan_error::invalid_scanned_value,
 5194|  3.02k|                "No characters matched in [character set]");
 5195|  3.02k|        }
 5196|       |
 5197|  1.30k|        return it;
 5198|  4.32k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  4.32k|    {
  754|  4.32k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  9.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.66k|              cvref<T> obj = *get<T>(fn);
  745|  9.66k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.66k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.66k|              }
  748|  9.66k|              else {
  749|  9.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.66k|              }
  751|  9.66k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  9.66k|    {
  684|  9.66k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.66k|            return static_cast<T*>(s.m_cp);
  686|  9.66k|        }
  687|  9.66k|        else if constexpr (std::is_object_v<T>) {
  688|  9.66k|            return static_cast<T*>(s.m_p);
  689|  9.66k|        }
  690|  9.66k|        else {
  691|  9.66k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.66k|        }
  693|  9.66k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  9.66k|        const auto cb = [&](SourceCharT ch) {
 5176|  9.66k|            return cb_wrapper.on_ascii_only(ch);
 5177|  9.66k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  4.32k|        {
  667|  4.32k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    650|{
 4752|    650|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    650|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    650|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 650]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    650|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    650|    static_cast<    \
  |  |  929|    650|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    650|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 650]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    650|    return SCN_MOVE(result);
  ------------------
  |  |  928|    650|    static_cast<    \
  |  |  929|    650|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    650|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  89.0k|{
 5809|  89.0k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  89.0k|        return reader_impl_for_bool<CharT>{};
 5811|  89.0k|    }
 5812|  89.0k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  89.0k|        return reader_impl_for_char<CharT>{};
 5814|  89.0k|    }
 5815|  89.0k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  89.0k|        return reader_impl_for_wchar<CharT>{};
 5817|  89.0k|    }
 5818|  89.0k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  89.0k|        return reader_impl_for_code_point<CharT>{};
 5820|  89.0k|    }
 5821|  89.0k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  89.0k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  89.0k|        return reader_impl_for_string<CharT>{};
 5824|  89.0k|    }
 5825|  89.0k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  89.0k|                       std::is_same_v<T, std::wstring>) {
 5827|  89.0k|        return reader_impl_for_string<CharT>{};
 5828|  89.0k|    }
 5829|  89.0k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  89.0k|                       std::is_same_v<T, wregex_matches>) {
 5831|  89.0k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  89.0k|    }
 5833|  89.0k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  89.0k|        return reader_impl_for_voidptr<CharT>{};
 5835|  89.0k|    }
 5836|  89.0k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  89.0k|        return reader_impl_for_float<CharT>{};
 5838|  89.0k|    }
 5839|  89.0k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  89.0k|                       !std::is_same_v<T, wchar_t> &&
 5841|  89.0k|                       !std::is_same_v<T, char32_t> &&
 5842|  89.0k|                       !std::is_same_v<T, bool>) {
 5843|  89.0k|        return reader_impl_for_int<CharT>{};
 5844|  89.0k|    }
 5845|  89.0k|    else {
 5846|  89.0k|        return reader_impl_for_monostate<CharT>{};
 5847|  89.0k|    }
 5848|  89.0k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  35.6k|    {
 5277|  35.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  35.6k|        return read_impl(range, specs, value);
 5279|  35.6k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  35.6k|    {
 5295|  35.6k|        SCN_CLANG_PUSH
 5296|  35.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  35.6k|        switch (m_type) {
 5299|  33.4k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 33.4k, False: 2.16k]
  ------------------
 5300|  33.4k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 35.6k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 35.6k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.16k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.16k, False: 33.4k]
  ------------------
 5310|  2.16k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.16k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 35.6k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 35.6k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 35.6k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  35.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  35.6k|        }
 5331|       |
 5332|  35.6k|        SCN_CLANG_POP
 5333|  35.6k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  83.6k|    {
 4827|  83.6k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  83.6k|                                     value);
 4829|  83.6k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  83.6k|{
 4773|  83.6k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  83.6k|    auto src = [&]() {
 4776|  83.6k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  83.6k|            return make_contiguous_buffer(
 4778|  83.6k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  83.6k|        }
 4780|  83.6k|        else {
 4781|  83.6k|            return make_contiguous_buffer(
 4782|  83.6k|                ranges::subrange{range.begin(), result});
 4783|  83.6k|        }
 4784|  83.6k|    }();
 4785|  83.6k|    using src_type = decltype(src);
 4786|       |
 4787|  83.6k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  83.6k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  83.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  83.6k|                                     "Cannot read a string_view from "
 4796|  83.6k|                                     "this source range (would require "
 4797|  83.6k|                                     "transcoding)");
 4798|  83.6k|    }
 4799|  83.6k|    else {
 4800|  83.6k|        const auto view = src.view();
 4801|  83.6k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  83.6k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 2.12k, False: 81.5k]
  ------------------
 4804|  2.12k|            return unexpected_scan_error(
 4805|  2.12k|                scan_error::invalid_scanned_value,
 4806|  2.12k|                "Invalid encoding in scanned string_view");
 4807|  2.12k|        }
 4808|       |
 4809|  81.5k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  81.5k|    static_cast<    \
  |  |  929|  81.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  83.6k|    }
 4811|  83.6k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  83.6k|    auto src = [&]() {
 4776|  83.6k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  83.6k|            return make_contiguous_buffer(
 4778|  83.6k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  83.6k|        }
 4780|  83.6k|        else {
 4781|  83.6k|            return make_contiguous_buffer(
 4782|  83.6k|                ranges::subrange{range.begin(), result});
 4783|  83.6k|        }
 4784|  83.6k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.16k|    {
 5062|  2.16k|        auto it = read_source_impl(range, {specs});
 5063|  2.16k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 650]
  |  |  ------------------
  ------------------
 5064|  1.51k|            return unexpected(it.error());
 5065|  1.51k|        }
 5066|       |
 5067|    650|        return read_string_view_impl(range, *it, value);
 5068|  2.16k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    650|{
 4773|    650|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    650|    auto src = [&]() {
 4776|    650|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    650|            return make_contiguous_buffer(
 4778|    650|                ranges::subrange{range.begin().base(), result.base()});
 4779|    650|        }
 4780|    650|        else {
 4781|    650|            return make_contiguous_buffer(
 4782|    650|                ranges::subrange{range.begin(), result});
 4783|    650|        }
 4784|    650|    }();
 4785|    650|    using src_type = decltype(src);
 4786|       |
 4787|    650|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    650|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    650|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    650|                                     "Cannot read a string_view from "
 4796|    650|                                     "this source range (would require "
 4797|    650|                                     "transcoding)");
 4798|    650|    }
 4799|    650|    else {
 4800|    650|        const auto view = src.view();
 4801|    650|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    650|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 650]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    650|        return SCN_MOVE(result);
  ------------------
  |  |  928|    650|    static_cast<    \
  |  |  929|    650|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    650|    }
 4811|    650|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    650|    auto src = [&]() {
 4776|    650|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    650|            return make_contiguous_buffer(
 4778|    650|                ranges::subrange{range.begin().base(), result.base()});
 4779|    650|        }
 4780|    650|        else {
 4781|    650|            return make_contiguous_buffer(
 4782|    650|                ranges::subrange{range.begin(), result});
 4783|    650|        }
 4784|    650|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  87.2k|{
 2951|  87.2k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 87.2k, False: 0]
  ------------------
 2952|  87.2k|        auto it = read_while_classic_space(range);
 2953|  87.2k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  87.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  87.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.27k, False: 85.9k]
  |  |  ------------------
  ------------------
 2955|  1.27k|            return unexpected(e);
 2956|  1.27k|        }
 2957|       |
 2958|  85.9k|        return it;
 2959|  87.2k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  87.2k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  87.2k|{
 2117|  87.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  87.2k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  87.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  87.2k|        auto buf = make_contiguous_buffer(range);
 2121|  87.2k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  87.2k|        return ranges::next(range.begin(),
 2123|  87.2k|                            ranges::distance(buf.view().begin(), it));
 2124|  87.2k|    }
 2125|  87.2k|    else {
 2126|  87.2k|        auto it = range.begin();
 2127|       |
 2128|  87.2k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  87.2k|            auto seg = get_contiguous_beginning(range);
 2130|  87.2k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  87.2k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 3.63k, False: 83.5k]
  ------------------
 2132|  3.63k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.63k|            }
 2134|  83.5k|            ranges::advance(it, seg.size());
 2135|  83.5k|        }
 2136|       |
 2137|  83.5k|        return read_while_code_point(
 2138|  83.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  87.2k|    }
 2140|  87.2k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  83.5k|    {
  754|  83.5k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   323k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   323k|              cvref<T> obj = *get<T>(fn);
  745|   323k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   323k|                  obj(static_cast<decltype(args)>(args)...);
  747|   323k|              }
  748|   323k|              else {
  749|   323k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   323k|              }
  751|   323k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   323k|    {
  684|   323k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   323k|            return static_cast<T*>(s.m_cp);
  686|   323k|        }
  687|   323k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   323k|            return static_cast<T*>(s.m_p);
  689|   323k|        }
  690|   323k|        else {
  691|   323k|            return reinterpret_cast<T*>(s.m_fp);
  692|   323k|        }
  693|   323k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   323k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  83.5k|        {
  662|  83.5k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  9.29M|{
  981|  9.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  9.29M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  9.29M|        return true;
  984|  9.29M|    }
  985|  9.29M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  9.29M|                           ranges::const_iterator_t<Range>,
  987|  9.29M|                           typename detail::basic_scan_buffer<
  988|  9.29M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  9.29M|        auto beg = r.begin();
  990|  9.29M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 9.29M, False: 0]
  ------------------
  991|  9.29M|            return false;
  992|  9.29M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  9.29M|    else {
 1006|  9.29M|        return false;
 1007|  9.29M|    }
 1008|  9.29M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  18.5k|    {
  763|  18.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  18.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  9.21k|    {
  754|  9.21k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  9.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.25k|              cvref<T> obj = *get<T>(fn);
  745|  9.25k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.25k|              }
  748|  9.25k|              else {
  749|  9.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.25k|              }
  751|  9.25k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  9.25k|    {
  684|  9.25k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.25k|            return static_cast<T*>(s.m_cp);
  686|  9.25k|        }
  687|  9.25k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.25k|            return static_cast<T*>(s.m_p);
  689|  9.25k|        }
  690|  9.25k|        else {
  691|  9.25k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.25k|        }
  693|  9.25k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  9.21k|        {
  662|  9.21k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  3.71M|    {
 6037|  3.71M|        const bool need_skipped_width =
 6038|  3.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 3.71M]
  |  Branch (6038:33): [True: 0, False: 3.71M]
  ------------------
 6039|  3.71M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  3.71M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 3.71M]
  ------------------
 6043|  3.71M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 3.71M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  3.71M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 3.71M, False: 0]
  |  Branch (6047:56): [True: 3.71M, False: 3.07k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.71M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 3.71M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  7.42M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  7.42M|                            make_eof_scan_error));
 6058|       |
 6059|  7.42M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 3.71M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  3.71M|            return result_type{it, 0};
 6067|  7.42M|        }
 6068|       |
 6069|  3.07k|        return result_type{rng.begin(), 0};
 6070|  3.71M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.07k|{
 1976|  3.07k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.07k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.07k|{
 1957|  3.07k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  3.07k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  3.07k|    }
 1960|  3.07k|    else {
 1961|  3.07k|        auto first = range.begin();
 1962|  3.11k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 3.08k, False: 28]
  ------------------
 1963|  3.08k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 3.04k, False: 42]
  ------------------
 1964|  3.04k|                return first;
 1965|  3.04k|            }
 1966|  3.08k|        }
 1967|     28|        return first;
 1968|  3.07k|    }
 1969|  3.07k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.71M|    {
  108|  3.71M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.71M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.71M|    {
   94|  3.71M|        iter_difference_t<I> counter{0};
   95|  41.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 37.8M, False: 3.71M]
  ------------------
   96|  37.8M|            ++i;
   97|  37.8M|            ++counter;
   98|  37.8M|        }
   99|  3.71M|        return counter;
  100|  3.71M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  14.8M|{
  950|  14.8M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  14.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.32k, False: 14.8M]
  |  |  ------------------
  ------------------
  951|  4.32k|        return eof_error::eof;
  952|  4.32k|    }
  953|  14.8M|    return eof_error::good;
  954|  14.8M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   128M|{
  944|   128M|    return is_range_eof(r.begin(), r.end());
  945|   128M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   128M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   128M|    {
  937|   128M|        return begin == end;
  938|   128M|    }
  939|   128M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  9.28M|{
 1683|  9.28M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  9.28M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  9.28M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  9.28M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  9.28M|    }
 1688|  9.28M|    else {
 1689|  9.28M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  9.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  9.28M|    }
 1691|  9.28M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  9.28M|    {
 1537|  9.28M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  9.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  9.28M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  9.28M|    {
 1621|  9.28M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  9.28M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  9.28M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  9.28M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  9.28M|            m_storage.reset();
 1627|  9.28M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  9.28M|        }
 1629|  9.28M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  9.28M|                                          std::basic_string<CharT>>) {
 1631|  9.28M|            m_storage.emplace(SCN_FWD(range));
 1632|  9.28M|            m_view = string_view_type{*m_storage};
 1633|  9.28M|        }
 1634|  9.28M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  9.28M|                                          typename detail::basic_scan_buffer<
 1636|  9.28M|                                              value_t>::forward_iterator> &&
 1637|  9.28M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  9.28M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  9.28M|            auto end_seg = range.end().contiguous_segment();
 1640|  9.28M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  9.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.77k, False: 9.27M]
  |  |  ------------------
  ------------------
 1641|  9.28M|                             detail::to_address(end_seg.end()))) {
 1642|  5.77k|                auto& str = m_storage.emplace();
 1643|  5.77k|                str.reserve(range.end().position() - range.begin().position());
 1644|  5.77k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  5.77k|                m_view = string_view_type{str};
 1646|  5.77k|                return;
 1647|  5.77k|            }
 1648|       |
 1649|  9.27M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  9.27M|                                                            end_seg.data());
 1651|  9.27M|            m_storage.reset();
 1652|  9.27M|        }
 1653|  9.28M|        else {
 1654|  9.28M|            auto& str = m_storage.emplace();
 1655|  9.28M|            if constexpr (ranges::sized_range<Range>) {
 1656|  9.28M|                str.reserve(range.size());
 1657|  9.28M|            }
 1658|  9.28M|            if constexpr (ranges::common_range<Range>) {
 1659|  9.28M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  9.28M|                          std::back_inserter(str));
 1661|  9.28M|            }
 1662|  9.28M|            else {
 1663|  9.28M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  9.28M|                     ++it) {
 1665|  9.28M|                    str.push_back(*it);
 1666|  9.28M|                }
 1667|  9.28M|            }
 1668|  9.28M|            m_view = string_view_type{str};
 1669|  9.28M|        }
 1670|  9.28M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  18.5M|    {
 1582|  18.5M|        return m_view;
 1583|  18.5M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  9.28M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  3.71M|    {
 6079|  3.71M|        const bool need_skipped_width =
 6080|  3.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 3.71M]
  |  Branch (6080:33): [True: 0, False: 3.71M]
  ------------------
 6081|  3.71M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  3.71M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 3.71M]
  ------------------
 6084|  3.71M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 3.71M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  3.71M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.71M, False: 0]
  ------------------
 6093|  3.71M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 28, False: 3.71M]
  ------------------
 6094|  3.71M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 28]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     28|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 28]
  ------------------
 6096|     28|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  3.71M|        return result_type{rng.begin(), 0};
 6118|  3.71M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   226M|{
 1899|   226M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   226M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   226M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   226M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   226M|    auto it = range.begin();
 1903|   226M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   226M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   226M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   226M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 226M, False: 0]
  ------------------
 1912|   226M|        ++it;
 1913|   226M|        return {it, string_type(1, *range.begin())};
 1914|   226M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   226M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   256M|{
  944|   256M|    return is_range_eof(r.begin(), r.end());
  945|   256M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   256M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   256M|    {
  937|   256M|        return begin == end;
  938|   256M|    }
  939|   256M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   226M|    {
 1890|   226M|        return !codepoint.empty();
 1891|   226M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  29.7M|{
  950|  29.7M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  29.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.65k, False: 29.7M]
  |  |  ------------------
  ------------------
  951|  8.65k|        return eof_error::eof;
  952|  8.65k|    }
  953|  29.7M|    return eof_error::good;
  954|  29.7M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  18.5M|{
 1683|  18.5M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  18.5M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  18.5M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  18.5M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  18.5M|    }
 1688|  18.5M|    else {
 1689|  18.5M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  18.5M|    }
 1691|  18.5M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  18.5M|    {
 1490|  18.5M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  27.8M|    {
 1503|  27.8M|        return sv;
 1504|  27.8M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  6.14k|{
 1976|  6.14k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.14k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  6.14k|{
 1957|  6.14k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.14k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.14k|    }
 1960|  6.14k|    else {
 1961|  6.14k|        auto first = range.begin();
 1962|  6.14k|        for (; first != range.end(); ++first) {
 1963|  6.14k|            if (pred(*first)) {
 1964|  6.14k|                return first;
 1965|  6.14k|            }
 1966|  6.14k|        }
 1967|  6.14k|        return first;
 1968|  6.14k|    }
 1969|  6.14k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  18.5M|{
 2951|  18.5M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 18.5M, False: 0]
  ------------------
 2952|  18.5M|        auto it = read_while_classic_space(range);
 2953|  18.5M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  18.5M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.29k, False: 18.5M]
  |  |  ------------------
  ------------------
 2955|  5.29k|            return unexpected(e);
 2956|  5.29k|        }
 2957|       |
 2958|  18.5M|        return it;
 2959|  18.5M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  18.5M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  18.5M|{
 2117|  18.5M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  18.5M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  18.5M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  18.5M|        auto buf = make_contiguous_buffer(range);
 2121|  18.5M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  18.5M|        return ranges::next(range.begin(),
 2123|  18.5M|                            ranges::distance(buf.view().begin(), it));
 2124|  18.5M|    }
 2125|  18.5M|    else {
 2126|  18.5M|        auto it = range.begin();
 2127|       |
 2128|  18.5M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  18.5M|            auto seg = get_contiguous_beginning(range);
 2130|  18.5M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  18.5M|                seg_it != seg.end()) {
 2132|  18.5M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  18.5M|            }
 2134|  18.5M|            ranges::advance(it, seg.size());
 2135|  18.5M|        }
 2136|       |
 2137|  18.5M|        return read_while_code_point(
 2138|  18.5M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  18.5M|    }
 2140|  18.5M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  18.5M|{
 2082|  18.5M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  18.5M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  37.1M|{
 2061|  37.1M|    auto it = range.begin();
 2062|   226M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 226M, False: 16.5k]
  ------------------
 2063|   226M|        const auto val =
 2064|   226M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   226M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   226M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 226M, False: 0]
  |  |  ------------------
  ------------------
 2066|   226M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   226M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   226M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 37.1M, False: 189M]
  ------------------
 2069|  37.1M|                return it;
 2070|  37.1M|            }
 2071|   226M|        }
 2072|   189M|        it = val.iterator;
 2073|   189M|    }
 2074|       |
 2075|  16.5k|    return it;
 2076|  37.1M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  18.5M|    {
  754|  18.5M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  50.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.0M|              cvref<T> obj = *get<T>(fn);
  745|  50.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  50.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.0M|              }
  748|  50.0M|              else {
  749|  50.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.0M|              }
  751|  50.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  50.0M|    {
  684|  50.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  50.0M|            return static_cast<T*>(s.m_cp);
  686|  50.0M|        }
  687|  50.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  50.0M|            return static_cast<T*>(s.m_p);
  689|  50.0M|        }
  690|  50.0M|        else {
  691|  50.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  50.0M|        }
  693|  50.0M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  50.0M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  18.5M|        {
  662|  18.5M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  9.28M|    {
 1587|  9.28M|        return m_storage.has_value();
 1588|  9.28M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  3.36k|    {
 1592|  3.36k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.36k|        return *m_storage;
 1594|  3.36k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  27.8M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  11.1M|    {
 3040|  11.1M|        reader_error_handler eh{};
 3041|  11.1M|        get_derived().check_specs_impl(specs, eh);
 3042|  11.1M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  11.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 11.1M]
  |  |  ------------------
  ------------------
 3043|  9.08k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.08k|        }
 3045|  11.1M|        return {};
 3046|  11.1M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  11.1M|    {
 3051|  11.1M|        return static_cast<Derived&>(*this);
 3052|  11.1M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  11.1M|    {
 5210|  11.1M|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  11.1M|        SCN_GCC_PUSH
 5213|  11.1M|        SCN_GCC_IGNORE("-Wswitch")
 5214|  11.1M|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  11.1M|        SCN_CLANG_PUSH
 5217|  11.1M|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  11.1M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  11.1M|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 11.1M]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 11.1M]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|  11.1M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 11.1M, False: 18.2k]
  ------------------
 5226|  11.1M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 11.1M]
  ------------------
 5227|  11.1M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 11.1M]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|  11.1M|                else {
 5231|  11.1M|                    m_type = reader_type::word;
 5232|  11.1M|                }
 5233|  11.1M|                break;
 5234|      0|            }
 5235|       |
 5236|  9.08k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 9.08k, False: 11.1M]
  ------------------
 5237|  9.08k|                m_type = reader_type::character;
 5238|  9.08k|                break;
 5239|       |
 5240|  9.21k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 9.21k, False: 11.1M]
  ------------------
 5241|  9.21k|                m_type = reader_type::character_set;
 5242|  9.21k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 11.1M]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 11.1M]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  11.1M|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  11.1M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  39.0M|    {
 5259|  39.0M|        return m_type == reader_type::word;
 5260|  39.0M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  27.8M|{
 1132|  27.8M|    auto it = src.begin();
 1133|   264M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 236M, False: 27.8M]
  ------------------
 1134|   236M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   236M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 236M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   236M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 236M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   236M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   236M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   236M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 9.73k, False: 236M]
  ------------------
 1144|  9.73k|            return false;
 1145|  9.73k|        }
 1146|   236M|        it += len;
 1147|   236M|    }
 1148|  27.8M|    return true;
 1149|  27.8M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  9.21k|        {
 5103|  9.21k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 9.21k, False: 0]
  ------------------
 5104|  9.21k|                return {};
 5105|  9.21k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  5.11k|        {
 5076|  5.11k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  5.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  5.11k|            const auto val =
 5078|  5.11k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  5.11k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  5.11k|                    (val % 8)) &
 5081|  5.11k|                   1u;
 5082|  5.11k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  9.25k|        {
 5129|  9.25k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.14k, False: 5.11k]
  ------------------
 5130|  4.14k|                return false;
 5131|  4.14k|            }
 5132|       |
 5133|  5.11k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  9.25k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  9.21k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  9.28M|{
 2088|  9.28M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  9.28M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  9.28M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  9.28M|        auto buf = make_contiguous_buffer(range);
 2092|  9.28M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  9.28M|        return ranges::next(range.begin(),
 2094|  9.28M|                            ranges::distance(buf.view().begin(), it));
 2095|  9.28M|    }
 2096|  9.28M|    else {
 2097|  9.28M|        auto it = range.begin();
 2098|       |
 2099|  9.28M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  9.28M|            auto seg = get_contiguous_beginning(range);
 2101|  9.28M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  9.28M|                seg_it != seg.end()) {
 2103|  9.28M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  9.28M|            }
 2105|  9.28M|            ranges::advance(it, seg.size());
 2106|  9.28M|        }
 2107|       |
 2108|  9.28M|        return read_until_code_point(
 2109|  9.28M|            ranges::subrange{it, range.end()},
 2110|  9.28M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  9.28M|    }
 2112|  9.28M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  18.5M|{
 2061|  18.5M|    auto it = range.begin();
 2062|   113M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 113M, False: 8.28k]
  ------------------
 2063|   113M|        const auto val =
 2064|   113M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   113M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   113M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 113M, False: 0]
  |  |  ------------------
  ------------------
 2066|   113M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   113M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   113M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 18.5M, False: 94.9M]
  ------------------
 2069|  18.5M|                return it;
 2070|  18.5M|            }
 2071|   113M|        }
 2072|  94.9M|        it = val.iterator;
 2073|  94.9M|    }
 2074|       |
 2075|  8.28k|    return it;
 2076|  18.5M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   113M|{
 1899|   113M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   113M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   113M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   113M|    auto it = range.begin();
 1903|   113M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   113M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   113M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 113M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   113M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 113M, False: 0]
  ------------------
 1912|   113M|        ++it;
 1913|   113M|        return {it, string_type(1, *range.begin())};
 1914|   113M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   113M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   113M|    {
 1890|   113M|        return !codepoint.empty();
 1891|   113M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  9.28M|    {
  754|  9.28M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  88.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.4M|              cvref<T> obj = *get<T>(fn);
  745|  88.4M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  88.4M|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.4M|              }
  748|  88.4M|              else {
  749|  88.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.4M|              }
  751|  88.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  88.4M|    {
  684|  88.4M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  88.4M|            return static_cast<T*>(s.m_cp);
  686|  88.4M|        }
  687|  88.4M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  88.4M|            return static_cast<T*>(s.m_p);
  689|  88.4M|        }
  690|  88.4M|        else {
  691|  88.4M|            return reinterpret_cast<T*>(s.m_fp);
  692|  88.4M|        }
  693|  88.4M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  88.4M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  9.28M|        {
  662|  9.28M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  3.07k|    {
 5153|  3.07k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.07k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.07k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.07k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.07k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 3.07k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  3.07k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.07k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.07k|        };
 5178|       |
 5179|  3.07k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 3.07k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  3.07k|        auto it = read_while_code_unit(range, cb);
 5184|  3.07k|        return check_nonempty(it, range);
 5185|  3.07k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  3.07k|    {
 5191|  3.07k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 3.02k, False: 42]
  ------------------
 5192|  3.02k|            return unexpected_scan_error(
 5193|  3.02k|                scan_error::invalid_scanned_value,
 5194|  3.02k|                "No characters matched in [character set]");
 5195|  3.02k|        }
 5196|       |
 5197|     42|        return it;
 5198|  3.07k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  9.28M|{
 2082|  9.28M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  9.28M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  3.07k|    {
  754|  3.07k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  3.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.08k|              cvref<T> obj = *get<T>(fn);
  745|  3.08k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.08k|              }
  748|  3.08k|              else {
  749|  3.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.08k|              }
  751|  3.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.08k|    {
  684|  3.08k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.08k|            return static_cast<T*>(s.m_cp);
  686|  3.08k|        }
  687|  3.08k|        else if constexpr (std::is_object_v<T>) {
  688|  3.08k|            return static_cast<T*>(s.m_p);
  689|  3.08k|        }
  690|  3.08k|        else {
  691|  3.08k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.08k|        }
  693|  3.08k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  3.08k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.08k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.08k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  3.07k|        {
  667|  3.07k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  18.5M|{
 2088|  18.5M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  18.5M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  18.5M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  18.5M|        auto buf = make_contiguous_buffer(range);
 2092|  18.5M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  18.5M|        return ranges::next(range.begin(),
 2094|  18.5M|                            ranges::distance(buf.view().begin(), it));
 2095|  18.5M|    }
 2096|  18.5M|    else {
 2097|  18.5M|        auto it = range.begin();
 2098|       |
 2099|  18.5M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  18.5M|            auto seg = get_contiguous_beginning(range);
 2101|  18.5M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  18.5M|                seg_it != seg.end()) {
 2103|  18.5M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  18.5M|            }
 2105|  18.5M|            ranges::advance(it, seg.size());
 2106|  18.5M|        }
 2107|       |
 2108|  18.5M|        return read_until_code_point(
 2109|  18.5M|            ranges::subrange{it, range.end()},
 2110|  18.5M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  18.5M|    }
 2112|  18.5M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  18.5M|    {
  754|  18.5M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   176M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176M|              cvref<T> obj = *get<T>(fn);
  745|   176M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   176M|                  obj(static_cast<decltype(args)>(args)...);
  747|   176M|              }
  748|   176M|              else {
  749|   176M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176M|              }
  751|   176M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   176M|    {
  684|   176M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   176M|            return static_cast<T*>(s.m_cp);
  686|   176M|        }
  687|   176M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   176M|            return static_cast<T*>(s.m_p);
  689|   176M|        }
  690|   176M|        else {
  691|   176M|            return reinterpret_cast<T*>(s.m_fp);
  692|   176M|        }
  693|   176M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   176M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  18.5M|        {
  662|  18.5M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  6.14k|    {
 5153|  6.14k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  6.14k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  6.14k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  6.14k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  6.14k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 6.14k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  6.14k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.14k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.14k|        };
 5178|       |
 5179|  6.14k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 6.14k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  6.14k|        auto it = read_while_code_unit(range, cb);
 5184|  6.14k|        return check_nonempty(it, range);
 5185|  6.14k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  6.14k|    {
 5191|  6.14k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 6.05k, False: 84]
  ------------------
 5192|  6.05k|            return unexpected_scan_error(
 5193|  6.05k|                scan_error::invalid_scanned_value,
 5194|  6.05k|                "No characters matched in [character set]");
 5195|  6.05k|        }
 5196|       |
 5197|     84|        return it;
 5198|  6.14k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  6.14k|    {
  754|  6.14k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  6.16k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.16k|              cvref<T> obj = *get<T>(fn);
  745|  6.16k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.16k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.16k|              }
  748|  6.16k|              else {
  749|  6.16k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.16k|              }
  751|  6.16k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  6.16k|    {
  684|  6.16k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.16k|            return static_cast<T*>(s.m_cp);
  686|  6.16k|        }
  687|  6.16k|        else if constexpr (std::is_object_v<T>) {
  688|  6.16k|            return static_cast<T*>(s.m_p);
  689|  6.16k|        }
  690|  6.16k|        else {
  691|  6.16k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.16k|        }
  693|  6.16k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  6.16k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.16k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.16k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  6.14k|        {
  667|  6.14k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  3.72M|    {
 6193|  3.72M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.72M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.72M|            auto rd = make_reader<T, char_type>();
 6198|  3.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  3.72M|                return unexpected(e);
 6200|  3.72M|            }
 6201|       |
 6202|  3.72M|            return impl(rd, range, value);
 6203|  3.72M|        }
 6204|  3.72M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  3.72M|            auto rd = make_reader<T, char_type>();
 6206|  3.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 3.71M]
  |  |  ------------------
  ------------------
 6207|  3.02k|                return unexpected(e);
 6208|  3.02k|            }
 6209|       |
 6210|  3.71M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 3.71M, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  3.71M|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  3.71M|                return impl(rd, range, value);
 6213|  3.71M|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  3.72M|        else {
 6221|  3.72M|            SCN_EXPECT(false);
 6222|  3.72M|            SCN_UNREACHABLE;
 6223|  3.72M|        }
 6224|  3.72M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  18.5M|{
 5809|  18.5M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  18.5M|        return reader_impl_for_bool<CharT>{};
 5811|  18.5M|    }
 5812|  18.5M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  18.5M|        return reader_impl_for_char<CharT>{};
 5814|  18.5M|    }
 5815|  18.5M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  18.5M|        return reader_impl_for_wchar<CharT>{};
 5817|  18.5M|    }
 5818|  18.5M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  18.5M|        return reader_impl_for_code_point<CharT>{};
 5820|  18.5M|    }
 5821|  18.5M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  18.5M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  18.5M|        return reader_impl_for_string<CharT>{};
 5824|  18.5M|    }
 5825|  18.5M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  18.5M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  18.5M|        return reader_impl_for_string<CharT>{};
 5828|  18.5M|    }
 5829|  18.5M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  18.5M|                       std::is_same_v<T, wregex_matches>) {
 5831|  18.5M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  18.5M|    }
 5833|  18.5M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  18.5M|        return reader_impl_for_voidptr<CharT>{};
 5835|  18.5M|    }
 5836|  18.5M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  18.5M|        return reader_impl_for_float<CharT>{};
 5838|  18.5M|    }
 5839|  18.5M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  18.5M|                       !std::is_same_v<T, wchar_t> &&
 5841|  18.5M|                       !std::is_same_v<T, char32_t> &&
 5842|  18.5M|                       !std::is_same_v<T, bool>) {
 5843|  18.5M|        return reader_impl_for_int<CharT>{};
 5844|  18.5M|    }
 5845|  18.5M|    else {
 5846|  18.5M|        return reader_impl_for_monostate<CharT>{};
 5847|  18.5M|    }
 5848|  18.5M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  3.71M|    {
 6124|  3.71M|        const bool need_skipped_width =
 6125|  3.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 3.71M]
  |  Branch (6125:33): [True: 0, False: 3.71M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.71M|        auto it = rng.begin();
 6129|  3.71M|        std::ptrdiff_t prefix_width = 0;
 6130|  3.71M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 3.71M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  3.71M|        else {
 6138|  3.71M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.71M|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.71M|        }
 6141|  3.71M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.71M|        std::ptrdiff_t value_width = 0;
 6145|  3.71M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 3.71M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  3.71M|        else {
 6161|  3.71M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.32k, False: 3.71M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.32k|    }                                                  \
  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  3.71M|                                             specs, value, loc));
 6163|       |
 6164|  3.71M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 3.71M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  3.71M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.71M|        std::ptrdiff_t postfix_width = 0;
 6173|  3.71M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 3.71M, False: 1.13k]
  ------------------
 6174|  3.71M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  3.71M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  3.71M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  3.71M|                                 value_width));
 6178|  3.71M|            std::tie(it, postfix_width) = postfix_result;
 6179|  3.71M|        }
 6180|       |
 6181|  3.71M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.71M|                                                 value_width, postfix_width);
 6183|  3.71M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 3.71M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  3.71M|        return it;
 6188|  3.71M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  9.27M|{
 2993|  9.27M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  9.27M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.36k, False: 9.27M]
  ------------------
 2995|  3.36k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.36k|    static_cast<    \
  |  |  929|  3.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.36k|        }
 2997|  9.27M|        else {
 2998|  9.27M|            dest.assign(source.view());
 2999|  9.27M|        }
 3000|  9.27M|    }
 3001|  9.27M|    else {
 3002|  9.27M|        return transcode_impl(source.view(), dest);
 3003|  9.27M|    }
 3004|       |
 3005|  9.27M|    return {};
 3006|  9.27M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  3.71M|    {
 5277|  3.71M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.71M|        return read_impl(range, specs, value);
 5279|  3.71M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  3.71M|    {
 5295|  3.71M|        SCN_CLANG_PUSH
 5296|  3.71M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.71M|        switch (m_type) {
 5299|  3.71M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 3.71M, False: 3.07k]
  ------------------
 5300|  3.71M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 3.71M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.71M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.07k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.07k, False: 3.71M]
  ------------------
 5310|  3.07k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.07k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 3.71M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 3.71M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.71M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.71M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.71M|        }
 5331|       |
 5332|  3.71M|        SCN_CLANG_POP
 5333|  3.71M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  9.28M|    {
 4820|  9.28M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  9.28M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  9.28M|{
 4752|  9.28M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  9.28M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  9.28M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.24k, False: 9.27M]
  ------------------
 4756|  3.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.24k|                                     "Invalid encoding in scanned string");
 4758|  3.24k|    }
 4759|  9.27M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  9.27M|    static_cast<    \
  |  |  929|  9.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  9.27M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.27M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  9.27M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  9.27M|    static_cast<    \
  |  |  929|  9.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  9.27M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  3.07k|    {
 5048|  3.07k|        auto it = read_source_impl(range, {specs});
 5049|  3.07k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 42]
  |  |  ------------------
  ------------------
 5050|  3.02k|            return unexpected(it.error());
 5051|  3.02k|        }
 5052|       |
 5053|     42|        return read_string_impl(range, *it, value);
 5054|  3.07k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|     42|{
 4752|     42|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     42|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     42|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 42]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     42|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     42|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     42|    return SCN_MOVE(result);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     42|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  3.71M|    {
 5277|  3.71M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.71M|        return read_impl(range, specs, value);
 5279|  3.71M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  3.71M|    {
 5295|  3.71M|        SCN_CLANG_PUSH
 5296|  3.71M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.71M|        switch (m_type) {
 5299|  3.71M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 3.71M, False: 3.07k]
  ------------------
 5300|  3.71M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 3.71M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.71M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.07k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.07k, False: 3.71M]
  ------------------
 5310|  3.07k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.07k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 3.71M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 3.71M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.71M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.71M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.71M|        }
 5331|       |
 5332|  3.71M|        SCN_CLANG_POP
 5333|  3.71M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  9.28M|    {
 4820|  9.28M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  9.28M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  9.28M|{
 4752|  9.28M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  9.28M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  9.28M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.24k, False: 9.27M]
  ------------------
 4756|  3.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.24k|                                     "Invalid encoding in scanned string");
 4758|  3.24k|    }
 4759|  9.27M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  9.27M|    static_cast<    \
  |  |  929|  9.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  9.27M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.27M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  9.27M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  9.27M|    static_cast<    \
  |  |  929|  9.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  9.27M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  9.27M|{
 3012|  9.27M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  9.27M|        dest.assign(source.view());
 3014|  9.27M|    }
 3015|  9.27M|    else {
 3016|  9.27M|        return transcode_impl(source.view(), dest);
 3017|  9.27M|    }
 3018|       |
 3019|  9.27M|    return {};
 3020|  9.27M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  3.07k|    {
 5048|  3.07k|        auto it = read_source_impl(range, {specs});
 5049|  3.07k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 42]
  |  |  ------------------
  ------------------
 5050|  3.02k|            return unexpected(it.error());
 5051|  3.02k|        }
 5052|       |
 5053|     42|        return read_string_impl(range, *it, value);
 5054|  3.07k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|     42|{
 4752|     42|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     42|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     42|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 42]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     42|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     42|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     42|    return SCN_MOVE(result);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     42|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  9.29M|{
 5809|  9.29M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  9.29M|        return reader_impl_for_bool<CharT>{};
 5811|  9.29M|    }
 5812|  9.29M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  9.29M|        return reader_impl_for_char<CharT>{};
 5814|  9.29M|    }
 5815|  9.29M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  9.29M|        return reader_impl_for_wchar<CharT>{};
 5817|  9.29M|    }
 5818|  9.29M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  9.29M|        return reader_impl_for_code_point<CharT>{};
 5820|  9.29M|    }
 5821|  9.29M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  9.29M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  9.29M|        return reader_impl_for_string<CharT>{};
 5824|  9.29M|    }
 5825|  9.29M|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  9.29M|                       std::is_same_v<T, std::wstring>) {
 5827|  9.29M|        return reader_impl_for_string<CharT>{};
 5828|  9.29M|    }
 5829|  9.29M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  9.29M|                       std::is_same_v<T, wregex_matches>) {
 5831|  9.29M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  9.29M|    }
 5833|  9.29M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  9.29M|        return reader_impl_for_voidptr<CharT>{};
 5835|  9.29M|    }
 5836|  9.29M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  9.29M|        return reader_impl_for_float<CharT>{};
 5838|  9.29M|    }
 5839|  9.29M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  9.29M|                       !std::is_same_v<T, wchar_t> &&
 5841|  9.29M|                       !std::is_same_v<T, char32_t> &&
 5842|  9.29M|                       !std::is_same_v<T, bool>) {
 5843|  9.29M|        return reader_impl_for_int<CharT>{};
 5844|  9.29M|    }
 5845|  9.29M|    else {
 5846|  9.29M|        return reader_impl_for_monostate<CharT>{};
 5847|  9.29M|    }
 5848|  9.29M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  3.71M|    {
 5277|  3.71M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  3.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  3.71M|        return read_impl(range, specs, value);
 5279|  3.71M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  3.71M|    {
 5295|  3.71M|        SCN_CLANG_PUSH
 5296|  3.71M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  3.71M|        switch (m_type) {
 5299|  3.71M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 3.71M, False: 3.07k]
  ------------------
 5300|  3.71M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 3.71M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 3.71M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.07k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.07k, False: 3.71M]
  ------------------
 5310|  3.07k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.07k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 3.71M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 3.71M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 3.71M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  3.71M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  3.71M|        }
 5331|       |
 5332|  3.71M|        SCN_CLANG_POP
 5333|  3.71M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  9.28M|    {
 4827|  9.28M|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  9.28M|                                     value);
 4829|  9.28M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  9.28M|{
 4773|  9.28M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  9.28M|    auto src = [&]() {
 4776|  9.28M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  9.28M|            return make_contiguous_buffer(
 4778|  9.28M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  9.28M|        }
 4780|  9.28M|        else {
 4781|  9.28M|            return make_contiguous_buffer(
 4782|  9.28M|                ranges::subrange{range.begin(), result});
 4783|  9.28M|        }
 4784|  9.28M|    }();
 4785|  9.28M|    using src_type = decltype(src);
 4786|       |
 4787|  9.28M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  9.28M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  9.28M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  9.28M|                                     "Cannot read a string_view from "
 4796|  9.28M|                                     "this source range (would require "
 4797|  9.28M|                                     "transcoding)");
 4798|  9.28M|    }
 4799|  9.28M|    else {
 4800|  9.28M|        const auto view = src.view();
 4801|  9.28M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  9.28M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 3.24k, False: 9.27M]
  ------------------
 4804|  3.24k|            return unexpected_scan_error(
 4805|  3.24k|                scan_error::invalid_scanned_value,
 4806|  3.24k|                "Invalid encoding in scanned string_view");
 4807|  3.24k|        }
 4808|       |
 4809|  9.27M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  9.27M|    static_cast<    \
  |  |  929|  9.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  9.28M|    }
 4811|  9.28M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  9.28M|    auto src = [&]() {
 4776|  9.28M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  9.28M|            return make_contiguous_buffer(
 4778|  9.28M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  9.28M|        }
 4780|  9.28M|        else {
 4781|  9.28M|            return make_contiguous_buffer(
 4782|  9.28M|                ranges::subrange{range.begin(), result});
 4783|  9.28M|        }
 4784|  9.28M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  3.07k|    {
 5062|  3.07k|        auto it = read_source_impl(range, {specs});
 5063|  3.07k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 42]
  |  |  ------------------
  ------------------
 5064|  3.02k|            return unexpected(it.error());
 5065|  3.02k|        }
 5066|       |
 5067|     42|        return read_string_view_impl(range, *it, value);
 5068|  3.07k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|     42|{
 4773|     42|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     42|    auto src = [&]() {
 4776|     42|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     42|            return make_contiguous_buffer(
 4778|     42|                ranges::subrange{range.begin().base(), result.base()});
 4779|     42|        }
 4780|     42|        else {
 4781|     42|            return make_contiguous_buffer(
 4782|     42|                ranges::subrange{range.begin(), result});
 4783|     42|        }
 4784|     42|    }();
 4785|     42|    using src_type = decltype(src);
 4786|       |
 4787|     42|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     42|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     42|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     42|                                     "Cannot read a string_view from "
 4796|     42|                                     "this source range (would require "
 4797|     42|                                     "transcoding)");
 4798|     42|    }
 4799|     42|    else {
 4800|     42|        const auto view = src.view();
 4801|     42|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     42|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 42]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     42|        return SCN_MOVE(result);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     42|    }
 4811|     42|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|     42|    auto src = [&]() {
 4776|     42|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     42|            return make_contiguous_buffer(
 4778|     42|                ranges::subrange{range.begin().base(), result.base()});
 4779|     42|        }
 4780|     42|        else {
 4781|     42|            return make_contiguous_buffer(
 4782|     42|                ranges::subrange{range.begin(), result});
 4783|     42|        }
 4784|     42|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  9.28M|{
 2951|  9.28M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 9.28M, False: 0]
  ------------------
 2952|  9.28M|        auto it = read_while_classic_space(range);
 2953|  9.28M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  9.28M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 9.28M]
  |  |  ------------------
  ------------------
 2955|  2.64k|            return unexpected(e);
 2956|  2.64k|        }
 2957|       |
 2958|  9.28M|        return it;
 2959|  9.28M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  9.28M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  9.28M|{
 2117|  9.28M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  9.28M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  9.28M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  9.28M|        auto buf = make_contiguous_buffer(range);
 2121|  9.28M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  9.28M|        return ranges::next(range.begin(),
 2123|  9.28M|                            ranges::distance(buf.view().begin(), it));
 2124|  9.28M|    }
 2125|  9.28M|    else {
 2126|  9.28M|        auto it = range.begin();
 2127|       |
 2128|  9.28M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  9.28M|            auto seg = get_contiguous_beginning(range);
 2130|  9.28M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  9.28M|                seg_it != seg.end()) {
 2132|  9.28M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.28M|            }
 2134|  9.28M|            ranges::advance(it, seg.size());
 2135|  9.28M|        }
 2136|       |
 2137|  9.28M|        return read_while_code_point(
 2138|  9.28M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  9.28M|    }
 2140|  9.28M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  9.28M|    {
  754|  9.28M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  25.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0M|              cvref<T> obj = *get<T>(fn);
  745|  25.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.0M|              }
  748|  25.0M|              else {
  749|  25.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0M|              }
  751|  25.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  25.0M|    {
  684|  25.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.0M|            return static_cast<T*>(s.m_cp);
  686|  25.0M|        }
  687|  25.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.0M|            return static_cast<T*>(s.m_p);
  689|  25.0M|        }
  690|  25.0M|        else {
  691|  25.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.0M|        }
  693|  25.0M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  25.0M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  9.28M|        {
  662|  9.28M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   102k|{
 5795|   102k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 954, False: 101k]
  |  |  ------------------
  ------------------
 5796|    954|        return unexpected(e);
 5797|    954|    }
 5798|       |
 5799|   101k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 101k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   101k|    return skip_classic_whitespace(range);
 5804|   101k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  51.2k|    {
 5871|  51.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  51.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  51.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  51.2k|            auto rd = make_reader<T, char_type>();
 5876|  51.2k|            return impl(rd, range, value);
 5877|  51.2k|        }
 5878|  51.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  51.2k|            auto rd = make_reader<T, char_type>();
 5880|  51.2k|            if (!is_segment_contiguous(range)) {
 5881|  51.2k|                return impl(rd, range, value);
 5882|  51.2k|            }
 5883|  51.2k|            auto crange = get_as_contiguous(range);
 5884|  51.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  51.2k|            return ranges::next(range.begin(),
 5886|  51.2k|                                ranges::distance(crange.begin(), it));
 5887|  51.2k|        }
 5888|  51.2k|        else {
 5889|  51.2k|            SCN_EXPECT(false);
 5890|  51.2k|            SCN_UNREACHABLE;
 5891|  51.2k|        }
 5892|  51.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  51.2k|    {
 5863|  51.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  51.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 996, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    996|    }                                                  \
  |  |  |  | 3671|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  50.2k|                        .transform_error(make_eof_scan_error));
 5865|  50.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  51.2k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  50.2k|    {
 5266|  50.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  50.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  50.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  50.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  51.2k|    {
 5871|  51.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  51.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  51.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  51.2k|            auto rd = make_reader<T, char_type>();
 5876|  51.2k|            return impl(rd, range, value);
 5877|  51.2k|        }
 5878|  51.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  51.2k|            auto rd = make_reader<T, char_type>();
 5880|  51.2k|            if (!is_segment_contiguous(range)) {
 5881|  51.2k|                return impl(rd, range, value);
 5882|  51.2k|            }
 5883|  51.2k|            auto crange = get_as_contiguous(range);
 5884|  51.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  51.2k|            return ranges::next(range.begin(),
 5886|  51.2k|                                ranges::distance(crange.begin(), it));
 5887|  51.2k|        }
 5888|  51.2k|        else {
 5889|  51.2k|            SCN_EXPECT(false);
 5890|  51.2k|            SCN_UNREACHABLE;
 5891|  51.2k|        }
 5892|  51.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  51.2k|    {
 5863|  51.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  51.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 996, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    996|    }                                                  \
  |  |  |  | 3671|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  50.2k|                        .transform_error(make_eof_scan_error));
 5865|  50.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  51.2k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  50.2k|    {
 5266|  50.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  50.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  50.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  50.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  52.6k|{
 5795|  52.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 519, False: 52.1k]
  |  |  ------------------
  ------------------
 5796|    519|        return unexpected(e);
 5797|    519|    }
 5798|       |
 5799|  52.1k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 52.1k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  52.1k|    return skip_classic_whitespace(range);
 5804|  52.1k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  52.6k|    {
 5871|  52.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  52.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  52.6k|            auto rd = make_reader<T, char_type>();
 5876|  52.6k|            return impl(rd, range, value);
 5877|  52.6k|        }
 5878|  52.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  52.6k|            auto rd = make_reader<T, char_type>();
 5880|  52.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 52.6k, False: 0]
  ------------------
 5881|  52.6k|                return impl(rd, range, value);
 5882|  52.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  52.6k|        else {
 5889|  52.6k|            SCN_EXPECT(false);
 5890|  52.6k|            SCN_UNREACHABLE;
 5891|  52.6k|        }
 5892|  52.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  52.6k|    {
 5863|  52.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.04k|    }                                                  \
  |  |  |  | 3671|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  51.5k|                        .transform_error(make_eof_scan_error));
 5865|  51.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  52.6k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  51.5k|    {
 5266|  51.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  51.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  51.5k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  81.6k|    {
 2879|  81.6k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   223k|    {
 2883|   223k|        return m_current;
 2884|   223k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   142k|    {
 2888|   142k|        return m_range.end();
 2889|   142k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  66.5k|    {
 2903|  66.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  66.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  66.5k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 66.5k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  66.5k|        }
 2909|  66.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  66.5k|    static_cast<    \
  |  |  929|  66.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  66.5k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  75.6k|    {
 2893|  75.6k|        return ranges::subrange{begin(), end()};
 2894|  75.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  72.6k|    {
 6037|  72.6k|        const bool need_skipped_width =
 6038|  72.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 72.6k]
  |  Branch (6038:33): [True: 0, False: 72.6k]
  ------------------
 6039|  72.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  72.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 72.6k]
  ------------------
 6043|  72.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 72.6k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  72.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 72.6k, False: 0]
  |  Branch (6047:56): [True: 68.2k, False: 4.32k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  68.2k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 68.2k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   135k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  68.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 66.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.32k|    }                                                  \
  |  |  |  | 3671|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   135k|                            make_eof_scan_error));
 6058|       |
 6059|   135k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 66.9k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  66.9k|            return result_type{it, 0};
 6067|   135k|        }
 6068|       |
 6069|  4.32k|        return result_type{rng.begin(), 0};
 6070|  72.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  65.8k|    {
 6079|  65.8k|        const bool need_skipped_width =
 6080|  65.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 65.8k]
  |  Branch (6080:33): [True: 0, False: 65.8k]
  ------------------
 6081|  65.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  65.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 65.8k]
  ------------------
 6084|  65.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 65.8k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  65.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 65.8k, False: 0]
  ------------------
 6093|  65.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.25k, False: 64.6k]
  ------------------
 6094|  65.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.25k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.25k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.25k]
  ------------------
 6096|  1.25k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  65.8k|        return result_type{rng.begin(), 0};
 6118|  65.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  37.8k|    {
 6193|  37.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  37.8k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  37.8k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  37.8k|            auto rd = make_reader<T, char_type>();
 6198|  37.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 36.3k]
  |  |  ------------------
  ------------------
 6199|  1.51k|                return unexpected(e);
 6200|  1.51k|            }
 6201|       |
 6202|  36.3k|            return impl(rd, range, value);
 6203|  37.8k|        }
 6204|  37.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  37.8k|            auto rd = make_reader<T, char_type>();
 6206|  37.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  37.8k|                return unexpected(e);
 6208|  37.8k|            }
 6209|       |
 6210|  37.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  37.8k|                specs.width != 0) {
 6212|  37.8k|                return impl(rd, range, value);
 6213|  37.8k|            }
 6214|       |
 6215|  37.8k|            auto crange = get_as_contiguous(range);
 6216|  37.8k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  37.8k|            return ranges::next(range.begin(),
 6218|  37.8k|                                ranges::distance(crange.begin(), it));
 6219|  37.8k|        }
 6220|  37.8k|        else {
 6221|  37.8k|            SCN_EXPECT(false);
 6222|  37.8k|            SCN_UNREACHABLE;
 6223|  37.8k|        }
 6224|  37.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  36.3k|    {
 6124|  36.3k|        const bool need_skipped_width =
 6125|  36.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 36.3k]
  |  Branch (6125:33): [True: 0, False: 36.3k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  36.3k|        auto it = rng.begin();
 6129|  36.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  36.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 36.3k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  36.3k|        else {
 6138|  36.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 664, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    664|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    664|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    664|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    664|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    664|    }                                                  \
  |  |  |  | 3671|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  35.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  35.6k|        }
 6141|  35.6k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  35.6k|        std::ptrdiff_t value_width = 0;
 6145|  35.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 35.6k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  35.6k|        else {
 6161|  35.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  35.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  35.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.36k, False: 33.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.36k|    }                                                  \
  |  | 3671|  35.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  33.2k|                                             specs, value, loc));
 6163|       |
 6164|  33.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 33.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  33.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  33.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  33.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 32.9k, False: 342]
  ------------------
 6174|  32.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  32.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  32.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  32.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  32.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  32.9k|                                 value_width));
 6178|  32.9k|            std::tie(it, postfix_width) = postfix_result;
 6179|  32.9k|        }
 6180|       |
 6181|  33.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  33.2k|                                                 value_width, postfix_width);
 6183|  33.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 33.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  33.2k|        return it;
 6188|  33.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  37.8k|    {
 6193|  37.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  37.8k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  37.8k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  37.8k|            auto rd = make_reader<T, char_type>();
 6198|  37.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.51k, False: 36.3k]
  |  |  ------------------
  ------------------
 6199|  1.51k|                return unexpected(e);
 6200|  1.51k|            }
 6201|       |
 6202|  36.3k|            return impl(rd, range, value);
 6203|  37.8k|        }
 6204|  37.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  37.8k|            auto rd = make_reader<T, char_type>();
 6206|  37.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  37.8k|                return unexpected(e);
 6208|  37.8k|            }
 6209|       |
 6210|  37.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  37.8k|                specs.width != 0) {
 6212|  37.8k|                return impl(rd, range, value);
 6213|  37.8k|            }
 6214|       |
 6215|  37.8k|            auto crange = get_as_contiguous(range);
 6216|  37.8k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  37.8k|            return ranges::next(range.begin(),
 6218|  37.8k|                                ranges::distance(crange.begin(), it));
 6219|  37.8k|        }
 6220|  37.8k|        else {
 6221|  37.8k|            SCN_EXPECT(false);
 6222|  37.8k|            SCN_UNREACHABLE;
 6223|  37.8k|        }
 6224|  37.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  36.3k|    {
 6124|  36.3k|        const bool need_skipped_width =
 6125|  36.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 36.3k]
  |  Branch (6125:33): [True: 0, False: 36.3k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  36.3k|        auto it = rng.begin();
 6129|  36.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  36.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 36.3k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  36.3k|        else {
 6138|  36.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 664, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    664|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    664|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    664|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    664|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    664|    }                                                  \
  |  |  |  | 3671|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  35.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  35.6k|        }
 6141|  35.6k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  35.6k|        std::ptrdiff_t value_width = 0;
 6145|  35.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 35.6k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  35.6k|        else {
 6161|  35.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  35.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  35.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.36k, False: 33.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.36k|    }                                                  \
  |  | 3671|  35.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  33.2k|                                             specs, value, loc));
 6163|       |
 6164|  33.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 33.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  33.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  33.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  33.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 32.9k, False: 342]
  ------------------
 6174|  32.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  32.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  32.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  32.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  32.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  32.9k|                                 value_width));
 6178|  32.9k|            std::tie(it, postfix_width) = postfix_result;
 6179|  32.9k|        }
 6180|       |
 6181|  33.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  33.2k|                                                 value_width, postfix_width);
 6183|  33.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 33.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  33.2k|        return it;
 6188|  33.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  11.1M|{
 5795|  11.1M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  11.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.35k, False: 11.1M]
  |  |  ------------------
  ------------------
 5796|  3.35k|        return unexpected(e);
 5797|  3.35k|    }
 5798|       |
 5799|  11.1M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 11.1M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  11.1M|    return skip_classic_whitespace(range);
 5804|  11.1M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  5.57M|    {
 5871|  5.57M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  5.57M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  5.57M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  5.57M|            auto rd = make_reader<T, char_type>();
 5876|  5.57M|            return impl(rd, range, value);
 5877|  5.57M|        }
 5878|  5.57M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  5.57M|            auto rd = make_reader<T, char_type>();
 5880|  5.57M|            if (!is_segment_contiguous(range)) {
 5881|  5.57M|                return impl(rd, range, value);
 5882|  5.57M|            }
 5883|  5.57M|            auto crange = get_as_contiguous(range);
 5884|  5.57M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  5.57M|            return ranges::next(range.begin(),
 5886|  5.57M|                                ranges::distance(crange.begin(), it));
 5887|  5.57M|        }
 5888|  5.57M|        else {
 5889|  5.57M|            SCN_EXPECT(false);
 5890|  5.57M|            SCN_UNREACHABLE;
 5891|  5.57M|        }
 5892|  5.57M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  5.57M|    {
 5863|  5.57M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  5.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.59k, False: 5.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.59k|    }                                                  \
  |  |  |  | 3671|  5.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  5.56M|                        .transform_error(make_eof_scan_error));
 5865|  5.56M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  5.57M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  5.56M|    {
 5266|  5.56M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.56M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  5.56M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  5.57M|    {
 5871|  5.57M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  5.57M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  5.57M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  5.57M|            auto rd = make_reader<T, char_type>();
 5876|  5.57M|            return impl(rd, range, value);
 5877|  5.57M|        }
 5878|  5.57M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  5.57M|            auto rd = make_reader<T, char_type>();
 5880|  5.57M|            if (!is_segment_contiguous(range)) {
 5881|  5.57M|                return impl(rd, range, value);
 5882|  5.57M|            }
 5883|  5.57M|            auto crange = get_as_contiguous(range);
 5884|  5.57M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  5.57M|            return ranges::next(range.begin(),
 5886|  5.57M|                                ranges::distance(crange.begin(), it));
 5887|  5.57M|        }
 5888|  5.57M|        else {
 5889|  5.57M|            SCN_EXPECT(false);
 5890|  5.57M|            SCN_UNREACHABLE;
 5891|  5.57M|        }
 5892|  5.57M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  5.57M|    {
 5863|  5.57M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  5.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.59k, False: 5.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.59k|    }                                                  \
  |  |  |  | 3671|  5.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  5.56M|                        .transform_error(make_eof_scan_error));
 5865|  5.56M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  5.57M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  5.56M|    {
 5266|  5.56M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.56M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  5.56M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  7.45M|    {
 2879|  7.45M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  22.3M|    {
 2883|  22.3M|        return m_current;
 2884|  22.3M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  14.8M|    {
 2888|  14.8M|        return m_range.end();
 2889|  14.8M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  7.42M|    {
 2903|  7.42M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  7.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  7.42M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  7.42M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 7.42M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  7.42M|        }
 2909|  7.42M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  7.42M|    static_cast<    \
  |  |  929|  7.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  7.42M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  7.44M|    {
 2893|  7.44M|        return ranges::subrange{begin(), end()};
 2894|  7.44M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  7.43M|    {
 6037|  7.43M|        const bool need_skipped_width =
 6038|  7.43M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 7.43M]
  |  Branch (6038:33): [True: 0, False: 7.43M]
  ------------------
 6039|  7.43M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  7.43M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 7.43M]
  ------------------
 6043|  7.43M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 7.43M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  7.43M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 7.43M, False: 0]
  |  Branch (6047:56): [True: 7.42M, False: 6.14k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  7.42M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 7.42M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  14.8M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  7.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.46k, False: 7.42M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.46k|    }                                                  \
  |  |  |  | 3671|  7.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  14.8M|                            make_eof_scan_error));
 6058|       |
 6059|  14.8M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 7.42M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  7.42M|            return result_type{it, 0};
 6067|  14.8M|        }
 6068|       |
 6069|  6.14k|        return result_type{rng.begin(), 0};
 6070|  7.43M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  7.42M|    {
 6079|  7.42M|        const bool need_skipped_width =
 6080|  7.42M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 7.42M]
  |  Branch (6080:33): [True: 0, False: 7.42M]
  ------------------
 6081|  7.42M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  7.42M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 7.42M]
  ------------------
 6084|  7.42M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 7.42M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  7.42M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 7.42M, False: 0]
  ------------------
 6093|  7.42M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 56, False: 7.42M]
  ------------------
 6094|  7.42M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 56]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     56|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 56]
  ------------------
 6096|     56|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  7.42M|        return result_type{rng.begin(), 0};
 6118|  7.42M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.72M|    {
 6193|  3.72M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.72M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.72M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.72M|            auto rd = make_reader<T, char_type>();
 6198|  3.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 3.71M]
  |  |  ------------------
  ------------------
 6199|  3.02k|                return unexpected(e);
 6200|  3.02k|            }
 6201|       |
 6202|  3.71M|            return impl(rd, range, value);
 6203|  3.72M|        }
 6204|  3.72M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.72M|            auto rd = make_reader<T, char_type>();
 6206|  3.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.72M|                return unexpected(e);
 6208|  3.72M|            }
 6209|       |
 6210|  3.72M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.72M|                specs.width != 0) {
 6212|  3.72M|                return impl(rd, range, value);
 6213|  3.72M|            }
 6214|       |
 6215|  3.72M|            auto crange = get_as_contiguous(range);
 6216|  3.72M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.72M|            return ranges::next(range.begin(),
 6218|  3.72M|                                ranges::distance(crange.begin(), it));
 6219|  3.72M|        }
 6220|  3.72M|        else {
 6221|  3.72M|            SCN_EXPECT(false);
 6222|  3.72M|            SCN_UNREACHABLE;
 6223|  3.72M|        }
 6224|  3.72M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  3.71M|    {
 6124|  3.71M|        const bool need_skipped_width =
 6125|  3.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 3.71M]
  |  Branch (6125:33): [True: 0, False: 3.71M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.71M|        auto it = rng.begin();
 6129|  3.71M|        std::ptrdiff_t prefix_width = 0;
 6130|  3.71M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 3.71M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  3.71M|        else {
 6138|  3.71M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.71M|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.71M|        }
 6141|  3.71M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.71M|        std::ptrdiff_t value_width = 0;
 6145|  3.71M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 3.71M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  3.71M|        else {
 6161|  3.71M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.32k, False: 3.71M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.32k|    }                                                  \
  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  3.71M|                                             specs, value, loc));
 6163|       |
 6164|  3.71M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 3.71M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  3.71M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.71M|        std::ptrdiff_t postfix_width = 0;
 6173|  3.71M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 3.71M, False: 1.13k]
  ------------------
 6174|  3.71M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  3.71M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  3.71M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  3.71M|                                 value_width));
 6178|  3.71M|            std::tie(it, postfix_width) = postfix_result;
 6179|  3.71M|        }
 6180|       |
 6181|  3.71M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.71M|                                                 value_width, postfix_width);
 6183|  3.71M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 3.71M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  3.71M|        return it;
 6188|  3.71M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  3.72M|    {
 6193|  3.72M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  3.72M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  3.72M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  3.72M|            auto rd = make_reader<T, char_type>();
 6198|  3.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02k, False: 3.71M]
  |  |  ------------------
  ------------------
 6199|  3.02k|                return unexpected(e);
 6200|  3.02k|            }
 6201|       |
 6202|  3.71M|            return impl(rd, range, value);
 6203|  3.72M|        }
 6204|  3.72M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  3.72M|            auto rd = make_reader<T, char_type>();
 6206|  3.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  3.72M|                return unexpected(e);
 6208|  3.72M|            }
 6209|       |
 6210|  3.72M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  3.72M|                specs.width != 0) {
 6212|  3.72M|                return impl(rd, range, value);
 6213|  3.72M|            }
 6214|       |
 6215|  3.72M|            auto crange = get_as_contiguous(range);
 6216|  3.72M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  3.72M|            return ranges::next(range.begin(),
 6218|  3.72M|                                ranges::distance(crange.begin(), it));
 6219|  3.72M|        }
 6220|  3.72M|        else {
 6221|  3.72M|            SCN_EXPECT(false);
 6222|  3.72M|            SCN_UNREACHABLE;
 6223|  3.72M|        }
 6224|  3.72M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  3.71M|    {
 6124|  3.71M|        const bool need_skipped_width =
 6125|  3.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 3.71M]
  |  Branch (6125:33): [True: 0, False: 3.71M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  3.71M|        auto it = rng.begin();
 6129|  3.71M|        std::ptrdiff_t prefix_width = 0;
 6130|  3.71M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 3.71M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  3.71M|        else {
 6138|  3.71M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  3.71M|            std::tie(it, prefix_width) = prefix_result;
 6140|  3.71M|        }
 6141|  3.71M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  3.71M|        std::ptrdiff_t value_width = 0;
 6145|  3.71M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 3.71M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  3.71M|        else {
 6161|  3.71M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.32k, False: 3.71M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.32k|    }                                                  \
  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  3.71M|                                             specs, value, loc));
 6163|       |
 6164|  3.71M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 3.71M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  3.71M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.71M|        std::ptrdiff_t postfix_width = 0;
 6173|  3.71M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 3.71M, False: 1.13k]
  ------------------
 6174|  3.71M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  3.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.71M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  3.71M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  3.71M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  3.71M|                                 value_width));
 6178|  3.71M|            std::tie(it, postfix_width) = postfix_result;
 6179|  3.71M|        }
 6180|       |
 6181|  3.71M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.71M|                                                 value_width, postfix_width);
 6183|  3.71M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 3.71M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  3.71M|        return it;
 6188|  3.71M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  5.57M|{
 5795|  5.57M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 5.57M]
  |  |  ------------------
  ------------------
 5796|  1.67k|        return unexpected(e);
 5797|  1.67k|    }
 5798|       |
 5799|  5.57M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 5.57M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  5.57M|    return skip_classic_whitespace(range);
 5804|  5.57M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  5.57M|    {
 5871|  5.57M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  5.57M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  5.57M|            auto rd = make_reader<T, char_type>();
 5876|  5.57M|            return impl(rd, range, value);
 5877|  5.57M|        }
 5878|  5.57M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  5.57M|            auto rd = make_reader<T, char_type>();
 5880|  5.57M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 5.57M, False: 0]
  ------------------
 5881|  5.57M|                return impl(rd, range, value);
 5882|  5.57M|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  5.57M|        else {
 5889|  5.57M|            SCN_EXPECT(false);
 5890|  5.57M|            SCN_UNREACHABLE;
 5891|  5.57M|        }
 5892|  5.57M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  5.57M|    {
 5863|  5.57M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  5.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  5.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  5.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.59k, False: 5.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.59k|    }                                                  \
  |  |  |  | 3671|  5.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  5.56M|                        .transform_error(make_eof_scan_error));
 5865|  5.56M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  5.57M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  5.56M|    {
 5266|  5.56M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.56M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  5.56M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    757|{
   52|    757|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    757|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    757|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    757|    string_buffer.resize(size);
   56|    757|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    757|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    757|    const auto wsv_reinterpret_size =
   61|    757|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 92, False: 665]
  ------------------
   62|    757|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    757|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    757|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    757|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    757|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    757|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    757|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    757|{
  122|    757|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    757|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    757|    buf.resize(sizeof...(Args));
  125|    757|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    757|    return buf;
  127|    757|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    757|{
  108|    757|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    757|        return format_string_view_buffer;
  110|    757|    }
  111|    757|    else {
  112|    757|        return wformat_string_view_buffer;
  113|    757|    }
  114|    757|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    757|{
  185|    757|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    757|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    757|                                   format_strings);
  188|    757|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    757|{
  133|       |    // Regular scan
  134|  4.54k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.54k, False: 757]
  ------------------
  135|  4.54k|        auto it = scn::ranges::begin(source);
  136|  37.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  37.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  37.4k|            auto result = scn::scan<T>(
  139|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  37.4k|                scn::runtime_format(f));
  141|  37.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.54k, False: 32.9k]
  ------------------
  142|  4.54k|                break;
  143|  4.54k|            }
  144|  32.9k|            it = result->begin();
  145|  32.9k|        }
  146|  4.54k|    }
  147|       |
  148|       |    // scan localized
  149|  4.54k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.54k, False: 757]
  ------------------
  150|  4.54k|        auto it = scn::ranges::begin(source);
  151|  37.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  37.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  37.4k|            auto result = scn::scan<T>(
  154|  37.4k|                global_locale,
  155|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  37.4k|                scn::runtime_format(f));
  157|  37.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.54k, False: 32.9k]
  ------------------
  158|  4.54k|                break;
  159|  4.54k|            }
  160|  32.9k|            it = result->begin();
  161|  32.9k|        }
  162|  4.54k|    }
  163|       |
  164|       |    // scan_value
  165|    757|    {
  166|    757|        auto it = scn::ranges::begin(source);
  167|  17.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.0k|            auto result = scn::scan_value<T>(
  170|  17.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 757, False: 16.3k]
  ------------------
  172|    757|                break;
  173|    757|            }
  174|  16.3k|            it = result->begin();
  175|  16.3k|        }
  176|    757|    }
  177|    757|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    757|{
  133|       |    // Regular scan
  134|  4.54k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.54k, False: 757]
  ------------------
  135|  4.54k|        auto it = scn::ranges::begin(source);
  136|  37.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  37.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  37.4k|            auto result = scn::scan<T>(
  139|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  37.4k|                scn::runtime_format(f));
  141|  37.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.54k, False: 32.9k]
  ------------------
  142|  4.54k|                break;
  143|  4.54k|            }
  144|  32.9k|            it = result->begin();
  145|  32.9k|        }
  146|  4.54k|    }
  147|       |
  148|       |    // scan localized
  149|  4.54k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.54k, False: 757]
  ------------------
  150|  4.54k|        auto it = scn::ranges::begin(source);
  151|  37.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  37.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  37.4k|            auto result = scn::scan<T>(
  154|  37.4k|                global_locale,
  155|  37.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  37.4k|                scn::runtime_format(f));
  157|  37.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.54k, False: 32.9k]
  ------------------
  158|  4.54k|                break;
  159|  4.54k|            }
  160|  32.9k|            it = result->begin();
  161|  32.9k|        }
  162|  4.54k|    }
  163|       |
  164|       |    // scan_value
  165|    757|    {
  166|    757|        auto it = scn::ranges::begin(source);
  167|  17.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.0k|            auto result = scn::scan_value<T>(
  170|  17.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 757, False: 16.3k]
  ------------------
  172|    757|                break;
  173|    757|            }
  174|  16.3k|            it = result->begin();
  175|  16.3k|        }
  176|    757|    }
  177|    757|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    757|{
  133|       |    // Regular scan
  134|  4.54k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.54k, False: 757]
  ------------------
  135|  4.54k|        auto it = scn::ranges::begin(source);
  136|  38.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  38.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  38.4k|            auto result = scn::scan<T>(
  139|  38.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  38.4k|                scn::runtime_format(f));
  141|  38.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.54k, False: 33.9k]
  ------------------
  142|  4.54k|                break;
  143|  4.54k|            }
  144|  33.9k|            it = result->begin();
  145|  33.9k|        }
  146|  4.54k|    }
  147|       |
  148|       |    // scan localized
  149|  4.54k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.54k, False: 757]
  ------------------
  150|  4.54k|        auto it = scn::ranges::begin(source);
  151|  38.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  38.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  38.4k|            auto result = scn::scan<T>(
  154|  38.4k|                global_locale,
  155|  38.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  38.4k|                scn::runtime_format(f));
  157|  38.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.54k, False: 33.9k]
  ------------------
  158|  4.54k|                break;
  159|  4.54k|            }
  160|  33.9k|            it = result->begin();
  161|  33.9k|        }
  162|  4.54k|    }
  163|       |
  164|       |    // scan_value
  165|    757|    {
  166|    757|        auto it = scn::ranges::begin(source);
  167|  17.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.5k|            auto result = scn::scan_value<T>(
  170|  17.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 757, False: 16.7k]
  ------------------
  172|    757|                break;
  173|    757|            }
  174|  16.7k|            it = result->begin();
  175|  16.7k|        }
  176|    757|    }
  177|    757|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    757|{
   90|    757|    using char_type = ranges::range_value_t<Source>;
   91|    757|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    757|    deque.clear();
   93|    757|    std::copy(ranges::begin(source), ranges::end(source),
   94|    757|              std::back_inserter(deque));
   95|    757|    return deque;
   96|    757|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    757|{
   79|    757|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|    757|        return noncontiguous_buffer;
   81|    757|    }
   82|    757|    else {
   83|    757|        return wnoncontiguous_buffer;
   84|    757|    }
   85|    757|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    757|{
  122|    757|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    757|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    757|    buf.resize(sizeof...(Args));
  125|    757|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    757|    return buf;
  127|    757|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    757|{
  108|    757|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    757|        return format_string_view_buffer;
  110|    757|    }
  111|    757|    else {
  112|    757|        return wformat_string_view_buffer;
  113|    757|    }
  114|    757|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.51k|{
  185|  1.51k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.51k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.51k|                                   format_strings);
  188|  1.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.51k|{
  133|       |    // Regular scan
  134|  9.08k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 9.08k, False: 1.51k]
  ------------------
  135|  9.08k|        auto it = scn::ranges::begin(source);
  136|  3.72M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  3.72M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  3.72M|            auto result = scn::scan<T>(
  139|  3.72M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  3.72M|                scn::runtime_format(f));
  141|  3.72M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 9.08k, False: 3.71M]
  ------------------
  142|  9.08k|                break;
  143|  9.08k|            }
  144|  3.71M|            it = result->begin();
  145|  3.71M|        }
  146|  9.08k|    }
  147|       |
  148|       |    // scan localized
  149|  9.08k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 9.08k, False: 1.51k]
  ------------------
  150|  9.08k|        auto it = scn::ranges::begin(source);
  151|  3.72M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  3.72M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  3.72M|            auto result = scn::scan<T>(
  154|  3.72M|                global_locale,
  155|  3.72M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  3.72M|                scn::runtime_format(f));
  157|  3.72M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 9.08k, False: 3.71M]
  ------------------
  158|  9.08k|                break;
  159|  9.08k|            }
  160|  3.71M|            it = result->begin();
  161|  3.71M|        }
  162|  9.08k|    }
  163|       |
  164|       |    // scan_value
  165|  1.51k|    {
  166|  1.51k|        auto it = scn::ranges::begin(source);
  167|  1.85M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.85M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.85M|            auto result = scn::scan_value<T>(
  170|  1.85M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.85M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.51k, False: 1.85M]
  ------------------
  172|  1.51k|                break;
  173|  1.51k|            }
  174|  1.85M|            it = result->begin();
  175|  1.85M|        }
  176|  1.51k|    }
  177|  1.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.51k|{
  133|       |    // Regular scan
  134|  9.08k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 9.08k, False: 1.51k]
  ------------------
  135|  9.08k|        auto it = scn::ranges::begin(source);
  136|  3.72M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  3.72M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  3.72M|            auto result = scn::scan<T>(
  139|  3.72M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  3.72M|                scn::runtime_format(f));
  141|  3.72M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 9.08k, False: 3.71M]
  ------------------
  142|  9.08k|                break;
  143|  9.08k|            }
  144|  3.71M|            it = result->begin();
  145|  3.71M|        }
  146|  9.08k|    }
  147|       |
  148|       |    // scan localized
  149|  9.08k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 9.08k, False: 1.51k]
  ------------------
  150|  9.08k|        auto it = scn::ranges::begin(source);
  151|  3.72M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  3.72M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  3.72M|            auto result = scn::scan<T>(
  154|  3.72M|                global_locale,
  155|  3.72M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  3.72M|                scn::runtime_format(f));
  157|  3.72M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 9.08k, False: 3.71M]
  ------------------
  158|  9.08k|                break;
  159|  9.08k|            }
  160|  3.71M|            it = result->begin();
  161|  3.71M|        }
  162|  9.08k|    }
  163|       |
  164|       |    // scan_value
  165|  1.51k|    {
  166|  1.51k|        auto it = scn::ranges::begin(source);
  167|  1.85M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.85M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.85M|            auto result = scn::scan_value<T>(
  170|  1.85M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.85M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.51k, False: 1.85M]
  ------------------
  172|  1.51k|                break;
  173|  1.51k|            }
  174|  1.85M|            it = result->begin();
  175|  1.85M|        }
  176|  1.51k|    }
  177|  1.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.51k|{
  133|       |    // Regular scan
  134|  9.08k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 9.08k, False: 1.51k]
  ------------------
  135|  9.08k|        auto it = scn::ranges::begin(source);
  136|  3.72M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  3.72M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  3.72M|            auto result = scn::scan<T>(
  139|  3.72M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  3.72M|                scn::runtime_format(f));
  141|  3.72M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 9.08k, False: 3.71M]
  ------------------
  142|  9.08k|                break;
  143|  9.08k|            }
  144|  3.71M|            it = result->begin();
  145|  3.71M|        }
  146|  9.08k|    }
  147|       |
  148|       |    // scan localized
  149|  9.08k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 9.08k, False: 1.51k]
  ------------------
  150|  9.08k|        auto it = scn::ranges::begin(source);
  151|  3.72M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  3.72M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  3.72M|            auto result = scn::scan<T>(
  154|  3.72M|                global_locale,
  155|  3.72M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  3.72M|                scn::runtime_format(f));
  157|  3.72M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 9.08k, False: 3.71M]
  ------------------
  158|  9.08k|                break;
  159|  9.08k|            }
  160|  3.71M|            it = result->begin();
  161|  3.71M|        }
  162|  9.08k|    }
  163|       |
  164|       |    // scan_value
  165|  1.51k|    {
  166|  1.51k|        auto it = scn::ranges::begin(source);
  167|  1.85M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.85M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.85M|            auto result = scn::scan_value<T>(
  170|  1.85M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.85M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.51k, False: 1.85M]
  ------------------
  172|  1.51k|                break;
  173|  1.51k|            }
  174|  1.85M|            it = result->begin();
  175|  1.85M|        }
  176|  1.51k|    }
  177|  1.51k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.51k|{
   90|  1.51k|    using char_type = ranges::range_value_t<Source>;
   91|  1.51k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.51k|    deque.clear();
   93|  1.51k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.51k|              std::back_inserter(deque));
   95|  1.51k|    return deque;
   96|  1.51k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.51k|{
   79|  1.51k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.51k|        return noncontiguous_buffer;
   81|  1.51k|    }
   82|  1.51k|    else {
   83|  1.51k|        return wnoncontiguous_buffer;
   84|  1.51k|    }
   85|  1.51k|}

LLVMFuzzerTestOneInput:
   57|    758|{
   58|    758|    scn::fuzz::run(data, size);
   59|    758|    return 0;
   60|    758|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    758|{
   36|    758|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 757]
  |  Branch (36:35): [True: 0, False: 757]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    757|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    757|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    757|                                             "{:64U}", "{:[A-Za-z]}");
   44|    757|    do_basic_run(sv, f);
   45|       |
   46|    757|    const auto& wf = get_format_strings<wchar_t>(
   47|    757|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    757|    do_basic_run(wsv_reinterpret, wf);
   49|    757|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 757, False: 0]
  ------------------
   50|    757|        do_basic_run(wsv_transcode, wf);
   51|    757|    }
   52|    757|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    757|{
   25|    757|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    757|                                                           format_strings);
   27|    757|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    757|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    757|            source, format_strings);
   30|    757|    }
   31|    757|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    757|{
   25|    757|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    757|                                                           format_strings);
   27|    757|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    757|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    757|            source, format_strings);
   30|    757|    }
   31|    757|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.51k|{
   25|  1.51k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.51k|                                                           format_strings);
   27|  1.51k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.51k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.51k|            source, format_strings);
   30|  1.51k|    }
   31|  1.51k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.51k|{
   25|  1.51k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.51k|                                                           format_strings);
   27|  1.51k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.51k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.51k|            source, format_strings);
   30|  1.51k|    }
   31|  1.51k|}

