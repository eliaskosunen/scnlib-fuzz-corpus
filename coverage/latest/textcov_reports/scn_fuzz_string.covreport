_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  11.3M|{
 3803|  11.3M|    if constexpr (sizeof(U) == 1) {
 3804|  11.3M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  11.3M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  11.3M|{
 3767|  11.3M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  11.3M|    SCN_GCC_COMPAT_PUSH
 3770|  11.3M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  11.3M|    constexpr char lengths[] =
 3772|  11.3M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  11.3M|        "\1\1\1\1\1\1\1\1"
 3774|  11.3M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  11.3M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  11.3M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  11.3M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  11.3M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  11.3M|    SCN_GCC_COMPAT_POP
 3781|  11.3M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  10.9M|{
 4009|  10.9M|    if constexpr (sizeof(CharT) == 1) {
 4010|  10.9M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  10.9M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  10.9M|{
 3822|  10.9M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  10.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  10.9M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  10.9M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  10.9M|    };
 3827|       |
 3828|  10.9M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 10.0M, False: 899k]
  ------------------
 3829|  10.0M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 533, False: 10.0M]
  ------------------
 3830|    533|            SCN_UNLIKELY_ATTR
 3831|    533|            return invalid_code_point;
 3832|    533|        }
 3833|  10.0M|        return static_cast<char32_t>(input[0]);
 3834|  10.0M|    }
 3835|       |
 3836|   899k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 240k, False: 659k]
  ------------------
 3837|   240k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 435, False: 239k]
  ------------------
 3838|    435|            SCN_UNLIKELY_ATTR
 3839|    435|            return invalid_code_point;
 3840|    435|        }
 3841|   239k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 42.6k, False: 196k]
  ------------------
 3842|  42.6k|            SCN_UNLIKELY_ATTR
 3843|  42.6k|            return invalid_code_point;
 3844|  42.6k|        }
 3845|       |
 3846|   196k|        char32_t cp{};
 3847|   196k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   196k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   196k|        return cp;
 3850|   239k|    }
 3851|       |
 3852|   659k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 623k, False: 36.6k]
  ------------------
 3853|   623k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 86, False: 623k]
  ------------------
 3854|     86|            SCN_UNLIKELY_ATTR
 3855|     86|            return invalid_code_point;
 3856|     86|        }
 3857|   623k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 8.89k, False: 614k]
  ------------------
 3858|   623k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 2.53k, False: 611k]
  ------------------
 3859|  11.4k|            SCN_UNLIKELY_ATTR
 3860|  11.4k|            return invalid_code_point;
 3861|  11.4k|        }
 3862|       |
 3863|   611k|        char32_t cp{};
 3864|   611k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   611k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   611k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   611k|        return cp;
 3868|   623k|    }
 3869|       |
 3870|  36.6k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 36.6k, False: 0]
  ------------------
 3871|  36.6k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 36.6k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  36.6k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 22.0k, False: 14.5k]
  ------------------
 3876|  22.0k|            SCN_UNLIKELY_ATTR
 3877|  22.0k|            return invalid_code_point;
 3878|  22.0k|        }
 3879|  14.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 3.35k, False: 11.2k]
  ------------------
 3880|  14.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 165, False: 11.0k]
  ------------------
 3881|  14.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 297, False: 10.7k]
  ------------------
 3882|  3.81k|            SCN_UNLIKELY_ATTR
 3883|  3.81k|            return invalid_code_point;
 3884|  3.81k|        }
 3885|       |
 3886|  10.7k|        char32_t cp{};
 3887|  10.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  10.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  10.7k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  10.7k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  10.7k|        return cp;
 3892|  14.5k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  1.51M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  1.51M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  1.51M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  9.62M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  9.62M|    else {
 3701|  9.62M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  9.62M|                                       to_address(first), to_address(last)))};
 3703|  9.62M|    }
 3704|  9.62M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  29.6M|{
  326|  29.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  29.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  29.6M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  32.4M|{
  304|  32.4M|    return p;
  305|  32.4M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  4.59M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  4.59M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  4.59M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  4.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  4.59M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  4.59M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  58.6k|    {
 2724|  58.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  58.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  58.6k|    {
 2705|  58.6k|        return decay_copy(t.begin());
 2706|  58.6k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  4.85M|{
 1949|  4.85M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.85M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.13M|    {
 2781|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.13M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.13M|    {
 2763|  1.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.13M|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8876|   115k|{
 8877|   115k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   115k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   115k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|   504k|{
 5406|   504k|    detail::check_scan_arg_types<Args...>();
 5407|   504k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   504k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|   621k|{
 5145|   621k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   621k|                  "Scan argument types must be default constructible");
 5147|   621k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   621k|                  "Scan argument types must be Destructible");
 5149|   621k|    static_assert(
 5150|   621k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   621k|        "Scan argument types must not be references");
 5152|   621k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|   504k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   504k|    {
 5359|   504k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   504k|    {
 5370|   504k|        return {detail::make_arg<
 5371|   504k|            kind, Context,
 5372|   504k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   504k|                                 typename Context::char_type>::value>(args)...};
 5374|   504k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|   504k|{
 5180|   504k|    return make_value<Context>(value).ref_value;
 5181|   504k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|   621k|{
 5130|   621k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   621k|                                  needs_context_tag>) {
 5134|   621k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   621k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   621k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|   621k|    {                                                                        \
 4969|   621k|        return val;                                                          \
 4970|   621k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|   621k|{
 5099|   621k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   621k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   621k|    constexpr bool scannable_char =
 5103|   621k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   621k|    static_assert(scannable_char,
 5105|   621k|                  "Cannot scan an argument of an unsupported character "
 5106|   621k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   621k|    constexpr bool scannable_const =
 5109|   621k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   621k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   621k|    constexpr bool scannable_disabled =
 5113|   621k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   621k|    static_assert(scannable_disabled,
 5115|   621k|                  "Cannot scan an argument that has been disabled by "
 5116|   621k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   621k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   621k|    static_assert(
 5120|   621k|        scannable,
 5121|   621k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   621k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   621k|    return arg_value{arg};
 5125|   621k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|   621k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   621k|    {
 4911|   621k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   230k|{
 8664|   230k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   230k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|   230k|{
 8601|   230k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   230k|    auto result = vscan_impl(buffer, format, args);
 8604|   230k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 204k]
  |  |  ------------------
  ------------------
 8605|  26.0k|        return unexpected(result.error());
 8606|  26.0k|    }
 8607|   204k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   230k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   565k|{
 4729|   565k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   565k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   565k|                  "\n"
 4733|   565k|                  "Unsupported range type given as input to a scanning "
 4734|   565k|                  "function.\n"
 4735|   565k|                  "A range needs to have a character type (value type) "
 4736|   565k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   565k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   565k|                  "to be included.\n"
 4739|   565k|                  "See the scnlib documentation for more details.");
 4740|   565k|    static_assert(
 4741|   565k|        !std::is_same_v<T, custom_char_traits>,
 4742|   565k|        "\n"
 4743|   565k|        "Unsupported range type given as input to a scanning "
 4744|   565k|        "function.\n"
 4745|   565k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   565k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   565k|        "not supported.");
 4748|   565k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   565k|                  "\n"
 4750|   565k|                  "Unsupported range type given as input to a scanning "
 4751|   565k|                  "function.\n"
 4752|   565k|                  "file_marker_found cannot be used as an "
 4753|   565k|                  "source range type to scn::scan.\n"
 4754|   565k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   565k|                  "and do not provide an explicit source range, "
 4756|   565k|                  "or use scn::scan with a FILE* directly.");
 4757|   565k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   565k|                  "\n"
 4759|   565k|                  "Unsupported range type given as input to a scanning "
 4760|   565k|                  "function.\n"
 4761|   565k|                  "In order to be scannable, a range needs to satisfy "
 4762|   565k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   565k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   565k|                  "\n"
 4765|   565k|                  "Unsupported range type given as input to a scanning "
 4766|   565k|                  "function.\n"
 4767|   565k|                  "A range needs to model forward_range and have a valid "
 4768|   565k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   565k|                  "Examples of scannable ranges are std::string, "
 4770|   565k|                  "std::string_view, "
 4771|   565k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   565k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   565k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   565k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   565k|{
 4668|   565k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   565k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   565k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   565k|    {
 2855|   565k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   565k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   565k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   565k|    {
 2836|   565k|        return t.data();
 2837|   565k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   565k|    {
 3229|   565k|        return detail::to_address(ranges::begin(derived()));
 3230|   565k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.76M|{
  326|  2.76M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.76M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.07M|    {
 2724|  1.07M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.07M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.07M|    {
 2705|  1.07M|        return decay_copy(t.begin());
 2706|  1.07M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  6.27M|    {
 3326|  6.27M|        return m_iterator;
 3327|  6.27M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   565k|    {
 3185|   565k|        return static_cast<const D&>(*this);
 3186|   565k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   565k|    {
 2930|   565k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   565k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   565k|    {
 2896|   565k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   565k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   565k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  5.64M|{
 1949|  5.64M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.64M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  2.13M|    {
 3342|  2.13M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  2.13M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  11.4M|    {
 1598|  11.4M|        return has_value();
 1599|  11.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  22.7M|    {
  485|  22.7M|        return m_has_value;
  486|  22.7M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   254k|    {
 1604|   254k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   254k|        return this->get_unexpected().error();
 1606|   254k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   254k|    {
  468|   254k|        return m_unexpected;
  469|   254k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.88M|    {
  361|  1.88M|        return m_unexpected;
  362|  1.88M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   943k|        : m_unexpected(std::forward<Err>(e))
  346|   943k|    {
  347|   943k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   943k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   943k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  56.4k|        : base(unexpect, std::move(e.error())),
 1474|  56.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  56.4k|    {
 1476|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  56.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  56.4k|          m_has_value(false)
  446|  56.4k|    {
  447|  56.4k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  1.08M|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.08M|    {
  356|  1.08M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.08M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.08M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   565k|    {
 1177|   565k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   509k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   509k|                      ranges::iterator_t<SourceRange>>) {
 5935|   509k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   509k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.07M|    {
 2724|  2.07M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.07M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.07M|    {
 2705|  2.07M|        return decay_copy(t.begin());
 2706|  2.07M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   509k|{
 5920|   509k|    return ranges::end(source);
 5921|   509k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   509k|    {
 2781|   509k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   509k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   509k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   509k|    {
 2763|   509k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   509k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   509k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  3.26M|    {
 3330|  3.26M|        return m_sentinel;
 3331|  3.26M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  11.0M|    {
 1653|  11.0M|        return value();
 1654|  11.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  11.0M|    {
 1627|  11.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.0M|        return this->get_value();
 1629|  11.0M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  11.0M|    {
  451|  11.0M|        return m_value;
  452|  11.0M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   509k|        : base(std::in_place, std::forward<U>(val)),
 1428|   509k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   509k|    {
 1430|   509k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   509k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   509k|    {
  437|   509k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7984|   230k|    {
 7985|   230k|        return m_str;
 7986|   230k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   504k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   504k|    {
 5436|   504k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|   504k|    {
 5389|   504k|        return m_argptrs;
 5390|   504k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   735k|        : m_desc(desc), m_builtin_values(data)
 5487|   735k|    {
 5488|   735k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|   230k|{
 8830|   230k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 204k]
  |  |  ------------------
  ------------------
 8831|  26.0k|        return unexpected(result.error());
 8832|  26.0k|    }
 8833|   204k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   204k|    static_cast<    \
  |  |  929|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   204k|    static_cast<    \
  |  |  929|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   230k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   565k|    {
 1598|   565k|        return has_value();
 1599|   565k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  56.4k|    {
 1604|  56.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  56.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  56.4k|        return this->get_unexpected().error();
 1606|  56.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  56.4k|    {
  468|  56.4k|        return m_unexpected;
  469|  56.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  28.2k|        : base(unexpect, std::move(e.error())),
 1474|  28.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.2k|    {
 1476|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  28.2k|        : m_has_value(false)
  625|  28.2k|    {
  626|  28.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  28.2k|    {
  689|  28.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  28.2k|                                  std::forward<Args>(args)...);
  691|  28.2k|        m_has_value = false;
  692|  28.2k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   169k|{
  392|   169k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   169k|        T(std::forward<Args>(args)...);
  394|   169k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  56.4k|    {
  718|  56.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  56.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  56.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  56.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   282k|    {
 1177|   282k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   408k|    {
 1653|   408k|        return value();
 1654|   408k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   509k|    {
 1627|   509k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   509k|        return this->get_value();
 1629|   509k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   509k|    {
  451|   509k|        return m_value;
  452|   509k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   254k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   254k|    static_cast<    \
  |  |  929|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   254k|    static_cast<    \
  |  |  929|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   254k|    {
 5840|   254k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   509k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   509k|    static_cast<    \
  |  |  929|   509k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   509k|    {
 5691|   509k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|   564k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   564k|    static_cast<    \
  |  |  929|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   564k|    {
 5626|   564k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   254k|        : base(std::in_place, std::forward<U>(val)),
 1428|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   254k|    {
 1430|   254k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   254k|        : m_has_value(true)
  615|   254k|    {
  616|   254k|        construct(std::forward<Args>(args)...);
  617|   254k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   254k|    {
  682|   254k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   254k|        m_has_value = true;
  684|   254k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   254k|{
  392|   254k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   254k|        T(std::forward<Args>(args)...);
  394|   254k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|   254k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   763k|    {
  706|   763k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   763k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   763k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|   509k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|   504k|    {
 5384|   504k|        return m_args;
 5385|   504k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|   504k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  3.65M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.65M|    static_cast<    \
  |  |  929|  3.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.65M|    static_cast<    \
  |  |  929|  3.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.65M|    {
 3312|  3.65M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7700|   735k|{
 7701|   735k|    return s;
 7702|   735k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7677|   735k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   230k|        : m_str(r.str)
 7980|   230k|    {
 7981|   230k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   282k|    {
 1598|   282k|        return has_value();
 1599|   282k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   820k|    {
  675|   820k|        return m_has_value;
  676|   820k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   254k|    {
 1673|   254k|        return &value();
 1674|   254k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   254k|    {
 1627|   254k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   254k|        return this->get_value();
 1629|   254k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   254k|    {
  641|   254k|        return *value_ptr();
  642|   254k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   509k|    {
 5708|   509k|        return ranges::begin(m_range);
 5709|   509k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   282k|    {
  631|   282k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 254k, False: 28.2k]
  ------------------
  632|   254k|            destroy_value();
  633|   254k|        }
  634|  28.2k|        else {
  635|  28.2k|            destroy_unexpected();
  636|  28.2k|        }
  637|   282k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   254k|    {
  696|   254k|        scn::detail::destroy_at(value_ptr());
  697|   254k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   254k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   254k|    else {
  404|   254k|        p->~T();
  405|   254k|    }
  406|   254k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  28.2k|    {
  700|  28.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  28.2k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   169k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   169k|    else {
  404|   169k|        p->~T();
  405|   169k|    }
  406|   169k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8943|   115k|{
 8944|   115k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   115k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   115k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   230k|{
 8682|   230k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   230k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|   230k|{
 8617|   230k|#if !SCN_DISABLE_LOCALE
 8618|   230k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   230k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   230k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   230k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   230k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 204k]
  |  |  ------------------
  ------------------
 8625|  26.0k|        return unexpected(result.error());
 8626|  26.0k|    }
 8627|   204k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   230k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8982|  52.6k|{
 8983|  52.6k|    T value;
 8984|  52.6k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  52.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.17k, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.17k|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  50.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  52.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   116k|{
 5165|   116k|    check_scan_arg_types<T>();
 5166|       |
 5167|   116k|    basic_scan_arg<Context> arg;
 5168|   116k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   116k|    arg.m_value = make_value<Context>(value);
 5170|   116k|    return arg;
 5171|   116k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   904k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  8.52M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|   105k|{
 8695|   105k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|   105k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   105k|{
 8641|   105k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   105k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 101k]
  |  |  ------------------
  ------------------
 8645|  4.34k|        return unexpected(result.error());
 8646|  4.34k|    }
 8647|   101k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   105k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   101k|    {
 1663|   101k|        return std::move(value());
 1664|   101k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8876|   115k|{
 8877|   115k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   115k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   115k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|   230k|{
 5406|   230k|    detail::check_scan_arg_types<Args...>();
 5407|   230k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   230k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|   282k|{
 5145|   282k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   282k|                  "Scan argument types must be default constructible");
 5147|   282k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   282k|                  "Scan argument types must be Destructible");
 5149|   282k|    static_assert(
 5150|   282k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   282k|        "Scan argument types must not be references");
 5152|   282k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|   230k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   230k|    {
 5359|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   230k|    {
 5370|   230k|        return {detail::make_arg<
 5371|   230k|            kind, Context,
 5372|   230k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   230k|                                 typename Context::char_type>::value>(args)...};
 5374|   230k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|   230k|{
 5180|   230k|    return make_value<Context>(value).ref_value;
 5181|   230k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|   282k|{
 5130|   282k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   282k|                                  needs_context_tag>) {
 5134|   282k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   282k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|   282k|    {                                                                        \
 4969|   282k|        return val;                                                          \
 4970|   282k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|   282k|{
 5099|   282k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   282k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   282k|    constexpr bool scannable_char =
 5103|   282k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   282k|    static_assert(scannable_char,
 5105|   282k|                  "Cannot scan an argument of an unsupported character "
 5106|   282k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   282k|    constexpr bool scannable_const =
 5109|   282k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   282k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   282k|    constexpr bool scannable_disabled =
 5113|   282k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   282k|    static_assert(scannable_disabled,
 5115|   282k|                  "Cannot scan an argument that has been disabled by "
 5116|   282k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   282k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   282k|    static_assert(
 5120|   282k|        scannable,
 5121|   282k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   282k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   282k|    return arg_value{arg};
 5125|   282k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|   282k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   282k|    {
 4911|   282k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7984|   230k|    {
 7985|   230k|        return m_str;
 7986|   230k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   230k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   230k|    {
 5436|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|   230k|    {
 5389|   230k|        return m_argptrs;
 5390|   230k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|   230k|{
 8830|   230k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 204k]
  |  |  ------------------
  ------------------
 8831|  26.0k|        return unexpected(result.error());
 8832|  26.0k|    }
 8833|   204k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   204k|    static_cast<    \
  |  |  929|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   204k|    static_cast<    \
  |  |  929|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   230k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  28.2k|        : base(unexpect, std::move(e.error())),
 1474|  28.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.2k|    {
 1476|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  28.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.2k|          m_has_value(false)
  446|  28.2k|    {
  447|  28.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   282k|    {
 1177|   282k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   254k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   254k|    static_cast<    \
  |  |  929|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   254k|    static_cast<    \
  |  |  929|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   254k|    {
 5840|   254k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   254k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   254k|    static_cast<    \
  |  |  929|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   254k|    {
 5626|   254k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   254k|        : base(std::in_place, std::forward<U>(val)),
 1428|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   254k|    {
 1430|   254k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   254k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   254k|    {
  437|   254k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|   230k|    {
 5384|   230k|        return m_args;
 5385|   230k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   230k|        : m_str(r.str)
 7980|   230k|    {
 7981|   230k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   282k|    {
 1598|   282k|        return has_value();
 1599|   282k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   537k|    {
  485|   537k|        return m_has_value;
  486|   537k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   254k|    {
 1673|   254k|        return &value();
 1674|   254k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   254k|    {
 1627|   254k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   254k|        return this->get_value();
 1629|   254k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   254k|    {
  451|   254k|        return m_value;
  452|   254k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8943|   115k|{
 8944|   115k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   115k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   115k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8982|  52.6k|{
 8983|  52.6k|    T value;
 8984|  52.6k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  52.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.17k, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.17k|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  50.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  52.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  52.6k|{
 5165|  52.6k|    check_scan_arg_types<T>();
 5166|       |
 5167|  52.6k|    basic_scan_arg<Context> arg;
 5168|  52.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  52.6k|    arg.m_value = make_value<Context>(value);
 5170|  52.6k|    return arg;
 5171|  52.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  28.2k|    {
 2724|  28.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  28.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  28.2k|    {
 2705|  28.2k|        return decay_copy(t.begin());
 2706|  28.2k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  14.2M|{
 1949|  14.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  14.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  14.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   677k|    {
 2781|   677k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   677k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   677k|    {
 2763|   677k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   677k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8876|   137k|{
 8877|   137k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   137k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   137k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   137k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   137k|{
 8664|   137k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   137k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|   137k|{
 8601|   137k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   137k|    auto result = vscan_impl(buffer, format, args);
 8604|   137k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 124k]
  |  |  ------------------
  ------------------
 8605|  13.0k|        return unexpected(result.error());
 8606|  13.0k|    }
 8607|   124k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   137k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   338k|{
 4729|   338k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   338k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   338k|                  "\n"
 4733|   338k|                  "Unsupported range type given as input to a scanning "
 4734|   338k|                  "function.\n"
 4735|   338k|                  "A range needs to have a character type (value type) "
 4736|   338k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   338k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   338k|                  "to be included.\n"
 4739|   338k|                  "See the scnlib documentation for more details.");
 4740|   338k|    static_assert(
 4741|   338k|        !std::is_same_v<T, custom_char_traits>,
 4742|   338k|        "\n"
 4743|   338k|        "Unsupported range type given as input to a scanning "
 4744|   338k|        "function.\n"
 4745|   338k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   338k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   338k|        "not supported.");
 4748|   338k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   338k|                  "\n"
 4750|   338k|                  "Unsupported range type given as input to a scanning "
 4751|   338k|                  "function.\n"
 4752|   338k|                  "file_marker_found cannot be used as an "
 4753|   338k|                  "source range type to scn::scan.\n"
 4754|   338k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   338k|                  "and do not provide an explicit source range, "
 4756|   338k|                  "or use scn::scan with a FILE* directly.");
 4757|   338k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   338k|                  "\n"
 4759|   338k|                  "Unsupported range type given as input to a scanning "
 4760|   338k|                  "function.\n"
 4761|   338k|                  "In order to be scannable, a range needs to satisfy "
 4762|   338k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   338k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   338k|                  "\n"
 4765|   338k|                  "Unsupported range type given as input to a scanning "
 4766|   338k|                  "function.\n"
 4767|   338k|                  "A range needs to model forward_range and have a valid "
 4768|   338k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   338k|                  "Examples of scannable ranges are std::string, "
 4770|   338k|                  "std::string_view, "
 4771|   338k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   338k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   338k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   338k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   338k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   338k|    else {
 4714|   338k|        return make_forward_scan_buffer(r);
 4715|   338k|    }
 4716|   338k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   338k|{
 4533|   338k|    return basic_scan_forward_buffer_impl(range);
 4534|   338k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   338k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   338k|          m_cursor(ranges::begin(*m_range))
 4419|   338k|    {
 4420|   338k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   338k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   338k|    {
 4391|   338k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   338k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   338k|    {
 4159|   338k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   338k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   648k|    {
 2724|   648k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   648k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   648k|    {
 2705|   648k|        return decay_copy(t.begin());
 2706|   648k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|   959k|    {
 3326|   959k|        return m_iterator;
 3327|   959k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  4.09M|    {
 4424|  4.09M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 34.7k, False: 4.06M]
  ------------------
 4425|  34.7k|            return false;
 4426|  34.7k|        }
 4427|  4.06M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  4.06M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  4.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  4.06M|        }
 4430|  4.06M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 3.74M, False: 322k]
  ------------------
 4431|  3.74M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  3.74M|                                          this->m_current_view.begin(),
 4433|  3.74M|                                          this->m_current_view.end());
 4434|  3.74M|        }
 4435|  4.06M|        m_latest = *m_cursor;
 4436|  4.06M|        ++m_cursor;
 4437|  4.06M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  4.06M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  4.06M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  4.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  4.06M|        }
 4441|  4.06M|        return true;
 4442|  4.09M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  12.2M|    {
 2781|  12.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  12.2M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  12.2M|    {
 2763|  12.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  12.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  12.5M|    {
 3330|  12.5M|        return m_sentinel;
 3331|  12.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   338k|    {
 4079|   338k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   338k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   338k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  28.2k|        : base(unexpect, std::move(e.error())),
 1474|  28.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.2k|    {
 1476|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  28.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.2k|          m_has_value(false)
  446|  28.2k|    {
  447|  28.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   338k|    {
 1177|   338k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   310k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   310k|                      ranges::iterator_t<SourceRange>>) {
 5935|   310k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   310k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   310k|    {
 2724|   310k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   310k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   310k|    {
 2705|   310k|        return decay_copy(t.begin());
 2706|   310k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   310k|{
 5920|   310k|    return ranges::end(source);
 5921|   310k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   310k|    {
 2781|   310k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   310k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   310k|    {
 2763|   310k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   310k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   310k|        : base(std::in_place, std::forward<U>(val)),
 1428|   310k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   310k|    {
 1430|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   310k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   310k|    {
  437|   310k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7984|   274k|    {
 7985|   274k|        return m_str;
 7986|   274k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8829|   274k|{
 8830|   274k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 248k]
  |  |  ------------------
  ------------------
 8831|  26.0k|        return unexpected(result.error());
 8832|  26.0k|    }
 8833|   248k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   248k|    static_cast<    \
  |  |  929|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   248k|    static_cast<    \
  |  |  929|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   274k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   338k|    {
 1598|   338k|        return has_value();
 1599|   338k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   677k|    {
  485|   677k|        return m_has_value;
  486|   677k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  28.2k|    {
 1604|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  28.2k|        return this->get_unexpected().error();
 1606|  28.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  28.2k|    {
  468|  28.2k|        return m_unexpected;
  469|  28.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  28.2k|        : base(unexpect, std::move(e.error())),
 1474|  28.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.2k|    {
 1476|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  28.2k|        : m_has_value(false)
  625|  28.2k|    {
  626|  28.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  28.2k|    {
  689|  28.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  28.2k|                                  std::forward<Args>(args)...);
  691|  28.2k|        m_has_value = false;
  692|  28.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  56.4k|    {
  718|  56.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  56.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  56.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  56.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   338k|    {
 1177|   338k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   248k|    {
 1653|   248k|        return value();
 1654|   248k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   310k|    {
 1627|   310k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   310k|        return this->get_value();
 1629|   310k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   310k|    {
  451|   310k|        return m_value;
  452|   310k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   310k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   310k|    {
 5840|   310k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   310k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   310k|    {
 5691|   310k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   310k|        : base(std::in_place, std::forward<U>(val)),
 1428|   310k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   310k|    {
 1430|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   310k|        : m_has_value(true)
  615|   310k|    {
  616|   310k|        construct(std::forward<Args>(args)...);
  617|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   310k|    {
  682|   310k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   310k|        m_has_value = true;
  684|   310k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   310k|{
  392|   310k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   310k|        T(std::forward<Args>(args)...);
  394|   310k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5831|   310k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   930k|    {
  706|   930k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   930k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   930k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5835|   620k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   648k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   648k|    static_cast<    \
  |  |  929|   648k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   648k|    static_cast<    \
  |  |  929|   648k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   648k|    {
 3312|   648k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   274k|        : m_str(r.str)
 7980|   274k|    {
 7981|   274k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   338k|    {
 1598|   338k|        return has_value();
 1599|   338k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   987k|    {
  675|   987k|        return m_has_value;
  676|   987k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   310k|    {
 1673|   310k|        return &value();
 1674|   310k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   310k|    {
 1627|   310k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   310k|        return this->get_value();
 1629|   310k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   310k|    {
  641|   310k|        return *value_ptr();
  642|   310k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   310k|    {
 5708|   310k|        return ranges::begin(m_range);
 5709|   310k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   338k|    {
  631|   338k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 310k, False: 28.2k]
  ------------------
  632|   310k|            destroy_value();
  633|   310k|        }
  634|  28.2k|        else {
  635|  28.2k|            destroy_unexpected();
  636|  28.2k|        }
  637|   338k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   310k|    {
  696|   310k|        scn::detail::destroy_at(value_ptr());
  697|   310k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   310k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   310k|    else {
  404|   310k|        p->~T();
  405|   310k|    }
  406|   310k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  28.2k|    {
  700|  28.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  28.2k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8943|   137k|{
 8944|   137k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   137k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   137k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   137k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   137k|{
 8682|   137k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   137k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|   137k|{
 8617|   137k|#if !SCN_DISABLE_LOCALE
 8618|   137k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   137k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   137k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   137k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   137k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 124k]
  |  |  ------------------
  ------------------
 8625|  13.0k|        return unexpected(result.error());
 8626|  13.0k|    }
 8627|   124k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   137k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8982|  63.6k|{
 8983|  63.6k|    T value;
 8984|  63.6k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  63.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  63.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.17k, False: 61.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.17k|    }                                                  \
  |  |  |  | 3667|  63.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  61.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  61.4k|    static_cast<    \
  |  |  929|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  61.4k|    static_cast<    \
  |  |  929|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  63.6k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|  63.6k|{
 8695|  63.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|  63.6k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  63.6k|{
 8641|  63.6k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  63.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  63.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.17k, False: 61.4k]
  |  |  ------------------
  ------------------
 8645|  2.17k|        return unexpected(result.error());
 8646|  2.17k|    }
 8647|  61.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  63.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  61.4k|    {
 1663|  61.4k|        return std::move(value());
 1664|  61.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   117k|    {
 2724|   117k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   117k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   117k|    {
 2705|   117k|        return decay_copy(t.begin());
 2706|   117k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  35.2M|{
 1949|  35.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  35.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  35.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  10.1M|    {
 2781|  10.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  10.1M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  10.1M|    {
 2763|  10.1M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  10.1M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  4.08M|{
 5406|  4.08M|    detail::check_scan_arg_types<Args...>();
 5407|  4.08M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  4.08M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  5.08M|{
 5145|  5.08M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  5.08M|                  "Scan argument types must be default constructible");
 5147|  5.08M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  5.08M|                  "Scan argument types must be Destructible");
 5149|  5.08M|    static_assert(
 5150|  5.08M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  5.08M|        "Scan argument types must not be references");
 5152|  5.08M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  4.08M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  4.08M|    {
 5359|  4.08M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  4.08M|    {
 5370|  4.08M|        return {detail::make_arg<
 5371|  4.08M|            kind, Context,
 5372|  4.08M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  4.08M|                                 typename Context::char_type>::value>(args)...};
 5374|  4.08M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  4.08M|{
 5180|  4.08M|    return make_value<Context>(value).ref_value;
 5181|  4.08M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  5.08M|{
 5130|  5.08M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  5.08M|                                  needs_context_tag>) {
 5134|  5.08M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  5.08M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  5.08M|    {                                                                        \
 4969|  5.08M|        return val;                                                          \
 4970|  5.08M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  5.08M|{
 5099|  5.08M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  5.08M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  5.08M|    constexpr bool scannable_char =
 5103|  5.08M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  5.08M|    static_assert(scannable_char,
 5105|  5.08M|                  "Cannot scan an argument of an unsupported character "
 5106|  5.08M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  5.08M|    constexpr bool scannable_const =
 5109|  5.08M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  5.08M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  5.08M|    constexpr bool scannable_disabled =
 5113|  5.08M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  5.08M|    static_assert(scannable_disabled,
 5115|  5.08M|                  "Cannot scan an argument that has been disabled by "
 5116|  5.08M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  5.08M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  5.08M|    static_assert(
 5120|  5.08M|        scannable,
 5121|  5.08M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  5.08M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  5.08M|    return arg_value{arg};
 5125|  5.08M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  5.08M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  5.08M|    {
 4911|  5.08M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|  2.04M|{
 8601|  2.04M|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|  2.04M|    auto result = vscan_impl(buffer, format, args);
 8604|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 1.98M]
  |  |  ------------------
  ------------------
 8605|  52.1k|        return unexpected(result.error());
 8606|  52.1k|    }
 8607|  1.98M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|  2.04M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|  5.08M|{
 4729|  5.08M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  5.08M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  5.08M|                  "\n"
 4733|  5.08M|                  "Unsupported range type given as input to a scanning "
 4734|  5.08M|                  "function.\n"
 4735|  5.08M|                  "A range needs to have a character type (value type) "
 4736|  5.08M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  5.08M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  5.08M|                  "to be included.\n"
 4739|  5.08M|                  "See the scnlib documentation for more details.");
 4740|  5.08M|    static_assert(
 4741|  5.08M|        !std::is_same_v<T, custom_char_traits>,
 4742|  5.08M|        "\n"
 4743|  5.08M|        "Unsupported range type given as input to a scanning "
 4744|  5.08M|        "function.\n"
 4745|  5.08M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  5.08M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  5.08M|        "not supported.");
 4748|  5.08M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  5.08M|                  "\n"
 4750|  5.08M|                  "Unsupported range type given as input to a scanning "
 4751|  5.08M|                  "function.\n"
 4752|  5.08M|                  "file_marker_found cannot be used as an "
 4753|  5.08M|                  "source range type to scn::scan.\n"
 4754|  5.08M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  5.08M|                  "and do not provide an explicit source range, "
 4756|  5.08M|                  "or use scn::scan with a FILE* directly.");
 4757|  5.08M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  5.08M|                  "\n"
 4759|  5.08M|                  "Unsupported range type given as input to a scanning "
 4760|  5.08M|                  "function.\n"
 4761|  5.08M|                  "In order to be scannable, a range needs to satisfy "
 4762|  5.08M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  5.08M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  5.08M|                  "\n"
 4765|  5.08M|                  "Unsupported range type given as input to a scanning "
 4766|  5.08M|                  "function.\n"
 4767|  5.08M|                  "A range needs to model forward_range and have a valid "
 4768|  5.08M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  5.08M|                  "Examples of scannable ranges are std::string, "
 4770|  5.08M|                  "std::string_view, "
 4771|  5.08M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  5.08M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  5.08M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  5.08M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  5.08M|{
 4668|  5.08M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  5.08M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  5.08M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.08M|    {
 2855|  5.08M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.08M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.08M|    {
 2836|  5.08M|        return t.data();
 2837|  5.08M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|  5.08M|    {
 3229|  5.08M|        return detail::to_address(ranges::begin(derived()));
 3230|  5.08M|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  15.0M|{
  326|  15.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  15.0M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   510M|{
  304|   510M|    return p;
  305|   510M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  10.0M|    {
 2724|  10.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  10.0M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  10.0M|    {
 2705|  10.0M|        return decay_copy(t.begin());
 2706|  10.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   443M|    {
 3326|   443M|        return m_iterator;
 3327|   443M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  5.08M|    {
 3185|  5.08M|        return static_cast<const D&>(*this);
 3186|  5.08M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  5.08M|    {
 2930|  5.08M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  5.08M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  5.08M|    {
 2896|  5.08M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  5.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  10.0M|    {
 3342|  10.0M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  10.0M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   112k|        : base(unexpect, std::move(e.error())),
 1474|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   112k|    {
 1476|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   112k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   112k|          m_has_value(false)
  446|   112k|    {
  447|   112k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.08M|    {
 1177|  5.08M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  4.96M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  4.96M|                      ranges::iterator_t<SourceRange>>) {
 5935|  4.96M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  4.96M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  9.97M|    {
 2724|  9.97M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  9.97M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  9.97M|    {
 2705|  9.97M|        return decay_copy(t.begin());
 2706|  9.97M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  4.96M|{
 5920|  4.96M|    return ranges::end(source);
 5921|  4.96M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.96M|    {
 2781|  4.96M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.96M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.96M|    {
 2763|  4.96M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.96M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   420M|    {
 3330|   420M|        return m_sentinel;
 3331|   420M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  4.96M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.96M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.96M|    {
 1430|  4.96M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  4.96M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.96M|    {
  437|  4.96M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7984|  2.04M|    {
 7985|  2.04M|        return m_str;
 7986|  2.04M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  4.08M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  4.08M|    {
 5436|  4.08M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  4.08M|    {
 5389|  4.08M|        return m_argptrs;
 5390|  4.08M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  6.12M|        : m_desc(desc), m_builtin_values(data)
 5487|  6.12M|    {
 5488|  6.12M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  2.04M|{
 8830|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 1.98M]
  |  |  ------------------
  ------------------
 8831|  52.1k|        return unexpected(result.error());
 8832|  52.1k|    }
 8833|  1.98M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  2.04M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  5.08M|    {
 1598|  5.08M|        return has_value();
 1599|  5.08M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  10.1M|    {
  485|  10.1M|        return m_has_value;
  486|  10.1M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   112k|    {
 1604|   112k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   112k|        return this->get_unexpected().error();
 1606|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   112k|    {
  468|   112k|        return m_unexpected;
  469|   112k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  56.4k|        : base(unexpect, std::move(e.error())),
 1474|  56.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  56.4k|    {
 1476|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  56.4k|        : m_has_value(false)
  625|  56.4k|    {
  626|  56.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  56.4k|    {
  689|  56.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  56.4k|                                  std::forward<Args>(args)...);
  691|  56.4k|        m_has_value = false;
  692|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   112k|    {
  718|   112k|        return reinterpret_cast<unexpected<E>*>(
  719|   112k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   112k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.97M|    {
 1653|  3.97M|        return value();
 1654|  3.97M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  4.96M|    {
 1627|  4.96M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.96M|        return this->get_value();
 1629|  4.96M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.96M|    {
  451|  4.96M|        return m_value;
  452|  4.96M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  2.48M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  2.48M|    {
 5840|  2.48M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  4.96M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  4.96M|    static_cast<    \
  |  |  929|  4.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  4.96M|    {
 5691|  4.96M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  4.96M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  4.96M|    static_cast<    \
  |  |  929|  4.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  4.96M|    {
 5626|  4.96M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  2.48M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.48M|    {
 1430|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  2.48M|        : m_has_value(true)
  615|  2.48M|    {
  616|  2.48M|        construct(std::forward<Args>(args)...);
  617|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  2.48M|    {
  682|  2.48M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  2.48M|        m_has_value = true;
  684|  2.48M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  2.48M|{
  392|  2.48M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  2.48M|        T(std::forward<Args>(args)...);
  394|  2.48M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|  2.48M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  7.45M|    {
  706|  7.45M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  7.45M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  7.45M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  4.96M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  4.08M|    {
 5384|  4.08M|        return m_args;
 5385|  4.08M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  4.08M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   167M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   167M|    static_cast<    \
  |  |  929|   167M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   167M|    static_cast<    \
  |  |  929|   167M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   167M|    {
 3312|   167M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7705|  6.12M|{
 7706|  6.12M|    return s;
 7707|  6.12M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7677|  6.12M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  2.04M|        : m_str(r.str)
 7980|  2.04M|    {
 7981|  2.04M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  2.54M|    {
 1598|  2.54M|        return has_value();
 1599|  2.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  7.56M|    {
  675|  7.56M|        return m_has_value;
  676|  7.56M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  2.48M|    {
 1673|  2.48M|        return &value();
 1674|  2.48M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|  2.48M|    {
 1627|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.48M|        return this->get_value();
 1629|  2.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  2.48M|    {
  641|  2.48M|        return *value_ptr();
  642|  2.48M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  4.96M|    {
 5708|  4.96M|        return ranges::begin(m_range);
 5709|  4.96M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  2.54M|    {
  631|  2.54M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 2.48M, False: 56.4k]
  ------------------
  632|  2.48M|            destroy_value();
  633|  2.48M|        }
  634|  56.4k|        else {
  635|  56.4k|            destroy_unexpected();
  636|  56.4k|        }
  637|  2.54M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  2.48M|    {
  696|  2.48M|        scn::detail::destroy_at(value_ptr());
  697|  2.48M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  2.48M|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  2.48M|    else {
  404|  2.48M|        p->~T();
  405|  2.48M|    }
  406|  2.48M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  56.4k|    {
  700|  56.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  56.4k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|  2.04M|{
 8617|  2.04M|#if !SCN_DISABLE_LOCALE
 8618|  2.04M|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|  2.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|  2.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|  2.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 1.98M]
  |  |  ------------------
  ------------------
 8625|  52.1k|        return unexpected(result.error());
 8626|  52.1k|    }
 8627|  1.98M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|  2.04M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  1.00M|{
 5165|  1.00M|    check_scan_arg_types<T>();
 5166|       |
 5167|  1.00M|    basic_scan_arg<Context> arg;
 5168|  1.00M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  1.00M|    arg.m_value = make_value<Context>(value);
 5170|  1.00M|    return arg;
 5171|  1.00M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  7.62M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  1.00M|{
 8641|  1.00M|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  1.00M|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 993k]
  |  |  ------------------
  ------------------
 8645|  8.69k|        return unexpected(result.error());
 8646|  8.69k|    }
 8647|   993k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   993k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  1.00M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   993k|    {
 1663|   993k|        return std::move(value());
 1664|   993k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|  2.04M|{
 5406|  2.04M|    detail::check_scan_arg_types<Args...>();
 5407|  2.04M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  2.04M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|  2.54M|{
 5145|  2.54M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  2.54M|                  "Scan argument types must be default constructible");
 5147|  2.54M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  2.54M|                  "Scan argument types must be Destructible");
 5149|  2.54M|    static_assert(
 5150|  2.54M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  2.54M|        "Scan argument types must not be references");
 5152|  2.54M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|  2.04M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  2.04M|    {
 5359|  2.04M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  2.04M|    {
 5370|  2.04M|        return {detail::make_arg<
 5371|  2.04M|            kind, Context,
 5372|  2.04M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  2.04M|                                 typename Context::char_type>::value>(args)...};
 5374|  2.04M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|  2.04M|{
 5180|  2.04M|    return make_value<Context>(value).ref_value;
 5181|  2.04M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|  2.54M|{
 5130|  2.54M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  2.54M|                                  needs_context_tag>) {
 5134|  2.54M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  2.54M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|  2.54M|    {                                                                        \
 4969|  2.54M|        return val;                                                          \
 4970|  2.54M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|  2.54M|{
 5099|  2.54M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  2.54M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  2.54M|    constexpr bool scannable_char =
 5103|  2.54M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  2.54M|    static_assert(scannable_char,
 5105|  2.54M|                  "Cannot scan an argument of an unsupported character "
 5106|  2.54M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  2.54M|    constexpr bool scannable_const =
 5109|  2.54M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  2.54M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  2.54M|    constexpr bool scannable_disabled =
 5113|  2.54M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  2.54M|    static_assert(scannable_disabled,
 5115|  2.54M|                  "Cannot scan an argument that has been disabled by "
 5116|  2.54M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  2.54M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  2.54M|    static_assert(
 5120|  2.54M|        scannable,
 5121|  2.54M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  2.54M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  2.54M|    return arg_value{arg};
 5125|  2.54M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|  2.54M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  2.54M|    {
 4911|  2.54M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7984|  2.04M|    {
 7985|  2.04M|        return m_str;
 7986|  2.04M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  2.04M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  2.04M|    {
 5436|  2.04M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|  2.04M|    {
 5389|  2.04M|        return m_argptrs;
 5390|  2.04M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|  2.04M|{
 8830|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 1.98M]
  |  |  ------------------
  ------------------
 8831|  52.1k|        return unexpected(result.error());
 8832|  52.1k|    }
 8833|  1.98M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  2.04M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  56.4k|        : base(unexpect, std::move(e.error())),
 1474|  56.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  56.4k|    {
 1476|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  56.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  56.4k|          m_has_value(false)
  446|  56.4k|    {
  447|  56.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|  2.48M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  2.48M|    {
 5840|  2.48M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|  2.48M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  2.48M|    {
 5626|  2.48M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  2.48M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.48M|    {
 1430|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  2.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.48M|    {
  437|  2.48M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|  2.04M|    {
 5384|  2.04M|        return m_args;
 5385|  2.04M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  2.04M|        : m_str(r.str)
 7980|  2.04M|    {
 7981|  2.04M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  2.54M|    {
 1598|  2.54M|        return has_value();
 1599|  2.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.02M|    {
  485|  5.02M|        return m_has_value;
  486|  5.02M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  2.48M|    {
 1673|  2.48M|        return &value();
 1674|  2.48M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|  2.48M|    {
 1627|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.48M|        return this->get_value();
 1629|  2.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.48M|    {
  451|  2.48M|        return m_value;
  452|  2.48M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   501k|{
 5165|   501k|    check_scan_arg_types<T>();
 5166|       |
 5167|   501k|    basic_scan_arg<Context> arg;
 5168|   501k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   501k|    arg.m_value = make_value<Context>(value);
 5170|   501k|    return arg;
 5171|   501k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  56.4k|    {
 2724|  56.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  56.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  56.4k|    {
 2705|  56.4k|        return decay_copy(t.begin());
 2706|  56.4k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   207M|{
 1949|   207M|    return SCN_FWD(t);
  ------------------
  |  |  930|   207M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   207M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.08M|    {
 2781|  5.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.08M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.08M|    {
 2763|  5.08M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.08M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|  1.02M|{
 8601|  1.02M|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|  1.02M|    auto result = vscan_impl(buffer, format, args);
 8604|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 993k]
  |  |  ------------------
  ------------------
 8605|  26.0k|        return unexpected(result.error());
 8606|  26.0k|    }
 8607|   993k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   993k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|  1.02M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|  2.54M|{
 4729|  2.54M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  2.54M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  2.54M|                  "\n"
 4733|  2.54M|                  "Unsupported range type given as input to a scanning "
 4734|  2.54M|                  "function.\n"
 4735|  2.54M|                  "A range needs to have a character type (value type) "
 4736|  2.54M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  2.54M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  2.54M|                  "to be included.\n"
 4739|  2.54M|                  "See the scnlib documentation for more details.");
 4740|  2.54M|    static_assert(
 4741|  2.54M|        !std::is_same_v<T, custom_char_traits>,
 4742|  2.54M|        "\n"
 4743|  2.54M|        "Unsupported range type given as input to a scanning "
 4744|  2.54M|        "function.\n"
 4745|  2.54M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  2.54M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  2.54M|        "not supported.");
 4748|  2.54M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  2.54M|                  "\n"
 4750|  2.54M|                  "Unsupported range type given as input to a scanning "
 4751|  2.54M|                  "function.\n"
 4752|  2.54M|                  "file_marker_found cannot be used as an "
 4753|  2.54M|                  "source range type to scn::scan.\n"
 4754|  2.54M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  2.54M|                  "and do not provide an explicit source range, "
 4756|  2.54M|                  "or use scn::scan with a FILE* directly.");
 4757|  2.54M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  2.54M|                  "\n"
 4759|  2.54M|                  "Unsupported range type given as input to a scanning "
 4760|  2.54M|                  "function.\n"
 4761|  2.54M|                  "In order to be scannable, a range needs to satisfy "
 4762|  2.54M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  2.54M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  2.54M|                  "\n"
 4765|  2.54M|                  "Unsupported range type given as input to a scanning "
 4766|  2.54M|                  "function.\n"
 4767|  2.54M|                  "A range needs to model forward_range and have a valid "
 4768|  2.54M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  2.54M|                  "Examples of scannable ranges are std::string, "
 4770|  2.54M|                  "std::string_view, "
 4771|  2.54M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  2.54M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  2.54M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  2.54M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  2.54M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  2.54M|    else {
 4714|  2.54M|        return make_forward_scan_buffer(r);
 4715|  2.54M|    }
 4716|  2.54M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|  2.54M|{
 4533|  2.54M|    return basic_scan_forward_buffer_impl(range);
 4534|  2.54M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  2.54M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  2.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  2.54M|          m_cursor(ranges::begin(*m_range))
 4419|  2.54M|    {
 4420|  2.54M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|  2.54M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  2.54M|    {
 4391|  2.54M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|  2.54M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  2.54M|    {
 4159|  2.54M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|  2.54M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.02M|    {
 2724|  5.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.02M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.02M|    {
 2705|  5.02M|        return decay_copy(t.begin());
 2706|  5.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  7.51M|    {
 3326|  7.51M|        return m_iterator;
 3327|  7.51M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  64.1M|    {
 4424|  64.1M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 46.6k, False: 64.1M]
  ------------------
 4425|  46.6k|            return false;
 4426|  46.6k|        }
 4427|  64.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  64.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  64.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  64.1M|        }
 4430|  64.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 61.6M, False: 2.51M]
  ------------------
 4431|  61.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  61.6M|                                          this->m_current_view.begin(),
 4433|  61.6M|                                          this->m_current_view.end());
 4434|  61.6M|        }
 4435|  64.1M|        m_latest = *m_cursor;
 4436|  64.1M|        ++m_cursor;
 4437|  64.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  64.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  64.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  64.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  64.1M|        }
 4441|  64.1M|        return true;
 4442|  64.1M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   192M|    {
 2781|   192M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   192M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   192M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   192M|    {
 2763|   192M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   192M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   192M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   194M|    {
 3330|   194M|        return m_sentinel;
 3331|   194M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|  2.54M|    {
 4079|  2.54M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  2.54M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  56.4k|        : base(unexpect, std::move(e.error())),
 1474|  56.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  56.4k|    {
 1476|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  56.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  56.4k|          m_has_value(false)
  446|  56.4k|    {
  447|  56.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  2.48M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  2.48M|                      ranges::iterator_t<SourceRange>>) {
 5935|  2.48M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  2.48M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.48M|    {
 2724|  2.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.48M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.48M|    {
 2705|  2.48M|        return decay_copy(t.begin());
 2706|  2.48M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|  2.48M|{
 5920|  2.48M|    return ranges::end(source);
 5921|  2.48M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.48M|    {
 2781|  2.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.48M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.48M|    {
 2763|  2.48M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.48M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  2.48M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.48M|    {
 1430|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  2.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.48M|    {
  437|  2.48M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7984|  2.04M|    {
 7985|  2.04M|        return m_str;
 7986|  2.04M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8829|  2.04M|{
 8830|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 1.98M]
  |  |  ------------------
  ------------------
 8831|  52.1k|        return unexpected(result.error());
 8832|  52.1k|    }
 8833|  1.98M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  2.04M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  2.54M|    {
 1598|  2.54M|        return has_value();
 1599|  2.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.08M|    {
  485|  5.08M|        return m_has_value;
  486|  5.08M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  56.4k|    {
 1604|  56.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  56.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  56.4k|        return this->get_unexpected().error();
 1606|  56.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  56.4k|    {
  468|  56.4k|        return m_unexpected;
  469|  56.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  56.4k|        : base(unexpect, std::move(e.error())),
 1474|  56.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  56.4k|    {
 1476|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  56.4k|        : m_has_value(false)
  625|  56.4k|    {
  626|  56.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  56.4k|    {
  689|  56.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  56.4k|                                  std::forward<Args>(args)...);
  691|  56.4k|        m_has_value = false;
  692|  56.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   112k|    {
  718|   112k|        return reinterpret_cast<unexpected<E>*>(
  719|   112k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   112k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.98M|    {
 1653|  1.98M|        return value();
 1654|  1.98M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  2.48M|    {
 1627|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.48M|        return this->get_value();
 1629|  2.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.48M|    {
  451|  2.48M|        return m_value;
  452|  2.48M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|  2.48M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  2.48M|    {
 5840|  2.48M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|  2.48M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  2.48M|    {
 5691|  2.48M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|  2.48M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.48M|    {
 1430|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|  2.48M|        : m_has_value(true)
  615|  2.48M|    {
  616|  2.48M|        construct(std::forward<Args>(args)...);
  617|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  2.48M|    {
  682|  2.48M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  2.48M|        m_has_value = true;
  684|  2.48M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  2.48M|{
  392|  2.48M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  2.48M|        T(std::forward<Args>(args)...);
  394|  2.48M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5831|  2.48M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  7.45M|    {
  706|  7.45M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  7.45M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  7.45M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5835|  4.96M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  5.02M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.02M|    static_cast<    \
  |  |  929|  5.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.02M|    static_cast<    \
  |  |  929|  5.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.02M|    {
 3312|  5.02M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  2.04M|        : m_str(r.str)
 7980|  2.04M|    {
 7981|  2.04M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  2.54M|    {
 1598|  2.54M|        return has_value();
 1599|  2.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  7.56M|    {
  675|  7.56M|        return m_has_value;
  676|  7.56M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  2.48M|    {
 1673|  2.48M|        return &value();
 1674|  2.48M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|  2.48M|    {
 1627|  2.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.48M|        return this->get_value();
 1629|  2.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  2.48M|    {
  641|  2.48M|        return *value_ptr();
  642|  2.48M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|  2.48M|    {
 5708|  2.48M|        return ranges::begin(m_range);
 5709|  2.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  2.54M|    {
  631|  2.54M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 2.48M, False: 56.4k]
  ------------------
  632|  2.48M|            destroy_value();
  633|  2.48M|        }
  634|  56.4k|        else {
  635|  56.4k|            destroy_unexpected();
  636|  56.4k|        }
  637|  2.54M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  2.48M|    {
  696|  2.48M|        scn::detail::destroy_at(value_ptr());
  697|  2.48M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  2.48M|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  2.48M|    else {
  404|  2.48M|        p->~T();
  405|  2.48M|    }
  406|  2.48M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  56.4k|    {
  700|  56.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  56.4k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|  1.02M|{
 8617|  1.02M|#if !SCN_DISABLE_LOCALE
 8618|  1.02M|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|  1.02M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|  1.02M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|  1.02M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 993k]
  |  |  ------------------
  ------------------
 8625|  26.0k|        return unexpected(result.error());
 8626|  26.0k|    }
 8627|   993k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   993k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|  1.02M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   501k|{
 8641|   501k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   501k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   501k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 496k]
  |  |  ------------------
  ------------------
 8645|  4.34k|        return unexpected(result.error());
 8646|  4.34k|    }
 8647|   496k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   501k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   496k|    {
 1663|   496k|        return std::move(value());
 1664|   496k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   332k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   332k|    {
 3564|   332k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   332k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   332k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  26.4M|    {
 3570|  26.4M|        return m_code == good;
 3571|  26.4M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   117k|    {
 3581|   117k|        return m_code;
 3582|   117k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  13.5M|    {
 3326|  13.5M|        return m_iterator;
 3327|  13.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   214M|    {
 3326|   214M|        return m_iterator;
 3327|   214M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  3.50M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6291|  78.2k|    {
 6292|  78.2k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6292:13): [True: 0, False: 78.2k]
  |  Branch (6292:39): [True: 0, False: 0]
  ------------------
 6293|       |            // clang-format off
 6294|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|      0|        }
 6297|       |
 6298|  78.2k|        m_specs.width = width;
 6299|  78.2k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6312|  3.43M|    {
 6313|  3.43M|        m_specs.type = type;
 6314|  3.43M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6329|  91.3k|    {
 6330|  91.3k|        const auto begin_value = static_cast<unsigned>(begin);
 6331|  91.3k|        const auto end_value = static_cast<unsigned>(end);
 6332|  91.3k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  91.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6333|       |
 6334|  91.3k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  91.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 91.3k, False: 0]
  |  |  ------------------
  ------------------
 6335|       |            // No need to bit-twiddle with a mask, because with the
 6336|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6337|  91.3k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  91.3k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6338|  2.46M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6338:40): [True: 2.37M, False: 91.3k]
  ------------------
 6339|  2.37M|                m_specs.charset_literals[v / 8] |=
 6340|  2.37M|                    static_cast<unsigned char>(1ul << (v % 8));
 6341|  2.37M|            }
 6342|  91.3k|        }
 6343|      0|        else {
 6344|      0|            m_specs.charset_has_nonascii = true;
 6345|      0|        }
 6346|  91.3k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6374|  78.2k|    {
 6375|  78.2k|        SCN_UNLIKELY_ATTR
 6376|  78.2k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6377|  78.2k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6385|  3.64M|    {
 6386|  3.64M|        return static_cast<bool>(m_error);
 6387|  3.64M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   117k|{
 3605|   117k|    return a.code() == b;
 3606|   117k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   117k|{
 3609|   117k|    return !(a == b);
 3610|   117k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|   196M|{
 4043|       |    // Pattern_White_Space property
 4044|   196M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 53.9M, False: 142M]
  |  Branch (4044:27): [True: 7.53M, False: 46.3M]
  ------------------
 4045|   196M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 7.97M, False: 181M]
  ------------------
 4046|   196M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 1.33M, False: 179M]
  ------------------
 4047|   196M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 527k, False: 179M]
  ------------------
 4048|   196M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 546k, False: 178M]
  ------------------
 4049|   196M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 300k, False: 178M]
  ------------------
 4050|   196M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 270, False: 178M]
  ------------------
 4051|   196M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7072|  39.1k|{
 7073|  39.1k|    switch (type) {
 7074|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 39.1k]
  ------------------
 7075|      0|            return arg_type_category::none;
 7076|       |
 7077|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 39.1k]
  ------------------
 7078|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 39.1k]
  ------------------
 7079|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 39.1k]
  ------------------
 7080|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 39.1k]
  ------------------
 7081|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 39.1k]
  ------------------
 7082|      0|            return arg_type_category::integer;
 7083|       |
 7084|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7084:9): [True: 0, False: 39.1k]
  ------------------
 7085|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 39.1k]
  ------------------
 7086|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 39.1k]
  ------------------
 7087|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 39.1k]
  ------------------
 7088|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 39.1k]
  ------------------
 7089|      0|            return arg_type_category::unsigned_integer;
 7090|       |
 7091|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 39.1k]
  ------------------
 7092|      0|            return arg_type_category::pointer;
 7093|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 39.1k]
  ------------------
 7094|      0|            return arg_type_category::boolean;
 7095|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 39.1k]
  ------------------
 7096|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 39.1k]
  ------------------
 7097|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 39.1k]
  ------------------
 7098|      0|            return arg_type_category::character;
 7099|       |
 7100|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7100:9): [True: 0, False: 39.1k]
  ------------------
 7101|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 39.1k]
  ------------------
 7102|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 39.1k]
  ------------------
 7103|      0|            return arg_type_category::floating;
 7104|       |
 7105|  4.34k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7105:9): [True: 4.34k, False: 34.7k]
  ------------------
 7106|  13.0k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7106:9): [True: 8.69k, False: 30.4k]
  ------------------
 7107|  21.7k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7107:9): [True: 8.69k, False: 30.4k]
  ------------------
 7108|  39.1k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7108:9): [True: 17.3k, False: 21.7k]
  ------------------
 7109|  39.1k|            return arg_type_category::string;
 7110|       |
 7111|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7111:9): [True: 0, False: 39.1k]
  ------------------
 7112|      0|            return arg_type_category::custom;
 7113|       |
 7114|      0|            SCN_CLANG_PUSH
 7115|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7116|      0|        default:
  ------------------
  |  Branch (7116:9): [True: 0, False: 39.1k]
  ------------------
 7117|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7118|  39.1k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7119|  39.1k|            SCN_CLANG_POP
 7120|  39.1k|    }
 7121|       |
 7122|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7123|  39.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  39.1k|{
 3650|  39.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  39.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  48.6k|{
 3650|  48.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  48.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  24.8k|{
 3650|  24.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  24.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  24.8k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7214|  3.43M|{
 7215|  3.43M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7215:9): [True: 0, False: 3.43M]
  ------------------
 7216|  3.43M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7216:9): [True: 3.34M, False: 84.7k]
  ------------------
 7217|  3.43M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7217:9): [True: 45.6k, False: 39.1k]
  ------------------
 7218|  3.43M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7218:9): [True: 0, False: 39.1k]
  ------------------
 7219|  3.43M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7219:9): [True: 0, False: 39.1k]
  ------------------
 7220|  3.39M|        return;
 7221|  3.39M|    }
 7222|  39.1k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7222:9): [True: 39.1k, False: 0]
  ------------------
 7223|  39.1k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1k, False: 0]
  |  |  ------------------
  ------------------
 7224|       |            // clang-format off
 7225|  39.1k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7226|       |            // clang-format on
 7227|  39.1k|        }
 7228|      0|        return;
 7229|  39.1k|    }
 7230|      0|    SCN_UNLIKELY_ATTR
 7231|      0|    handler.on_error("Invalid type specifier for string");
 7232|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  73.7M|    {
 4203|  73.7M|        assert(m_begin);
 4204|  73.7M|        return m_end == nullptr;
 4205|  73.7M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   309k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   309k|    else {
 3716|   309k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   309k|    }
 3718|   309k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  1.59M|    {
 4220|  1.59M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.59M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.59M|        return parent()->get_segment_starting_at(position());
 4226|  1.59M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  43.0M|    {
 4214|  43.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  43.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  43.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  43.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  1.59M|    {
 4109|  1.59M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 914k, False: 678k]
  |  |  ------------------
  ------------------
 4110|  1.59M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   914k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   914k|        }
 4113|   678k|        const auto start = pos - m_putback_buffer.size();
 4114|   678k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   678k|        return m_current_view.substr(start);
 4116|   678k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  1.79M|    {
 4198|  1.79M|        return m_position;
 4199|  1.79M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  1.01M|    {
 4131|  1.01M|        return m_is_contiguous;
 4132|  1.01M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|  1.16G|    {
 4203|  1.16G|        assert(m_begin);
 4204|  1.16G|        return m_end == nullptr;
 4205|  1.16G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  2.49M|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  2.49M|    else {
 3716|  2.49M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  2.49M|    }
 3718|  2.49M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  7.51M|    {
 4220|  7.51M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 7.51M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  7.51M|        return parent()->get_segment_starting_at(position());
 4226|  7.51M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|   681M|    {
 4214|   681M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   681M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   681M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   681M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   681M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  7.51M|    {
 4109|  7.51M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.98M, False: 2.53M]
  |  |  ------------------
  ------------------
 4110|  7.51M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  4.98M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  4.98M|        }
 4113|  2.53M|        const auto start = pos - m_putback_buffer.size();
 4114|  2.53M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  2.53M|        return m_current_view.substr(start);
 4116|  2.53M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  9.02M|    {
 4198|  9.02M|        return m_position;
 4199|  9.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  7.62M|    {
 4131|  7.62M|        return m_is_contiguous;
 4132|  7.62M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.56M|    {
 3180|  1.56M|        return static_cast<D&>(*this);
 3181|  1.56M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.56M|    {
 3221|  1.56M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.56M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  5.00M|    {
 3180|  5.00M|        return static_cast<D&>(*this);
 3181|  5.00M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  5.00M|    {
 3221|  5.00M|        return detail::to_address(ranges::begin(derived()));
 3222|  5.00M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8178|   138k|    {
 8179|   138k|        return ranges::subrange{begin(), end()};
 8180|   138k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8162|   412k|    {
 8163|   412k|        return m_current;
 8164|   412k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8170|   138k|    {
 8171|   138k|        return ranges::default_sentinel;
 8172|   138k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  4.97M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.97M|    static_cast<    \
  |  |  929|  4.97M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.97M|    static_cast<    \
  |  |  929|  4.97M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  4.97M|    {
 3312|  4.97M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8000|  8.49M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   319k|    {
 1837|   319k|        return detail::transform_error_impl(std::move(*this),
 1838|   319k|                                            std::forward<F>(f));
 1839|   319k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   319k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   319k|    else {
 1333|   319k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   319k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   319k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 315k, False: 4.13k]
  |  |  ------------------
  ------------------
 1335|   319k|                   ? result(*std::forward<Exp>(exp))
 1336|   319k|                   : result(unexpect,
 1337|  4.13k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.13k|                                           std::forward<Exp>(exp).error()));
 1339|   319k|    }
 1340|   319k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   638k|    {
  485|   638k|        return m_has_value;
  486|   638k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   315k|    {
 1663|   315k|        return std::move(value());
 1664|   315k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   315k|    {
 1627|   315k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   315k|        return this->get_value();
 1629|   315k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   315k|    {
  451|   315k|        return m_value;
  452|   315k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   751k|        : base(std::in_place, std::forward<U>(val)),
 1428|   751k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   751k|    {
 1430|   751k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   751k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   751k|    {
  437|   751k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   788k|    {
 1177|   788k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  24.3k|{
 1211|  24.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  24.3k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.13k|    {
 1614|  4.13k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.13k|        return std::move(this->get_unexpected().error());
 1616|  4.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.13k|    {
  468|  4.13k|        return m_unexpected;
  469|  4.13k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  48.6k|    {
  361|  48.6k|        return m_unexpected;
  362|  48.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  4.13k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  4.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  4.13k|    {
 1486|  4.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  34.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  34.9k|          m_has_value(false)
  446|  34.9k|    {
  447|  34.9k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8178|  1.02M|    {
 8179|  1.02M|        return ranges::subrange{begin(), end()};
 8180|  1.02M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8162|  3.05M|    {
 8163|  3.05M|        return m_current;
 8164|  3.05M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8170|  1.02M|    {
 8171|  1.02M|        return ranges::default_sentinel;
 8172|  1.02M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  76.1M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  76.1M|    static_cast<    \
  |  |  929|  76.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  76.1M|    static_cast<    \
  |  |  929|  76.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  76.1M|    {
 3312|  76.1M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.50M|    {
 1837|  2.50M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.50M|                                            std::forward<F>(f));
 1839|  2.50M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.50M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.50M|    else {
 1333|  2.50M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.50M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.50M, False: 4.64k]
  |  |  ------------------
  ------------------
 1335|  2.50M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.50M|                   : result(unexpect,
 1337|  4.64k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.64k|                                           std::forward<Exp>(exp).error()));
 1339|  2.50M|    }
 1340|  2.50M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.01M|    {
  485|  5.01M|        return m_has_value;
  486|  5.01M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.50M|    {
 1663|  2.50M|        return std::move(value());
 1664|  2.50M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.50M|    {
 1627|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.50M|        return this->get_value();
 1629|  2.50M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.50M|    {
  451|  2.50M|        return m_value;
  452|  2.50M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  5.98M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.98M|    {
 1430|  5.98M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.98M|    {
  437|  5.98M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.04M|    {
 1177|  6.04M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.64k|    {
 1614|  4.64k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.64k|        return std::move(this->get_unexpected().error());
 1616|  4.64k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.64k|    {
  468|  4.64k|        return m_unexpected;
  469|  4.64k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  4.64k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  4.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  4.64k|    {
 1486|  4.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  67.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  67.9k|          m_has_value(false)
  446|  67.9k|    {
  447|  67.9k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   112k|        : m_unexpected(std::forward<Err>(e))
  346|   112k|    {
  347|   112k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   112k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  62.6k|        : base(unexpect, std::move(e.error())),
 1474|  62.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  62.6k|    {
 1476|  62.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  68.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  68.9k|          m_has_value(false)
  446|  68.9k|    {
  447|  68.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.30M|    {
 1177|  1.30M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  1.23M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.23M|    {
 1430|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.23M|    {
  437|  1.23M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  1.30M|    {
 1598|  1.30M|        return has_value();
 1599|  1.30M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  2.61M|    {
  485|  2.61M|        return m_has_value;
  486|  2.61M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  68.9k|    {
 1604|  68.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  68.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  68.9k|        return this->get_unexpected().error();
 1606|  68.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  68.9k|    {
  468|  68.9k|        return m_unexpected;
  469|  68.9k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.02M|    {
 1663|  1.02M|        return std::move(value());
 1664|  1.02M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  1.23M|    {
 1627|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.23M|        return this->get_value();
 1629|  1.23M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.23M|    {
  451|  1.23M|        return m_value;
  452|  1.23M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   126k|        : base(unexpect, std::move(e.error())),
 1474|   126k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   126k|    {
 1476|   126k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   135k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   135k|          m_has_value(false)
  446|   135k|    {
  447|   135k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.0M|    {
 1177|  12.0M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  11.9M|        : base(std::in_place, std::forward<U>(val)),
 1428|  11.9M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  11.9M|    {
 1430|  11.9M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  11.9M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  11.9M|    {
  437|  11.9M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  12.0M|    {
 1598|  12.0M|        return has_value();
 1599|  12.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  24.1M|    {
  485|  24.1M|        return m_has_value;
  486|  24.1M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   135k|    {
 1604|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   135k|        return this->get_unexpected().error();
 1606|   135k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   135k|    {
  468|   135k|        return m_unexpected;
  469|   135k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  9.97M|    {
 1663|  9.97M|        return std::move(value());
 1664|  9.97M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  11.9M|    {
 1627|  11.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.9M|        return this->get_value();
 1629|  11.9M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  11.9M|    {
  451|  11.9M|        return m_value;
  452|  11.9M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   526k|    {
 1837|   526k|        return detail::transform_error_impl(std::move(*this),
 1838|   526k|                                            std::forward<F>(f));
 1839|   526k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   526k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   526k|    else {
 1333|   526k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   526k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   526k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 520k, False: 6.27k]
  |  |  ------------------
  ------------------
 1335|   526k|                   ? result(*std::forward<Exp>(exp))
 1336|   526k|                   : result(unexpect,
 1337|  6.27k|                            trivial_invoke(std::forward<F>(f),
 1338|  6.27k|                                           std::forward<Exp>(exp).error()));
 1339|   526k|    }
 1340|   526k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   520k|    {
 1663|   520k|        return std::move(value());
 1664|   520k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   520k|    {
 1627|   520k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   520k|        return this->get_value();
 1629|   520k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   520k|    {
  451|   520k|        return m_value;
  452|   520k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  6.27k|    {
 1614|  6.27k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  6.27k|        return std::move(this->get_unexpected().error());
 1616|  6.27k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  6.27k|    {
  468|  6.27k|        return m_unexpected;
  469|  6.27k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  6.27k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  6.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  6.27k|    {
 1486|  6.27k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  19.3M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  30.8k|        : base(unexpect, std::move(e.error())),
 1474|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.8k|    {
 1476|  30.8k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  3.89M|    {
 4289|  3.89M|        return x.is_at_end();
 4290|  3.89M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  7.95M|    {
 4333|  7.95M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 7.95M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  7.95M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 7.95M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  7.95M|        return !read_at_position();
 4340|  7.95M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  21.8M|    {
 4313|  21.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  21.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  21.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 21.8M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  21.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  21.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.7M, False: 4.09M]
  |  |  ------------------
  ------------------
 4320|  17.7M|            return true;
 4321|  17.7M|        }
 4322|       |
 4323|  8.16M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 4.09M, False: 4.06M]
  ------------------
 4324|  4.09M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 34.7k, False: 4.06M]
  ------------------
 4325|  34.7k|                return false;
 4326|  34.7k|            }
 4327|  4.09M|        }
 4328|  4.06M|        return true;
 4329|  4.09M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  30.0M|    {
 4089|  30.0M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  30.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  7.30M|    {
 4248|  7.30M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  7.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 7.30M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  7.30M|        auto res = read_at_position();
 4257|  7.30M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  7.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  7.30M|        return parent()->get_character_at(m_position);
 4259|  7.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  7.30M|    {
 4120|  7.30M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.96M, False: 3.33M]
  |  |  ------------------
  ------------------
 4121|  7.30M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  3.96M|            return m_putback_buffer[pos];
 4123|  3.96M|        }
 4124|  3.33M|        const auto start = pos - m_putback_buffer.size();
 4125|  3.33M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  3.33M|        return m_current_view[start];
 4127|  3.33M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   315k|        : base(std::in_place, std::forward<U>(val)),
 1428|   315k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   315k|    {
 1430|   315k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   315k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   315k|    {
  437|   315k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   319k|    {
 1177|   319k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  4.13k|        : base(unexpect, std::move(e.error())),
 1474|  4.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.13k|    {
 1476|  4.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  4.13k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.13k|          m_has_value(false)
  446|  4.13k|    {
  447|  4.13k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  24.3k|        : m_unexpected(std::forward<Args>(args)...)
  355|  24.3k|    {
  356|  24.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  24.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  2.78M|    {
 4283|  2.78M|        return !(lhs == rhs);
 4284|  2.78M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  2.79M|    {
 4278|  2.79M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 2.79M, False: 0]
  |  Branch (4278:46): [True: 457k, False: 2.33M]
  ------------------
 4279|  2.79M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  6.58M|    {
 4234|  6.58M|        ++m_position;
 4235|  6.58M|        (void)read_at_position();
 4236|  6.58M|        return *this;
 4237|  6.58M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  24.3k|        : m_unexpected(std::forward<Err>(e))
  346|  24.3k|    {
  347|  24.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  24.3k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.79k|        : base(unexpect, std::move(e.error())),
 1474|  1.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.79k|    {
 1476|  1.79k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.79k|          m_has_value(false)
  446|  1.79k|    {
  447|  1.79k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   259k|    {
 1177|   259k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   257k|        : base(std::in_place, std::forward<U>(val)),
 1428|   257k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   257k|    {
 1430|   257k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   257k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   257k|    {
  437|   257k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   259k|    {
 1598|   259k|        return has_value();
 1599|   259k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   518k|    {
  485|   518k|        return m_has_value;
  486|   518k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.79k|    {
 1604|  1.79k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.79k|        return this->get_unexpected().error();
 1606|  1.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.79k|    {
  468|  1.79k|        return m_unexpected;
  469|  1.79k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   257k|    {
 1663|   257k|        return std::move(value());
 1664|   257k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   257k|    {
 1627|   257k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   257k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   257k|        return this->get_value();
 1629|   257k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   257k|    {
  451|   257k|        return m_value;
  452|   257k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  12.1M|    {
 3330|  12.1M|        return m_sentinel;
 3331|  12.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   331k|    {
 3326|   331k|        return m_iterator;
 3327|   331k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   331k|    {
 3330|   331k|        return m_sentinel;
 3331|   331k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   788k|    {
 1598|   788k|        return has_value();
 1599|   788k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.57M|    {
  485|  1.57M|        return m_has_value;
  486|  1.57M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  34.9k|    {
 1604|  34.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  34.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  34.9k|        return this->get_unexpected().error();
 1606|  34.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  34.9k|    {
  468|  34.9k|        return m_unexpected;
  469|  34.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   625k|    {
 1663|   625k|        return std::move(value());
 1664|   625k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   753k|    {
 1627|   753k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   753k|        return this->get_value();
 1629|   753k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   753k|    {
  451|   753k|        return m_value;
  452|   753k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   316k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   316k|    static_cast<    \
  |  |  929|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   316k|    static_cast<    \
  |  |  929|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   316k|    {
 3312|   316k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  4.06M|    {
 4300|  4.06M|        return !x.is_at_end();
 4301|  4.06M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  6.27k|        : base(unexpect, std::move(e.error())),
 1474|  6.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.27k|    {
 1476|  6.27k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  6.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.27k|          m_has_value(false)
  446|  6.27k|    {
  447|  6.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   526k|    {
 1177|   526k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   520k|        : base(std::in_place, std::forward<U>(val)),
 1428|   520k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   520k|    {
 1430|   520k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   520k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   520k|    {
  437|   520k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.50k|        : base(unexpect, std::move(e.error())),
 1474|  2.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.50k|    {
 1476|  2.50k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.50k|          m_has_value(false)
  446|  2.50k|    {
  447|  2.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   427k|    {
 1177|   427k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   424k|        : base(std::in_place, std::forward<U>(val)),
 1428|   424k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   424k|    {
 1430|   424k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   424k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   424k|    {
  437|   424k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   427k|    {
 1598|   427k|        return has_value();
 1599|   427k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   854k|    {
  485|   854k|        return m_has_value;
  486|   854k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  2.50k|    {
 1604|  2.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.50k|        return this->get_unexpected().error();
 1606|  2.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.50k|    {
  468|  2.50k|        return m_unexpected;
  469|  2.50k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   424k|    {
 1663|   424k|        return std::move(value());
 1664|   424k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   424k|    {
 1627|   424k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   424k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   424k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   424k|        return this->get_value();
 1629|   424k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   424k|    {
  451|   424k|        return m_value;
  452|   424k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.56M|    {
 2855|  1.56M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.56M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.56M|    {
 2836|  1.56M|        return t.data();
 2837|  1.56M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   254k|        : base(unexpect, std::move(e.error())),
 1474|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   254k|    {
 1476|   254k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   254k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   254k|          m_has_value(false)
  446|   254k|    {
  447|   254k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.52M|    {
 1177|  8.52M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  8.27M|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.27M|    {
 1430|  8.27M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  8.27M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.27M|    {
  437|  8.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   127k|    {
 1653|   127k|        return value();
 1654|   127k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   209k|    {
 1653|   209k|        return value();
 1654|   209k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|  1.94k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.94k|    {
 1430|  1.94k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.94k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.94k|    {
  437|  1.94k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  3.88k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.88k|    {
 1430|  3.88k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.88k|    {
  437|  3.88k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  63.3k|        : base(unexpect, std::move(e.error())),
 1474|  63.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  63.3k|    {
 1476|  63.3k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  68.1M|    {
 4289|  68.1M|        return x.is_at_end();
 4290|  68.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|   133M|    {
 4333|   133M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 133M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|   133M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 133M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|   133M|        return !read_at_position();
 4340|   133M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|   351M|    {
 4313|   351M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   351M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   351M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 351M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   351M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   351M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 287M, False: 64.1M]
  |  |  ------------------
  ------------------
 4320|   287M|            return true;
 4321|   287M|        }
 4322|       |
 4323|   128M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 64.1M, False: 64.1M]
  ------------------
 4324|  64.1M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 46.6k, False: 64.1M]
  ------------------
 4325|  46.6k|                return false;
 4326|  46.6k|            }
 4327|  64.1M|        }
 4328|  64.1M|        return true;
 4329|  64.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|   479M|    {
 4089|   479M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   479M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|   129M|    {
 4248|   129M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   129M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|   129M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 129M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|   129M|        auto res = read_at_position();
 4257|   129M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   129M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|   129M|        return parent()->get_character_at(m_position);
 4259|   129M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|   129M|    {
 4120|   129M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   129M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.8M, False: 61.6M]
  |  |  ------------------
  ------------------
 4121|   129M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  67.8M|            return m_putback_buffer[pos];
 4123|  67.8M|        }
 4124|  61.6M|        const auto start = pos - m_putback_buffer.size();
 4125|  61.6M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  61.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  61.6M|        return m_current_view[start];
 4127|  61.6M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   357M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   357M|    else {
 3810|       |        // utf-32
 3811|   357M|        static_assert(sizeof(U) == 4);
 3812|   357M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   357M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   357M|        return 1;
 3814|   357M|    }
 3815|   357M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  2.50M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.50M|    {
 1430|  2.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.50M|    {
  437|  2.50M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.50M|    {
 1177|  2.50M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  4.64k|        : base(unexpect, std::move(e.error())),
 1474|  4.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.64k|    {
 1476|  4.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  4.64k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.64k|          m_has_value(false)
  446|  4.64k|    {
  447|  4.64k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  25.5M|    {
 4283|  25.5M|        return !(lhs == rhs);
 4284|  25.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  25.5M|    {
 4278|  25.5M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 25.5M, False: 0]
  |  Branch (4278:46): [True: 1.01M, False: 24.5M]
  ------------------
 4279|  25.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  88.6M|    {
 4234|  88.6M|        ++m_position;
 4235|  88.6M|        (void)read_at_position();
 4236|  88.6M|        return *this;
 4237|  88.6M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   357M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   357M|    else {
 4016|   357M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   357M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   357M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   357M|        auto cp = static_cast<char32_t>(input.front());
 4018|   357M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   357M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.38M, False: 355M]
  |  |  ------------------
  ------------------
 4019|  2.38M|            return invalid_code_point;
 4020|  2.38M|        }
 4021|   355M|        return cp;
 4022|   357M|    }
 4023|   357M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.85k|        : base(unexpect, std::move(e.error())),
 1474|  1.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.85k|    {
 1476|  1.85k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.85k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.85k|          m_has_value(false)
  446|  1.85k|    {
  447|  1.85k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.00M|    {
 1177|  2.00M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.00M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.00M|    {
 1430|  2.00M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.00M|    {
  437|  2.00M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.00M|    {
 1598|  2.00M|        return has_value();
 1599|  2.00M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.00M|    {
  485|  4.00M|        return m_has_value;
  486|  4.00M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.85k|    {
 1604|  1.85k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.85k|        return this->get_unexpected().error();
 1606|  1.85k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.85k|    {
  468|  1.85k|        return m_unexpected;
  469|  1.85k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.00M|    {
 1663|  2.00M|        return std::move(value());
 1664|  2.00M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.00M|    {
 1627|  2.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.00M|        return this->get_value();
 1629|  2.00M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.00M|    {
  451|  2.00M|        return m_value;
  452|  2.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|   205M|    {
 3330|   205M|        return m_sentinel;
 3331|   205M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  2.51M|    {
 3326|  2.51M|        return m_iterator;
 3327|  2.51M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  2.51M|    {
 3330|  2.51M|        return m_sentinel;
 3331|  2.51M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  6.04M|    {
 1598|  6.04M|        return has_value();
 1599|  6.04M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.0M|    {
  485|  12.0M|        return m_has_value;
  486|  12.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  67.9k|    {
 1604|  67.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  67.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  67.9k|        return this->get_unexpected().error();
 1606|  67.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  67.9k|    {
  468|  67.9k|        return m_unexpected;
  469|  67.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  4.98M|    {
 1663|  4.98M|        return std::move(value());
 1664|  4.98M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  5.98M|    {
 1627|  5.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.98M|        return this->get_value();
 1629|  5.98M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.98M|    {
  451|  5.98M|        return m_value;
  452|  5.98M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   165M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   165M|    else {
 3701|   165M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   165M|                                       to_address(first), to_address(last)))};
 3703|   165M|    }
 3704|   165M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   495M|{
  326|   495M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   495M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   495M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  2.50M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.50M|    static_cast<    \
  |  |  929|  2.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.50M|    static_cast<    \
  |  |  929|  2.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.50M|    {
 3312|  2.50M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  65.1M|    {
 4300|  65.1M|        return !x.is_at_end();
 4301|  65.1M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  9.28k|        : base(unexpect, std::move(e.error())),
 1474|  9.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.28k|    {
 1476|  9.28k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  9.28k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.28k|          m_has_value(false)
  446|  9.28k|    {
  447|  9.28k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.01M|    {
 1177|  5.01M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  5.00M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.00M|    {
 1430|  5.00M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.00M|    {
  437|  5.00M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  10.0M|    {
  485|  10.0M|        return m_has_value;
  486|  10.0M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  5.00M|    {
 1627|  5.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.00M|        return this->get_value();
 1629|  5.00M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  5.00M|    {
  451|  5.00M|        return m_value;
  452|  5.00M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.71k|        : base(unexpect, std::move(e.error())),
 1474|  3.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.71k|    {
 1476|  3.71k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  3.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.71k|          m_has_value(false)
  446|  3.71k|    {
  447|  3.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.00M|    {
 1177|  4.00M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  4.00M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.00M|    {
 1430|  4.00M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  4.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.00M|    {
  437|  4.00M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.01M|    {
 1837|  5.01M|        return detail::transform_error_impl(std::move(*this),
 1838|  5.01M|                                            std::forward<F>(f));
 1839|  5.01M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  5.01M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  5.01M|    else {
 1333|  5.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.00M, False: 9.28k]
  |  |  ------------------
  ------------------
 1335|  5.01M|                   ? result(*std::forward<Exp>(exp))
 1336|  5.01M|                   : result(unexpect,
 1337|  9.28k|                            trivial_invoke(std::forward<F>(f),
 1338|  9.28k|                                           std::forward<Exp>(exp).error()));
 1339|  5.01M|    }
 1340|  5.01M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  5.00M|    {
 1663|  5.00M|        return std::move(value());
 1664|  5.00M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  9.28k|    {
 1614|  9.28k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  9.28k|        return std::move(this->get_unexpected().error());
 1616|  9.28k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  9.28k|    {
  468|  9.28k|        return m_unexpected;
  469|  9.28k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  9.28k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  9.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  9.28k|    {
 1486|  9.28k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  4.00M|    {
 1598|  4.00M|        return has_value();
 1599|  4.00M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.01M|    {
  485|  8.01M|        return m_has_value;
  486|  8.01M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  3.71k|    {
 1604|  3.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.71k|        return this->get_unexpected().error();
 1606|  3.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.71k|    {
  468|  3.71k|        return m_unexpected;
  469|  3.71k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  4.00M|    {
 1663|  4.00M|        return std::move(value());
 1664|  4.00M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  4.00M|    {
 1627|  4.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.00M|        return this->get_value();
 1629|  4.00M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.00M|    {
  451|  4.00M|        return m_value;
  452|  4.00M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.00M|    {
 2855|  5.00M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.00M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.00M|    {
 2836|  5.00M|        return t.data();
 2837|  5.00M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   994k|    {
 1653|   994k|        return value();
 1654|   994k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  1.98M|    {
 1653|  1.98M|        return value();
 1654|  1.98M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    246|        : base(std::in_place, std::forward<U>(val)),
 1428|    246|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    246|    {
 1430|    246|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    246|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    246|    {
  437|    246|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    492|        : base(std::in_place, std::forward<U>(val)),
 1428|    492|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    492|    {
 1430|    492|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    492|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    492|    {
  437|    492|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   735k|    {
 5476|   735k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   735k|        return static_cast<std::size_t>(m_desc &
 5481|   735k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   735k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  1.47M|    {
 5501|  1.47M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  1.47M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   735k|    {
 5444|   735k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   735k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   735k|        const auto t = type(id);
 5456|   735k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   735k|        basic_scan_arg<Context> arg;
 5461|   735k|        arg.m_type = t;
 5462|   735k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 735k, False: 0]
  ------------------
 5463|   735k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   735k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   735k|        return arg;
 5469|   735k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   735k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   735k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   735k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   735k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   735k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   735k|    {
 5505|   735k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   735k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  1.27M|    {
 5257|  1.27M|        return m_type != detail::arg_type::none_type;
 5258|  1.27M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   316k|{
 8427|   316k|#define SCN_VISIT(Type)                                         \
 8428|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   316k|    }                                                           \
 8431|   316k|    else {                                                      \
 8432|   316k|        return vis(monostate_val);                              \
 8433|   316k|    }
 8434|       |
 8435|   316k|    monostate monostate_val{};
 8436|       |
 8437|   316k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 316k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 316k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 316k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 316k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 316k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 316k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 316k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 316k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 316k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 316k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 316k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 316k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 316k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 316k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 316k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 316k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 316k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 316k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|   158k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 158k, False: 158k]
  ------------------
 8475|   158k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   158k|    }                                                           \
  |  | 8431|   158k|    else {                                                      \
  |  | 8432|   158k|        return vis(monostate_val);                              \
  |  | 8433|   158k|    }
  ------------------
 8476|   316k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 158k, False: 158k]
  ------------------
 8477|   316k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   316k|    }                                                           \
  |  | 8431|   316k|    else {                                                      \
  |  | 8432|   316k|        return vis(monostate_val);                              \
  |  | 8433|   316k|    }
  ------------------
 8478|   316k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 316k]
  ------------------
 8479|   316k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   316k|    }                                                           \
  |  | 8431|   316k|    else {                                                      \
  |  | 8432|   316k|        return vis(monostate_val);                              \
  |  | 8433|   316k|    }
  ------------------
 8480|   316k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 316k]
  ------------------
 8481|   316k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   316k|    }                                                           \
  |  | 8431|   316k|    else {                                                      \
  |  | 8432|   316k|        return vis(monostate_val);                              \
  |  | 8433|   316k|    }
  ------------------
 8482|   316k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 316k]
  ------------------
 8483|   316k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   316k|    }                                                           \
  |  | 8431|   316k|    else {                                                      \
  |  | 8432|   316k|        return vis(monostate_val);                              \
  |  | 8433|   316k|    }
  ------------------
 8484|   316k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 316k]
  ------------------
 8485|   316k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   316k|    }                                                           \
  |  | 8431|   316k|    else {                                                      \
  |  | 8432|   316k|        return vis(monostate_val);                              \
  |  | 8433|   316k|    }
  ------------------
 8486|       |
 8487|   316k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 316k]
  ------------------
 8488|   316k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   316k|            return vis(
 8490|   316k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 316k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 316k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   316k|            SCN_CLANG_POP
 8505|   316k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   397k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   397k|    {
 5555|   397k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|   147k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|   147k|    {
 8148|   147k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8064|   397k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   397k|    static_cast<    \
  |  |  929|   397k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   397k|    static_cast<    \
  |  |  929|   397k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|   397k|    {
 8066|   397k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   338k|{
 4353|   338k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 338k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   338k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   338k|                            ranges::default_sentinel};
 4359|   338k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   338k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   338k|    {
 4185|   338k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   338k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   338k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   338k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   338k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   338k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   338k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   190k|{
 8427|   190k|#define SCN_VISIT(Type)                                         \
 8428|   190k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   190k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   190k|    }                                                           \
 8431|   190k|    else {                                                      \
 8432|   190k|        return vis(monostate_val);                              \
 8433|   190k|    }
 8434|       |
 8435|   190k|    monostate monostate_val{};
 8436|       |
 8437|   190k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 190k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 190k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 190k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 190k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 190k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 190k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 190k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 190k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 190k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 190k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 190k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 190k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 190k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 190k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 190k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 190k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 190k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 190k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 190k]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|   190k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 190k, False: 0]
  ------------------
 8477|   190k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   190k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   190k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   190k|    }                                                           \
  |  | 8431|   190k|    else {                                                      \
  |  | 8432|   190k|        return vis(monostate_val);                              \
  |  | 8433|   190k|    }
  ------------------
 8478|   190k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 190k]
  ------------------
 8479|   190k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   190k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   190k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   190k|    }                                                           \
  |  | 8431|   190k|    else {                                                      \
  |  | 8432|   190k|        return vis(monostate_val);                              \
  |  | 8433|   190k|    }
  ------------------
 8480|   190k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 190k]
  ------------------
 8481|   190k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   190k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   190k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   190k|    }                                                           \
  |  | 8431|   190k|    else {                                                      \
  |  | 8432|   190k|        return vis(monostate_val);                              \
  |  | 8433|   190k|    }
  ------------------
 8482|   190k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 190k]
  ------------------
 8483|   190k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   190k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   190k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   190k|    }                                                           \
  |  | 8431|   190k|    else {                                                      \
  |  | 8432|   190k|        return vis(monostate_val);                              \
  |  | 8433|   190k|    }
  ------------------
 8484|   190k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 190k]
  ------------------
 8485|   190k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   190k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   190k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   190k|    }                                                           \
  |  | 8431|   190k|    else {                                                      \
  |  | 8432|   190k|        return vis(monostate_val);                              \
  |  | 8433|   190k|    }
  ------------------
 8486|       |
 8487|   190k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 190k]
  ------------------
 8488|   190k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   190k|            return vis(
 8490|   190k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 190k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 190k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   190k|            SCN_CLANG_POP
 8505|   190k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   249k|{
 7054|   249k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   249k|    handler.check_args_exhausted();
 7056|   249k|    return handler.get_error();
 7057|   249k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   249k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   249k|    auto begin = format.data();
 7023|   249k|    auto it = begin;
 7024|   249k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   455k|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 249k, False: 205k]
  ------------------
 7027|   249k|        const auto ch = *it++;
 7028|   249k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 249k, False: 0]
  ------------------
 7029|   249k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   249k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   249k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 43.4k, False: 205k]
  ------------------
 7033|  43.4k|                return;
 7034|  43.4k|            }
 7035|   249k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   249k|    }
 7046|       |
 7047|   205k|    handler.on_literal_text(begin, end);
 7048|   205k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6951|   249k|{
 6952|   249k|    struct id_adapter {
 6953|   249k|        constexpr void operator()()
 6954|   249k|        {
 6955|   249k|            arg_id = handler.on_arg_id();
 6956|   249k|        }
 6957|   249k|        constexpr void operator()(std::size_t id)
 6958|   249k|        {
 6959|   249k|            arg_id = handler.on_arg_id(id);
 6960|   249k|        }
 6961|       |
 6962|   249k|        constexpr void on_error(const char* msg)
 6963|   249k|        {
 6964|   249k|            SCN_UNLIKELY_ATTR
 6965|   249k|            handler.on_error(msg);
 6966|   249k|        }
 6967|       |
 6968|   249k|        Handler& handler;
 6969|   249k|        std::size_t arg_id;
 6970|   249k|    };
 6971|       |
 6972|   249k|    ++begin;
 6973|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   249k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 249k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   249k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 249k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   249k|    else {
 6985|   249k|        auto adapter = id_adapter{handler, 0};
 6986|   249k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   249k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   249k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 249k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   249k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 249k, False: 0]
  ------------------
 6997|   249k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   249k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   249k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 232k]
  |  |  |  Branch (859:45): [True: 0, False: 249k]
  |  |  |  Branch (859:45): [True: 17.3k, False: 232k]
  |  |  ------------------
  ------------------
 7003|  17.3k|                handler.on_error("Unknown format specifier");
 7004|  17.3k|                return begin;
 7005|  17.3k|            }
 7006|   249k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   249k|    }
 7013|   232k|    return begin + 1;
 7014|   249k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8048|   397k|    {
 8049|   397k|        return m_args.get(id);
 8050|   397k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8058|   370k|    {
 8059|   370k|        return m_locale;
 8060|   370k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   397k|    {
 5576|   397k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   397k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   397k|        do_check_arg_id(id);
 5584|   397k|        return id;
 5585|   397k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   397k|{
 6064|   397k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   397k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   397k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   249k|{
 6453|   249k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   249k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 249k, False: 0]
  |  Branch (6454:26): [True: 0, False: 249k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   249k|    handler();
 6459|   249k|    return begin;
 6460|   249k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6401|  26.0k|{
 6402|  26.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  26.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  26.0k|    unsigned long long value = 0;
 6406|  52.1k|    do {
 6407|  52.1k|        value *= 10;
 6408|  52.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|  52.1k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 0, False: 52.1k]
  ------------------
 6410|  52.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|      0|            return -1;
 6412|      0|        }
 6413|  52.1k|        ++begin;
 6414|  52.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 52.1k, False: 0]
  |  Branch (6414:30): [True: 52.1k, False: 0]
  |  Branch (6414:47): [True: 26.0k, False: 26.0k]
  ------------------
 6415|  26.0k|    return static_cast<int>(value);
 6416|  26.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   249k|        {
 6955|   249k|            arg_id = handler.on_arg_id();
 6956|   249k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   794k|    {
 5262|   794k|        return m_type;
 5263|   794k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   370k|    {
 5571|   370k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   370k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   767k|    {
 5560|   767k|        return m_format.data();
 5561|   767k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|   249k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   249k|    {
 7132|   249k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   249k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6867|   249k|{
 6868|   249k|    auto do_presentation = [&]() -> const CharT* {
 6869|   249k|        if (*begin == CharT{'['}) {
 6870|   249k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   249k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   249k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   249k|                return begin;
 6876|   249k|            }
 6877|   249k|            handler.on_character_set_string(set);
 6878|   249k|            return begin;
 6879|   249k|        }
 6880|   249k|        if (*begin == CharT{'/'}) {
 6881|   249k|            return parse_presentation_regex(begin, end, handler);
 6882|   249k|        }
 6883|   249k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   249k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   249k|            handler.on_error("Invalid type specifier in format string");
 6886|   249k|            return begin;
 6887|   249k|        }
 6888|   249k|        handler.on_type(type);
 6889|   249k|        return begin;
 6890|   249k|    };
 6891|       |
 6892|   249k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 249k, False: 0]
  |  Branch (6892:28): [True: 219k, False: 29.9k]
  ------------------
 6893|   249k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 219k, False: 0]
  |  Branch (6893:36): [True: 210k, False: 8.69k]
  ------------------
 6894|   210k|        return do_presentation();
 6895|   210k|    }
 6896|       |
 6897|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  38.6k|    begin = parse_align(begin, end, handler);
 6903|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  38.6k|    begin = parse_width(begin, end, handler);
 6909|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  38.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 38.6k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  38.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 8.69k, False: 29.9k]
  ------------------
 6928|  8.69k|        handler.on_localized();
 6929|  8.69k|        ++begin;
 6930|  8.69k|    }
 6931|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  38.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 38.6k, False: 0]
  |  Branch (6936:25): [True: 29.9k, False: 8.69k]
  ------------------
 6937|  29.9k|        do_presentation();
 6938|  29.9k|    }
 6939|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  38.6k|    return begin;
 6945|  38.6k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6516|   352k|{
 6517|   352k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 339k, False: 13.0k]
  |  Branch (6517:33): [True: 339k, False: 0]
  ------------------
 6518|   352k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 13.0k, False: 0]
  |  Branch (6518:33): [True: 13.0k, False: 0]
  ------------------
 6519|   352k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   240k|    auto do_presentation = [&]() -> const CharT* {
 6869|   240k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 12.5k, False: 228k]
  ------------------
 6870|  12.5k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  12.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  12.5k|            handler.on_character_set_string(set);
 6878|  12.5k|            return begin;
 6879|  12.5k|        }
 6880|   228k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 228k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   228k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   228k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 219k]
  |  |  ------------------
  ------------------
 6885|  8.69k|            handler.on_error("Invalid type specifier in format string");
 6886|  8.69k|            return begin;
 6887|  8.69k|        }
 6888|   219k|        handler.on_type(type);
 6889|   219k|        return begin;
 6890|   228k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  12.5k|{
 6707|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  12.5k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  12.5k|    auto start = begin;
 6711|  12.5k|    ++begin;
 6712|       |
 6713|  12.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  12.5k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 12.5k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  12.5k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 12.5k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  37.7k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 37.7k, False: 0]
  ------------------
 6738|  37.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.7k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  37.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 12.5k, False: 25.1k]
  ------------------
 6743|  12.5k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  12.5k|        }
 6745|       |
 6746|  25.1k|        parse_presentation_set_literal(begin, end, handler);
 6747|  25.1k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  12.5k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6670|  25.1k|{
 6671|  25.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  25.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  25.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  25.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 25.1k, False: 0]
  |  Branch (6678:25): [True: 25.1k, False: 0]
  |  Branch (6678:49): [True: 25.1k, False: 0]
  ------------------
 6679|  25.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 25.1k, False: 0]
  ------------------
 6680|  25.1k|        ++begin;
 6681|       |
 6682|  25.1k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  25.1k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  25.1k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  25.1k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  25.1k|        return;
 6696|  25.1k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6646|  50.3k|{
 6647|  50.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  50.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  50.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.3k]
  |  |  |  Branch (859:45): [True: 0, False: 50.3k]
  |  |  |  Branch (859:45): [True: 0, False: 50.3k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  50.3k|    const auto cp =
 6656|  50.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  50.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.3k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  50.3k|    begin += len;
 6663|  50.3k|    return cp;
 6664|  50.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  18.8k|    {
 6356|  18.8k|        m_specs.charset_string_data = fmt.data();
 6357|  18.8k|        m_specs.charset_string_size = fmt.size();
 6358|  18.8k|        on_type(presentation_type::string_set);
 6359|  18.8k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6464|   365k|{
 6465|   365k|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 365k]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 365k]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 365k]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 365k]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 365k]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 365k]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 365k]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 365k]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 365k]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 365k]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|      0|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 0, False: 365k]
  ------------------
 6484|      0|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 365k]
  ------------------
 6485|      0|            return presentation_type::float_hex;
 6486|      0|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 0, False: 365k]
  ------------------
 6487|      0|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 365k]
  ------------------
 6488|      0|            return presentation_type::float_scientific;
 6489|      0|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 0, False: 365k]
  ------------------
 6490|      0|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 365k]
  ------------------
 6491|      0|            return presentation_type::float_fixed;
 6492|      0|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 0, False: 365k]
  ------------------
 6493|      0|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 365k]
  ------------------
 6494|      0|            return presentation_type::float_general;
 6495|   339k|        case 's':
  ------------------
  |  Branch (6495:9): [True: 339k, False: 26.0k]
  ------------------
 6496|   339k|            return presentation_type::string;
 6497|  13.0k|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 13.0k, False: 352k]
  ------------------
 6498|  13.0k|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 365k]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 365k]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 365k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 365k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|  13.0k|        default:
  ------------------
  |  Branch (6509:9): [True: 13.0k, False: 352k]
  ------------------
 6510|  13.0k|            return presentation_type::none;
 6511|   365k|    }
 6512|   365k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6541|  38.6k|{
 6542|  38.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  38.6k|    auto check_align = [](wchar_t ch) {
 6545|  38.6k|        switch (ch) {
 6546|  38.6k|            case L'<':
 6547|  38.6k|                return align_type::left;
 6548|  38.6k|            case L'>':
 6549|  38.6k|                return align_type::right;
 6550|  38.6k|            case L'^':
 6551|  38.6k|                return align_type::center;
 6552|  38.6k|            default:
 6553|  38.6k|                return align_type::none;
 6554|  38.6k|        }
 6555|  38.6k|    };
 6556|       |
 6557|  38.6k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  38.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  77.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  |  Branch (859:45): [True: 0, False: 38.6k]
  |  |  |  Branch (859:45): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6559|  38.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  38.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  38.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  38.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  38.6k|    const auto begin_before_fill = begin;
 6569|  38.6k|    begin += potential_fill_len;
 6570|       |
 6571|  38.6k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 38.6k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  38.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  38.6k|    const auto begin_after_fill = begin;
 6577|  38.6k|    ++begin;
 6578|       |
 6579|  38.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 38.6k, False: 0]
  ------------------
 6580|  38.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  38.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 12.5k, False: 26.0k]
  ------------------
 6585|  12.5k|            return begin_before_fill;
 6586|  12.5k|        }
 6587|  38.6k|    }
 6588|       |
 6589|  26.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 26.0k, False: 0]
  ------------------
 6590|  26.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 26.0k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  26.0k|        return begin_before_fill;
 6595|  26.0k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  26.0k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6523|  57.9k|{
 6524|  57.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|       |    if constexpr (sizeof(CharT) != 1) {
 6526|       |        return 1;
 6527|       |    }
 6528|  57.9k|    else {
 6529|  57.9k|        const auto lengths =
 6530|  57.9k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|  57.9k|            "\3\4";
 6532|  57.9k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|  57.9k|        return len;
 6534|  57.9k|    }
 6535|  57.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|  77.3k|    auto check_align = [](wchar_t ch) {
 6545|  77.3k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 77.3k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 77.3k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 77.3k]
  ------------------
 6551|      0|                return align_type::center;
 6552|  77.3k|            default:
  ------------------
  |  Branch (6552:13): [True: 77.3k, False: 0]
  ------------------
 6553|  77.3k|                return align_type::none;
 6554|  77.3k|        }
 6555|  77.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6606|  38.6k|{
 6607|  38.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  38.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 38.6k, False: 0]
  |  Branch (6609:33): [True: 17.3k, False: 21.2k]
  ------------------
 6610|  17.3k|        int width = parse_simple_int(begin, end);
 6611|  17.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  17.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 6612|  17.3k|            handler.on_width(width);
 6613|  17.3k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  17.3k|    }
 6619|  38.6k|    return begin;
 6620|  38.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7136|  8.69k|    {
 7137|  8.69k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  8.69k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 8.69k, False: 0]
  ------------------
 7139|  8.69k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 8.69k, False: 0]
  ------------------
 7140|  8.69k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 8.69k, False: 0]
  ------------------
 7141|  8.69k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 8.69k, False: 0]
  ------------------
 7142|  8.69k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  8.69k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  8.69k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   232k|{
 8427|   232k|#define SCN_VISIT(Type)                                         \
 8428|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   232k|    }                                                           \
 8431|   232k|    else {                                                      \
 8432|   232k|        return vis(monostate_val);                              \
 8433|   232k|    }
 8434|       |
 8435|   232k|    monostate monostate_val{};
 8436|       |
 8437|   232k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 232k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 232k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 232k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 232k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 232k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 232k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 232k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 232k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 232k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 232k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 232k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 232k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 232k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 232k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 232k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 232k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 232k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 232k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|   116k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 116k, False: 116k]
  ------------------
 8475|   116k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   116k|    }                                                           \
  |  | 8431|   116k|    else {                                                      \
  |  | 8432|   116k|        return vis(monostate_val);                              \
  |  | 8433|   116k|    }
  ------------------
 8476|   232k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 116k, False: 116k]
  ------------------
 8477|   232k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   232k|    }                                                           \
  |  | 8431|   232k|    else {                                                      \
  |  | 8432|   232k|        return vis(monostate_val);                              \
  |  | 8433|   232k|    }
  ------------------
 8478|   232k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 232k]
  ------------------
 8479|   232k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   232k|    }                                                           \
  |  | 8431|   232k|    else {                                                      \
  |  | 8432|   232k|        return vis(monostate_val);                              \
  |  | 8433|   232k|    }
  ------------------
 8480|   232k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 232k]
  ------------------
 8481|   232k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   232k|    }                                                           \
  |  | 8431|   232k|    else {                                                      \
  |  | 8432|   232k|        return vis(monostate_val);                              \
  |  | 8433|   232k|    }
  ------------------
 8482|   232k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 232k]
  ------------------
 8483|   232k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   232k|    }                                                           \
  |  | 8431|   232k|    else {                                                      \
  |  | 8432|   232k|        return vis(monostate_val);                              \
  |  | 8433|   232k|    }
  ------------------
 8484|   232k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 232k]
  ------------------
 8485|   232k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   232k|    }                                                           \
  |  | 8431|   232k|    else {                                                      \
  |  | 8432|   232k|        return vis(monostate_val);                              \
  |  | 8433|   232k|    }
  ------------------
 8486|       |
 8487|   232k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 232k]
  ------------------
 8488|   232k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   232k|            return vis(
 8490|   232k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 232k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 232k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   232k|            SCN_CLANG_POP
 8505|   232k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   147k|{
 7054|   147k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   147k|    handler.check_args_exhausted();
 7056|   147k|    return handler.get_error();
 7057|   147k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   147k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   147k|    auto begin = format.data();
 7023|   147k|    auto it = begin;
 7024|   147k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   273k|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 147k, False: 125k]
  ------------------
 7027|   147k|        const auto ch = *it++;
 7028|   147k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 147k, False: 0]
  ------------------
 7029|   147k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   147k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   147k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 21.7k, False: 125k]
  ------------------
 7033|  21.7k|                return;
 7034|  21.7k|            }
 7035|   147k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   147k|    }
 7046|       |
 7047|   125k|    handler.on_literal_text(begin, end);
 7048|   125k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8184|   125k|    {
 8185|   125k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|   125k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6951|   147k|{
 6952|   147k|    struct id_adapter {
 6953|   147k|        constexpr void operator()()
 6954|   147k|        {
 6955|   147k|            arg_id = handler.on_arg_id();
 6956|   147k|        }
 6957|   147k|        constexpr void operator()(std::size_t id)
 6958|   147k|        {
 6959|   147k|            arg_id = handler.on_arg_id(id);
 6960|   147k|        }
 6961|       |
 6962|   147k|        constexpr void on_error(const char* msg)
 6963|   147k|        {
 6964|   147k|            SCN_UNLIKELY_ATTR
 6965|   147k|            handler.on_error(msg);
 6966|   147k|        }
 6967|       |
 6968|   147k|        Handler& handler;
 6969|   147k|        std::size_t arg_id;
 6970|   147k|    };
 6971|       |
 6972|   147k|    ++begin;
 6973|   147k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   147k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 147k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   147k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 147k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   147k|    else {
 6985|   147k|        auto adapter = id_adapter{handler, 0};
 6986|   147k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   147k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   147k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 147k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   147k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 147k, False: 0]
  ------------------
 6997|   147k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   147k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   147k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 138k]
  |  |  |  Branch (859:45): [True: 0, False: 147k]
  |  |  |  Branch (859:45): [True: 8.69k, False: 138k]
  |  |  ------------------
  ------------------
 7003|  8.69k|                handler.on_error("Unknown format specifier");
 7004|  8.69k|                return begin;
 7005|  8.69k|            }
 7006|   147k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   147k|    }
 7013|   138k|    return begin + 1;
 7014|   147k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   147k|{
 6453|   147k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   147k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 147k, False: 0]
  |  Branch (6454:26): [True: 0, False: 147k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   147k|    handler();
 6459|   147k|    return begin;
 6460|   147k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   147k|        {
 6955|   147k|            arg_id = handler.on_arg_id();
 6956|   147k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|   147k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   147k|    {
 7132|   147k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   147k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6867|   147k|{
 6868|   147k|    auto do_presentation = [&]() -> const CharT* {
 6869|   147k|        if (*begin == CharT{'['}) {
 6870|   147k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   147k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   147k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   147k|                return begin;
 6876|   147k|            }
 6877|   147k|            handler.on_character_set_string(set);
 6878|   147k|            return begin;
 6879|   147k|        }
 6880|   147k|        if (*begin == CharT{'/'}) {
 6881|   147k|            return parse_presentation_regex(begin, end, handler);
 6882|   147k|        }
 6883|   147k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   147k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   147k|            handler.on_error("Invalid type specifier in format string");
 6886|   147k|            return begin;
 6887|   147k|        }
 6888|   147k|        handler.on_type(type);
 6889|   147k|        return begin;
 6890|   147k|    };
 6891|       |
 6892|   147k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 147k, False: 0]
  |  Branch (6892:28): [True: 132k, False: 14.9k]
  ------------------
 6893|   147k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 132k, False: 0]
  |  Branch (6893:36): [True: 128k, False: 4.34k]
  ------------------
 6894|   128k|        return do_presentation();
 6895|   128k|    }
 6896|       |
 6897|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  19.3k|    begin = parse_align(begin, end, handler);
 6903|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  19.3k|    begin = parse_width(begin, end, handler);
 6909|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  19.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 19.3k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  19.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 4.34k, False: 14.9k]
  ------------------
 6928|  4.34k|        handler.on_localized();
 6929|  4.34k|        ++begin;
 6930|  4.34k|    }
 6931|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  19.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 19.3k, False: 0]
  |  Branch (6936:25): [True: 14.9k, False: 4.34k]
  ------------------
 6937|  14.9k|        do_presentation();
 6938|  14.9k|    }
 6939|  19.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  19.3k|    return begin;
 6945|  19.3k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|   143k|    auto do_presentation = [&]() -> const CharT* {
 6869|   143k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 6.29k, False: 136k]
  ------------------
 6870|  6.29k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  6.29k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  6.29k|            handler.on_character_set_string(set);
 6878|  6.29k|            return begin;
 6879|  6.29k|        }
 6880|   136k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 136k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   136k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   136k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 132k]
  |  |  ------------------
  ------------------
 6885|  4.34k|            handler.on_error("Invalid type specifier in format string");
 6886|  4.34k|            return begin;
 6887|  4.34k|        }
 6888|   132k|        handler.on_type(type);
 6889|   132k|        return begin;
 6890|   136k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6706|  6.29k|{
 6707|  6.29k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  6.29k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  6.29k|    auto start = begin;
 6711|  6.29k|    ++begin;
 6712|       |
 6713|  6.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  6.29k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 6.29k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  6.29k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 6.29k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  18.8k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 18.8k, False: 0]
  ------------------
 6738|  18.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.8k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  18.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 6.29k, False: 12.5k]
  ------------------
 6743|  6.29k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  6.29k|        }
 6745|       |
 6746|  12.5k|        parse_presentation_set_literal(begin, end, handler);
 6747|  12.5k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  6.29k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6670|  12.5k|{
 6671|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  12.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  12.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  12.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 12.5k, False: 0]
  |  Branch (6678:25): [True: 12.5k, False: 0]
  |  Branch (6678:49): [True: 12.5k, False: 0]
  ------------------
 6679|  12.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 12.5k, False: 0]
  ------------------
 6680|  12.5k|        ++begin;
 6681|       |
 6682|  12.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  12.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  12.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  12.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  12.5k|        return;
 6696|  12.5k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6646|  25.1k|{
 6647|  25.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  25.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  25.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  |  Branch (859:45): [True: 0, False: 25.1k]
  |  |  |  Branch (859:45): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  25.1k|    const auto cp =
 6656|  25.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  25.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  25.1k|    begin += len;
 6663|  25.1k|    return cp;
 6664|  25.1k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6541|  19.3k|{
 6542|  19.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  19.3k|    auto check_align = [](wchar_t ch) {
 6545|  19.3k|        switch (ch) {
 6546|  19.3k|            case L'<':
 6547|  19.3k|                return align_type::left;
 6548|  19.3k|            case L'>':
 6549|  19.3k|                return align_type::right;
 6550|  19.3k|            case L'^':
 6551|  19.3k|                return align_type::center;
 6552|  19.3k|            default:
 6553|  19.3k|                return align_type::none;
 6554|  19.3k|        }
 6555|  19.3k|    };
 6556|       |
 6557|  19.3k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  19.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6559|  19.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  19.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  19.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  19.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  19.3k|    const auto begin_before_fill = begin;
 6569|  19.3k|    begin += potential_fill_len;
 6570|       |
 6571|  19.3k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 19.3k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  19.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  19.3k|    const auto begin_after_fill = begin;
 6577|  19.3k|    ++begin;
 6578|       |
 6579|  19.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 19.3k, False: 0]
  ------------------
 6580|  19.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  19.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 6.29k, False: 13.0k]
  ------------------
 6585|  6.29k|            return begin_before_fill;
 6586|  6.29k|        }
 6587|  19.3k|    }
 6588|       |
 6589|  13.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 13.0k, False: 0]
  ------------------
 6590|  13.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 13.0k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  13.0k|        return begin_before_fill;
 6595|  13.0k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  13.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|  38.6k|    auto check_align = [](wchar_t ch) {
 6545|  38.6k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 38.6k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 38.6k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 38.6k]
  ------------------
 6551|      0|                return align_type::center;
 6552|  38.6k|            default:
  ------------------
  |  Branch (6552:13): [True: 38.6k, False: 0]
  ------------------
 6553|  38.6k|                return align_type::none;
 6554|  38.6k|        }
 6555|  38.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6606|  19.3k|{
 6607|  19.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  19.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 19.3k, False: 0]
  |  Branch (6609:33): [True: 8.69k, False: 10.6k]
  ------------------
 6610|  8.69k|        int width = parse_simple_int(begin, end);
 6611|  8.69k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.69k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 6612|  8.69k|            handler.on_width(width);
 6613|  8.69k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  8.69k|    }
 6619|  19.3k|    return begin;
 6620|  19.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7136|  4.34k|    {
 7137|  4.34k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  4.34k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 4.34k, False: 0]
  ------------------
 7139|  4.34k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 4.34k, False: 0]
  ------------------
 7140|  4.34k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 4.34k, False: 0]
  ------------------
 7141|  4.34k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 4.34k, False: 0]
  ------------------
 7142|  4.34k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  4.34k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  4.34k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   138k|{
 8427|   138k|#define SCN_VISIT(Type)                                         \
 8428|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   138k|    }                                                           \
 8431|   138k|    else {                                                      \
 8432|   138k|        return vis(monostate_val);                              \
 8433|   138k|    }
 8434|       |
 8435|   138k|    monostate monostate_val{};
 8436|       |
 8437|   138k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 138k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 138k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 138k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 138k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 138k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 138k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 138k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 138k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 138k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 138k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 138k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 138k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 138k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 138k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 138k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 138k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 138k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 138k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 138k]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|   138k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 138k, False: 0]
  ------------------
 8477|   138k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   138k|    }                                                           \
  |  | 8431|   138k|    else {                                                      \
  |  | 8432|   138k|        return vis(monostate_val);                              \
  |  | 8433|   138k|    }
  ------------------
 8478|   138k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 138k]
  ------------------
 8479|   138k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   138k|    }                                                           \
  |  | 8431|   138k|    else {                                                      \
  |  | 8432|   138k|        return vis(monostate_val);                              \
  |  | 8433|   138k|    }
  ------------------
 8480|   138k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 138k]
  ------------------
 8481|   138k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   138k|    }                                                           \
  |  | 8431|   138k|    else {                                                      \
  |  | 8432|   138k|        return vis(monostate_val);                              \
  |  | 8433|   138k|    }
  ------------------
 8482|   138k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 138k]
  ------------------
 8483|   138k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   138k|    }                                                           \
  |  | 8431|   138k|    else {                                                      \
  |  | 8432|   138k|        return vis(monostate_val);                              \
  |  | 8433|   138k|    }
  ------------------
 8484|   138k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 138k]
  ------------------
 8485|   138k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   138k|    }                                                           \
  |  | 8431|   138k|    else {                                                      \
  |  | 8432|   138k|        return vis(monostate_val);                              \
  |  | 8433|   138k|    }
  ------------------
 8486|       |
 8487|   138k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 138k]
  ------------------
 8488|   138k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   138k|            return vis(
 8490|   138k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 138k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 138k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   138k|            SCN_CLANG_POP
 8505|   138k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  28.2k|    {
 4084|  28.2k|        sync(0);
 4085|  28.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  6.12M|    {
 5476|  6.12M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  6.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.12M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  6.12M|        return static_cast<std::size_t>(m_desc &
 5481|  6.12M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  6.12M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  12.2M|    {
 5501|  12.2M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  12.2M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  6.12M|    {
 5444|  6.12M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  6.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.12M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  6.12M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  6.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.12M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  6.12M|        const auto t = type(id);
 5456|  6.12M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  6.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.12M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  6.12M|        basic_scan_arg<Context> arg;
 5461|  6.12M|        arg.m_type = t;
 5462|  6.12M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 6.12M, False: 0]
  ------------------
 5463|  6.12M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  6.12M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  6.12M|        return arg;
 5469|  6.12M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  6.12M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  6.12M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  6.12M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  6.12M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  6.12M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  6.12M|    {
 5505|  6.12M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  6.12M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  10.6M|    {
 5257|  10.6M|        return m_type != detail::arg_type::none_type;
 5258|  10.6M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  3.00M|{
 8427|  3.00M|#define SCN_VISIT(Type)                                         \
 8428|  3.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  3.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  3.00M|    }                                                           \
 8431|  3.00M|    else {                                                      \
 8432|  3.00M|        return vis(monostate_val);                              \
 8433|  3.00M|    }
 8434|       |
 8435|  3.00M|    monostate monostate_val{};
 8436|       |
 8437|  3.00M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 3.00M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 3.00M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 3.00M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 3.00M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 3.00M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 3.00M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 3.00M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 3.00M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 3.00M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 3.00M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 3.00M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 3.00M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 3.00M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 3.00M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 3.00M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 3.00M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 3.00M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 3.00M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 3.00M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 3.00M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|  1.50M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 1.50M, False: 1.50M]
  ------------------
 8479|  1.50M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.50M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.50M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.50M|    }                                                           \
  |  | 8431|  1.50M|    else {                                                      \
  |  | 8432|  1.50M|        return vis(monostate_val);                              \
  |  | 8433|  1.50M|    }
  ------------------
 8480|  3.00M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.50M, False: 1.50M]
  ------------------
 8481|  3.00M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  3.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.00M|    }                                                           \
  |  | 8431|  3.00M|    else {                                                      \
  |  | 8432|  3.00M|        return vis(monostate_val);                              \
  |  | 8433|  3.00M|    }
  ------------------
 8482|  3.00M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 3.00M]
  ------------------
 8483|  3.00M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  3.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.00M|    }                                                           \
  |  | 8431|  3.00M|    else {                                                      \
  |  | 8432|  3.00M|        return vis(monostate_val);                              \
  |  | 8433|  3.00M|    }
  ------------------
 8484|  3.00M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 3.00M]
  ------------------
 8485|  3.00M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  3.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.00M|    }                                                           \
  |  | 8431|  3.00M|    else {                                                      \
  |  | 8432|  3.00M|        return vis(monostate_val);                              \
  |  | 8433|  3.00M|    }
  ------------------
 8486|       |
 8487|  3.00M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 3.00M]
  ------------------
 8488|  3.00M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  3.00M|            return vis(
 8490|  3.00M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 3.00M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 3.00M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  3.00M|            SCN_CLANG_POP
 8505|  3.00M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  3.11M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  3.11M|    {
 5555|  3.11M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|  1.03M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|  1.03M|    {
 8148|  1.03M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8064|  3.11M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  3.11M|    static_cast<    \
  |  |  929|  3.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  3.11M|    static_cast<    \
  |  |  929|  3.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|  3.11M|    {
 8066|  3.11M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  2.07M|{
 7054|  2.07M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  2.07M|    handler.check_args_exhausted();
 7056|  2.07M|    return handler.get_error();
 7057|  2.07M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  2.07M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  2.07M|    auto begin = format.data();
 7023|  2.07M|    auto it = begin;
 7024|  2.07M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  4.06M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 2.07M, False: 1.98M]
  ------------------
 7027|  2.07M|        const auto ch = *it++;
 7028|  2.07M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 2.07M, False: 0]
  ------------------
 7029|  2.07M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  2.07M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  2.07M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 86.9k, False: 1.98M]
  ------------------
 7033|  86.9k|                return;
 7034|  86.9k|            }
 7035|  2.07M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  2.07M|    }
 7046|       |
 7047|  1.98M|    handler.on_literal_text(begin, end);
 7048|  1.98M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6951|  2.07M|{
 6952|  2.07M|    struct id_adapter {
 6953|  2.07M|        constexpr void operator()()
 6954|  2.07M|        {
 6955|  2.07M|            arg_id = handler.on_arg_id();
 6956|  2.07M|        }
 6957|  2.07M|        constexpr void operator()(std::size_t id)
 6958|  2.07M|        {
 6959|  2.07M|            arg_id = handler.on_arg_id(id);
 6960|  2.07M|        }
 6961|       |
 6962|  2.07M|        constexpr void on_error(const char* msg)
 6963|  2.07M|        {
 6964|  2.07M|            SCN_UNLIKELY_ATTR
 6965|  2.07M|            handler.on_error(msg);
 6966|  2.07M|        }
 6967|       |
 6968|  2.07M|        Handler& handler;
 6969|  2.07M|        std::size_t arg_id;
 6970|  2.07M|    };
 6971|       |
 6972|  2.07M|    ++begin;
 6973|  2.07M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  2.07M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 2.07M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  2.07M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 2.07M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  2.07M|    else {
 6985|  2.07M|        auto adapter = id_adapter{handler, 0};
 6986|  2.07M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  2.07M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  2.07M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 2.07M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  2.07M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 2.07M, False: 0]
  ------------------
 6997|  2.07M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  2.07M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  2.07M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.7k, False: 2.04M]
  |  |  |  Branch (859:45): [True: 0, False: 2.07M]
  |  |  |  Branch (859:45): [True: 34.7k, False: 2.04M]
  |  |  ------------------
  ------------------
 7003|  34.7k|                handler.on_error("Unknown format specifier");
 7004|  34.7k|                return begin;
 7005|  34.7k|            }
 7006|  2.07M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  2.07M|    }
 7013|  2.04M|    return begin + 1;
 7014|  2.07M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8048|  3.11M|    {
 8049|  3.11M|        return m_args.get(id);
 8050|  3.11M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8058|  3.06M|    {
 8059|  3.06M|        return m_locale;
 8060|  3.06M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  3.11M|    {
 5576|  3.11M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.11M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  3.11M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  3.11M|        do_check_arg_id(id);
 5584|  3.11M|        return id;
 5585|  3.11M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  3.11M|{
 6064|  3.11M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  3.11M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  3.11M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  2.07M|{
 6453|  2.07M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  2.07M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 2.07M, False: 0]
  |  Branch (6454:26): [True: 0, False: 2.07M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  2.07M|    handler();
 6459|  2.07M|    return begin;
 6460|  2.07M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6401|  52.1k|{
 6402|  52.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  52.1k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  52.1k|    unsigned long long value = 0;
 6406|   104k|    do {
 6407|   104k|        value *= 10;
 6408|   104k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|   104k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 0, False: 104k]
  ------------------
 6410|   104k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|      0|            return -1;
 6412|      0|        }
 6413|   104k|        ++begin;
 6414|   104k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 104k, False: 0]
  |  Branch (6414:30): [True: 104k, False: 0]
  |  Branch (6414:47): [True: 52.1k, False: 52.1k]
  ------------------
 6415|  52.1k|    return static_cast<int>(value);
 6416|  52.1k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  2.07M|        {
 6955|  2.07M|            arg_id = handler.on_arg_id();
 6956|  2.07M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  6.22M|    {
 5262|  6.22M|        return m_type;
 5263|  6.22M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  3.06M|    {
 5571|  3.06M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  3.06M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|  2.54M|{
 4353|  2.54M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 2.54M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  2.54M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  2.54M|                            ranges::default_sentinel};
 4359|  2.54M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|  2.54M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  2.54M|    {
 4185|  2.54M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  2.54M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  2.54M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  6.17M|    {
 5560|  6.17M|        return m_format.data();
 5561|  6.17M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|  2.07M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  2.07M|    {
 7132|  2.07M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  2.07M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6867|  2.07M|{
 6868|  2.07M|    auto do_presentation = [&]() -> const CharT* {
 6869|  2.07M|        if (*begin == CharT{'['}) {
 6870|  2.07M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  2.07M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  2.07M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  2.07M|                return begin;
 6876|  2.07M|            }
 6877|  2.07M|            handler.on_character_set_string(set);
 6878|  2.07M|            return begin;
 6879|  2.07M|        }
 6880|  2.07M|        if (*begin == CharT{'/'}) {
 6881|  2.07M|            return parse_presentation_regex(begin, end, handler);
 6882|  2.07M|        }
 6883|  2.07M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  2.07M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  2.07M|            handler.on_error("Invalid type specifier in format string");
 6886|  2.07M|            return begin;
 6887|  2.07M|        }
 6888|  2.07M|        handler.on_type(type);
 6889|  2.07M|        return begin;
 6890|  2.07M|    };
 6891|       |
 6892|  2.07M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 2.07M, False: 0]
  |  Branch (6892:28): [True: 2.02M, False: 52.6k]
  ------------------
 6893|  2.07M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 2.02M, False: 0]
  |  Branch (6893:36): [True: 2.00M, False: 17.3k]
  ------------------
 6894|  2.00M|        return do_presentation();
 6895|  2.00M|    }
 6896|       |
 6897|  70.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  70.0k|    begin = parse_align(begin, end, handler);
 6903|  70.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  70.0k|    begin = parse_width(begin, end, handler);
 6909|  70.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  70.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 70.0k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  70.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 17.3k, False: 52.6k]
  ------------------
 6928|  17.3k|        handler.on_localized();
 6929|  17.3k|        ++begin;
 6930|  17.3k|    }
 6931|  70.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  70.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 70.0k, False: 0]
  |  Branch (6936:25): [True: 52.6k, False: 17.3k]
  ------------------
 6937|  52.6k|        do_presentation();
 6938|  52.6k|    }
 6939|  70.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  70.0k|    return begin;
 6945|  70.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6516|  3.03M|{
 6517|  3.03M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 3.00M, False: 26.0k]
  |  Branch (6517:33): [True: 3.00M, False: 0]
  ------------------
 6518|  3.03M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 26.0k, False: 0]
  |  Branch (6518:33): [True: 26.0k, False: 0]
  ------------------
 6519|  3.03M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|  2.05M|    auto do_presentation = [&]() -> const CharT* {
 6869|  2.05M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 17.8k, False: 2.03M]
  ------------------
 6870|  17.8k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  17.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  17.8k|            handler.on_character_set_string(set);
 6878|  17.8k|            return begin;
 6879|  17.8k|        }
 6880|  2.03M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 2.03M]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|  2.03M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  2.03M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 2.02M]
  |  |  ------------------
  ------------------
 6885|  17.3k|            handler.on_error("Invalid type specifier in format string");
 6886|  17.3k|            return begin;
 6887|  17.3k|        }
 6888|  2.02M|        handler.on_type(type);
 6889|  2.02M|        return begin;
 6890|  2.03M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  17.8k|{
 6707|  17.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  17.8k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  17.8k|    auto start = begin;
 6711|  17.8k|    ++begin;
 6712|       |
 6713|  17.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  17.8k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 17.8k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  17.8k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 17.8k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  53.6k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 53.6k, False: 0]
  ------------------
 6738|  53.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.6k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  53.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 17.8k, False: 35.7k]
  ------------------
 6743|  17.8k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  17.8k|        }
 6745|       |
 6746|  35.7k|        parse_presentation_set_literal(begin, end, handler);
 6747|  35.7k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  17.8k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6670|  35.7k|{
 6671|  35.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  35.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  35.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  35.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  35.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  35.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 35.7k, False: 0]
  |  Branch (6678:25): [True: 35.7k, False: 0]
  |  Branch (6678:49): [True: 35.7k, False: 0]
  ------------------
 6679|  35.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 35.7k, False: 0]
  ------------------
 6680|  35.7k|        ++begin;
 6681|       |
 6682|  35.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  35.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  35.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  35.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  35.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  35.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  35.7k|        return;
 6696|  35.7k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6646|  71.5k|{
 6647|  71.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  71.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  71.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.5k]
  |  |  |  Branch (859:45): [True: 0, False: 71.5k]
  |  |  |  Branch (859:45): [True: 0, False: 71.5k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  71.5k|    const auto cp =
 6656|  71.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  71.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.5k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  71.5k|    begin += len;
 6663|  71.5k|    return cp;
 6664|  71.5k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  26.8k|    {
 6356|  26.8k|        m_specs.charset_string_data = fmt.data();
 6357|  26.8k|        m_specs.charset_string_size = fmt.size();
 6358|  26.8k|        on_type(presentation_type::string_set);
 6359|  26.8k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6464|  3.05M|{
 6465|  3.05M|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 3.05M]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 3.05M]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 3.05M]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 3.05M]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 3.05M]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 3.05M]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 3.05M]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 3.05M]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 3.05M]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 3.05M]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|      0|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 0, False: 3.05M]
  ------------------
 6484|      0|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 3.05M]
  ------------------
 6485|      0|            return presentation_type::float_hex;
 6486|      0|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 0, False: 3.05M]
  ------------------
 6487|      0|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 3.05M]
  ------------------
 6488|      0|            return presentation_type::float_scientific;
 6489|      0|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 0, False: 3.05M]
  ------------------
 6490|      0|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 3.05M]
  ------------------
 6491|      0|            return presentation_type::float_fixed;
 6492|      0|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 0, False: 3.05M]
  ------------------
 6493|      0|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.05M]
  ------------------
 6494|      0|            return presentation_type::float_general;
 6495|  3.00M|        case 's':
  ------------------
  |  Branch (6495:9): [True: 3.00M, False: 52.1k]
  ------------------
 6496|  3.00M|            return presentation_type::string;
 6497|  26.0k|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 26.0k, False: 3.03M]
  ------------------
 6498|  26.0k|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 3.05M]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 3.05M]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 3.05M]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 3.05M]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|  26.0k|        default:
  ------------------
  |  Branch (6509:9): [True: 26.0k, False: 3.03M]
  ------------------
 6510|  26.0k|            return presentation_type::none;
 6511|  3.05M|    }
 6512|  3.05M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6541|  70.0k|{
 6542|  70.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  70.0k|    auto check_align = [](wchar_t ch) {
 6545|  70.0k|        switch (ch) {
 6546|  70.0k|            case L'<':
 6547|  70.0k|                return align_type::left;
 6548|  70.0k|            case L'>':
 6549|  70.0k|                return align_type::right;
 6550|  70.0k|            case L'^':
 6551|  70.0k|                return align_type::center;
 6552|  70.0k|            default:
 6553|  70.0k|                return align_type::none;
 6554|  70.0k|        }
 6555|  70.0k|    };
 6556|       |
 6557|  70.0k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  70.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  |  Branch (859:45): [True: 0, False: 70.0k]
  |  |  |  Branch (859:45): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6559|  70.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  70.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  70.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  70.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  70.0k|    const auto begin_before_fill = begin;
 6569|  70.0k|    begin += potential_fill_len;
 6570|       |
 6571|  70.0k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 70.0k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  70.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  70.0k|    const auto begin_after_fill = begin;
 6577|  70.0k|    ++begin;
 6578|       |
 6579|  70.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 70.0k, False: 0]
  ------------------
 6580|  70.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.0k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  70.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 17.8k, False: 52.1k]
  ------------------
 6585|  17.8k|            return begin_before_fill;
 6586|  17.8k|        }
 6587|  70.0k|    }
 6588|       |
 6589|  52.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 52.1k, False: 0]
  ------------------
 6590|  52.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 52.1k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  52.1k|        return begin_before_fill;
 6595|  52.1k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  52.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6523|   105k|{
 6524|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|   105k|    if constexpr (sizeof(CharT) != 1) {
 6526|   105k|        return 1;
 6527|       |    }
 6528|       |    else {
 6529|       |        const auto lengths =
 6530|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|       |            "\3\4";
 6532|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|       |        return len;
 6534|       |    }
 6535|   105k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   140k|    auto check_align = [](wchar_t ch) {
 6545|   140k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 140k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 140k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 140k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   140k|            default:
  ------------------
  |  Branch (6552:13): [True: 140k, False: 0]
  ------------------
 6553|   140k|                return align_type::none;
 6554|   140k|        }
 6555|   140k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6606|  70.0k|{
 6607|  70.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  70.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 70.0k, False: 0]
  |  Branch (6609:33): [True: 34.7k, False: 35.2k]
  ------------------
 6610|  34.7k|        int width = parse_simple_int(begin, end);
 6611|  34.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  34.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.7k, False: 0]
  |  |  ------------------
  ------------------
 6612|  34.7k|            handler.on_width(width);
 6613|  34.7k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  34.7k|    }
 6619|  70.0k|    return begin;
 6620|  70.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7136|  17.3k|    {
 7137|  17.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  17.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 17.3k, False: 0]
  ------------------
 7139|  17.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 17.3k, False: 0]
  ------------------
 7140|  17.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 17.3k, False: 0]
  ------------------
 7141|  17.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 17.3k, False: 0]
  ------------------
 7142|  17.3k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  17.3k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  17.3k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  2.04M|{
 8427|  2.04M|#define SCN_VISIT(Type)                                         \
 8428|  2.04M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  2.04M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  2.04M|    }                                                           \
 8431|  2.04M|    else {                                                      \
 8432|  2.04M|        return vis(monostate_val);                              \
 8433|  2.04M|    }
 8434|       |
 8435|  2.04M|    monostate monostate_val{};
 8436|       |
 8437|  2.04M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.04M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.04M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.04M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.04M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.04M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.04M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.04M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.04M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.04M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.04M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 2.04M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 2.04M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 2.04M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.04M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.04M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.04M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.04M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.04M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.04M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 2.04M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|  1.02M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 1.02M, False: 1.02M]
  ------------------
 8479|  1.02M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.02M|    }                                                           \
  |  | 8431|  1.02M|    else {                                                      \
  |  | 8432|  1.02M|        return vis(monostate_val);                              \
  |  | 8433|  1.02M|    }
  ------------------
 8480|  2.04M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.02M, False: 1.02M]
  ------------------
 8481|  2.04M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  2.04M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.04M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.04M|    }                                                           \
  |  | 8431|  2.04M|    else {                                                      \
  |  | 8432|  2.04M|        return vis(monostate_val);                              \
  |  | 8433|  2.04M|    }
  ------------------
 8482|  2.04M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 2.04M]
  ------------------
 8483|  2.04M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  2.04M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.04M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.04M|    }                                                           \
  |  | 8431|  2.04M|    else {                                                      \
  |  | 8432|  2.04M|        return vis(monostate_val);                              \
  |  | 8433|  2.04M|    }
  ------------------
 8484|  2.04M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 2.04M]
  ------------------
 8485|  2.04M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  2.04M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.04M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.04M|    }                                                           \
  |  | 8431|  2.04M|    else {                                                      \
  |  | 8432|  2.04M|        return vis(monostate_val);                              \
  |  | 8433|  2.04M|    }
  ------------------
 8486|       |
 8487|  2.04M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 2.04M]
  ------------------
 8488|  2.04M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  2.04M|            return vis(
 8490|  2.04M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 2.04M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 2.04M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  2.04M|            SCN_CLANG_POP
 8505|  2.04M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.50M|{
 8427|  1.50M|#define SCN_VISIT(Type)                                         \
 8428|  1.50M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.50M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.50M|    }                                                           \
 8431|  1.50M|    else {                                                      \
 8432|  1.50M|        return vis(monostate_val);                              \
 8433|  1.50M|    }
 8434|       |
 8435|  1.50M|    monostate monostate_val{};
 8436|       |
 8437|  1.50M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.50M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.50M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.50M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.50M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.50M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.50M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.50M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.50M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.50M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.50M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.50M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.50M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.50M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.50M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.50M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.50M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.50M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.50M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.50M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.50M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.50M]
  ------------------
 8479|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8480|  1.50M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.50M, False: 0]
  ------------------
 8481|  1.50M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.50M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.50M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.50M|    }                                                           \
  |  | 8431|  1.50M|    else {                                                      \
  |  | 8432|  1.50M|        return vis(monostate_val);                              \
  |  | 8433|  1.50M|    }
  ------------------
 8482|  1.50M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.50M]
  ------------------
 8483|  1.50M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.50M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.50M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.50M|    }                                                           \
  |  | 8431|  1.50M|    else {                                                      \
  |  | 8432|  1.50M|        return vis(monostate_val);                              \
  |  | 8433|  1.50M|    }
  ------------------
 8484|  1.50M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.50M]
  ------------------
 8485|  1.50M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.50M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.50M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.50M|    }                                                           \
  |  | 8431|  1.50M|    else {                                                      \
  |  | 8432|  1.50M|        return vis(monostate_val);                              \
  |  | 8433|  1.50M|    }
  ------------------
 8486|       |
 8487|  1.50M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.50M]
  ------------------
 8488|  1.50M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.50M|            return vis(
 8490|  1.50M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.50M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.50M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.50M|            SCN_CLANG_POP
 8505|  1.50M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  1.03M|{
 7054|  1.03M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  1.03M|    handler.check_args_exhausted();
 7056|  1.03M|    return handler.get_error();
 7057|  1.03M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  1.03M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  1.03M|    auto begin = format.data();
 7023|  1.03M|    auto it = begin;
 7024|  1.03M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  2.03M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 1.03M, False: 994k]
  ------------------
 7027|  1.03M|        const auto ch = *it++;
 7028|  1.03M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 1.03M, False: 0]
  ------------------
 7029|  1.03M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  1.03M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  1.03M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 43.4k, False: 994k]
  ------------------
 7033|  43.4k|                return;
 7034|  43.4k|            }
 7035|  1.03M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  1.03M|    }
 7046|       |
 7047|   994k|    handler.on_literal_text(begin, end);
 7048|   994k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8184|   994k|    {
 8185|   994k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   994k|    static_cast<    \
  |  |  929|   994k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|   994k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6951|  1.03M|{
 6952|  1.03M|    struct id_adapter {
 6953|  1.03M|        constexpr void operator()()
 6954|  1.03M|        {
 6955|  1.03M|            arg_id = handler.on_arg_id();
 6956|  1.03M|        }
 6957|  1.03M|        constexpr void operator()(std::size_t id)
 6958|  1.03M|        {
 6959|  1.03M|            arg_id = handler.on_arg_id(id);
 6960|  1.03M|        }
 6961|       |
 6962|  1.03M|        constexpr void on_error(const char* msg)
 6963|  1.03M|        {
 6964|  1.03M|            SCN_UNLIKELY_ATTR
 6965|  1.03M|            handler.on_error(msg);
 6966|  1.03M|        }
 6967|       |
 6968|  1.03M|        Handler& handler;
 6969|  1.03M|        std::size_t arg_id;
 6970|  1.03M|    };
 6971|       |
 6972|  1.03M|    ++begin;
 6973|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  1.03M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 1.03M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  1.03M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 1.03M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  1.03M|    else {
 6985|  1.03M|        auto adapter = id_adapter{handler, 0};
 6986|  1.03M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  1.03M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  1.03M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 1.03M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  1.03M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 1.03M, False: 0]
  ------------------
 6997|  1.03M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  1.03M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  1.03M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 1.02M]
  |  |  |  Branch (859:45): [True: 0, False: 1.03M]
  |  |  |  Branch (859:45): [True: 17.3k, False: 1.02M]
  |  |  ------------------
  ------------------
 7003|  17.3k|                handler.on_error("Unknown format specifier");
 7004|  17.3k|                return begin;
 7005|  17.3k|            }
 7006|  1.03M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  1.03M|    }
 7013|  1.02M|    return begin + 1;
 7014|  1.03M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  1.03M|{
 6453|  1.03M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  1.03M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 1.03M, False: 0]
  |  Branch (6454:26): [True: 0, False: 1.03M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  1.03M|    handler();
 6459|  1.03M|    return begin;
 6460|  1.03M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  1.03M|        {
 6955|  1.03M|            arg_id = handler.on_arg_id();
 6956|  1.03M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|  1.03M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  1.03M|    {
 7132|  1.03M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  1.03M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6867|  1.03M|{
 6868|  1.03M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.03M|        if (*begin == CharT{'['}) {
 6870|  1.03M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  1.03M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  1.03M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  1.03M|                return begin;
 6876|  1.03M|            }
 6877|  1.03M|            handler.on_character_set_string(set);
 6878|  1.03M|            return begin;
 6879|  1.03M|        }
 6880|  1.03M|        if (*begin == CharT{'/'}) {
 6881|  1.03M|            return parse_presentation_regex(begin, end, handler);
 6882|  1.03M|        }
 6883|  1.03M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.03M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  1.03M|            handler.on_error("Invalid type specifier in format string");
 6886|  1.03M|            return begin;
 6887|  1.03M|        }
 6888|  1.03M|        handler.on_type(type);
 6889|  1.03M|        return begin;
 6890|  1.03M|    };
 6891|       |
 6892|  1.03M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 1.03M, False: 0]
  |  Branch (6892:28): [True: 1.01M, False: 26.3k]
  ------------------
 6893|  1.03M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 1.01M, False: 0]
  |  Branch (6893:36): [True: 1.00M, False: 8.69k]
  ------------------
 6894|  1.00M|        return do_presentation();
 6895|  1.00M|    }
 6896|       |
 6897|  35.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  35.0k|    begin = parse_align(begin, end, handler);
 6903|  35.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  35.0k|    begin = parse_width(begin, end, handler);
 6909|  35.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  35.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 35.0k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  35.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 8.69k, False: 26.3k]
  ------------------
 6928|  8.69k|        handler.on_localized();
 6929|  8.69k|        ++begin;
 6930|  8.69k|    }
 6931|  35.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  35.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 35.0k, False: 0]
  |  Branch (6936:25): [True: 26.3k, False: 8.69k]
  ------------------
 6937|  26.3k|        do_presentation();
 6938|  26.3k|    }
 6939|  35.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  35.0k|    return begin;
 6945|  35.0k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|  1.02M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.02M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 8.93k, False: 1.01M]
  ------------------
 6870|  8.93k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  8.93k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.93k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  8.93k|            handler.on_character_set_string(set);
 6878|  8.93k|            return begin;
 6879|  8.93k|        }
 6880|  1.01M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 1.01M]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|  1.01M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.01M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 1.01M]
  |  |  ------------------
  ------------------
 6885|  8.69k|            handler.on_error("Invalid type specifier in format string");
 6886|  8.69k|            return begin;
 6887|  8.69k|        }
 6888|  1.01M|        handler.on_type(type);
 6889|  1.01M|        return begin;
 6890|  1.01M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6706|  8.93k|{
 6707|  8.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  8.93k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  8.93k|    auto start = begin;
 6711|  8.93k|    ++begin;
 6712|       |
 6713|  8.93k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.93k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  8.93k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 8.93k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  8.93k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 8.93k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  26.8k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 26.8k, False: 0]
  ------------------
 6738|  26.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.8k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  26.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 8.93k, False: 17.8k]
  ------------------
 6743|  8.93k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  8.93k|        }
 6745|       |
 6746|  17.8k|        parse_presentation_set_literal(begin, end, handler);
 6747|  17.8k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  8.93k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6670|  17.8k|{
 6671|  17.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  17.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  17.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  17.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 17.8k, False: 0]
  |  Branch (6678:25): [True: 17.8k, False: 0]
  |  Branch (6678:49): [True: 17.8k, False: 0]
  ------------------
 6679|  17.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 17.8k, False: 0]
  ------------------
 6680|  17.8k|        ++begin;
 6681|       |
 6682|  17.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  17.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  17.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  17.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  17.8k|        return;
 6696|  17.8k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6646|  35.7k|{
 6647|  35.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  35.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  35.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  35.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.7k]
  |  |  |  Branch (859:45): [True: 0, False: 35.7k]
  |  |  |  Branch (859:45): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  35.7k|    const auto cp =
 6656|  35.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  35.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  35.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  35.7k|    begin += len;
 6663|  35.7k|    return cp;
 6664|  35.7k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6541|  35.0k|{
 6542|  35.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  35.0k|    auto check_align = [](wchar_t ch) {
 6545|  35.0k|        switch (ch) {
 6546|  35.0k|            case L'<':
 6547|  35.0k|                return align_type::left;
 6548|  35.0k|            case L'>':
 6549|  35.0k|                return align_type::right;
 6550|  35.0k|            case L'^':
 6551|  35.0k|                return align_type::center;
 6552|  35.0k|            default:
 6553|  35.0k|                return align_type::none;
 6554|  35.0k|        }
 6555|  35.0k|    };
 6556|       |
 6557|  35.0k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  35.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  |  Branch (859:45): [True: 0, False: 35.0k]
  |  |  |  Branch (859:45): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6559|  35.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  35.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  35.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  35.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  35.0k|    const auto begin_before_fill = begin;
 6569|  35.0k|    begin += potential_fill_len;
 6570|       |
 6571|  35.0k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 35.0k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  35.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  35.0k|    const auto begin_after_fill = begin;
 6577|  35.0k|    ++begin;
 6578|       |
 6579|  35.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 35.0k, False: 0]
  ------------------
 6580|  35.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  35.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 8.93k, False: 26.0k]
  ------------------
 6585|  8.93k|            return begin_before_fill;
 6586|  8.93k|        }
 6587|  35.0k|    }
 6588|       |
 6589|  26.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 26.0k, False: 0]
  ------------------
 6590|  26.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 26.0k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  26.0k|        return begin_before_fill;
 6595|  26.0k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  26.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|  70.0k|    auto check_align = [](wchar_t ch) {
 6545|  70.0k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 70.0k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 70.0k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 70.0k]
  ------------------
 6551|      0|                return align_type::center;
 6552|  70.0k|            default:
  ------------------
  |  Branch (6552:13): [True: 70.0k, False: 0]
  ------------------
 6553|  70.0k|                return align_type::none;
 6554|  70.0k|        }
 6555|  70.0k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6606|  35.0k|{
 6607|  35.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  35.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 35.0k, False: 0]
  |  Branch (6609:33): [True: 17.3k, False: 17.6k]
  ------------------
 6610|  17.3k|        int width = parse_simple_int(begin, end);
 6611|  17.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  17.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.3k, False: 0]
  |  |  ------------------
  ------------------
 6612|  17.3k|            handler.on_width(width);
 6613|  17.3k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  17.3k|    }
 6619|  35.0k|    return begin;
 6620|  35.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7136|  8.69k|    {
 7137|  8.69k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  8.69k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 8.69k, False: 0]
  ------------------
 7139|  8.69k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 8.69k, False: 0]
  ------------------
 7140|  8.69k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 8.69k, False: 0]
  ------------------
 7141|  8.69k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 8.69k, False: 0]
  ------------------
 7142|  8.69k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  8.69k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  8.69k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.02M|{
 8427|  1.02M|#define SCN_VISIT(Type)                                         \
 8428|  1.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.02M|    }                                                           \
 8431|  1.02M|    else {                                                      \
 8432|  1.02M|        return vis(monostate_val);                              \
 8433|  1.02M|    }
 8434|       |
 8435|  1.02M|    monostate monostate_val{};
 8436|       |
 8437|  1.02M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.02M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.02M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.02M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.02M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.02M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.02M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.02M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.02M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.02M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.02M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.02M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.02M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.02M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.02M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.02M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.02M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.02M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.02M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.02M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.02M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.02M]
  ------------------
 8479|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8480|  1.02M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.02M, False: 0]
  ------------------
 8481|  1.02M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.02M|    }                                                           \
  |  | 8431|  1.02M|    else {                                                      \
  |  | 8432|  1.02M|        return vis(monostate_val);                              \
  |  | 8433|  1.02M|    }
  ------------------
 8482|  1.02M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.02M]
  ------------------
 8483|  1.02M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.02M|    }                                                           \
  |  | 8431|  1.02M|    else {                                                      \
  |  | 8432|  1.02M|        return vis(monostate_val);                              \
  |  | 8433|  1.02M|    }
  ------------------
 8484|  1.02M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.02M]
  ------------------
 8485|  1.02M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.02M|    }                                                           \
  |  | 8431|  1.02M|    else {                                                      \
  |  | 8432|  1.02M|        return vis(monostate_val);                              \
  |  | 8433|  1.02M|    }
  ------------------
 8486|       |
 8487|  1.02M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.02M]
  ------------------
 8488|  1.02M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.02M|            return vis(
 8490|  1.02M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.02M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.02M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.02M|            SCN_CLANG_POP
 8505|  1.02M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|  56.4k|    {
 4084|  56.4k|        sync(0);
 4085|  56.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   169k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  1.50M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  1.02M|{
   89|  1.02M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.02M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.02M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.02M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  2.04M|{
   44|  2.04M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  2.04M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  1.02M|{
  127|  1.02M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.02M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.02M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.02M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  2.04M|{
   60|  2.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  2.04M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   501k|{
  163|   501k|    T value;
  164|   501k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   501k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   501k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   501k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   501k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.34k|    }                                                  \
  |  |  |  | 3667|   501k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   496k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   501k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  1.00M|{
   72|  1.00M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  1.00M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|  1.02M|{
   89|  1.02M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.02M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.02M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.02M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|  1.02M|{
  127|  1.02M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.02M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.02M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.02M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   501k|{
  163|   501k|    T value;
  164|   501k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   501k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   501k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   501k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   501k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.34k|    }                                                  \
  |  |  |  | 3667|   501k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   496k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   501k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|  1.02M|{
   89|  1.02M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.02M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.02M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.02M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  1.02M|{
   44|  1.02M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.02M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|  1.02M|{
  127|  1.02M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.02M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.02M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.02M|    static_cast<    \
  |  |  929|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.02M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  1.02M|{
   60|  1.02M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.02M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   501k|{
  163|   501k|    T value;
  164|   501k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   501k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   501k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   501k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   501k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.34k|    }                                                  \
  |  |  |  | 3667|   501k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   496k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   501k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   501k|{
   72|   501k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   501k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   501k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  3.42M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  3.42M|{
  653|  3.42M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  3.42M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   230k|{
 2184|   230k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   230k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   137k|{
 2192|   137k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   137k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   137k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 124k, False: 13.0k]
  |  |  ------------------
  ------------------
 2194|   124k|        source.sync(*n);
 2195|   124k|    }
 2196|  13.0k|    else {
 2197|  13.0k|        source.sync_all();
 2198|  13.0k|    }
 2199|   137k|    return n;
 2200|   137k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  2.04M|{
 2208|  2.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  2.04M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  1.02M|{
 2216|  1.02M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  1.02M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 993k, False: 26.0k]
  |  |  ------------------
  ------------------
 2218|   993k|        source.sync(*n);
 2219|   993k|    }
 2220|  26.0k|    else {
 2221|  26.0k|        source.sync_all();
 2222|  26.0k|    }
 2223|  1.02M|    return n;
 2224|  1.02M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   835k|{
  194|   835k|    return find_classic_impl(
  195|   835k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   835k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|   835k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   841k|{
  202|   841k|    return find_classic_impl(
  203|   841k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   841k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|   841k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   230k|{
 2141|   230k|    return vscan_internal(source, format, args);
 2142|   230k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   137k|{
 2147|   137k|    auto n = vscan_internal(source, format, args);
 2148|   137k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   137k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 124k, False: 13.0k]
  |  |  ------------------
  ------------------
 2149|   124k|        source.sync(*n);
 2150|   124k|    }
 2151|  13.0k|    else {
 2152|  13.0k|        source.sync_all();
 2153|  13.0k|    }
 2154|   137k|    return n;
 2155|   137k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  2.04M|{
 2161|  2.04M|    return vscan_internal(source, format, args);
 2162|  2.04M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  1.02M|{
 2167|  1.02M|    auto n = vscan_internal(source, format, args);
 2168|  1.02M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 993k, False: 26.0k]
  |  |  ------------------
  ------------------
 2169|   993k|        source.sync(*n);
 2170|   993k|    }
 2171|  26.0k|    else {
 2172|  26.0k|        source.sync_all();
 2173|  26.0k|    }
 2174|  1.02M|    return n;
 2175|  1.02M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   105k|{
 2251|   105k|    return vscan_value_internal(source, arg);
 2252|   105k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  63.6k|{
 2256|  63.6k|    auto n = vscan_value_internal(source, arg);
 2257|  63.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  63.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 61.4k, False: 2.17k]
  |  |  ------------------
  ------------------
 2258|  61.4k|        source.sync(*n);
 2259|  61.4k|    }
 2260|  2.17k|    else {
 2261|  2.17k|        source.sync_all();
 2262|  2.17k|    }
 2263|  63.6k|    return n;
 2264|  63.6k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  1.00M|{
 2270|  1.00M|    return vscan_value_internal(source, arg);
 2271|  1.00M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   501k|{
 2276|   501k|    auto n = vscan_value_internal(source, arg);
 2277|   501k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   501k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 496k, False: 4.34k]
  |  |  ------------------
  ------------------
 2278|   496k|        source.sync(*n);
 2279|   496k|    }
 2280|  4.34k|    else {
 2281|  4.34k|        source.sync_all();
 2282|  4.34k|    }
 2283|   501k|    return n;
 2284|   501k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   835k|{
  118|   835k|    auto it = source.begin();
  119|       |
  120|  1.56M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.23M, False: 325k]
  ------------------
  121|  1.23M|        auto sv =
  122|  1.23M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.23M|                .substr(0, 8);
  124|       |
  125|  1.23M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 912k, False: 321k]
  ------------------
  126|   912k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   912k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   912k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 382k, False: 529k]
  ------------------
  129|   382k|                break;
  130|   382k|            }
  131|   529k|            continue;
  132|   912k|        }
  133|       |
  134|   975k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 780k, False: 194k]
  ------------------
  135|   780k|            auto tmp =
  136|   780k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   780k|            auto res = get_next_code_point(tmp);
  138|   780k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 126k, False: 653k]
  ------------------
  139|   126k|                return it;
  140|   126k|            }
  141|   653k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   653k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   653k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   653k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   653k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   653k|        }
  145|   321k|    }
  146|       |
  147|   708k|    return detail::make_string_view_iterator(source, it);
  148|   835k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  2.02M|{
  105|  2.02M|    static_assert(sizeof(*source.data()) == 1);
  106|  2.02M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  2.02M|    uint64_t word{};
  108|  2.02M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  2.02M|    return has_byte_greater(word, 127) != 0;
  111|  2.02M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  3.84M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   780k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   841k|{
  118|   841k|    auto it = source.begin();
  119|       |
  120|  1.08M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 792k, False: 297k]
  ------------------
  121|   792k|        auto sv =
  122|   792k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   792k|                .substr(0, 8);
  124|       |
  125|   792k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 635k, False: 156k]
  ------------------
  126|   635k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   635k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   635k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 392k, False: 243k]
  ------------------
  129|   392k|                break;
  130|   392k|            }
  131|   243k|            continue;
  132|   635k|        }
  133|       |
  134|   304k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 299k, False: 4.49k]
  ------------------
  135|   299k|            auto tmp =
  136|   299k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   299k|            auto res = get_next_code_point(tmp);
  138|   299k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 152k, False: 147k]
  ------------------
  139|   152k|                return it;
  140|   152k|            }
  141|   147k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   147k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   147k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   147k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   147k|        }
  145|   156k|    }
  146|       |
  147|   689k|    return detail::make_string_view_iterator(source, it);
  148|   841k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.69M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   299k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   274k|{
 2073|   274k|    const auto argcount = args.size();
 2074|   274k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 127k, False: 147k]
  |  Branch (2074:60): [True: 127k, False: 0]
  ------------------
 2075|   127k|        auto arg = args.get(0);
 2076|   127k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   127k|    }
 2078|       |
 2079|   147k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 147k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   147k|    SCN_UNLIKELY_ATTR
 2087|   147k|    {
 2088|   147k|        auto handler = format_handler<false, CharT>{
 2089|   147k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   147k|        return vscan_parse_format_string(format, handler);
 2091|   147k|    }
 2092|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   735k|{
 1625|   735k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 397k, False: 338k]
  ------------------
 1626|   397k|        return false;
 1627|   397k|    }
 1628|   338k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 338k, False: 0]
  |  Branch (1628:39): [True: 338k, False: 0]
  ------------------
 1629|   735k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   190k|{
 1658|   190k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   190k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   190k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   190k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   190k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   190k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.51k, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.51k|    }                                                  \
  |  |  |  | 3667|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   184k|    return it.position();
 1675|   190k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   249k|        : format_handler_base{argcount},
 1900|   249k|          parse_ctx{format},
 1901|   249k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   249k|    static_cast<    \
  |  |  929|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   249k|    static_cast<    \
  |  |  929|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   249k|    {
 1903|   249k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.50M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.50M|    {
 1722|  3.50M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   249k|        : contiguous_ctx(source, args, loc)
 1852|   249k|    {
 1853|   249k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   249k|{
 2038|   249k|    const auto beg = handler.get_ctx().begin();
 2039|   249k|    detail::parse_format_string<false>(format, handler);
 2040|   249k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.4k, False: 205k]
  |  |  ------------------
  ------------------
 2041|  43.4k|        return unexpected(handler.error);
 2042|  43.4k|    }
 2043|   205k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   249k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.62M|    {
 2022|  1.62M|        return ctx.get();
 2023|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.62M|    {
 1857|  1.62M|        return contiguous_ctx;
 1858|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   455k|    {
 1907|   455k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 455k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   455k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   249k|{
 1681|   249k|    auto arg = ctx.arg(id);
 1682|   249k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   249k|    return arg;
 1686|   249k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.50M|    {
 1797|  3.50M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.50M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.50M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.50M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.50M|            visited_args_lower64 |= (1ull << id);
 1808|  3.50M|            return;
 1809|  3.50M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.50M|    {
 1782|  3.50M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.50M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.50M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.50M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.50M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.50M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   117k|    {
 1766|   117k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 0]
  |  |  ------------------
  ------------------
 1767|   117k|            error = err;
 1768|   117k|        }
 1769|   117k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   249k|    {
 1944|   249k|        return parse_ctx.next_arg_id();
 1945|   249k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   249k|    {
 1985|   249k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   249k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   249k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 249k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   249k|        auto specs = detail::format_specs{};
 1998|   249k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   249k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   249k|            arg.type()};
 2001|       |
 2002|   249k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   249k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 249k]
  |  Branch (2003:29): [True: 0, False: 249k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   249k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 232k]
  |  |  ------------------
  ------------------
 2009|  17.3k|            return parse_ctx.begin();
 2010|  17.3k|        }
 2011|   232k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   232k|        on_visit_scan_arg(
 2014|   232k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   232k|                                           get_ctx().locale()},
 2016|   232k|            arg);
 2017|   232k|        return parse_ctx.begin();
 2018|   249k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   249k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   249k|    {
 1701|   249k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   232k|    {
 1956|   232k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 232k]
  |  Branch (1956:23): [True: 0, False: 232k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   232k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   232k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 205k]
  |  |  ------------------
  ------------------
 1963|  26.0k|            on_error(r.error());
 1964|  26.0k|        }
 1965|   205k|        else {
 1966|   205k|            get_ctx().advance_to(*r);
 1967|   205k|        }
 1968|   232k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  78.2k|    {
 1761|  78.2k|        SCN_UNLIKELY_ATTR
 1762|  78.2k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  78.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.50M|    {
 1729|  3.50M|        {
 1730|  3.50M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.50M]
  ------------------
 1731|  3.50M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.50M]
  ------------------
 1732|  3.50M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.50M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.50M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.50M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.50M|        }
 1739|       |
 1740|  3.50M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.50M, False: 0]
  ------------------
 1741|  3.50M|            return;
 1742|  3.50M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.50M|    {
 1777|  3.50M|        return error;
 1778|  3.50M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  10.4M|    {
 1773|  10.4M|        return static_cast<bool>(error);
 1774|  10.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   147k|        : format_handler_base{argcount},
 1900|   147k|          parse_ctx{format},
 1901|   147k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   147k|    {
 1903|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   147k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   147k|    {
 1830|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   147k|{
 2038|   147k|    const auto beg = handler.get_ctx().begin();
 2039|   147k|    detail::parse_format_string<false>(format, handler);
 2040|   147k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.7k, False: 125k]
  |  |  ------------------
  ------------------
 2041|  21.7k|        return unexpected(handler.error);
 2042|  21.7k|    }
 2043|   125k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   972k|    {
 2022|   972k|        return ctx.get();
 2023|   972k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   972k|    {
 1834|   972k|        return ctx;
 1835|   972k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   273k|    {
 1907|   273k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 273k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   273k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   147k|{
 1681|   147k|    auto arg = ctx.arg(id);
 1682|   147k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   147k|    return arg;
 1686|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   147k|    {
 1944|   147k|        return parse_ctx.next_arg_id();
 1945|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   147k|    {
 1985|   147k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   147k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   147k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 147k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   147k|        auto specs = detail::format_specs{};
 1998|   147k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   147k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   147k|            arg.type()};
 2001|       |
 2002|   147k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   147k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 147k]
  |  Branch (2003:29): [True: 0, False: 147k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   147k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 138k]
  |  |  ------------------
  ------------------
 2009|  8.69k|            return parse_ctx.begin();
 2010|  8.69k|        }
 2011|   138k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   138k|        on_visit_scan_arg(
 2014|   138k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   138k|                                           get_ctx().locale()},
 2016|   138k|            arg);
 2017|   138k|        return parse_ctx.begin();
 2018|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   147k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   147k|    {
 1701|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   138k|    {
 1956|   138k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 138k]
  |  Branch (1956:23): [True: 0, False: 138k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   138k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   138k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 125k]
  |  |  ------------------
  ------------------
 1963|  13.0k|            on_error(r.error());
 1964|  13.0k|        }
 1965|   125k|        else {
 1966|   125k|            get_ctx().advance_to(*r);
 1967|   125k|        }
 1968|   138k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   460k|{
 2053|   460k|    const auto argcount = args.size();
 2054|   460k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 210k, False: 249k]
  |  Branch (2054:60): [True: 210k, False: 0]
  ------------------
 2055|   210k|        auto arg = args.get(0);
 2056|   210k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   210k|    static_cast<    \
  |  |  929|   210k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   210k|    }
 2058|       |
 2059|   249k|    auto handler = format_handler<true, CharT>{
 2060|   249k|        ranges::subrange<const CharT*>{source.data(),
 2061|   249k|                                       source.data() + source.size()},
 2062|   249k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   249k|    static_cast<    \
  |  |  929|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   249k|    static_cast<    \
  |  |  929|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   249k|    return vscan_parse_format_string(format, handler);
 2064|   460k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   316k|{
 1638|   316k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   316k|    auto reader =
 1644|   316k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   316k|            ranges::subrange<const CharT*>{source.data(),
 1646|   316k|                                           source.data() + source.size()},
 1647|   316k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   316k|    static_cast<    \
  |  |  929|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   316k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.0k, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.0k|    }                                                  \
  |  |  |  | 3667|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   303k|    return ranges::distance(source.data(), it);
 1650|   316k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  4.08M|{
 2053|  4.08M|    const auto argcount = args.size();
 2054|  4.08M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 2.00M, False: 2.07M]
  |  Branch (2054:60): [True: 2.00M, False: 0]
  ------------------
 2055|  2.00M|        auto arg = args.get(0);
 2056|  2.00M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  2.00M|    static_cast<    \
  |  |  929|  2.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  2.00M|    }
 2058|       |
 2059|  2.07M|    auto handler = format_handler<true, CharT>{
 2060|  2.07M|        ranges::subrange<const CharT*>{source.data(),
 2061|  2.07M|                                       source.data() + source.size()},
 2062|  2.07M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.07M|    static_cast<    \
  |  |  929|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.07M|    static_cast<    \
  |  |  929|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  2.07M|    return vscan_parse_format_string(format, handler);
 2064|  4.08M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  6.12M|{
 1625|  6.12M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.11M, False: 3.00M]
  ------------------
 1626|  3.11M|        return false;
 1627|  3.11M|    }
 1628|  3.00M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 3.00M, False: 0]
  |  Branch (1628:39): [True: 3.00M, False: 0]
  ------------------
 1629|  6.12M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  3.00M|{
 1638|  3.00M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.00M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  3.00M|    auto reader =
 1644|  3.00M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  3.00M|            ranges::subrange<const CharT*>{source.data(),
 1646|  3.00M|                                           source.data() + source.size()},
 1647|  3.00M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  3.00M|    static_cast<    \
  |  |  929|  3.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  3.00M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  3.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.0k, False: 2.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  26.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  26.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  26.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  26.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  26.0k|    }                                                  \
  |  |  |  | 3667|  3.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  2.98M|    return ranges::distance(source.data(), it);
 1650|  3.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|  2.07M|        : format_handler_base{argcount},
 1900|  2.07M|          parse_ctx{format},
 1901|  2.07M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  2.07M|    static_cast<    \
  |  |  929|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  2.07M|    static_cast<    \
  |  |  929|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  2.07M|    {
 1903|  2.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|  2.07M|        : contiguous_ctx(source, args, loc)
 1852|  2.07M|    {
 1853|  2.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.07M|{
 2038|  2.07M|    const auto beg = handler.get_ctx().begin();
 2039|  2.07M|    detail::parse_format_string<false>(format, handler);
 2040|  2.07M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.9k, False: 1.98M]
  |  |  ------------------
  ------------------
 2041|  86.9k|        return unexpected(handler.error);
 2042|  86.9k|    }
 2043|  1.98M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.07M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  14.2M|    {
 2022|  14.2M|        return ctx.get();
 2023|  14.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  14.2M|    {
 1857|  14.2M|        return contiguous_ctx;
 1858|  14.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  4.06M|    {
 1907|  4.06M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.06M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  2.07M|{
 1681|  2.07M|    auto arg = ctx.arg(id);
 1682|  2.07M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.07M|    return arg;
 1686|  2.07M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  2.07M|    {
 1944|  2.07M|        return parse_ctx.next_arg_id();
 1945|  2.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  2.07M|    {
 1985|  2.07M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.07M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.07M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.07M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.07M|        auto specs = detail::format_specs{};
 1998|  2.07M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.07M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.07M|            arg.type()};
 2001|       |
 2002|  2.07M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.07M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.07M]
  |  Branch (2003:29): [True: 0, False: 2.07M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.07M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.7k, False: 2.04M]
  |  |  ------------------
  ------------------
 2009|  34.7k|            return parse_ctx.begin();
 2010|  34.7k|        }
 2011|  2.04M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.04M|        on_visit_scan_arg(
 2014|  2.04M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.04M|                                           get_ctx().locale()},
 2016|  2.04M|            arg);
 2017|  2.04M|        return parse_ctx.begin();
 2018|  2.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  2.07M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  2.07M|    {
 1701|  2.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  2.04M|    {
 1956|  2.04M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.04M]
  |  Branch (1956:23): [True: 0, False: 2.04M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.04M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.04M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 1.98M]
  |  |  ------------------
  ------------------
 1963|  52.1k|            on_error(r.error());
 1964|  52.1k|        }
 1965|  1.98M|        else {
 1966|  1.98M|            get_ctx().advance_to(*r);
 1967|  1.98M|        }
 1968|  2.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.04M|{
 2073|  2.04M|    const auto argcount = args.size();
 2074|  2.04M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 1.00M, False: 1.03M]
  |  Branch (2074:60): [True: 1.00M, False: 0]
  ------------------
 2075|  1.00M|        auto arg = args.get(0);
 2076|  1.00M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  1.00M|    static_cast<    \
  |  |  929|  1.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  1.00M|    }
 2078|       |
 2079|  1.03M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.03M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.03M|    SCN_UNLIKELY_ATTR
 2087|  1.03M|    {
 2088|  1.03M|        auto handler = format_handler<false, CharT>{
 2089|  1.03M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.03M|        return vscan_parse_format_string(format, handler);
 2091|  1.03M|    }
 2092|  1.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  1.50M|{
 1658|  1.50M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  1.50M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  1.50M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  1.50M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  1.50M|    static_cast<    \
  |  |  929|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  1.50M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  1.50M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.0k, False: 1.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.0k|    }                                                  \
  |  |  |  | 3667|  1.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  1.49M|    return it.position();
 1675|  1.50M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|  1.03M|        : format_handler_base{argcount},
 1900|  1.03M|          parse_ctx{format},
 1901|  1.03M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.03M|    {
 1903|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|  1.03M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.03M|    {
 1830|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.03M|{
 2038|  1.03M|    const auto beg = handler.get_ctx().begin();
 2039|  1.03M|    detail::parse_format_string<false>(format, handler);
 2040|  1.03M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.4k, False: 994k]
  |  |  ------------------
  ------------------
 2041|  43.4k|        return unexpected(handler.error);
 2042|  43.4k|    }
 2043|   994k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  7.14M|    {
 2022|  7.14M|        return ctx.get();
 2023|  7.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  7.14M|    {
 1834|  7.14M|        return ctx;
 1835|  7.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  2.03M|    {
 1907|  2.03M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.03M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.03M|{
 1681|  1.03M|    auto arg = ctx.arg(id);
 1682|  1.03M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.03M|    return arg;
 1686|  1.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|  1.03M|    {
 1944|  1.03M|        return parse_ctx.next_arg_id();
 1945|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|  1.03M|    {
 1985|  1.03M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.03M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.03M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.03M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.03M|        auto specs = detail::format_specs{};
 1998|  1.03M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.03M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.03M|            arg.type()};
 2001|       |
 2002|  1.03M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.03M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.03M]
  |  Branch (2003:29): [True: 0, False: 1.03M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.03M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 1.02M]
  |  |  ------------------
  ------------------
 2009|  17.3k|            return parse_ctx.begin();
 2010|  17.3k|        }
 2011|  1.02M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.02M|        on_visit_scan_arg(
 2014|  1.02M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.02M|                                           get_ctx().locale()},
 2016|  1.02M|            arg);
 2017|  1.02M|        return parse_ctx.begin();
 2018|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|  1.03M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.03M|    {
 1701|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.02M|    {
 1956|  1.02M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.02M]
  |  Branch (1956:23): [True: 0, False: 1.02M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.02M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.02M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 994k]
  |  |  ------------------
  ------------------
 1963|  26.0k|            on_error(r.error());
 1964|  26.0k|        }
 1965|   994k|        else {
 1966|   994k|            get_ctx().advance_to(*r);
 1967|   994k|        }
 1968|  1.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   105k|{
 2099|   105k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   105k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  63.6k|{
 2099|  63.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  63.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  1.00M|{
 2099|  1.00M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  1.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   501k|{
 2099|   501k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   501k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   501k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  2.17k|{
 1351|  2.17k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  2.17k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  2.17k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  2.17k|            return transcode_to_string_impl_to32(src, dest);
 1362|  2.17k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  2.17k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  2.17k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  2.17k|{
 1244|  2.17k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  2.17k|    auto it = src.begin();
 1247|   852k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 849k, False: 2.17k]
  ------------------
 1248|   849k|        auto res = get_next_code_point(
 1249|   849k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   849k|                                                                 src.end()));
 1251|   849k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.9k, False: 839k]
  |  |  ------------------
  ------------------
 1252|  10.9k|            dest.push_back(DestCharT{0xfffd});
 1253|  10.9k|        }
 1254|   839k|        else {
 1255|   839k|            dest.push_back(res.value);
 1256|   839k|        }
 1257|   849k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   849k|    }
 1259|  2.17k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.92M|{
 1169|  1.92M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.92M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.92M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.0k, False: 1.88M]
  |  |  ------------------
  ------------------
 1173|  47.0k|        return {get_start_for_next_code_point(input),
 1174|  47.0k|                detail::invalid_code_point};
 1175|  47.0k|    }
 1176|  1.88M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.9k, False: 1.84M]
  |  |  ------------------
  ------------------
 1177|  40.9k|        return {input.end(), detail::invalid_code_point};
 1178|  40.9k|    }
 1179|       |
 1180|  1.84M|    return {input.begin() + len,
 1181|  1.84M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.88M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  47.0k|{
 1155|  47.0k|    auto it = input.begin();
 1156|   211k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 206k, False: 4.83k]
  ------------------
 1157|   206k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 42.2k, False: 164k]
  ------------------
 1158|  42.2k|            break;
 1159|  42.2k|        }
 1160|   206k|    }
 1161|  47.0k|    return it;
 1162|  47.0k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  39.1k|    {
 2920|  39.1k|        SCN_UNLIKELY_ATTR
 2921|  39.1k|        m_msg = msg;
 2922|  39.1k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  3.43M|    {
 2925|  3.43M|        return m_msg == nullptr;
 2926|  3.43M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  5.54M|{
  458|  5.54M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  5.54M|        static_cast<unsigned char>(ch))];
  460|  5.54M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   111k|{
  469|   111k|    return static_cast<unsigned char>(ch) <= 127;
  470|   111k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  29.0k|{
  474|  29.0k|#if WCHAR_MIN < 0
  475|  29.0k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 26.8k, False: 2.19k]
  |  Branch (475:23): [True: 16.9k, False: 9.93k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  29.0k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  2.02M|{
  539|  2.02M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.02M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  13.3M|{
  784|  13.3M|    return e != eof_error::good;
  785|  13.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  24.3k|{
  798|  24.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  24.3k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  24.3k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  3.31M|{
 5997|  3.31M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 3.31M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  3.31M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 3.31M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  3.31M|    return {};
 6012|  3.31M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.04M|    {
  304|  1.04M|        ranges::advance(x, n);
  305|  1.04M|        return x;
  306|  1.04M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.04M|    {
  268|  1.04M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.04M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.04M|    {
  151|  1.04M|        i += n;
  152|  1.04M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.37M|    {
  108|  2.37M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.37M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.37M|    {
   87|  2.37M|        return s - i;
   88|  2.37M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  4.96M|    {
  108|  4.96M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.96M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  4.96M|    {
   87|  4.96M|        return s - i;
   88|  4.96M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   325k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   325k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   325k|        auto beg = r.begin();
  990|   325k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 325k, False: 0]
  ------------------
  991|   325k|            return false;
  992|   325k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   325k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  97.7k|    {
  763|  97.7k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  97.7k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  18.8k|        : m_fptr([](storage fn,
  743|  18.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.8k|              cvref<T> obj = *get<T>(fn);
  745|  18.8k|              if constexpr (std::is_void_v<R>) {
  746|  18.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.8k|              }
  748|  18.8k|              else {
  749|  18.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.8k|              }
  751|  18.8k|          }),
  752|  18.8k|          m_storage(std::addressof(f))
  753|  18.8k|    {
  754|  18.8k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  48.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.8k|              else {
  749|  48.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.8k|              }
  751|  48.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  48.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.8k|        else if constexpr (std::is_object_v<T>) {
  688|  48.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.8k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  18.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  18.8k|        {
  662|  18.8k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   213M|    {
  763|   213M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   213M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   213M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.80M|        : m_fptr([](storage fn,
  743|  7.80M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.80M|              cvref<T> obj = *get<T>(fn);
  745|  7.80M|              if constexpr (std::is_void_v<R>) {
  746|  7.80M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.80M|              }
  748|  7.80M|              else {
  749|  7.80M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.80M|              }
  751|  7.80M|          }),
  752|  7.80M|          m_storage(std::addressof(f))
  753|  7.80M|    {
  754|  7.80M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  17.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.9M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.9M|              else {
  749|  17.9M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.9M|              }
  751|  17.9M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  17.9M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.9M|        else if constexpr (std::is_object_v<T>) {
  688|  17.9M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.9M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.80M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.80M|        {
  662|  7.80M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   134k|    {
 6026|   134k|        const bool need_skipped_width =
 6027|   134k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 134k]
  |  Branch (6027:33): [True: 0, False: 134k]
  ------------------
 6028|   134k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   134k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 134k]
  ------------------
 6032|   134k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 134k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   134k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 134k, False: 0]
  |  Branch (6036:56): [True: 128k, False: 6.29k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   128k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 128k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   254k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.79k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.79k|    }                                                  \
  |  |  |  | 3667|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   254k|                            make_eof_scan_error));
 6047|       |
 6048|   254k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 126k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   126k|            return result_type{it, 0};
 6056|   254k|        }
 6057|       |
 6058|  6.29k|        return result_type{rng.begin(), 0};
 6059|   134k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  6.29k|{
 1964|  6.29k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  6.29k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  6.29k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  6.29k|    else {
 1949|  6.29k|        auto first = range.begin();
 1950|  16.3k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 16.2k, False: 96]
  ------------------
 1951|  16.2k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 6.19k, False: 10.0k]
  ------------------
 1952|  6.19k|                return first;
 1953|  6.19k|            }
 1954|  16.2k|        }
 1955|     96|        return first;
 1956|  6.29k|    }
 1957|  6.29k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   125k|    {
  108|   125k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   125k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   125k|    {
   94|   125k|        iter_difference_t<I> counter{0};
   95|  1.38M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.26M, False: 125k]
  ------------------
   96|  1.26M|            ++i;
   97|  1.26M|            ++counter;
   98|  1.26M|        }
   99|   125k|        return counter;
  100|   125k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   508k|{
  950|   508k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   508k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.13k, False: 504k]
  |  |  ------------------
  ------------------
  951|  4.13k|        return eof_error::eof;
  952|  4.13k|    }
  953|   504k|    return eof_error::good;
  954|   508k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  3.89M|{
  944|  3.89M|    return is_range_eof(r.begin(), r.end());
  945|  3.89M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  3.89M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.89M|    {
  937|  3.89M|        return begin == end;
  938|  3.89M|    }
  939|  3.89M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   316k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   316k|    else {
 1677|   316k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   316k|    }
 1679|   316k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   316k|    {
 1525|   316k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   316k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   316k|    {
 1609|   316k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   316k|                           ranges::common_range<Range>) {
 1626|   316k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   316k|            auto end_seg = range.end().contiguous_segment();
 1628|   316k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.37k, False: 309k]
  |  |  ------------------
  ------------------
 1629|   316k|                             detail::to_address(end_seg.end()))) {
 1630|  7.37k|                auto& str = m_storage.emplace();
 1631|  7.37k|                str.reserve(range.end().position() - range.begin().position());
 1632|  7.37k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  7.37k|                m_view = string_view_type{str};
 1634|  7.37k|                return;
 1635|  7.37k|            }
 1636|       |
 1637|   309k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   309k|                                                            end_seg.data());
 1639|   309k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   316k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   622k|    {
 1570|   622k|        return m_view;
 1571|   622k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   316k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   124k|    {
 6068|   124k|        const bool need_skipped_width =
 6069|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 124k]
  |  Branch (6069:33): [True: 0, False: 124k]
  ------------------
 6070|   124k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   124k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 124k]
  ------------------
 6073|   124k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 124k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   124k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 124k, False: 0]
  ------------------
 6082|   124k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.89k, False: 122k]
  ------------------
 6083|   124k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 1.89k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  1.89k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 1.89k]
  ------------------
 6085|  1.89k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   124k|        return result_type{rng.begin(), 0};
 6107|   124k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   840k|{
  950|   840k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 834k]
  |  |  ------------------
  ------------------
  951|  6.27k|        return eof_error::eof;
  952|  6.27k|    }
  953|   834k|    return eof_error::good;
  954|   840k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   840k|{
  944|   840k|    return is_range_eof(r.begin(), r.end());
  945|   840k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   840k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   840k|    {
  937|   840k|        return begin == end;
  938|   840k|    }
  939|   840k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   524k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   524k|                  ranges::sized_range<Range>) {
 1674|   524k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   524k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   524k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   524k|    {
 1478|   524k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  2.86M|    {
 1491|  2.86M|        return sv;
 1492|  2.86M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  12.5k|{
 1964|  12.5k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  12.5k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  12.5k|{
 1945|  12.5k|    if constexpr (ranges::common_range<Range>) {
 1946|  12.5k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  12.5k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   524k|{
 2940|   524k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 524k, False: 0]
  ------------------
 2941|   524k|        auto it = read_while_classic_space(range);
 2942|   524k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   524k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.63k, False: 520k]
  |  |  ------------------
  ------------------
 2944|  3.63k|            return unexpected(e);
 2945|  3.63k|        }
 2946|       |
 2947|   520k|        return it;
 2948|   524k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   524k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   524k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   524k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   524k|        auto buf = make_contiguous_buffer(range);
 2109|   524k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   524k|        return ranges::next(range.begin(),
 2111|   524k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   524k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  1.04M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.04M|                  ranges::sized_range<Range>) {
 1674|  1.04M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.04M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  1.04M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.04M|    {
 1478|  1.04M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  24.2k|    {
  304|  24.2k|        ranges::advance(x, n);
  305|  24.2k|        return x;
  306|  24.2k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   632k|    {
  268|   632k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   632k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   632k|    {
  181|  1.15M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 527k, False: 632k]
  ------------------
  182|   527k|            ++i;
  183|   527k|        }
  184|   632k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|   314k|    {
 1575|   314k|        return m_storage.has_value();
 1576|   314k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  4.41k|    {
 1580|  4.41k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  4.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  4.41k|        return *m_storage;
 1582|  4.41k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   138k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   138k|            auto rd = make_reader<T, char_type>();
 6195|   138k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 134k]
  |  |  ------------------
  ------------------
 6196|  4.34k|                return unexpected(e);
 6197|  4.34k|            }
 6198|       |
 6199|   134k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 134k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   134k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   134k|                return impl(rd, range, value);
 6202|   134k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   138k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|   603k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|   603k|                       std::is_same_v<T, std::wstring>) {
 5816|   603k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   603k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|   877k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   370k|    {
 3029|   370k|        reader_error_handler eh{};
 3030|   370k|        get_derived().check_specs_impl(specs, eh);
 3031|   370k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 357k]
  |  |  ------------------
  ------------------
 3032|  13.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  13.0k|        }
 3034|   357k|        return {};
 3035|   370k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|   370k|    {
 3040|   370k|        return static_cast<Derived&>(*this);
 3041|   370k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   370k|    {
 5199|   370k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   370k|        SCN_GCC_PUSH
 5202|   370k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   370k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   370k|        SCN_CLANG_PUSH
 5206|   370k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   370k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   370k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 370k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 370k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|   339k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 339k, False: 31.9k]
  ------------------
 5215|   339k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 339k]
  ------------------
 5216|   339k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 339k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|   339k|                else {
 5220|   339k|                    m_type = reader_type::word;
 5221|   339k|                }
 5222|   339k|                break;
 5223|      0|            }
 5224|       |
 5225|  13.0k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 13.0k, False: 357k]
  ------------------
 5226|  13.0k|                m_type = reader_type::character;
 5227|  13.0k|                break;
 5228|       |
 5229|  18.8k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 18.8k, False: 352k]
  ------------------
 5230|  18.8k|                m_type = reader_type::character_set;
 5231|  18.8k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 370k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 370k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   370k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   370k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|   134k|    {
 6113|   134k|        const bool need_skipped_width =
 6114|   134k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 134k]
  |  Branch (6114:33): [True: 0, False: 134k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   134k|        auto it = rng.begin();
 6118|   134k|        std::ptrdiff_t prefix_width = 0;
 6119|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 134k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   134k|        else {
 6127|   134k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.79k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.79k|    }                                                  \
  |  |  |  | 3667|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   132k|            std::tie(it, prefix_width) = prefix_result;
 6129|   132k|        }
 6130|   132k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   132k|        std::ptrdiff_t value_width = 0;
 6134|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 132k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   132k|        else {
 6150|   132k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.90k, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.90k|    }                                                  \
  |  | 3667|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   125k|                                             specs, value, loc));
 6152|       |
 6153|   125k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 125k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   125k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   125k|        std::ptrdiff_t postfix_width = 0;
 6162|   125k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 124k, False: 1.08k]
  ------------------
 6163|   124k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   124k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   124k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   124k|                                 value_width));
 6167|   124k|            std::tie(it, postfix_width) = postfix_result;
 6168|   124k|        }
 6169|       |
 6170|   125k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   125k|                                                 value_width, postfix_width);
 6172|   125k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 125k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   125k|        return it;
 6177|   125k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|  1.19M|    {
 5248|  1.19M|        return m_type == reader_type::word;
 5249|  1.19M|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   841k|{
 1132|   841k|    auto it = src.begin();
 1133|  6.50M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 5.68M, False: 819k]
  ------------------
 1134|  5.68M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  5.68M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 12.9k, False: 5.66M]
  ------------------
 1136|  12.9k|            return false;
 1137|  12.9k|        }
 1138|  5.66M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 1.43k, False: 5.66M]
  ------------------
 1139|  1.43k|            return false;
 1140|  1.43k|        }
 1141|  5.66M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  5.66M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  5.66M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 7.81k, False: 5.65M]
  ------------------
 1144|  7.81k|            return false;
 1145|  7.81k|        }
 1146|  5.65M|        it += len;
 1147|  5.65M|    }
 1148|   819k|    return true;
 1149|   841k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   310k|{
 2982|   310k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   310k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 4.41k, False: 305k]
  ------------------
 2984|  4.41k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  4.41k|    static_cast<    \
  |  |  929|  4.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  4.41k|        }
 2986|   305k|        else {
 2987|   305k|            dest.assign(source.view());
 2988|   305k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   310k|    return {};
 2995|   310k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  18.8k|        {
 5092|  18.8k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 18.8k, False: 0]
  ------------------
 5093|  18.8k|                return {};
 5094|  18.8k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|  45.5k|        {
 5065|  45.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  45.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  45.5k|            const auto val =
 5067|  45.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  45.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  45.5k|                    (val % 8)) &
 5070|  45.5k|                   1u;
 5071|  45.5k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  48.8k|        {
 5118|  48.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 3.28k, False: 45.5k]
  ------------------
 5119|  3.28k|                return false;
 5120|  3.28k|            }
 5121|       |
 5122|  45.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  48.8k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  18.8k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|   132k|    {
 5266|   132k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   132k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   132k|        return read_impl(range, specs, value);
 5268|   132k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|   132k|    {
 5284|   132k|        SCN_CLANG_PUSH
 5285|   132k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   132k|        switch (m_type) {
 5288|   126k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 126k, False: 6.29k]
  ------------------
 5289|   126k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 132k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 132k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  6.29k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 6.29k, False: 126k]
  ------------------
 5299|  6.29k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  6.29k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 132k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 132k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 132k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   132k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   132k|        }
 5320|       |
 5321|   132k|        SCN_CLANG_POP
 5322|   132k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   315k|    {
 4809|   315k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   315k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   315k|{
 4741|   315k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   315k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   315k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 6.73k, False: 308k]
  ------------------
 4745|  6.73k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  6.73k|                                     "Invalid encoding in scanned string");
 4747|  6.73k|    }
 4748|   308k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   308k|    static_cast<    \
  |  |  929|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   308k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   308k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   308k|    static_cast<    \
  |  |  929|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   308k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   315k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   315k|    else {
 2085|   315k|        auto it = range.begin();
 2086|       |
 2087|   315k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|   315k|            auto seg = get_contiguous_beginning(range);
 2089|   315k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|   315k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 315k]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|   315k|            ranges::advance(it, seg.size());
 2094|   315k|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|   315k|            ranges::subrange{it, range.end()},
 2098|   315k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   315k|    }
 2100|   315k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   632k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   632k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   632k|        else {
 1054|   632k|            return r.begin().contiguous_segment();
 1055|   632k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   632k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   608k|{
 2049|   608k|    auto it = range.begin();
 2050|  3.39M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.38M, False: 8.14k]
  ------------------
 2051|  3.38M|        const auto val =
 2052|  3.38M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.38M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.34M, False: 36.9k]
  |  |  ------------------
  ------------------
 2054|  3.34M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.34M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.34M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 600k, False: 2.74M]
  ------------------
 2057|   600k|                return it;
 2058|   600k|            }
 2059|  3.34M|        }
 2060|  2.78M|        it = val.iterator;
 2061|  2.78M|    }
 2062|       |
 2063|  8.14k|    return it;
 2064|   608k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  3.38M|{
 1887|  3.38M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.38M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.38M|    auto it = range.begin();
 1891|  3.38M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.38M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.9k, False: 3.34M]
  |  |  ------------------
  ------------------
 1894|  36.9k|        ++it;
 1895|  36.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  36.9k|        return {it, {}};
 1897|  36.9k|    }
 1898|       |
 1899|  3.34M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 3.18M, False: 160k]
  ------------------
 1900|  3.18M|        ++it;
 1901|  3.18M|        return {it, string_type(1, *range.begin())};
 1902|  3.18M|    }
 1903|       |
 1904|   160k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|   160k|    return {it, string_type{range.begin(), it}};
 1906|  3.34M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  36.9k|{
 1155|  36.9k|    auto it = input.begin();
 1156|  92.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 91.2k, False: 1.29k]
  ------------------
 1157|  91.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 35.6k, False: 55.6k]
  ------------------
 1158|  35.6k|            break;
 1159|  35.6k|        }
 1160|  91.2k|    }
 1161|  36.9k|    return it;
 1162|  36.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|   160k|    {
  283|   160k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   160k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|   160k|    {
  252|   160k|        constexpr iter_difference_t<I> zero{0};
  253|   160k|        iter_difference_t<I> counter{0};
  254|       |
  255|   598k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 439k, False: 159k]
  |  Branch (255:30): [True: 438k, False: 1.05k]
  ------------------
  256|   438k|            ++i;
  257|   438k|            ++counter;
  258|   438k|        }
  259|       |
  260|   160k|        return counter;
  261|   160k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  3.38M|    {
 1878|  3.38M|        return !codepoint.empty();
 1879|  3.38M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   315k|        : m_fptr([](storage fn,
  743|   315k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   315k|              cvref<T> obj = *get<T>(fn);
  745|   315k|              if constexpr (std::is_void_v<R>) {
  746|   315k|                  obj(static_cast<decltype(args)>(args)...);
  747|   315k|              }
  748|   315k|              else {
  749|   315k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   315k|              }
  751|   315k|          }),
  752|   315k|          m_storage(std::addressof(f))
  753|   315k|    {
  754|   315k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.17M|              else {
  749|  2.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.17M|              }
  751|  2.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.17M|        else if constexpr (std::is_object_v<T>) {
  688|  2.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.17M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  2.17M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   315k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   315k|        {
  662|   315k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  6.29k|    {
 5037|  6.29k|        auto it = read_source_impl(range, {specs});
 5038|  6.29k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 1.94k]
  |  |  ------------------
  ------------------
 5039|  4.34k|            return unexpected(it.error());
 5040|  4.34k|        }
 5041|       |
 5042|  1.94k|        return read_string_impl(range, *it, value);
 5043|  6.29k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  6.29k|    {
 5142|  6.29k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  6.29k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  6.29k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  6.29k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  6.29k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 6.29k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  6.29k|        const auto cb = [&](SourceCharT ch) {
 5165|  6.29k|            return cb_wrapper.on_ascii_only(ch);
 5166|  6.29k|        };
 5167|       |
 5168|  6.29k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 6.29k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  6.29k|        auto it = read_while_code_unit(range, cb);
 5173|  6.29k|        return check_nonempty(it, range);
 5174|  6.29k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  6.29k|    {
 5180|  6.29k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.34k, False: 1.94k]
  ------------------
 5181|  4.34k|            return unexpected_scan_error(
 5182|  4.34k|                scan_error::invalid_scanned_value,
 5183|  4.34k|                "No characters matched in [character set]");
 5184|  4.34k|        }
 5185|       |
 5186|  1.94k|        return it;
 5187|  6.29k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   293k|{
 2070|   293k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   293k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  6.29k|        : m_fptr([](storage fn,
  743|  6.29k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.29k|              cvref<T> obj = *get<T>(fn);
  745|  6.29k|              if constexpr (std::is_void_v<R>) {
  746|  6.29k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.29k|              }
  748|  6.29k|              else {
  749|  6.29k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.29k|              }
  751|  6.29k|          }),
  752|  6.29k|          m_storage(std::addressof(f))
  753|  6.29k|    {
  754|  6.29k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  16.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.2k|              else {
  749|  16.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.2k|              }
  751|  16.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  16.2k|    {
  684|  16.2k|        if constexpr (std::is_const_v<T>) {
  685|  16.2k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.2k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5164|  16.2k|        const auto cb = [&](SourceCharT ch) {
 5165|  16.2k|            return cb_wrapper.on_ascii_only(ch);
 5166|  16.2k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  6.29k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  6.29k|        {
  667|  6.29k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|  1.94k|{
 4741|  1.94k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.94k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.94k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 1.94k]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|  1.94k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  1.94k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.94k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  1.94k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  1.94k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|   110k|    {
 5266|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   110k|        return read_impl(range, specs, value);
 5268|   110k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|   110k|    {
 5284|   110k|        SCN_CLANG_PUSH
 5285|   110k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   110k|        switch (m_type) {
 5288|   104k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 104k, False: 6.29k]
  ------------------
 5289|   104k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 110k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 110k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  6.29k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 6.29k, False: 104k]
  ------------------
 5299|  6.29k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  6.29k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 110k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 110k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 110k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   110k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   110k|        }
 5320|       |
 5321|   110k|        SCN_CLANG_POP
 5322|   110k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   260k|    {
 4809|   260k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   260k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   260k|{
 4741|   260k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   260k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   260k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.73k, False: 252k]
  ------------------
 4745|  7.73k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.73k|                                     "Invalid encoding in scanned string");
 4747|  7.73k|    }
 4748|   252k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   252k|    static_cast<    \
  |  |  929|   252k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   252k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   252k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   252k|    static_cast<    \
  |  |  929|   252k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   252k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   254k|{
 3001|   254k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   254k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   254k|    return {};
 3009|   254k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|   520k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   520k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   520k|        auto buf = make_contiguous_buffer(range);
 2080|   520k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   520k|        return ranges::next(range.begin(),
 2082|   520k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   520k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  6.29k|    {
 5037|  6.29k|        auto it = read_source_impl(range, {specs});
 5038|  6.29k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 1.94k]
  |  |  ------------------
  ------------------
 5039|  4.34k|            return unexpected(it.error());
 5040|  4.34k|        }
 5041|       |
 5042|  1.94k|        return read_string_impl(range, *it, value);
 5043|  6.29k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  12.5k|    {
 5142|  12.5k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  12.5k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  12.5k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  12.5k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  12.5k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 12.5k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  12.5k|        const auto cb = [&](SourceCharT ch) {
 5165|  12.5k|            return cb_wrapper.on_ascii_only(ch);
 5166|  12.5k|        };
 5167|       |
 5168|  12.5k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 12.5k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  12.5k|        auto it = read_while_code_unit(range, cb);
 5173|  12.5k|        return check_nonempty(it, range);
 5174|  12.5k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  12.5k|    {
 5180|  12.5k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 8.69k, False: 3.88k]
  ------------------
 5181|  8.69k|            return unexpected_scan_error(
 5182|  8.69k|                scan_error::invalid_scanned_value,
 5183|  8.69k|                "No characters matched in [character set]");
 5184|  8.69k|        }
 5185|       |
 5186|  3.88k|        return it;
 5187|  12.5k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  12.5k|        : m_fptr([](storage fn,
  743|  12.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.5k|              cvref<T> obj = *get<T>(fn);
  745|  12.5k|              if constexpr (std::is_void_v<R>) {
  746|  12.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.5k|              }
  748|  12.5k|              else {
  749|  12.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.5k|              }
  751|  12.5k|          }),
  752|  12.5k|          m_storage(std::addressof(f))
  753|  12.5k|    {
  754|  12.5k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  32.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.5k|              else {
  749|  32.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.5k|              }
  751|  32.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  32.5k|    {
  684|  32.5k|        if constexpr (std::is_const_v<T>) {
  685|  32.5k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.5k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  32.5k|        const auto cb = [&](SourceCharT ch) {
 5165|  32.5k|            return cb_wrapper.on_ascii_only(ch);
 5166|  32.5k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  12.5k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  12.5k|        {
  667|  12.5k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.94k|{
 4741|  1.94k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.94k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.94k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 1.94k]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|  1.94k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  1.94k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.94k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  1.94k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  1.94k|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|   274k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   274k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   274k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   274k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|   110k|    {
 5266|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   110k|        return read_impl(range, specs, value);
 5268|   110k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|   110k|    {
 5284|   110k|        SCN_CLANG_PUSH
 5285|   110k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   110k|        switch (m_type) {
 5288|   104k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 104k, False: 6.29k]
  ------------------
 5289|   104k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 110k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 110k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  6.29k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 6.29k, False: 104k]
  ------------------
 5299|  6.29k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  6.29k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 110k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 110k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 110k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   110k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   110k|        }
 5320|       |
 5321|   110k|        SCN_CLANG_POP
 5322|   110k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   260k|    {
 4816|   260k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   260k|                                     value);
 4818|   260k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   260k|{
 4762|   260k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   260k|    auto src = [&]() {
 4765|   260k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   260k|            return make_contiguous_buffer(
 4767|   260k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   260k|        }
 4769|   260k|        else {
 4770|   260k|            return make_contiguous_buffer(
 4771|   260k|                ranges::subrange{range.begin(), result});
 4772|   260k|        }
 4773|   260k|    }();
 4774|   260k|    using src_type = decltype(src);
 4775|       |
 4776|   260k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   260k|    else {
 4789|   260k|        const auto view = src.view();
 4790|   260k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   260k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 7.73k, False: 252k]
  ------------------
 4793|  7.73k|            return unexpected_scan_error(
 4794|  7.73k|                scan_error::invalid_scanned_value,
 4795|  7.73k|                "Invalid encoding in scanned string_view");
 4796|  7.73k|        }
 4797|       |
 4798|   252k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   252k|    static_cast<    \
  |  |  929|   252k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   260k|    }
 4800|   260k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   260k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   260k|        else {
 4770|   260k|            return make_contiguous_buffer(
 4771|   260k|                ranges::subrange{range.begin(), result});
 4772|   260k|        }
 4773|   260k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  6.29k|    {
 5051|  6.29k|        auto it = read_source_impl(range, {specs});
 5052|  6.29k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 1.94k]
  |  |  ------------------
  ------------------
 5053|  4.34k|            return unexpected(it.error());
 5054|  4.34k|        }
 5055|       |
 5056|  1.94k|        return read_string_view_impl(range, *it, value);
 5057|  6.29k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  1.94k|{
 4762|  1.94k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.94k|    auto src = [&]() {
 4765|  1.94k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.94k|            return make_contiguous_buffer(
 4767|  1.94k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.94k|        }
 4769|  1.94k|        else {
 4770|  1.94k|            return make_contiguous_buffer(
 4771|  1.94k|                ranges::subrange{range.begin(), result});
 4772|  1.94k|        }
 4773|  1.94k|    }();
 4774|  1.94k|    using src_type = decltype(src);
 4775|       |
 4776|  1.94k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.94k|    else {
 4789|  1.94k|        const auto view = src.view();
 4790|  1.94k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.94k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 1.94k]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|  1.94k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.94k|    static_cast<    \
  |  |  929|  1.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.94k|    }
 4800|  1.94k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  1.94k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.94k|        else {
 4770|  1.94k|            return make_contiguous_buffer(
 4771|  1.94k|                ranges::subrange{range.begin(), result});
 4772|  1.94k|        }
 4773|  1.94k|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   317k|{
 2940|   317k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 317k, False: 0]
  ------------------
 2941|   317k|        auto it = read_while_classic_space(range);
 2942|   317k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   317k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.58k, False: 315k]
  |  |  ------------------
  ------------------
 2944|  2.58k|            return unexpected(e);
 2945|  2.58k|        }
 2946|       |
 2947|   315k|        return it;
 2948|   317k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   317k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   317k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   317k|    else {
 2114|   317k|        auto it = range.begin();
 2115|       |
 2116|   317k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   317k|            auto seg = get_contiguous_beginning(range);
 2118|   317k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   317k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 24.2k, False: 293k]
  ------------------
 2120|  24.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  24.2k|            }
 2122|   293k|            ranges::advance(it, seg.size());
 2123|   293k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   317k|            return detail::is_cp_space(cp);
 2127|   317k|        });
 2128|   317k|    }
 2129|   317k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   293k|        : m_fptr([](storage fn,
  743|   293k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   293k|              cvref<T> obj = *get<T>(fn);
  745|   293k|              if constexpr (std::is_void_v<R>) {
  746|   293k|                  obj(static_cast<decltype(args)>(args)...);
  747|   293k|              }
  748|   293k|              else {
  749|   293k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   293k|              }
  751|   293k|          }),
  752|   293k|          m_storage(std::addressof(f))
  753|   293k|    {
  754|   293k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.17M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.17M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.17M|            return detail::is_cp_space(cp);
 2127|  1.17M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   293k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   293k|        {
  662|   293k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.51M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  2.51M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.51M|        auto beg = r.begin();
  990|  2.51M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.51M, False: 0]
  ------------------
  991|  2.51M|            return false;
  992|  2.51M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  2.51M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  58.1k|    {
  763|  58.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  58.1k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  26.8k|        : m_fptr([](storage fn,
  743|  26.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.8k|              cvref<T> obj = *get<T>(fn);
  745|  26.8k|              if constexpr (std::is_void_v<R>) {
  746|  26.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.8k|              }
  748|  26.8k|              else {
  749|  26.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.8k|              }
  751|  26.8k|          }),
  752|  26.8k|          m_storage(std::addressof(f))
  753|  26.8k|    {
  754|  26.8k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  29.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  29.0k|              else {
  749|  29.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.0k|              }
  751|  29.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  29.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  29.0k|        else if constexpr (std::is_object_v<T>) {
  688|  29.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  29.0k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  26.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.8k|        {
  662|  26.8k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  1.01M|    {
 6026|  1.01M|        const bool need_skipped_width =
 6027|  1.01M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 1.01M]
  |  Branch (6027:33): [True: 0, False: 1.01M]
  ------------------
 6028|  1.01M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.01M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 1.01M]
  ------------------
 6032|  1.01M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 1.01M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  1.01M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.01M, False: 0]
  |  Branch (6036:56): [True: 1.00M, False: 8.93k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.00M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.00M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  2.00M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.85k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.85k|    }                                                  \
  |  |  |  | 3667|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  2.00M|                            make_eof_scan_error));
 6047|       |
 6048|  2.00M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 1.00M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  1.00M|            return result_type{it, 0};
 6056|  2.00M|        }
 6057|       |
 6058|  8.93k|        return result_type{rng.begin(), 0};
 6059|  1.01M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  8.93k|{
 1964|  8.93k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  8.93k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  8.93k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  8.93k|    else {
 1949|  8.93k|        auto first = range.begin();
 1950|  9.78k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 9.69k, False: 88]
  ------------------
 1951|  9.69k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 8.85k, False: 844]
  ------------------
 1952|  8.85k|                return first;
 1953|  8.85k|            }
 1954|  9.69k|        }
 1955|     88|        return first;
 1956|  8.93k|    }
 1957|  8.93k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   994k|    {
  108|   994k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   994k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   994k|    {
   94|   994k|        iter_difference_t<I> counter{0};
   95|  24.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 23.2M, False: 994k]
  ------------------
   96|  23.2M|            ++i;
   97|  23.2M|            ++counter;
   98|  23.2M|        }
   99|   994k|        return counter;
  100|   994k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.00M|{
  950|  4.00M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.64k, False: 4.00M]
  |  |  ------------------
  ------------------
  951|  4.64k|        return eof_error::eof;
  952|  4.64k|    }
  953|  4.00M|    return eof_error::good;
  954|  4.00M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  68.1M|{
  944|  68.1M|    return is_range_eof(r.begin(), r.end());
  945|  68.1M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  68.1M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  68.1M|    {
  937|  68.1M|        return begin == end;
  938|  68.1M|    }
  939|  68.1M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|  2.50M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  2.50M|    else {
 1677|  2.50M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  2.50M|    }
 1679|  2.50M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  2.50M|    {
 1525|  2.50M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  2.50M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|  2.50M|    {
 1609|  2.50M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  2.50M|                           ranges::common_range<Range>) {
 1626|  2.50M|            auto beg_seg = range.begin().contiguous_segment();
 1627|  2.50M|            auto end_seg = range.end().contiguous_segment();
 1628|  2.50M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.82k, False: 2.49M]
  |  |  ------------------
  ------------------
 1629|  2.50M|                             detail::to_address(end_seg.end()))) {
 1630|  8.82k|                auto& str = m_storage.emplace();
 1631|  8.82k|                str.reserve(range.end().position() - range.begin().position());
 1632|  8.82k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  8.82k|                m_view = string_view_type{str};
 1634|  8.82k|                return;
 1635|  8.82k|            }
 1636|       |
 1637|  2.49M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|  2.49M|                                                            end_seg.data());
 1639|  2.49M|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  2.50M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  4.98M|    {
 1570|  4.98M|        return m_view;
 1571|  4.98M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.50M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   992k|    {
 6068|   992k|        const bool need_skipped_width =
 6069|   992k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 992k]
  |  Branch (6069:33): [True: 0, False: 992k]
  ------------------
 6070|   992k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   992k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 992k]
  ------------------
 6073|   992k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 992k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   992k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 992k, False: 0]
  ------------------
 6082|   992k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 202, False: 992k]
  ------------------
 6083|   992k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 202]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    202|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 202]
  ------------------
 6085|    202|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   992k|        return result_type{rng.begin(), 0};
 6107|   992k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   128M|{
 1887|   128M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   128M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   128M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   128M|    auto it = range.begin();
 1891|   128M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   128M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   128M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   128M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 128M, False: 0]
  ------------------
 1900|   128M|        ++it;
 1901|   128M|        return {it, string_type(1, *range.begin())};
 1902|   128M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   128M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   136M|{
  944|   136M|    return is_range_eof(r.begin(), r.end());
  945|   136M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   136M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   136M|    {
  937|   136M|        return begin == end;
  938|   136M|    }
  939|   136M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|   128M|    {
 1878|   128M|        return !codepoint.empty();
 1879|   128M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  8.01M|{
  950|  8.01M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  8.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.28k, False: 8.00M]
  |  |  ------------------
  ------------------
  951|  9.28k|        return eof_error::eof;
  952|  9.28k|    }
  953|  8.00M|    return eof_error::good;
  954|  8.01M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  5.00M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  5.00M|                  ranges::sized_range<Range>) {
 1674|  5.00M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  5.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  5.00M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  5.00M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  5.00M|    {
 1478|  5.00M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  7.48M|    {
 1491|  7.48M|        return sv;
 1492|  7.48M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  17.8k|{
 1964|  17.8k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  17.8k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  17.8k|{
 1945|  17.8k|    if constexpr (ranges::common_range<Range>) {
 1946|  17.8k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  17.8k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  5.00M|{
 2940|  5.00M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 5.00M, False: 0]
  ------------------
 2941|  5.00M|        auto it = read_while_classic_space(range);
 2942|  5.00M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  5.00M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.43k, False: 5.00M]
  |  |  ------------------
  ------------------
 2944|  4.43k|            return unexpected(e);
 2945|  4.43k|        }
 2946|       |
 2947|  5.00M|        return it;
 2948|  5.00M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  5.00M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  5.00M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  5.00M|    else {
 2114|  5.00M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  5.00M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  5.00M|            return detail::is_cp_space(cp);
 2127|  5.00M|        });
 2128|  5.00M|    }
 2129|  5.00M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  5.00M|{
 2070|  5.00M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  5.00M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  10.0M|{
 2049|  10.0M|    auto it = range.begin();
 2050|   128M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 128M, False: 27.9k]
  ------------------
 2051|   128M|        const auto val =
 2052|   128M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   128M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   128M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128M, False: 0]
  |  |  ------------------
  ------------------
 2054|   128M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   128M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   128M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 9.98M, False: 118M]
  ------------------
 2057|  9.98M|                return it;
 2058|  9.98M|            }
 2059|   128M|        }
 2060|   118M|        it = val.iterator;
 2061|   118M|    }
 2062|       |
 2063|  27.9k|    return it;
 2064|  10.0M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  5.00M|        : m_fptr([](storage fn,
  743|  5.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.00M|              cvref<T> obj = *get<T>(fn);
  745|  5.00M|              if constexpr (std::is_void_v<R>) {
  746|  5.00M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.00M|              }
  748|  5.00M|              else {
  749|  5.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.00M|              }
  751|  5.00M|          }),
  752|  5.00M|          m_storage(std::addressof(f))
  753|  5.00M|    {
  754|  5.00M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  11.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.1M|              else {
  749|  11.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.1M|              }
  751|  11.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  11.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.1M|        else if constexpr (std::is_object_v<T>) {
  688|  11.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.1M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  11.1M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  11.1M|            return detail::is_cp_space(cp);
 2127|  11.1M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  5.00M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.00M|        {
  662|  5.00M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|  2.48M|    {
 1575|  2.48M|        return m_storage.has_value();
 1576|  2.48M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|  2.67k|    {
 1580|  2.67k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  2.67k|        return *m_storage;
 1582|  2.67k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  7.57M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  3.06M|    {
 3029|  3.06M|        reader_error_handler eh{};
 3030|  3.06M|        get_derived().check_specs_impl(specs, eh);
 3031|  3.06M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 3.03M]
  |  |  ------------------
  ------------------
 3032|  26.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  26.0k|        }
 3034|  3.03M|        return {};
 3035|  3.06M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  3.06M|    {
 3040|  3.06M|        return static_cast<Derived&>(*this);
 3041|  3.06M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  3.06M|    {
 5199|  3.06M|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  3.06M|        SCN_GCC_PUSH
 5202|  3.06M|        SCN_GCC_IGNORE("-Wswitch")
 5203|  3.06M|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  3.06M|        SCN_CLANG_PUSH
 5206|  3.06M|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  3.06M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  3.06M|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 3.06M]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 3.06M]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|  3.00M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 3.00M, False: 52.8k]
  ------------------
 5215|  3.00M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 3.00M]
  ------------------
 5216|  3.00M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 3.00M]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|  3.00M|                else {
 5220|  3.00M|                    m_type = reader_type::word;
 5221|  3.00M|                }
 5222|  3.00M|                break;
 5223|      0|            }
 5224|       |
 5225|  26.0k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 26.0k, False: 3.03M]
  ------------------
 5226|  26.0k|                m_type = reader_type::character;
 5227|  26.0k|                break;
 5228|       |
 5229|  26.8k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 26.8k, False: 3.03M]
  ------------------
 5230|  26.8k|                m_type = reader_type::character_set;
 5231|  26.8k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 3.06M]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 3.06M]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|  3.06M|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  3.06M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  10.5M|    {
 5248|  10.5M|        return m_type == reader_type::word;
 5249|  10.5M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  7.50M|{
 1132|  7.50M|    auto it = src.begin();
 1133|   172M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 165M, False: 7.45M]
  ------------------
 1134|   165M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   165M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 165M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   165M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 165M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   165M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   165M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   165M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 51.2k, False: 165M]
  ------------------
 1144|  51.2k|            return false;
 1145|  51.2k|        }
 1146|   165M|        it += len;
 1147|   165M|    }
 1148|  7.45M|    return true;
 1149|  7.50M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|  26.8k|        {
 5092|  26.8k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 26.8k, False: 0]
  ------------------
 5093|  26.8k|                return {};
 5094|  26.8k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  16.9k|        {
 5065|  16.9k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  16.9k|            const auto val =
 5067|  16.9k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  16.9k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  16.9k|                    (val % 8)) &
 5070|  16.9k|                   1u;
 5071|  16.9k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  29.0k|        {
 5118|  29.0k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 12.1k, False: 16.9k]
  ------------------
 5119|  12.1k|                return false;
 5120|  12.1k|            }
 5121|       |
 5122|  16.9k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  29.0k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  26.8k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|  2.50M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  2.50M|    else {
 2085|  2.50M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  2.50M|        return read_until_code_point(
 2097|  2.50M|            ranges::subrange{it, range.end()},
 2098|  2.50M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  2.50M|    }
 2100|  2.50M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  5.00M|{
 2049|  5.00M|    auto it = range.begin();
 2050|  64.1M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 64.1M, False: 13.9k]
  ------------------
 2051|  64.1M|        const auto val =
 2052|  64.1M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  64.1M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  64.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 64.1M, False: 0]
  |  |  ------------------
  ------------------
 2054|  64.1M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  64.1M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  64.1M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 4.99M, False: 59.1M]
  ------------------
 2057|  4.99M|                return it;
 2058|  4.99M|            }
 2059|  64.1M|        }
 2060|  59.1M|        it = val.iterator;
 2061|  59.1M|    }
 2062|       |
 2063|  13.9k|    return it;
 2064|  5.00M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  64.1M|{
 1887|  64.1M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  64.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  64.1M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  64.1M|    auto it = range.begin();
 1891|  64.1M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  64.1M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  64.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.1M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  64.1M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 64.1M, False: 0]
  ------------------
 1900|  64.1M|        ++it;
 1901|  64.1M|        return {it, string_type(1, *range.begin())};
 1902|  64.1M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  64.1M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  64.1M|    {
 1878|  64.1M|        return !codepoint.empty();
 1879|  64.1M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.50M|        : m_fptr([](storage fn,
  743|  2.50M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.50M|              cvref<T> obj = *get<T>(fn);
  745|  2.50M|              if constexpr (std::is_void_v<R>) {
  746|  2.50M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.50M|              }
  748|  2.50M|              else {
  749|  2.50M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.50M|              }
  751|  2.50M|          }),
  752|  2.50M|          m_storage(std::addressof(f))
  753|  2.50M|    {
  754|  2.50M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  58.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.5M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.5M|              else {
  749|  58.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.5M|              }
  751|  58.5M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  58.5M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.5M|        else if constexpr (std::is_object_v<T>) {
  688|  58.5M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.5M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  58.5M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.50M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.50M|        {
  662|  2.50M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  8.93k|    {
 5142|  8.93k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  8.93k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  8.93k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.93k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  8.93k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  8.93k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 8.93k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  8.93k|        const auto cb = [&](SourceCharT ch) {
 5165|  8.93k|            return cb_wrapper.on_ascii_only(ch);
 5166|  8.93k|        };
 5167|       |
 5168|  8.93k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 8.93k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  8.93k|        auto it = read_while_code_unit(range, cb);
 5173|  8.93k|        return check_nonempty(it, range);
 5174|  8.93k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  8.93k|    {
 5180|  8.93k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 8.69k, False: 246]
  ------------------
 5181|  8.69k|            return unexpected_scan_error(
 5182|  8.69k|                scan_error::invalid_scanned_value,
 5183|  8.69k|                "No characters matched in [character set]");
 5184|  8.69k|        }
 5185|       |
 5186|    246|        return it;
 5187|  8.93k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  2.50M|{
 2070|  2.50M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  2.50M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  8.93k|        : m_fptr([](storage fn,
  743|  8.93k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.93k|              cvref<T> obj = *get<T>(fn);
  745|  8.93k|              if constexpr (std::is_void_v<R>) {
  746|  8.93k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.93k|              }
  748|  8.93k|              else {
  749|  8.93k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.93k|              }
  751|  8.93k|          }),
  752|  8.93k|          m_storage(std::addressof(f))
  753|  8.93k|    {
  754|  8.93k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  9.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.69k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.69k|              else {
  749|  9.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.69k|              }
  751|  9.69k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.69k|    {
  684|  9.69k|        if constexpr (std::is_const_v<T>) {
  685|  9.69k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.69k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5164|  9.69k|        const auto cb = [&](SourceCharT ch) {
 5165|  9.69k|            return cb_wrapper.on_ascii_only(ch);
 5166|  9.69k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  8.93k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.93k|        {
  667|  8.93k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  5.00M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  5.00M|    else {
 2085|  5.00M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  5.00M|        return read_until_code_point(
 2097|  5.00M|            ranges::subrange{it, range.end()},
 2098|  5.00M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  5.00M|    }
 2100|  5.00M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  5.00M|        : m_fptr([](storage fn,
  743|  5.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.00M|              cvref<T> obj = *get<T>(fn);
  745|  5.00M|              if constexpr (std::is_void_v<R>) {
  746|  5.00M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.00M|              }
  748|  5.00M|              else {
  749|  5.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.00M|              }
  751|  5.00M|          }),
  752|  5.00M|          m_storage(std::addressof(f))
  753|  5.00M|    {
  754|  5.00M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   117M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117M|              else {
  749|   117M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117M|              }
  751|   117M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   117M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117M|        else if constexpr (std::is_object_v<T>) {
  688|   117M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|   117M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  5.00M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.00M|        {
  662|  5.00M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  17.8k|    {
 5142|  17.8k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  17.8k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  17.8k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  17.8k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  17.8k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 17.8k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  17.8k|        const auto cb = [&](SourceCharT ch) {
 5165|  17.8k|            return cb_wrapper.on_ascii_only(ch);
 5166|  17.8k|        };
 5167|       |
 5168|  17.8k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 17.8k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  17.8k|        auto it = read_while_code_unit(range, cb);
 5173|  17.8k|        return check_nonempty(it, range);
 5174|  17.8k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  17.8k|    {
 5180|  17.8k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 17.3k, False: 492]
  ------------------
 5181|  17.3k|            return unexpected_scan_error(
 5182|  17.3k|                scan_error::invalid_scanned_value,
 5183|  17.3k|                "No characters matched in [character set]");
 5184|  17.3k|        }
 5185|       |
 5186|    492|        return it;
 5187|  17.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  17.8k|        : m_fptr([](storage fn,
  743|  17.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.8k|              cvref<T> obj = *get<T>(fn);
  745|  17.8k|              if constexpr (std::is_void_v<R>) {
  746|  17.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.8k|              }
  748|  17.8k|              else {
  749|  17.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.8k|              }
  751|  17.8k|          }),
  752|  17.8k|          m_storage(std::addressof(f))
  753|  17.8k|    {
  754|  17.8k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  19.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  19.3k|              else {
  749|  19.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.3k|              }
  751|  19.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  19.3k|    {
  684|  19.3k|        if constexpr (std::is_const_v<T>) {
  685|  19.3k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  19.3k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  19.3k|        const auto cb = [&](SourceCharT ch) {
 5165|  19.3k|            return cb_wrapper.on_ascii_only(ch);
 5166|  19.3k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  17.8k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  17.8k|        {
  667|  17.8k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  1.02M|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  1.02M|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  1.02M|            auto rd = make_reader<T, char_type>();
 6195|  1.02M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 1.01M]
  |  |  ------------------
  ------------------
 6196|  8.69k|                return unexpected(e);
 6197|  8.69k|            }
 6198|       |
 6199|  1.01M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 1.01M, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  1.01M|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  1.01M|                return impl(rd, range, value);
 6202|  1.01M|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  1.02M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  5.04M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  5.04M|                       std::is_same_v<T, std::wstring>) {
 5816|  5.04M|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  5.04M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|  1.01M|    {
 6113|  1.01M|        const bool need_skipped_width =
 6114|  1.01M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 1.01M]
  |  Branch (6114:33): [True: 0, False: 1.01M]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  1.01M|        auto it = rng.begin();
 6118|  1.01M|        std::ptrdiff_t prefix_width = 0;
 6119|  1.01M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.01M]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  1.01M|        else {
 6127|  1.01M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.85k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.85k|    }                                                  \
  |  |  |  | 3667|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.00M|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.00M|        }
 6130|  1.00M|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  1.00M|        std::ptrdiff_t value_width = 0;
 6134|  1.00M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 1.00M]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  1.00M|        else {
 6150|  1.00M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 994k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  15.5k|    }                                                  \
  |  | 3667|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   994k|                                             specs, value, loc));
 6152|       |
 6153|   994k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 994k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   994k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   994k|        std::ptrdiff_t postfix_width = 0;
 6162|   994k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 992k, False: 1.66k]
  ------------------
 6163|   992k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   992k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   992k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   992k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 992k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   992k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   992k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   992k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   992k|                                 value_width));
 6167|   992k|            std::tie(it, postfix_width) = postfix_result;
 6168|   992k|        }
 6169|       |
 6170|   994k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   994k|                                                 value_width, postfix_width);
 6172|   994k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 994k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   994k|        return it;
 6177|   994k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|  2.48M|{
 2982|  2.48M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|  2.48M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 2.67k, False: 2.48M]
  ------------------
 2984|  2.67k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.67k|    static_cast<    \
  |  |  929|  2.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  2.67k|        }
 2986|  2.48M|        else {
 2987|  2.48M|            dest.assign(source.view());
 2988|  2.48M|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|  2.48M|    return {};
 2995|  2.48M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|  1.00M|    {
 5266|  1.00M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.00M|        return read_impl(range, specs, value);
 5268|  1.00M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|  1.00M|    {
 5284|  1.00M|        SCN_CLANG_PUSH
 5285|  1.00M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.00M|        switch (m_type) {
 5288|  1.00M|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 1.00M, False: 8.93k]
  ------------------
 5289|  1.00M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 1.00M]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.00M]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  8.93k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 8.93k, False: 1.00M]
  ------------------
 5299|  8.93k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  8.93k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 1.00M]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 1.00M]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.00M]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.00M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.00M|        }
 5320|       |
 5321|  1.00M|        SCN_CLANG_POP
 5322|  1.00M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|  2.50M|    {
 4809|  2.50M|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|  2.50M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|  2.50M|{
 4741|  2.50M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.50M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.50M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 17.0k, False: 2.48M]
  ------------------
 4745|  17.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  17.0k|                                     "Invalid encoding in scanned string");
 4747|  17.0k|    }
 4748|  2.48M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.48M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.48M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.48M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  8.93k|    {
 5037|  8.93k|        auto it = read_source_impl(range, {specs});
 5038|  8.93k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 246]
  |  |  ------------------
  ------------------
 5039|  8.69k|            return unexpected(it.error());
 5040|  8.69k|        }
 5041|       |
 5042|    246|        return read_string_impl(range, *it, value);
 5043|  8.93k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    246|{
 4741|    246|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    246|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    246|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 246]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    246|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    246|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    246|    return SCN_MOVE(result);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    246|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  1.00M|    {
 5266|  1.00M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.00M|        return read_impl(range, specs, value);
 5268|  1.00M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  1.00M|    {
 5284|  1.00M|        SCN_CLANG_PUSH
 5285|  1.00M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.00M|        switch (m_type) {
 5288|  1.00M|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 1.00M, False: 8.93k]
  ------------------
 5289|  1.00M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 1.00M]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.00M]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  8.93k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 8.93k, False: 1.00M]
  ------------------
 5299|  8.93k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  8.93k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 1.00M]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 1.00M]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.00M]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.00M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.00M|        }
 5320|       |
 5321|  1.00M|        SCN_CLANG_POP
 5322|  1.00M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|  2.50M|    {
 4809|  2.50M|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|  2.50M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  2.50M|{
 4741|  2.50M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.50M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.50M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 17.0k, False: 2.48M]
  ------------------
 4745|  17.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  17.0k|                                     "Invalid encoding in scanned string");
 4747|  17.0k|    }
 4748|  2.48M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.48M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.48M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.48M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  2.48M|{
 3001|  2.48M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  2.48M|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  2.48M|    return {};
 3009|  2.48M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  8.93k|    {
 5037|  8.93k|        auto it = read_source_impl(range, {specs});
 5038|  8.93k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 246]
  |  |  ------------------
  ------------------
 5039|  8.69k|            return unexpected(it.error());
 5040|  8.69k|        }
 5041|       |
 5042|    246|        return read_string_impl(range, *it, value);
 5043|  8.93k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    246|{
 4741|    246|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    246|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    246|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 246]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    246|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    246|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 246]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    246|    return SCN_MOVE(result);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    246|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|  2.52M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  2.52M|                       std::is_same_v<T, std::wstring_view>) {
 5812|  2.52M|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  2.52M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  1.00M|    {
 5266|  1.00M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.00M|        return read_impl(range, specs, value);
 5268|  1.00M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  1.00M|    {
 5284|  1.00M|        SCN_CLANG_PUSH
 5285|  1.00M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.00M|        switch (m_type) {
 5288|  1.00M|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 1.00M, False: 8.93k]
  ------------------
 5289|  1.00M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 1.00M]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.00M]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  8.93k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 8.93k, False: 1.00M]
  ------------------
 5299|  8.93k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  8.93k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 1.00M]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 1.00M]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.00M]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.00M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.00M|        }
 5320|       |
 5321|  1.00M|        SCN_CLANG_POP
 5322|  1.00M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|  2.50M|    {
 4816|  2.50M|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|  2.50M|                                     value);
 4818|  2.50M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|  2.50M|{
 4762|  2.50M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  2.50M|    auto src = [&]() {
 4765|  2.50M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  2.50M|            return make_contiguous_buffer(
 4767|  2.50M|                ranges::subrange{range.begin().base(), result.base()});
 4768|  2.50M|        }
 4769|  2.50M|        else {
 4770|  2.50M|            return make_contiguous_buffer(
 4771|  2.50M|                ranges::subrange{range.begin(), result});
 4772|  2.50M|        }
 4773|  2.50M|    }();
 4774|  2.50M|    using src_type = decltype(src);
 4775|       |
 4776|  2.50M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  2.50M|    else {
 4789|  2.50M|        const auto view = src.view();
 4790|  2.50M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  2.50M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 17.0k, False: 2.48M]
  ------------------
 4793|  17.0k|            return unexpected_scan_error(
 4794|  17.0k|                scan_error::invalid_scanned_value,
 4795|  17.0k|                "Invalid encoding in scanned string_view");
 4796|  17.0k|        }
 4797|       |
 4798|  2.48M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  2.50M|    }
 4800|  2.50M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|  2.50M|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  2.50M|        else {
 4770|  2.50M|            return make_contiguous_buffer(
 4771|  2.50M|                ranges::subrange{range.begin(), result});
 4772|  2.50M|        }
 4773|  2.50M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  8.93k|    {
 5051|  8.93k|        auto it = read_source_impl(range, {specs});
 5052|  8.93k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 246]
  |  |  ------------------
  ------------------
 5053|  8.69k|            return unexpected(it.error());
 5054|  8.69k|        }
 5055|       |
 5056|    246|        return read_string_view_impl(range, *it, value);
 5057|  8.93k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    246|{
 4762|    246|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    246|    auto src = [&]() {
 4765|    246|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    246|            return make_contiguous_buffer(
 4767|    246|                ranges::subrange{range.begin().base(), result.base()});
 4768|    246|        }
 4769|    246|        else {
 4770|    246|            return make_contiguous_buffer(
 4771|    246|                ranges::subrange{range.begin(), result});
 4772|    246|        }
 4773|    246|    }();
 4774|    246|    using src_type = decltype(src);
 4775|       |
 4776|    246|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    246|    else {
 4789|    246|        const auto view = src.view();
 4790|    246|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    246|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 246]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    246|        return SCN_MOVE(result);
  ------------------
  |  |  928|    246|    static_cast<    \
  |  |  929|    246|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    246|    }
 4800|    246|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    246|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    246|        else {
 4770|    246|            return make_contiguous_buffer(
 4771|    246|                ranges::subrange{range.begin(), result});
 4772|    246|        }
 4773|    246|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  2.50M|{
 2940|  2.50M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 2.50M, False: 0]
  ------------------
 2941|  2.50M|        auto it = read_while_classic_space(range);
 2942|  2.50M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  2.50M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.21k, False: 2.50M]
  |  |  ------------------
  ------------------
 2944|  2.21k|            return unexpected(e);
 2945|  2.21k|        }
 2946|       |
 2947|  2.50M|        return it;
 2948|  2.50M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  2.50M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  2.50M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  2.50M|    else {
 2114|  2.50M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  2.50M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.50M|            return detail::is_cp_space(cp);
 2127|  2.50M|        });
 2128|  2.50M|    }
 2129|  2.50M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.50M|        : m_fptr([](storage fn,
  743|  2.50M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.50M|              cvref<T> obj = *get<T>(fn);
  745|  2.50M|              if constexpr (std::is_void_v<R>) {
  746|  2.50M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.50M|              }
  748|  2.50M|              else {
  749|  2.50M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.50M|              }
  751|  2.50M|          }),
  752|  2.50M|          m_storage(std::addressof(f))
  753|  2.50M|    {
  754|  2.50M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  5.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.59M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.59M|              else {
  749|  5.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.59M|              }
  751|  5.59M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  5.59M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.59M|        else if constexpr (std::is_object_v<T>) {
  688|  5.59M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.59M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  5.59M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  5.59M|            return detail::is_cp_space(cp);
 2127|  5.59M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.50M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.50M|        {
  662|  2.50M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   316k|{
 5784|   316k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 313k]
  |  |  ------------------
  ------------------
 5785|  2.64k|        return unexpected(e);
 5786|  2.64k|    }
 5787|       |
 5788|   313k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 313k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   313k|    return skip_classic_whitespace(range);
 5793|   313k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|   158k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   158k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   158k|            auto rd = make_reader<T, char_type>();
 5865|   158k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   158k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|   158k|    {
 5852|   158k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.88k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.88k|    }                                                  \
  |  |  |  | 3667|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   156k|                        .transform_error(make_eof_scan_error));
 5854|   156k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   158k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|   156k|    {
 5255|   156k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   156k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   156k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|   158k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   158k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   158k|            auto rd = make_reader<T, char_type>();
 5865|   158k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   158k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|   158k|    {
 5852|   158k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.88k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.88k|    }                                                  \
  |  |  |  | 3667|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   156k|                        .transform_error(make_eof_scan_error));
 5854|   156k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   158k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|   156k|    {
 5255|   156k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   156k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   156k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   190k|{
 5784|   190k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.54k, False: 189k]
  |  |  ------------------
  ------------------
 5785|  1.54k|        return unexpected(e);
 5786|  1.54k|    }
 5787|       |
 5788|   189k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 189k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   189k|    return skip_classic_whitespace(range);
 5793|   189k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   190k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   190k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   190k|            auto rd = make_reader<T, char_type>();
 5869|   190k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 190k, False: 0]
  ------------------
 5870|   190k|                return impl(rd, range, value);
 5871|   190k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   190k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|   190k|    {
 5852|   190k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 188k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.34k|    }                                                  \
  |  |  |  | 3667|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   188k|                        .transform_error(make_eof_scan_error));
 5854|   188k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   190k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|   188k|    {
 5255|   188k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   188k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   188k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   188k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   249k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   249k|    static_cast<    \
  |  |  929|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   249k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   249k|          m_current(m_range.begin())
 2867|   249k|    {
 2868|   249k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   687k|    {
 2872|   687k|        return m_current;
 2873|   687k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   437k|    {
 2877|   437k|        return m_range.end();
 2878|   437k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   205k|    {
 2892|   205k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   205k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   205k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 205k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   205k|        }
 2898|   205k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   205k|    static_cast<    \
  |  |  929|   205k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   205k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   232k|    {
 2882|   232k|        return ranges::subrange{begin(), end()};
 2883|   232k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   223k|    {
 6026|   223k|        const bool need_skipped_width =
 6027|   223k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 223k]
  |  Branch (6027:33): [True: 0, False: 223k]
  ------------------
 6028|   223k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   223k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 223k]
  ------------------
 6032|   223k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 223k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   223k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 223k, False: 0]
  |  Branch (6036:56): [True: 210k, False: 12.5k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   210k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 210k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   419k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   210k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.50k, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.50k|    }                                                  \
  |  |  |  | 3667|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   419k|                            make_eof_scan_error));
 6047|       |
 6048|   419k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 208k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   208k|            return result_type{it, 0};
 6056|   419k|        }
 6057|       |
 6058|  12.5k|        return result_type{rng.begin(), 0};
 6059|   223k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   204k|    {
 6068|   204k|        const bool need_skipped_width =
 6069|   204k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 204k]
  |  Branch (6069:33): [True: 0, False: 204k]
  ------------------
 6070|   204k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   204k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 204k]
  ------------------
 6073|   204k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 204k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   204k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 204k, False: 0]
  ------------------
 6082|   204k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 3.79k, False: 200k]
  ------------------
 6083|   204k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 3.79k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  3.79k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 3.79k]
  ------------------
 6085|  3.79k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   204k|        return result_type{rng.begin(), 0};
 6107|   204k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|   116k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   116k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   116k|            auto rd = make_reader<T, char_type>();
 6187|   116k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 111k]
  |  |  ------------------
  ------------------
 6188|  4.34k|                return unexpected(e);
 6189|  4.34k|            }
 6190|       |
 6191|   111k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   116k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|   111k|    {
 6113|   111k|        const bool need_skipped_width =
 6114|   111k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 111k]
  |  Branch (6114:33): [True: 0, False: 111k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   111k|        auto it = rng.begin();
 6118|   111k|        std::ptrdiff_t prefix_width = 0;
 6119|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 111k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   111k|        else {
 6127|   111k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.25k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.25k|    }                                                  \
  |  |  |  | 3667|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   110k|            std::tie(it, prefix_width) = prefix_result;
 6129|   110k|        }
 6130|   110k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   110k|        std::ptrdiff_t value_width = 0;
 6134|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 110k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   110k|        else {
 6150|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.43k, False: 102k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.43k|    }                                                  \
  |  | 3667|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   102k|                                             specs, value, loc));
 6152|       |
 6153|   102k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 102k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   102k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   102k|        std::ptrdiff_t postfix_width = 0;
 6162|   102k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 102k, False: 928]
  ------------------
 6163|   102k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   102k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   102k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   102k|                                 value_width));
 6167|   102k|            std::tie(it, postfix_width) = postfix_result;
 6168|   102k|        }
 6169|       |
 6170|   102k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   102k|                                                 value_width, postfix_width);
 6172|   102k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 102k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   102k|        return it;
 6177|   102k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|   116k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   116k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   116k|            auto rd = make_reader<T, char_type>();
 6187|   116k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 111k]
  |  |  ------------------
  ------------------
 6188|  4.34k|                return unexpected(e);
 6189|  4.34k|            }
 6190|       |
 6191|   111k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   116k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|   111k|    {
 6113|   111k|        const bool need_skipped_width =
 6114|   111k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 111k]
  |  Branch (6114:33): [True: 0, False: 111k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   111k|        auto it = rng.begin();
 6118|   111k|        std::ptrdiff_t prefix_width = 0;
 6119|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 111k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   111k|        else {
 6127|   111k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.25k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.25k|    }                                                  \
  |  |  |  | 3667|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   110k|            std::tie(it, prefix_width) = prefix_result;
 6129|   110k|        }
 6130|   110k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   110k|        std::ptrdiff_t value_width = 0;
 6134|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 110k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   110k|        else {
 6150|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.43k, False: 102k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.43k|    }                                                  \
  |  | 3667|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   102k|                                             specs, value, loc));
 6152|       |
 6153|   102k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 102k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   102k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   102k|        std::ptrdiff_t postfix_width = 0;
 6162|   102k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 102k, False: 928]
  ------------------
 6163|   102k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   102k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   102k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   102k|                                 value_width));
 6167|   102k|            std::tie(it, postfix_width) = postfix_result;
 6168|   102k|        }
 6169|       |
 6170|   102k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   102k|                                                 value_width, postfix_width);
 6172|   102k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 102k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   102k|        return it;
 6177|   102k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  3.00M|{
 5784|  3.00M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.84k, False: 3.00M]
  |  |  ------------------
  ------------------
 5785|  4.84k|        return unexpected(e);
 5786|  4.84k|    }
 5787|       |
 5788|  3.00M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 3.00M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  3.00M|    return skip_classic_whitespace(range);
 5793|  3.00M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|  1.50M|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  1.50M|                          basic_contiguous_scan_context<char_type>>) {
 5864|  1.50M|            auto rd = make_reader<T, char_type>();
 5865|  1.50M|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  1.50M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|  1.50M|    {
 5852|  1.50M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  1.50M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.78k, False: 1.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.78k|    }                                                  \
  |  |  |  | 3667|  1.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  1.50M|                        .transform_error(make_eof_scan_error));
 5854|  1.50M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  1.50M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|  1.50M|    {
 5255|  1.50M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  1.50M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  1.50M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|  1.50M|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  1.50M|                          basic_contiguous_scan_context<char_type>>) {
 5864|  1.50M|            auto rd = make_reader<T, char_type>();
 5865|  1.50M|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  1.50M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|  1.50M|    {
 5852|  1.50M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  1.50M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.78k, False: 1.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.78k|    }                                                  \
  |  |  |  | 3667|  1.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  1.50M|                        .transform_error(make_eof_scan_error));
 5854|  1.50M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  1.50M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|  1.50M|    {
 5255|  1.50M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  1.50M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  1.50M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|  2.07M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  2.07M|    static_cast<    \
  |  |  929|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|  2.07M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|  2.07M|          m_current(m_range.begin())
 2867|  2.07M|    {
 2868|  2.07M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  6.10M|    {
 2872|  6.10M|        return m_current;
 2873|  6.10M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  4.02M|    {
 2877|  4.02M|        return m_range.end();
 2878|  4.02M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  1.98M|    {
 2892|  1.98M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  1.98M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  1.98M|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 1.98M]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  1.98M|        }
 2898|  1.98M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.98M|    static_cast<    \
  |  |  929|  1.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  1.98M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|  2.04M|    {
 2882|  2.04M|        return ranges::subrange{begin(), end()};
 2883|  2.04M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  2.02M|    {
 6026|  2.02M|        const bool need_skipped_width =
 6027|  2.02M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 2.02M]
  |  Branch (6027:33): [True: 0, False: 2.02M]
  ------------------
 6028|  2.02M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  2.02M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 2.02M]
  ------------------
 6032|  2.02M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 2.02M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  2.02M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 2.02M, False: 0]
  |  Branch (6036:56): [True: 2.00M, False: 17.8k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.00M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 2.00M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  4.00M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.71k, False: 2.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.71k|    }                                                  \
  |  |  |  | 3667|  2.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  4.00M|                            make_eof_scan_error));
 6047|       |
 6048|  4.00M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 2.00M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  2.00M|            return result_type{it, 0};
 6056|  4.00M|        }
 6057|       |
 6058|  17.8k|        return result_type{rng.begin(), 0};
 6059|  2.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.98M|    {
 6068|  1.98M|        const bool need_skipped_width =
 6069|  1.98M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.98M]
  |  Branch (6069:33): [True: 0, False: 1.98M]
  ------------------
 6070|  1.98M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.98M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.98M]
  ------------------
 6073|  1.98M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.98M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.98M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.98M, False: 0]
  ------------------
 6082|  1.98M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 404, False: 1.98M]
  ------------------
 6083|  1.98M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 404]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    404|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 404]
  ------------------
 6085|    404|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.98M|        return result_type{rng.begin(), 0};
 6107|  1.98M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  1.02M|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  1.02M|                          basic_contiguous_scan_context<char_type>>) {
 6186|  1.02M|            auto rd = make_reader<T, char_type>();
 6187|  1.02M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 1.01M]
  |  |  ------------------
  ------------------
 6188|  8.69k|                return unexpected(e);
 6189|  8.69k|            }
 6190|       |
 6191|  1.01M|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  1.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  1.01M|    {
 6113|  1.01M|        const bool need_skipped_width =
 6114|  1.01M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 1.01M]
  |  Branch (6114:33): [True: 0, False: 1.01M]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  1.01M|        auto it = rng.begin();
 6118|  1.01M|        std::ptrdiff_t prefix_width = 0;
 6119|  1.01M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.01M]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  1.01M|        else {
 6127|  1.01M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.85k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.85k|    }                                                  \
  |  |  |  | 3667|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.00M|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.00M|        }
 6130|  1.00M|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  1.00M|        std::ptrdiff_t value_width = 0;
 6134|  1.00M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 1.00M]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  1.00M|        else {
 6150|  1.00M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 994k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  15.5k|    }                                                  \
  |  | 3667|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   994k|                                             specs, value, loc));
 6152|       |
 6153|   994k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 994k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   994k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   994k|        std::ptrdiff_t postfix_width = 0;
 6162|   994k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 992k, False: 1.66k]
  ------------------
 6163|   992k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   992k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   992k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   992k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 992k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   992k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   992k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   992k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   992k|                                 value_width));
 6167|   992k|            std::tie(it, postfix_width) = postfix_result;
 6168|   992k|        }
 6169|       |
 6170|   994k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   994k|                                                 value_width, postfix_width);
 6172|   994k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 994k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   994k|        return it;
 6177|   994k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  1.02M|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  1.02M|                          basic_contiguous_scan_context<char_type>>) {
 6186|  1.02M|            auto rd = make_reader<T, char_type>();
 6187|  1.02M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.69k, False: 1.01M]
  |  |  ------------------
  ------------------
 6188|  8.69k|                return unexpected(e);
 6189|  8.69k|            }
 6190|       |
 6191|  1.01M|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  1.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  1.01M|    {
 6113|  1.01M|        const bool need_skipped_width =
 6114|  1.01M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 1.01M]
  |  Branch (6114:33): [True: 0, False: 1.01M]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  1.01M|        auto it = rng.begin();
 6118|  1.01M|        std::ptrdiff_t prefix_width = 0;
 6119|  1.01M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.01M]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  1.01M|        else {
 6127|  1.01M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.85k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.85k|    }                                                  \
  |  |  |  | 3667|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.00M|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.00M|        }
 6130|  1.00M|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  1.00M|        std::ptrdiff_t value_width = 0;
 6134|  1.00M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 1.00M]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  1.00M|        else {
 6150|  1.00M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 994k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  15.5k|    }                                                  \
  |  | 3667|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   994k|                                             specs, value, loc));
 6152|       |
 6153|   994k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 994k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   994k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   994k|        std::ptrdiff_t postfix_width = 0;
 6162|   994k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 992k, False: 1.66k]
  ------------------
 6163|   992k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   992k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   992k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   992k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 992k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   992k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   992k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   992k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   992k|                                 value_width));
 6167|   992k|            std::tie(it, postfix_width) = postfix_result;
 6168|   992k|        }
 6169|       |
 6170|   994k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   994k|                                                 value_width, postfix_width);
 6172|   994k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 994k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   994k|        return it;
 6177|   994k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  1.50M|{
 5784|  1.50M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.42k, False: 1.50M]
  |  |  ------------------
  ------------------
 5785|  2.42k|        return unexpected(e);
 5786|  2.42k|    }
 5787|       |
 5788|  1.50M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 1.50M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  1.50M|    return skip_classic_whitespace(range);
 5793|  1.50M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  1.50M|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  1.50M|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  1.50M|            auto rd = make_reader<T, char_type>();
 5869|  1.50M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 1.50M, False: 0]
  ------------------
 5870|  1.50M|                return impl(rd, range, value);
 5871|  1.50M|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  1.50M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|  1.50M|    {
 5852|  1.50M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  1.50M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.78k, False: 1.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.78k|    }                                                  \
  |  |  |  | 3667|  1.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  1.50M|                        .transform_error(make_eof_scan_error));
 5854|  1.50M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  1.50M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|  1.50M|    {
 5255|  1.50M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  1.50M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  1.50M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.17k|{
   52|  2.17k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.17k|    string_buffer.resize(size);
   56|  2.17k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.17k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.17k|    const auto wsv_reinterpret_size =
   61|  2.17k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 353, False: 1.82k]
  ------------------
   62|  2.17k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.17k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.17k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.17k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.17k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.17k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.17k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.17k|{
  122|  2.17k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.17k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.17k|    buf.resize(sizeof...(Args));
  125|  2.17k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.17k|    return buf;
  127|  2.17k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.17k|{
  108|  2.17k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.17k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.17k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.17k|{
  185|  2.17k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.17k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.17k|                                   format_strings);
  188|  2.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.17k|{
  133|       |    // Regular scan
  134|  13.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.0k, False: 2.17k]
  ------------------
  135|  13.0k|        auto it = scn::ranges::begin(source);
  136|   115k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   115k|            auto result = scn::scan<T>(
  139|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   115k|                scn::runtime_format(f));
  141|   115k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.0k, False: 102k]
  ------------------
  142|  13.0k|                break;
  143|  13.0k|            }
  144|   102k|            it = result->begin();
  145|   102k|        }
  146|  13.0k|    }
  147|       |
  148|       |    // scan localized
  149|  13.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.0k, False: 2.17k]
  ------------------
  150|  13.0k|        auto it = scn::ranges::begin(source);
  151|   115k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   115k|            auto result = scn::scan<T>(
  154|   115k|                global_locale,
  155|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   115k|                scn::runtime_format(f));
  157|   115k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.0k, False: 102k]
  ------------------
  158|  13.0k|                break;
  159|  13.0k|            }
  160|   102k|            it = result->begin();
  161|   102k|        }
  162|  13.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.17k|    {
  166|  2.17k|        auto it = scn::ranges::begin(source);
  167|  52.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  52.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  52.6k|            auto result = scn::scan_value<T>(
  170|  52.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  52.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.17k, False: 50.5k]
  ------------------
  172|  2.17k|                break;
  173|  2.17k|            }
  174|  50.5k|            it = result->begin();
  175|  50.5k|        }
  176|  2.17k|    }
  177|  2.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.17k|{
  133|       |    // Regular scan
  134|  13.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.0k, False: 2.17k]
  ------------------
  135|  13.0k|        auto it = scn::ranges::begin(source);
  136|   115k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   115k|            auto result = scn::scan<T>(
  139|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   115k|                scn::runtime_format(f));
  141|   115k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.0k, False: 102k]
  ------------------
  142|  13.0k|                break;
  143|  13.0k|            }
  144|   102k|            it = result->begin();
  145|   102k|        }
  146|  13.0k|    }
  147|       |
  148|       |    // scan localized
  149|  13.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.0k, False: 2.17k]
  ------------------
  150|  13.0k|        auto it = scn::ranges::begin(source);
  151|   115k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   115k|            auto result = scn::scan<T>(
  154|   115k|                global_locale,
  155|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   115k|                scn::runtime_format(f));
  157|   115k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.0k, False: 102k]
  ------------------
  158|  13.0k|                break;
  159|  13.0k|            }
  160|   102k|            it = result->begin();
  161|   102k|        }
  162|  13.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.17k|    {
  166|  2.17k|        auto it = scn::ranges::begin(source);
  167|  52.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  52.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  52.6k|            auto result = scn::scan_value<T>(
  170|  52.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  52.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.17k, False: 50.5k]
  ------------------
  172|  2.17k|                break;
  173|  2.17k|            }
  174|  50.5k|            it = result->begin();
  175|  50.5k|        }
  176|  2.17k|    }
  177|  2.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.17k|{
  133|       |    // Regular scan
  134|  13.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.0k, False: 2.17k]
  ------------------
  135|  13.0k|        auto it = scn::ranges::begin(source);
  136|   137k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   137k|            auto result = scn::scan<T>(
  139|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   137k|                scn::runtime_format(f));
  141|   137k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.0k, False: 124k]
  ------------------
  142|  13.0k|                break;
  143|  13.0k|            }
  144|   124k|            it = result->begin();
  145|   124k|        }
  146|  13.0k|    }
  147|       |
  148|       |    // scan localized
  149|  13.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.0k, False: 2.17k]
  ------------------
  150|  13.0k|        auto it = scn::ranges::begin(source);
  151|   137k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   137k|            auto result = scn::scan<T>(
  154|   137k|                global_locale,
  155|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   137k|                scn::runtime_format(f));
  157|   137k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.0k, False: 124k]
  ------------------
  158|  13.0k|                break;
  159|  13.0k|            }
  160|   124k|            it = result->begin();
  161|   124k|        }
  162|  13.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.17k|    {
  166|  2.17k|        auto it = scn::ranges::begin(source);
  167|  63.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  63.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  63.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  63.6k|            auto result = scn::scan_value<T>(
  170|  63.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  63.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.17k, False: 61.4k]
  ------------------
  172|  2.17k|                break;
  173|  2.17k|            }
  174|  61.4k|            it = result->begin();
  175|  61.4k|        }
  176|  2.17k|    }
  177|  2.17k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.17k|{
   90|  2.17k|    using char_type = ranges::range_value_t<Source>;
   91|  2.17k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.17k|    deque.clear();
   93|  2.17k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.17k|              std::back_inserter(deque));
   95|  2.17k|    return deque;
   96|  2.17k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.17k|{
   79|  2.17k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.17k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.17k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.17k|{
  122|  2.17k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.17k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.17k|    buf.resize(sizeof...(Args));
  125|  2.17k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.17k|    return buf;
  127|  2.17k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.17k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.17k|    else {
  112|  2.17k|        return wformat_string_view_buffer;
  113|  2.17k|    }
  114|  2.17k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.34k|{
  185|  4.34k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.34k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.34k|                                   format_strings);
  188|  4.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  4.34k|{
  133|       |    // Regular scan
  134|  26.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.0k, False: 4.34k]
  ------------------
  135|  26.0k|        auto it = scn::ranges::begin(source);
  136|  1.02M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.02M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.02M|            auto result = scn::scan<T>(
  139|  1.02M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.02M|                scn::runtime_format(f));
  141|  1.02M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.0k, False: 993k]
  ------------------
  142|  26.0k|                break;
  143|  26.0k|            }
  144|   993k|            it = result->begin();
  145|   993k|        }
  146|  26.0k|    }
  147|       |
  148|       |    // scan localized
  149|  26.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.0k, False: 4.34k]
  ------------------
  150|  26.0k|        auto it = scn::ranges::begin(source);
  151|  1.02M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.02M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.02M|            auto result = scn::scan<T>(
  154|  1.02M|                global_locale,
  155|  1.02M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.02M|                scn::runtime_format(f));
  157|  1.02M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.0k, False: 993k]
  ------------------
  158|  26.0k|                break;
  159|  26.0k|            }
  160|   993k|            it = result->begin();
  161|   993k|        }
  162|  26.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.34k|    {
  166|  4.34k|        auto it = scn::ranges::begin(source);
  167|   501k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   501k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   501k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   501k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   501k|            auto result = scn::scan_value<T>(
  170|   501k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   501k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.34k, False: 496k]
  ------------------
  172|  4.34k|                break;
  173|  4.34k|            }
  174|   496k|            it = result->begin();
  175|   496k|        }
  176|  4.34k|    }
  177|  4.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.34k|{
  133|       |    // Regular scan
  134|  26.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.0k, False: 4.34k]
  ------------------
  135|  26.0k|        auto it = scn::ranges::begin(source);
  136|  1.02M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.02M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.02M|            auto result = scn::scan<T>(
  139|  1.02M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.02M|                scn::runtime_format(f));
  141|  1.02M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.0k, False: 993k]
  ------------------
  142|  26.0k|                break;
  143|  26.0k|            }
  144|   993k|            it = result->begin();
  145|   993k|        }
  146|  26.0k|    }
  147|       |
  148|       |    // scan localized
  149|  26.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.0k, False: 4.34k]
  ------------------
  150|  26.0k|        auto it = scn::ranges::begin(source);
  151|  1.02M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.02M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.02M|            auto result = scn::scan<T>(
  154|  1.02M|                global_locale,
  155|  1.02M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.02M|                scn::runtime_format(f));
  157|  1.02M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.0k, False: 993k]
  ------------------
  158|  26.0k|                break;
  159|  26.0k|            }
  160|   993k|            it = result->begin();
  161|   993k|        }
  162|  26.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.34k|    {
  166|  4.34k|        auto it = scn::ranges::begin(source);
  167|   501k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   501k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   501k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   501k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   501k|            auto result = scn::scan_value<T>(
  170|   501k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   501k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.34k, False: 496k]
  ------------------
  172|  4.34k|                break;
  173|  4.34k|            }
  174|   496k|            it = result->begin();
  175|   496k|        }
  176|  4.34k|    }
  177|  4.34k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  4.34k|{
  133|       |    // Regular scan
  134|  26.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.0k, False: 4.34k]
  ------------------
  135|  26.0k|        auto it = scn::ranges::begin(source);
  136|  1.02M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.02M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.02M|            auto result = scn::scan<T>(
  139|  1.02M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.02M|                scn::runtime_format(f));
  141|  1.02M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.0k, False: 993k]
  ------------------
  142|  26.0k|                break;
  143|  26.0k|            }
  144|   993k|            it = result->begin();
  145|   993k|        }
  146|  26.0k|    }
  147|       |
  148|       |    // scan localized
  149|  26.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.0k, False: 4.34k]
  ------------------
  150|  26.0k|        auto it = scn::ranges::begin(source);
  151|  1.02M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.02M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.02M|            auto result = scn::scan<T>(
  154|  1.02M|                global_locale,
  155|  1.02M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.02M|                scn::runtime_format(f));
  157|  1.02M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.0k, False: 993k]
  ------------------
  158|  26.0k|                break;
  159|  26.0k|            }
  160|   993k|            it = result->begin();
  161|   993k|        }
  162|  26.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.34k|    {
  166|  4.34k|        auto it = scn::ranges::begin(source);
  167|   501k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   501k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   501k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   501k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   501k|            auto result = scn::scan_value<T>(
  170|   501k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   501k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.34k, False: 496k]
  ------------------
  172|  4.34k|                break;
  173|  4.34k|            }
  174|   496k|            it = result->begin();
  175|   496k|        }
  176|  4.34k|    }
  177|  4.34k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.34k|{
   90|  4.34k|    using char_type = ranges::range_value_t<Source>;
   91|  4.34k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.34k|    deque.clear();
   93|  4.34k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.34k|              std::back_inserter(deque));
   95|  4.34k|    return deque;
   96|  4.34k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.34k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.34k|    else {
   83|  4.34k|        return wnoncontiguous_buffer;
   84|  4.34k|    }
   85|  4.34k|}

LLVMFuzzerTestOneInput:
   57|  2.17k|{
   58|  2.17k|    scn::fuzz::run(data, size);
   59|  2.17k|    return 0;
   60|  2.17k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  2.17k|{
   36|  2.17k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 2.17k]
  |  Branch (36:35): [True: 0, False: 2.17k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  2.17k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  2.17k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  2.17k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  2.17k|    do_basic_run(sv, f);
   45|       |
   46|  2.17k|    const auto& wf = get_format_strings<wchar_t>(
   47|  2.17k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  2.17k|    do_basic_run(wsv_reinterpret, wf);
   49|  2.17k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 2.17k, False: 0]
  ------------------
   50|  2.17k|        do_basic_run(wsv_transcode, wf);
   51|  2.17k|    }
   52|  2.17k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.17k|{
   25|  2.17k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.17k|                                                           format_strings);
   27|  2.17k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.17k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.17k|            source, format_strings);
   30|  2.17k|    }
   31|  2.17k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.17k|{
   25|  2.17k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.17k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.17k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.34k|{
   25|  4.34k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.34k|                                                           format_strings);
   27|  4.34k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  4.34k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  4.34k|            source, format_strings);
   30|  4.34k|    }
   31|  4.34k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.34k|{
   25|  4.34k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.34k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  4.34k|}

