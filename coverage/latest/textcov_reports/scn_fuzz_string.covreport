_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  4.79M|{
 3803|  4.79M|    if constexpr (sizeof(U) == 1) {
 3804|  4.79M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  4.79M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  4.79M|{
 3767|  4.79M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  4.79M|    SCN_GCC_COMPAT_PUSH
 3770|  4.79M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  4.79M|    constexpr char lengths[] =
 3772|  4.79M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  4.79M|        "\1\1\1\1\1\1\1\1"
 3774|  4.79M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  4.79M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  4.79M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  4.79M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  4.79M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  4.79M|    SCN_GCC_COMPAT_POP
 3781|  4.79M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.58M|{
 4009|  4.58M|    if constexpr (sizeof(CharT) == 1) {
 4010|  4.58M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  4.58M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.58M|{
 3822|  4.58M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.58M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.58M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.58M|    };
 3827|       |
 3828|  4.58M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.15M, False: 430k]
  ------------------
 3829|  4.15M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 292, False: 4.15M]
  ------------------
 3830|    292|            SCN_UNLIKELY_ATTR
 3831|    292|            return invalid_code_point;
 3832|    292|        }
 3833|  4.15M|        return static_cast<char32_t>(input[0]);
 3834|  4.15M|    }
 3835|       |
 3836|   430k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 110k, False: 320k]
  ------------------
 3837|   110k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 196, False: 109k]
  ------------------
 3838|    196|            SCN_UNLIKELY_ATTR
 3839|    196|            return invalid_code_point;
 3840|    196|        }
 3841|   109k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 13.1k, False: 96.7k]
  ------------------
 3842|  13.1k|            SCN_UNLIKELY_ATTR
 3843|  13.1k|            return invalid_code_point;
 3844|  13.1k|        }
 3845|       |
 3846|  96.7k|        char32_t cp{};
 3847|  96.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  96.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  96.7k|        return cp;
 3850|   109k|    }
 3851|       |
 3852|   320k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 303k, False: 16.7k]
  ------------------
 3853|   303k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 22, False: 303k]
  ------------------
 3854|     22|            SCN_UNLIKELY_ATTR
 3855|     22|            return invalid_code_point;
 3856|     22|        }
 3857|   303k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 2.99k, False: 300k]
  ------------------
 3858|   303k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 937, False: 299k]
  ------------------
 3859|  3.93k|            SCN_UNLIKELY_ATTR
 3860|  3.93k|            return invalid_code_point;
 3861|  3.93k|        }
 3862|       |
 3863|   299k|        char32_t cp{};
 3864|   299k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   299k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   299k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   299k|        return cp;
 3868|   303k|    }
 3869|       |
 3870|  16.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 16.7k, False: 0]
  ------------------
 3871|  16.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 16.7k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  16.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 11.2k, False: 5.45k]
  ------------------
 3876|  11.2k|            SCN_UNLIKELY_ATTR
 3877|  11.2k|            return invalid_code_point;
 3878|  11.2k|        }
 3879|  5.45k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 2.01k, False: 3.44k]
  ------------------
 3880|  5.45k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 148, False: 3.29k]
  ------------------
 3881|  5.45k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 124, False: 3.17k]
  ------------------
 3882|  2.28k|            SCN_UNLIKELY_ATTR
 3883|  2.28k|            return invalid_code_point;
 3884|  2.28k|        }
 3885|       |
 3886|  3.17k|        char32_t cp{};
 3887|  3.17k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  3.17k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  3.17k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  3.17k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  3.17k|        return cp;
 3892|  5.45k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   726k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   726k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   726k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  3.99M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  3.99M|    else {
 3701|  3.99M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  3.99M|                                       to_address(first), to_address(last)))};
 3703|  3.99M|    }
 3704|  3.99M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  12.3M|{
  326|  12.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  12.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  12.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  13.5M|{
  304|  13.5M|    return p;
  305|  13.5M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  2.02M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  2.02M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  2.02M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.02M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  2.02M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  2.02M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  28.2k|    {
 2724|  28.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  28.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  28.2k|    {
 2705|  28.2k|        return decay_copy(t.begin());
 2706|  28.2k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  2.16M|{
 1949|  2.16M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.16M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   506k|    {
 2781|   506k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   506k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   506k|    {
 2763|   506k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   506k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8877|  51.5k|{
 8878|  51.5k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  51.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  51.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  51.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|   230k|{
 5406|   230k|    detail::check_scan_arg_types<Args...>();
 5407|   230k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   230k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|   283k|{
 5145|   283k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   283k|                  "Scan argument types must be default constructible");
 5147|   283k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   283k|                  "Scan argument types must be Destructible");
 5149|   283k|    static_assert(
 5150|   283k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   283k|        "Scan argument types must not be references");
 5152|   283k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|   230k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   230k|    {
 5359|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   230k|    {
 5370|   230k|        return {detail::make_arg<
 5371|   230k|            kind, Context,
 5372|   230k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   230k|                                 typename Context::char_type>::value>(args)...};
 5374|   230k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|   230k|{
 5180|   230k|    return make_value<Context>(value).ref_value;
 5181|   230k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|   283k|{
 5130|   283k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   283k|                                  needs_context_tag>) {
 5134|   283k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   283k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|   283k|    {                                                                        \
 4969|   283k|        return val;                                                          \
 4970|   283k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|   283k|{
 5099|   283k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   283k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   283k|    constexpr bool scannable_char =
 5103|   283k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   283k|    static_assert(scannable_char,
 5105|   283k|                  "Cannot scan an argument of an unsupported character "
 5106|   283k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   283k|    constexpr bool scannable_const =
 5109|   283k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   283k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   283k|    constexpr bool scannable_disabled =
 5113|   283k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   283k|    static_assert(scannable_disabled,
 5115|   283k|                  "Cannot scan an argument that has been disabled by "
 5116|   283k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   283k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   283k|    static_assert(
 5120|   283k|        scannable,
 5121|   283k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   283k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   283k|    return arg_value{arg};
 5125|   283k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|   283k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   283k|    {
 4911|   283k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   103k|{
 8665|   103k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   103k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   103k|{
 8602|   103k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   103k|    auto result = vscan_impl(buffer, format, args);
 8605|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 90.4k]
  |  |  ------------------
  ------------------
 8606|  12.5k|        return unexpected(result.error());
 8607|  12.5k|    }
 8608|  90.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   103k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   252k|{
 4729|   252k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   252k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   252k|                  "\n"
 4733|   252k|                  "Unsupported range type given as input to a scanning "
 4734|   252k|                  "function.\n"
 4735|   252k|                  "A range needs to have a character type (value type) "
 4736|   252k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   252k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   252k|                  "to be included.\n"
 4739|   252k|                  "See the scnlib documentation for more details.");
 4740|   252k|    static_assert(
 4741|   252k|        !std::is_same_v<T, custom_char_traits>,
 4742|   252k|        "\n"
 4743|   252k|        "Unsupported range type given as input to a scanning "
 4744|   252k|        "function.\n"
 4745|   252k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   252k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   252k|        "not supported.");
 4748|   252k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   252k|                  "\n"
 4750|   252k|                  "Unsupported range type given as input to a scanning "
 4751|   252k|                  "function.\n"
 4752|   252k|                  "file_marker_found cannot be used as an "
 4753|   252k|                  "source range type to scn::scan.\n"
 4754|   252k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   252k|                  "and do not provide an explicit source range, "
 4756|   252k|                  "or use scn::scan with a FILE* directly.");
 4757|   252k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   252k|                  "\n"
 4759|   252k|                  "Unsupported range type given as input to a scanning "
 4760|   252k|                  "function.\n"
 4761|   252k|                  "In order to be scannable, a range needs to satisfy "
 4762|   252k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   252k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   252k|                  "\n"
 4765|   252k|                  "Unsupported range type given as input to a scanning "
 4766|   252k|                  "function.\n"
 4767|   252k|                  "A range needs to model forward_range and have a valid "
 4768|   252k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   252k|                  "Examples of scannable ranges are std::string, "
 4770|   252k|                  "std::string_view, "
 4771|   252k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   252k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   252k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   252k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   252k|{
 4668|   252k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   252k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   252k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   252k|    {
 2855|   252k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   252k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   252k|    {
 2836|   252k|        return t.data();
 2837|   252k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   252k|    {
 3229|   252k|        return detail::to_address(ranges::begin(derived()));
 3230|   252k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.24M|{
  326|  1.24M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.24M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   478k|    {
 2724|   478k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   478k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   478k|    {
 2705|   478k|        return decay_copy(t.begin());
 2706|   478k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  2.79M|    {
 3326|  2.79M|        return m_iterator;
 3327|  2.79M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   252k|    {
 3185|   252k|        return static_cast<const D&>(*this);
 3186|   252k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   252k|    {
 2930|   252k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   252k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   252k|    {
 2896|   252k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   252k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  2.07M|{
 1949|  2.07M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.07M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   949k|    {
 3342|   949k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   949k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  4.20M|    {
 1598|  4.20M|        return has_value();
 1599|  4.20M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.36M|    {
  485|  8.36M|        return m_has_value;
  486|  8.36M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   122k|    {
 1604|   122k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   122k|        return this->get_unexpected().error();
 1606|   122k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   122k|    {
  468|   122k|        return m_unexpected;
  469|   122k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   908k|    {
  361|   908k|        return m_unexpected;
  362|   908k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   456k|        : m_unexpected(std::forward<Err>(e))
  346|   456k|    {
  347|   456k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   456k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   456k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  27.1k|        : base(unexpect, std::move(e.error())),
 1474|  27.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  27.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  27.1k|          m_has_value(false)
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|   522k|        : m_unexpected(std::forward<Args>(args)...)
  355|   522k|    {
  356|   522k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   522k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   522k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   252k|    {
 1177|   252k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   225k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   225k|                      ranges::iterator_t<SourceRange>>) {
 5935|   225k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   225k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   922k|    {
 2724|   922k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   922k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   922k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   922k|    {
 2705|   922k|        return decay_copy(t.begin());
 2706|   922k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   225k|{
 5920|   225k|    return ranges::end(source);
 5921|   225k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   225k|    {
 2781|   225k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   225k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   225k|    {
 2763|   225k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   225k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  1.45M|    {
 3330|  1.45M|        return m_sentinel;
 3331|  1.45M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.04M|    {
 1653|  4.04M|        return value();
 1654|  4.04M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  4.04M|    {
 1627|  4.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.04M|        return this->get_value();
 1629|  4.04M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.04M|    {
  451|  4.04M|        return m_value;
  452|  4.04M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   225k|        : base(std::in_place, std::forward<U>(val)),
 1428|   225k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   225k|    {
 1430|   225k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   225k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   225k|    {
  437|   225k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7985|   103k|    {
 7986|   103k|        return m_str;
 7987|   103k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   230k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   230k|    {
 5436|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|   230k|    {
 5389|   230k|        return m_argptrs;
 5390|   230k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   333k|        : m_desc(desc), m_builtin_values(data)
 5487|   333k|    {
 5488|   333k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   103k|{
 8831|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 90.4k]
  |  |  ------------------
  ------------------
 8832|  12.5k|        return unexpected(result.error());
 8833|  12.5k|    }
 8834|  90.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.4k|    static_cast<    \
  |  |  929|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.4k|    static_cast<    \
  |  |  929|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   103k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   252k|    {
 1598|   252k|        return has_value();
 1599|   252k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   505k|    {
  485|   505k|        return m_has_value;
  486|   505k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  27.1k|    {
 1604|  27.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  27.1k|        return this->get_unexpected().error();
 1606|  27.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  27.1k|    {
  468|  27.1k|        return m_unexpected;
  469|  27.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  13.5k|        : base(unexpect, std::move(e.error())),
 1474|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.5k|    {
 1476|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  13.5k|        : m_has_value(false)
  625|  13.5k|    {
  626|  13.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  13.5k|    {
  689|  13.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.5k|                                  std::forward<Args>(args)...);
  691|  13.5k|        m_has_value = false;
  692|  13.5k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  81.5k|{
  392|  81.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  81.5k|        T(std::forward<Args>(args)...);
  394|  81.5k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  27.1k|    {
  718|  27.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  27.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   126k|    {
 1177|   126k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   180k|    {
 1653|   180k|        return value();
 1654|   180k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   225k|    {
 1627|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   225k|        return this->get_value();
 1629|   225k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   225k|    {
  451|   225k|        return m_value;
  452|   225k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   112k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   112k|    {
 5840|   112k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   225k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   225k|    static_cast<    \
  |  |  929|   225k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   225k|    {
 5691|   225k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|   256k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   256k|    {
 5626|   256k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   112k|        : base(std::in_place, std::forward<U>(val)),
 1428|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   112k|    {
 1430|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   112k|        : m_has_value(true)
  615|   112k|    {
  616|   112k|        construct(std::forward<Args>(args)...);
  617|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   112k|    {
  682|   112k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   112k|        m_has_value = true;
  684|   112k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   112k|{
  392|   112k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   112k|        T(std::forward<Args>(args)...);
  394|   112k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|   112k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   338k|    {
  706|   338k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   338k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   338k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|   225k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|   230k|    {
 5384|   230k|        return m_args;
 5385|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|   230k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.62M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.62M|    static_cast<    \
  |  |  929|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.62M|    static_cast<    \
  |  |  929|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.62M|    {
 3312|  1.62M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   333k|{
 7702|   333k|    return s;
 7703|   333k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   333k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   103k|        : m_str(r.str)
 7981|   103k|    {
 7982|   103k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   126k|    {
 1598|   126k|        return has_value();
 1599|   126k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   365k|    {
  675|   365k|        return m_has_value;
  676|   365k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   112k|    {
 1673|   112k|        return &value();
 1674|   112k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   112k|    {
 1627|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   112k|        return this->get_value();
 1629|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   112k|    {
  641|   112k|        return *value_ptr();
  642|   112k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   225k|    {
 5708|   225k|        return ranges::begin(m_range);
 5709|   225k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   126k|    {
  631|   126k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 112k, False: 13.5k]
  ------------------
  632|   112k|            destroy_value();
  633|   112k|        }
  634|  13.5k|        else {
  635|  13.5k|            destroy_unexpected();
  636|  13.5k|        }
  637|   126k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   112k|    {
  696|   112k|        scn::detail::destroy_at(value_ptr());
  697|   112k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   112k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   112k|    else {
  404|   112k|        p->~T();
  405|   112k|    }
  406|   112k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.5k|    {
  700|  13.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.5k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  81.5k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  81.5k|    else {
  404|  81.5k|        p->~T();
  405|  81.5k|    }
  406|  81.5k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8944|  51.5k|{
 8945|  51.5k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  51.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  51.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  51.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   103k|{
 8683|   103k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   103k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   103k|{
 8618|   103k|#if !SCN_DISABLE_LOCALE
 8619|   103k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   103k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   103k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   103k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 90.4k]
  |  |  ------------------
  ------------------
 8626|  12.5k|        return unexpected(result.error());
 8627|  12.5k|    }
 8628|  90.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   103k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8983|  23.4k|{
 8984|  23.4k|    T value;
 8985|  23.4k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  23.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 22.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  23.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  22.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.4k|    static_cast<    \
  |  |  929|  22.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.4k|    static_cast<    \
  |  |  929|  22.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  23.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  52.9k|{
 5165|  52.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  52.9k|    basic_scan_arg<Context> arg;
 5168|  52.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  52.9k|    arg.m_value = make_value<Context>(value);
 5170|  52.9k|    return arg;
 5171|  52.9k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   410k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  3.13M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  46.9k|{
 8696|  46.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  46.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  46.9k|{
 8642|  46.9k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  46.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  46.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 44.8k]
  |  |  ------------------
  ------------------
 8646|  2.09k|        return unexpected(result.error());
 8647|  2.09k|    }
 8648|  44.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  46.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  44.8k|    {
 1663|  44.8k|        return std::move(value());
 1664|  44.8k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8877|  51.5k|{
 8878|  51.5k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  51.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  51.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  51.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|   103k|{
 5406|   103k|    detail::check_scan_arg_types<Args...>();
 5407|   103k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   103k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|   126k|{
 5145|   126k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   126k|                  "Scan argument types must be default constructible");
 5147|   126k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   126k|                  "Scan argument types must be Destructible");
 5149|   126k|    static_assert(
 5150|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   126k|        "Scan argument types must not be references");
 5152|   126k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|   103k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   103k|    {
 5359|   103k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   103k|    {
 5370|   103k|        return {detail::make_arg<
 5371|   103k|            kind, Context,
 5372|   103k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   103k|                                 typename Context::char_type>::value>(args)...};
 5374|   103k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|   103k|{
 5180|   103k|    return make_value<Context>(value).ref_value;
 5181|   103k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|   126k|{
 5130|   126k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   126k|                                  needs_context_tag>) {
 5134|   126k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   126k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|   126k|    {                                                                        \
 4969|   126k|        return val;                                                          \
 4970|   126k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|   126k|{
 5099|   126k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   126k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   126k|    constexpr bool scannable_char =
 5103|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   126k|    static_assert(scannable_char,
 5105|   126k|                  "Cannot scan an argument of an unsupported character "
 5106|   126k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   126k|    constexpr bool scannable_const =
 5109|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   126k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   126k|    constexpr bool scannable_disabled =
 5113|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   126k|    static_assert(scannable_disabled,
 5115|   126k|                  "Cannot scan an argument that has been disabled by "
 5116|   126k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   126k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   126k|    static_assert(
 5120|   126k|        scannable,
 5121|   126k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   126k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   126k|    return arg_value{arg};
 5125|   126k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|   126k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   126k|    {
 4911|   126k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7985|   103k|    {
 7986|   103k|        return m_str;
 7987|   103k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   103k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   103k|    {
 5436|   103k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|   103k|    {
 5389|   103k|        return m_argptrs;
 5390|   103k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   103k|{
 8831|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 90.4k]
  |  |  ------------------
  ------------------
 8832|  12.5k|        return unexpected(result.error());
 8833|  12.5k|    }
 8834|  90.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.4k|    static_cast<    \
  |  |  929|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.4k|    static_cast<    \
  |  |  929|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   103k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  13.5k|        : base(unexpect, std::move(e.error())),
 1474|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.5k|    {
 1476|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  13.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.5k|          m_has_value(false)
  446|  13.5k|    {
  447|  13.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   126k|    {
 1177|   126k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   112k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   112k|    {
 5840|   112k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   112k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   112k|    {
 5626|   112k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   112k|        : base(std::in_place, std::forward<U>(val)),
 1428|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   112k|    {
 1430|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   112k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   112k|    {
  437|   112k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|   103k|    {
 5384|   103k|        return m_args;
 5385|   103k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   103k|        : m_str(r.str)
 7981|   103k|    {
 7982|   103k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   126k|    {
 1598|   126k|        return has_value();
 1599|   126k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   239k|    {
  485|   239k|        return m_has_value;
  486|   239k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   112k|    {
 1673|   112k|        return &value();
 1674|   112k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   112k|    {
 1627|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   112k|        return this->get_value();
 1629|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   112k|    {
  451|   112k|        return m_value;
  452|   112k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8944|  51.5k|{
 8945|  51.5k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  51.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  51.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.5k|    static_cast<    \
  |  |  929|  51.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  51.5k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8983|  23.4k|{
 8984|  23.4k|    T value;
 8985|  23.4k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  23.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 22.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  23.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  22.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.4k|    static_cast<    \
  |  |  929|  22.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.4k|    static_cast<    \
  |  |  929|  22.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  23.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  23.4k|{
 5165|  23.4k|    check_scan_arg_types<T>();
 5166|       |
 5167|  23.4k|    basic_scan_arg<Context> arg;
 5168|  23.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  23.4k|    arg.m_value = make_value<Context>(value);
 5170|  23.4k|    return arg;
 5171|  23.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  13.5k|    {
 2724|  13.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  13.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  13.5k|    {
 2705|  13.5k|        return decay_copy(t.begin());
 2706|  13.5k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  6.46M|{
 1949|  6.46M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.46M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   314k|    {
 2781|   314k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   314k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   314k|    {
 2763|   314k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   314k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8877|  63.9k|{
 8878|  63.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  63.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  63.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  63.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  63.9k|{
 8665|  63.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  63.9k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  63.9k|{
 8602|  63.9k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  63.9k|    auto result = vscan_impl(buffer, format, args);
 8605|  63.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 57.6k]
  |  |  ------------------
  ------------------
 8606|  6.27k|        return unexpected(result.error());
 8607|  6.27k|    }
 8608|  57.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  63.9k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   157k|{
 4729|   157k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   157k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   157k|                  "\n"
 4733|   157k|                  "Unsupported range type given as input to a scanning "
 4734|   157k|                  "function.\n"
 4735|   157k|                  "A range needs to have a character type (value type) "
 4736|   157k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   157k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   157k|                  "to be included.\n"
 4739|   157k|                  "See the scnlib documentation for more details.");
 4740|   157k|    static_assert(
 4741|   157k|        !std::is_same_v<T, custom_char_traits>,
 4742|   157k|        "\n"
 4743|   157k|        "Unsupported range type given as input to a scanning "
 4744|   157k|        "function.\n"
 4745|   157k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   157k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   157k|        "not supported.");
 4748|   157k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   157k|                  "\n"
 4750|   157k|                  "Unsupported range type given as input to a scanning "
 4751|   157k|                  "function.\n"
 4752|   157k|                  "file_marker_found cannot be used as an "
 4753|   157k|                  "source range type to scn::scan.\n"
 4754|   157k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   157k|                  "and do not provide an explicit source range, "
 4756|   157k|                  "or use scn::scan with a FILE* directly.");
 4757|   157k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   157k|                  "\n"
 4759|   157k|                  "Unsupported range type given as input to a scanning "
 4760|   157k|                  "function.\n"
 4761|   157k|                  "In order to be scannable, a range needs to satisfy "
 4762|   157k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   157k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   157k|                  "\n"
 4765|   157k|                  "Unsupported range type given as input to a scanning "
 4766|   157k|                  "function.\n"
 4767|   157k|                  "A range needs to model forward_range and have a valid "
 4768|   157k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   157k|                  "Examples of scannable ranges are std::string, "
 4770|   157k|                  "std::string_view, "
 4771|   157k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   157k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   157k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   157k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   157k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   157k|    else {
 4714|   157k|        return make_forward_scan_buffer(r);
 4715|   157k|    }
 4716|   157k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   157k|{
 4533|   157k|    return basic_scan_forward_buffer_impl(range);
 4534|   157k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   157k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   157k|          m_cursor(ranges::begin(*m_range))
 4419|   157k|    {
 4420|   157k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   157k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   157k|    {
 4391|   157k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   157k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   157k|    {
 4159|   157k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   157k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   301k|    {
 2724|   301k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   301k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   301k|    {
 2705|   301k|        return decay_copy(t.begin());
 2706|   301k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|   445k|    {
 3326|   445k|        return m_iterator;
 3327|   445k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  1.86M|    {
 4424|  1.86M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 19.2k, False: 1.84M]
  ------------------
 4425|  19.2k|            return false;
 4426|  19.2k|        }
 4427|  1.84M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  1.84M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  1.84M|        }
 4430|  1.84M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.69M, False: 149k]
  ------------------
 4431|  1.69M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.69M|                                          this->m_current_view.begin(),
 4433|  1.69M|                                          this->m_current_view.end());
 4434|  1.69M|        }
 4435|  1.84M|        m_latest = *m_cursor;
 4436|  1.84M|        ++m_cursor;
 4437|  1.84M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  1.84M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  1.84M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  1.84M|        }
 4441|  1.84M|        return true;
 4442|  1.86M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.54M|    {
 2781|  5.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.54M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.54M|    {
 2763|  5.54M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.54M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  5.68M|    {
 3330|  5.68M|        return m_sentinel;
 3331|  5.68M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   157k|    {
 4079|   157k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   157k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  13.5k|        : base(unexpect, std::move(e.error())),
 1474|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.5k|    {
 1476|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  13.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.5k|          m_has_value(false)
  446|  13.5k|    {
  447|  13.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   157k|    {
 1177|   157k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   143k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   143k|                      ranges::iterator_t<SourceRange>>) {
 5935|   143k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   143k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   143k|    {
 2724|   143k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   143k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   143k|    {
 2705|   143k|        return decay_copy(t.begin());
 2706|   143k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   143k|{
 5920|   143k|    return ranges::end(source);
 5921|   143k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   143k|    {
 2781|   143k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   143k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   143k|    {
 2763|   143k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   143k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7985|   127k|    {
 7986|   127k|        return m_str;
 7987|   127k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   127k|{
 8831|   127k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 115k]
  |  |  ------------------
  ------------------
 8832|  12.5k|        return unexpected(result.error());
 8833|  12.5k|    }
 8834|   115k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   127k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   157k|    {
 1598|   157k|        return has_value();
 1599|   157k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   314k|    {
  485|   314k|        return m_has_value;
  486|   314k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  13.5k|    {
 1604|  13.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.5k|        return this->get_unexpected().error();
 1606|  13.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.5k|    {
  468|  13.5k|        return m_unexpected;
  469|  13.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  13.5k|        : base(unexpect, std::move(e.error())),
 1474|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.5k|    {
 1476|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  13.5k|        : m_has_value(false)
  625|  13.5k|    {
  626|  13.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  13.5k|    {
  689|  13.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.5k|                                  std::forward<Args>(args)...);
  691|  13.5k|        m_has_value = false;
  692|  13.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  27.1k|    {
  718|  27.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  27.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   157k|    {
 1177|   157k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   115k|    {
 1653|   115k|        return value();
 1654|   115k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   143k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   143k|    {
 5840|   143k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   143k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   143k|    static_cast<    \
  |  |  929|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   143k|    {
 5691|   143k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   143k|        : m_has_value(true)
  615|   143k|    {
  616|   143k|        construct(std::forward<Args>(args)...);
  617|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   143k|    {
  682|   143k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   143k|        m_has_value = true;
  684|   143k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   143k|{
  392|   143k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   143k|        T(std::forward<Args>(args)...);
  394|   143k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5831|   143k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   431k|    {
  706|   431k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   431k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   431k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5835|   287k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   301k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   301k|    static_cast<    \
  |  |  929|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   301k|    static_cast<    \
  |  |  929|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   301k|    {
 3312|   301k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   127k|        : m_str(r.str)
 7981|   127k|    {
 7982|   127k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   157k|    {
 1598|   157k|        return has_value();
 1599|   157k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   458k|    {
  675|   458k|        return m_has_value;
  676|   458k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   143k|    {
 1673|   143k|        return &value();
 1674|   143k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   143k|    {
  641|   143k|        return *value_ptr();
  642|   143k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   143k|    {
 5708|   143k|        return ranges::begin(m_range);
 5709|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   157k|    {
  631|   157k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 143k, False: 13.5k]
  ------------------
  632|   143k|            destroy_value();
  633|   143k|        }
  634|  13.5k|        else {
  635|  13.5k|            destroy_unexpected();
  636|  13.5k|        }
  637|   157k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   143k|    {
  696|   143k|        scn::detail::destroy_at(value_ptr());
  697|   143k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   143k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   143k|    else {
  404|   143k|        p->~T();
  405|   143k|    }
  406|   143k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.5k|    {
  700|  13.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.5k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8944|  63.9k|{
 8945|  63.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  63.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  63.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  63.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  63.9k|{
 8683|  63.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  63.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  63.9k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  63.9k|{
 8618|  63.9k|#if !SCN_DISABLE_LOCALE
 8619|  63.9k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  63.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  63.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  63.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  63.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 57.6k]
  |  |  ------------------
  ------------------
 8626|  6.27k|        return unexpected(result.error());
 8627|  6.27k|    }
 8628|  57.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  63.9k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8983|  29.4k|{
 8984|  29.4k|    T value;
 8985|  29.4k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  29.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  29.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 28.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  29.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  28.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.4k|    static_cast<    \
  |  |  929|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.4k|    static_cast<    \
  |  |  929|  28.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  29.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  29.4k|{
 8696|  29.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  29.4k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  29.4k|{
 8642|  29.4k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  29.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  29.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.04k, False: 28.4k]
  |  |  ------------------
  ------------------
 8646|  1.04k|        return unexpected(result.error());
 8647|  1.04k|    }
 8648|  28.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  29.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  28.4k|    {
 1663|  28.4k|        return std::move(value());
 1664|  28.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  56.4k|    {
 2724|  56.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  56.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  56.4k|    {
 2705|  56.4k|        return decay_copy(t.begin());
 2706|  56.4k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  12.5M|{
 1949|  12.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  12.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  12.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.63M|    {
 2781|  3.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.63M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.63M|    {
 2763|  3.63M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.63M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  1.46M|{
 5406|  1.46M|    detail::check_scan_arg_types<Args...>();
 5407|  1.46M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.46M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  1.81M|{
 5145|  1.81M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.81M|                  "Scan argument types must be default constructible");
 5147|  1.81M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.81M|                  "Scan argument types must be Destructible");
 5149|  1.81M|    static_assert(
 5150|  1.81M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.81M|        "Scan argument types must not be references");
 5152|  1.81M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  1.46M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.46M|    {
 5359|  1.46M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  1.46M|    {
 5370|  1.46M|        return {detail::make_arg<
 5371|  1.46M|            kind, Context,
 5372|  1.46M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.46M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.46M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  1.46M|{
 5180|  1.46M|    return make_value<Context>(value).ref_value;
 5181|  1.46M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  1.81M|{
 5130|  1.81M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.81M|                                  needs_context_tag>) {
 5134|  1.81M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.81M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  1.81M|    {                                                                        \
 4969|  1.81M|        return val;                                                          \
 4970|  1.81M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  1.81M|{
 5099|  1.81M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.81M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.81M|    constexpr bool scannable_char =
 5103|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.81M|    static_assert(scannable_char,
 5105|  1.81M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.81M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.81M|    constexpr bool scannable_const =
 5109|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.81M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.81M|    constexpr bool scannable_disabled =
 5113|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.81M|    static_assert(scannable_disabled,
 5115|  1.81M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.81M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.81M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.81M|    static_assert(
 5120|  1.81M|        scannable,
 5121|  1.81M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.81M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.81M|    return arg_value{arg};
 5125|  1.81M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  1.81M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.81M|    {
 4911|  1.81M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   730k|{
 8602|   730k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   730k|    auto result = vscan_impl(buffer, format, args);
 8605|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 705k]
  |  |  ------------------
  ------------------
 8606|  25.0k|        return unexpected(result.error());
 8607|  25.0k|    }
 8608|   705k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   730k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|  1.81M|{
 4729|  1.81M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.81M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.81M|                  "\n"
 4733|  1.81M|                  "Unsupported range type given as input to a scanning "
 4734|  1.81M|                  "function.\n"
 4735|  1.81M|                  "A range needs to have a character type (value type) "
 4736|  1.81M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.81M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.81M|                  "to be included.\n"
 4739|  1.81M|                  "See the scnlib documentation for more details.");
 4740|  1.81M|    static_assert(
 4741|  1.81M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.81M|        "\n"
 4743|  1.81M|        "Unsupported range type given as input to a scanning "
 4744|  1.81M|        "function.\n"
 4745|  1.81M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.81M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.81M|        "not supported.");
 4748|  1.81M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.81M|                  "\n"
 4750|  1.81M|                  "Unsupported range type given as input to a scanning "
 4751|  1.81M|                  "function.\n"
 4752|  1.81M|                  "file_marker_found cannot be used as an "
 4753|  1.81M|                  "source range type to scn::scan.\n"
 4754|  1.81M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.81M|                  "and do not provide an explicit source range, "
 4756|  1.81M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.81M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.81M|                  "\n"
 4759|  1.81M|                  "Unsupported range type given as input to a scanning "
 4760|  1.81M|                  "function.\n"
 4761|  1.81M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.81M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.81M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.81M|                  "\n"
 4765|  1.81M|                  "Unsupported range type given as input to a scanning "
 4766|  1.81M|                  "function.\n"
 4767|  1.81M|                  "A range needs to model forward_range and have a valid "
 4768|  1.81M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.81M|                  "Examples of scannable ranges are std::string, "
 4770|  1.81M|                  "std::string_view, "
 4771|  1.81M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.81M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.81M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.81M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.81M|{
 4668|  1.81M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.81M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.81M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.81M|    {
 2855|  1.81M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.81M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.81M|    {
 2836|  1.81M|        return t.data();
 2837|  1.81M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|  1.81M|    {
 3229|  1.81M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.81M|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.37M|{
  326|  5.37M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.37M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   223M|{
  304|   223M|    return p;
  305|   223M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.58M|    {
 2724|  3.58M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.58M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.58M|    {
 2705|  3.58M|        return decay_copy(t.begin());
 2706|  3.58M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   186M|    {
 3326|   186M|        return m_iterator;
 3327|   186M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.81M|    {
 3185|  1.81M|        return static_cast<const D&>(*this);
 3186|  1.81M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.81M|    {
 2930|  1.81M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.81M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.81M|    {
 2896|  1.81M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.81M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  3.59M|    {
 3342|  3.59M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  3.59M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  54.3k|        : base(unexpect, std::move(e.error())),
 1474|  54.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  54.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  54.3k|          m_has_value(false)
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.81M|    {
 1177|  1.81M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  1.76M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.76M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.76M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.76M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.54M|    {
 2724|  3.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.54M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.54M|    {
 2705|  3.54M|        return decay_copy(t.begin());
 2706|  3.54M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  1.76M|{
 5920|  1.76M|    return ranges::end(source);
 5921|  1.76M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.76M|    {
 2781|  1.76M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.76M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.76M|    {
 2763|  1.76M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.76M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   177M|    {
 3330|   177M|        return m_sentinel;
 3331|   177M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.76M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.76M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.76M|    {
 1430|  1.76M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.76M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.76M|    {
  437|  1.76M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7985|   730k|    {
 7986|   730k|        return m_str;
 7987|   730k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.46M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.46M|    {
 5436|  1.46M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  1.46M|    {
 5389|  1.46M|        return m_argptrs;
 5390|  1.46M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  2.19M|        : m_desc(desc), m_builtin_values(data)
 5487|  2.19M|    {
 5488|  2.19M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   730k|{
 8831|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 705k]
  |  |  ------------------
  ------------------
 8832|  25.0k|        return unexpected(result.error());
 8833|  25.0k|    }
 8834|   705k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   730k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.81M|    {
 1598|  1.81M|        return has_value();
 1599|  1.81M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.63M|    {
  485|  3.63M|        return m_has_value;
  486|  3.63M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  54.3k|    {
 1604|  54.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  54.3k|        return this->get_unexpected().error();
 1606|  54.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  54.3k|    {
  468|  54.3k|        return m_unexpected;
  469|  54.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  27.1k|        : base(unexpect, std::move(e.error())),
 1474|  27.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  27.1k|        : m_has_value(false)
  625|  27.1k|    {
  626|  27.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  27.1k|    {
  689|  27.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  27.1k|                                  std::forward<Args>(args)...);
  691|  27.1k|        m_has_value = false;
  692|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  54.3k|    {
  718|  54.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  54.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  54.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   909k|    {
 1177|   909k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.41M|    {
 1653|  1.41M|        return value();
 1654|  1.41M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.76M|    {
 1627|  1.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.76M|        return this->get_value();
 1629|  1.76M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.76M|    {
  451|  1.76M|        return m_value;
  452|  1.76M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   882k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   882k|    {
 5840|   882k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.76M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.76M|    static_cast<    \
  |  |  929|  1.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.76M|    {
 5691|  1.76M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.76M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.76M|    static_cast<    \
  |  |  929|  1.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.76M|    {
 5626|  1.76M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   882k|        : base(std::in_place, std::forward<U>(val)),
 1428|   882k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   882k|    {
 1430|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   882k|        : m_has_value(true)
  615|   882k|    {
  616|   882k|        construct(std::forward<Args>(args)...);
  617|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   882k|    {
  682|   882k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   882k|        m_has_value = true;
  684|   882k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   882k|{
  392|   882k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   882k|        T(std::forward<Args>(args)...);
  394|   882k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|   882k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.64M|    {
  706|  2.64M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.64M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.64M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.76M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  1.46M|    {
 5384|  1.46M|        return m_args;
 5385|  1.46M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  1.46M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  68.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  68.9M|    static_cast<    \
  |  |  929|  68.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  68.9M|    static_cast<    \
  |  |  929|  68.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  68.9M|    {
 3312|  68.9M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  2.19M|{
 7707|  2.19M|    return s;
 7708|  2.19M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  2.19M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   730k|        : m_str(r.str)
 7981|   730k|    {
 7982|   730k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   909k|    {
 1598|   909k|        return has_value();
 1599|   909k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.70M|    {
  675|  2.70M|        return m_has_value;
  676|  2.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   882k|    {
 1673|   882k|        return &value();
 1674|   882k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   882k|    {
 1627|   882k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   882k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   882k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   882k|        return this->get_value();
 1629|   882k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   882k|    {
  641|   882k|        return *value_ptr();
  642|   882k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  1.76M|    {
 5708|  1.76M|        return ranges::begin(m_range);
 5709|  1.76M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   909k|    {
  631|   909k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 882k, False: 27.1k]
  ------------------
  632|   882k|            destroy_value();
  633|   882k|        }
  634|  27.1k|        else {
  635|  27.1k|            destroy_unexpected();
  636|  27.1k|        }
  637|   909k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   882k|    {
  696|   882k|        scn::detail::destroy_at(value_ptr());
  697|   882k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|   882k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   882k|    else {
  404|   882k|        p->~T();
  405|   882k|    }
  406|   882k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  27.1k|    {
  700|  27.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  27.1k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   730k|{
 8618|   730k|#if !SCN_DISABLE_LOCALE
 8619|   730k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   730k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   730k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   730k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 705k]
  |  |  ------------------
  ------------------
 8626|  25.0k|        return unexpected(result.error());
 8627|  25.0k|    }
 8628|   705k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   705k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   730k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   357k|{
 5165|   357k|    check_scan_arg_types<T>();
 5166|       |
 5167|   357k|    basic_scan_arg<Context> arg;
 5168|   357k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   357k|    arg.m_value = make_value<Context>(value);
 5170|   357k|    return arg;
 5171|   357k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  2.72M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   357k|{
 8642|   357k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   357k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   357k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 352k]
  |  |  ------------------
  ------------------
 8646|  4.18k|        return unexpected(result.error());
 8647|  4.18k|    }
 8648|   352k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   357k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   352k|    {
 1663|   352k|        return std::move(value());
 1664|   352k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|   730k|{
 5406|   730k|    detail::check_scan_arg_types<Args...>();
 5407|   730k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   730k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|   909k|{
 5145|   909k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   909k|                  "Scan argument types must be default constructible");
 5147|   909k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   909k|                  "Scan argument types must be Destructible");
 5149|   909k|    static_assert(
 5150|   909k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   909k|        "Scan argument types must not be references");
 5152|   909k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|   730k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   730k|    {
 5359|   730k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   730k|    {
 5370|   730k|        return {detail::make_arg<
 5371|   730k|            kind, Context,
 5372|   730k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   730k|                                 typename Context::char_type>::value>(args)...};
 5374|   730k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|   730k|{
 5180|   730k|    return make_value<Context>(value).ref_value;
 5181|   730k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|   909k|{
 5130|   909k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   909k|                                  needs_context_tag>) {
 5134|   909k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   909k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   909k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|   909k|    {                                                                        \
 4969|   909k|        return val;                                                          \
 4970|   909k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|   909k|{
 5099|   909k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   909k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   909k|    constexpr bool scannable_char =
 5103|   909k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   909k|    static_assert(scannable_char,
 5105|   909k|                  "Cannot scan an argument of an unsupported character "
 5106|   909k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   909k|    constexpr bool scannable_const =
 5109|   909k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   909k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   909k|    constexpr bool scannable_disabled =
 5113|   909k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   909k|    static_assert(scannable_disabled,
 5115|   909k|                  "Cannot scan an argument that has been disabled by "
 5116|   909k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   909k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   909k|    static_assert(
 5120|   909k|        scannable,
 5121|   909k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   909k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   909k|    return arg_value{arg};
 5125|   909k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|   909k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   909k|    {
 4911|   909k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7985|   730k|    {
 7986|   730k|        return m_str;
 7987|   730k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   730k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   730k|    {
 5436|   730k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|   730k|    {
 5389|   730k|        return m_argptrs;
 5390|   730k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   730k|{
 8831|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 705k]
  |  |  ------------------
  ------------------
 8832|  25.0k|        return unexpected(result.error());
 8833|  25.0k|    }
 8834|   705k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   730k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  27.1k|        : base(unexpect, std::move(e.error())),
 1474|  27.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  27.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  27.1k|          m_has_value(false)
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   909k|    {
 1177|   909k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   882k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   882k|    {
 5840|   882k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   882k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   882k|    {
 5626|   882k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   882k|        : base(std::in_place, std::forward<U>(val)),
 1428|   882k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   882k|    {
 1430|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   882k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   882k|    {
  437|   882k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|   730k|    {
 5384|   730k|        return m_args;
 5385|   730k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   730k|        : m_str(r.str)
 7981|   730k|    {
 7982|   730k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   909k|    {
 1598|   909k|        return has_value();
 1599|   909k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.79M|    {
  485|  1.79M|        return m_has_value;
  486|  1.79M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   882k|    {
 1673|   882k|        return &value();
 1674|   882k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   882k|    {
 1627|   882k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   882k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   882k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   882k|        return this->get_value();
 1629|   882k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   882k|    {
  451|   882k|        return m_value;
  452|   882k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   178k|{
 5165|   178k|    check_scan_arg_types<T>();
 5166|       |
 5167|   178k|    basic_scan_arg<Context> arg;
 5168|   178k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   178k|    arg.m_value = make_value<Context>(value);
 5170|   178k|    return arg;
 5171|   178k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  27.1k|    {
 2724|  27.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  27.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  27.1k|    {
 2705|  27.1k|        return decay_copy(t.begin());
 2706|  27.1k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  87.9M|{
 1949|  87.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  87.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  87.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.81M|    {
 2781|  1.81M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.81M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.81M|    {
 2763|  1.81M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.81M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   365k|{
 8602|   365k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   365k|    auto result = vscan_impl(buffer, format, args);
 8605|   365k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 352k]
  |  |  ------------------
  ------------------
 8606|  12.5k|        return unexpected(result.error());
 8607|  12.5k|    }
 8608|   352k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   365k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   909k|{
 4729|   909k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   909k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   909k|                  "\n"
 4733|   909k|                  "Unsupported range type given as input to a scanning "
 4734|   909k|                  "function.\n"
 4735|   909k|                  "A range needs to have a character type (value type) "
 4736|   909k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   909k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   909k|                  "to be included.\n"
 4739|   909k|                  "See the scnlib documentation for more details.");
 4740|   909k|    static_assert(
 4741|   909k|        !std::is_same_v<T, custom_char_traits>,
 4742|   909k|        "\n"
 4743|   909k|        "Unsupported range type given as input to a scanning "
 4744|   909k|        "function.\n"
 4745|   909k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   909k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   909k|        "not supported.");
 4748|   909k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   909k|                  "\n"
 4750|   909k|                  "Unsupported range type given as input to a scanning "
 4751|   909k|                  "function.\n"
 4752|   909k|                  "file_marker_found cannot be used as an "
 4753|   909k|                  "source range type to scn::scan.\n"
 4754|   909k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   909k|                  "and do not provide an explicit source range, "
 4756|   909k|                  "or use scn::scan with a FILE* directly.");
 4757|   909k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   909k|                  "\n"
 4759|   909k|                  "Unsupported range type given as input to a scanning "
 4760|   909k|                  "function.\n"
 4761|   909k|                  "In order to be scannable, a range needs to satisfy "
 4762|   909k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   909k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   909k|                  "\n"
 4765|   909k|                  "Unsupported range type given as input to a scanning "
 4766|   909k|                  "function.\n"
 4767|   909k|                  "A range needs to model forward_range and have a valid "
 4768|   909k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   909k|                  "Examples of scannable ranges are std::string, "
 4770|   909k|                  "std::string_view, "
 4771|   909k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   909k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   909k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   909k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   909k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   909k|    else {
 4714|   909k|        return make_forward_scan_buffer(r);
 4715|   909k|    }
 4716|   909k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   909k|{
 4533|   909k|    return basic_scan_forward_buffer_impl(range);
 4534|   909k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   909k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   909k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   909k|          m_cursor(ranges::begin(*m_range))
 4419|   909k|    {
 4420|   909k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   909k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   909k|    {
 4391|   909k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   909k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   909k|    {
 4159|   909k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   909k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.79M|    {
 2724|  1.79M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.79M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.79M|    {
 2705|  1.79M|        return decay_copy(t.begin());
 2706|  1.79M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  2.67M|    {
 3326|  2.67M|        return m_iterator;
 3327|  2.67M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  27.5M|    {
 4424|  27.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 25.2k, False: 27.5M]
  ------------------
 4425|  25.2k|            return false;
 4426|  25.2k|        }
 4427|  27.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  27.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  27.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  27.5M|        }
 4430|  27.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 26.6M, False: 894k]
  ------------------
 4431|  26.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  26.6M|                                          this->m_current_view.begin(),
 4433|  26.6M|                                          this->m_current_view.end());
 4434|  26.6M|        }
 4435|  27.5M|        m_latest = *m_cursor;
 4436|  27.5M|        ++m_cursor;
 4437|  27.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  27.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  27.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  27.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  27.5M|        }
 4441|  27.5M|        return true;
 4442|  27.5M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  82.5M|    {
 2781|  82.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  82.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  82.5M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  82.5M|    {
 2763|  82.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  82.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  82.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  83.4M|    {
 3330|  83.4M|        return m_sentinel;
 3331|  83.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   909k|    {
 4079|   909k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   909k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   909k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  27.1k|        : base(unexpect, std::move(e.error())),
 1474|  27.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  27.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  27.1k|          m_has_value(false)
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   909k|    {
 1177|   909k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   882k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   882k|                      ranges::iterator_t<SourceRange>>) {
 5935|   882k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   882k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   882k|    {
 2724|   882k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   882k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   882k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   882k|    {
 2705|   882k|        return decay_copy(t.begin());
 2706|   882k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   882k|{
 5920|   882k|    return ranges::end(source);
 5921|   882k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   882k|    {
 2781|   882k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   882k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   882k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   882k|    {
 2763|   882k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   882k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   882k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   882k|        : base(std::in_place, std::forward<U>(val)),
 1428|   882k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   882k|    {
 1430|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   882k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   882k|    {
  437|   882k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7985|   730k|    {
 7986|   730k|        return m_str;
 7987|   730k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   730k|{
 8831|   730k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 705k]
  |  |  ------------------
  ------------------
 8832|  25.0k|        return unexpected(result.error());
 8833|  25.0k|    }
 8834|   705k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   730k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   909k|    {
 1598|   909k|        return has_value();
 1599|   909k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.81M|    {
  485|  1.81M|        return m_has_value;
  486|  1.81M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  27.1k|    {
 1604|  27.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  27.1k|        return this->get_unexpected().error();
 1606|  27.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  27.1k|    {
  468|  27.1k|        return m_unexpected;
  469|  27.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  27.1k|        : base(unexpect, std::move(e.error())),
 1474|  27.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  27.1k|        : m_has_value(false)
  625|  27.1k|    {
  626|  27.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  27.1k|    {
  689|  27.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  27.1k|                                  std::forward<Args>(args)...);
  691|  27.1k|        m_has_value = false;
  692|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  54.3k|    {
  718|  54.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  54.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  54.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   909k|    {
 1177|   909k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   705k|    {
 1653|   705k|        return value();
 1654|   705k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   882k|    {
 1627|   882k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   882k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   882k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   882k|        return this->get_value();
 1629|   882k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   882k|    {
  451|   882k|        return m_value;
  452|   882k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   882k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   882k|    {
 5840|   882k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   882k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   882k|    {
 5691|   882k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   882k|        : base(std::in_place, std::forward<U>(val)),
 1428|   882k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   882k|    {
 1430|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   882k|        : m_has_value(true)
  615|   882k|    {
  616|   882k|        construct(std::forward<Args>(args)...);
  617|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   882k|    {
  682|   882k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   882k|        m_has_value = true;
  684|   882k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   882k|{
  392|   882k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   882k|        T(std::forward<Args>(args)...);
  394|   882k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5831|   882k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.64M|    {
  706|  2.64M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.64M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.64M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5835|  1.76M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  1.79M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.79M|    {
 3312|  1.79M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   730k|        : m_str(r.str)
 7981|   730k|    {
 7982|   730k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   909k|    {
 1598|   909k|        return has_value();
 1599|   909k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.70M|    {
  675|  2.70M|        return m_has_value;
  676|  2.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   882k|    {
 1673|   882k|        return &value();
 1674|   882k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   882k|    {
 1627|   882k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   882k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   882k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   882k|        return this->get_value();
 1629|   882k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   882k|    {
  641|   882k|        return *value_ptr();
  642|   882k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   882k|    {
 5708|   882k|        return ranges::begin(m_range);
 5709|   882k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   909k|    {
  631|   909k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 882k, False: 27.1k]
  ------------------
  632|   882k|            destroy_value();
  633|   882k|        }
  634|  27.1k|        else {
  635|  27.1k|            destroy_unexpected();
  636|  27.1k|        }
  637|   909k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   882k|    {
  696|   882k|        scn::detail::destroy_at(value_ptr());
  697|   882k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|   882k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   882k|    else {
  404|   882k|        p->~T();
  405|   882k|    }
  406|   882k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  27.1k|    {
  700|  27.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  27.1k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   365k|{
 8618|   365k|#if !SCN_DISABLE_LOCALE
 8619|   365k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   365k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   365k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   365k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   365k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 352k]
  |  |  ------------------
  ------------------
 8626|  12.5k|        return unexpected(result.error());
 8627|  12.5k|    }
 8628|   352k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   365k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   178k|{
 8642|   178k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   178k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   178k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 176k]
  |  |  ------------------
  ------------------
 8646|  2.09k|        return unexpected(result.error());
 8647|  2.09k|    }
 8648|   176k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   178k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   176k|    {
 1663|   176k|        return std::move(value());
 1664|   176k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   159k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   159k|    {
 3564|   159k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   159k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   159k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  9.75M|    {
 3570|  9.75M|        return m_code == good;
 3571|  9.75M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  56.4k|    {
 3581|  56.4k|        return m_code;
 3582|  56.4k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  6.14M|    {
 3326|  6.14M|        return m_iterator;
 3327|  6.14M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  90.4M|    {
 3326|  90.4M|        return m_iterator;
 3327|  90.4M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.30M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6292|  37.6k|    {
 6293|  37.6k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6293:13): [True: 0, False: 37.6k]
  |  Branch (6293:39): [True: 0, False: 0]
  ------------------
 6294|       |            // clang-format off
 6295|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6296|       |            // clang-format on
 6297|      0|        }
 6298|       |
 6299|  37.6k|        m_specs.width = width;
 6300|  37.6k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.26M|    {
 6314|  1.26M|        m_specs.type = type;
 6315|  1.26M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6330|  43.4k|    {
 6331|  43.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6332|  43.4k|        const auto end_value = static_cast<unsigned>(end);
 6333|  43.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6334|       |
 6335|  43.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  43.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.4k, False: 0]
  |  |  ------------------
  ------------------
 6336|       |            // No need to bit-twiddle with a mask, because with the
 6337|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6338|  43.4k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  43.4k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6339|  1.17M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6339:40): [True: 1.12M, False: 43.4k]
  ------------------
 6340|  1.12M|                m_specs.charset_literals[v / 8] |=
 6341|  1.12M|                    static_cast<unsigned char>(1ul << (v % 8));
 6342|  1.12M|            }
 6343|  43.4k|        }
 6344|      0|        else {
 6345|      0|            m_specs.charset_has_nonascii = true;
 6346|      0|        }
 6347|  43.4k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|  37.6k|    {
 6376|  37.6k|        SCN_UNLIKELY_ATTR
 6377|  37.6k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|  37.6k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.36M|    {
 6387|  1.36M|        return static_cast<bool>(m_error);
 6388|  1.36M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  56.4k|{
 3605|  56.4k|    return a.code() == b;
 3606|  56.4k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  56.4k|{
 3609|  56.4k|    return !(a == b);
 3610|  56.4k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  84.5M|{
 4043|       |    // Pattern_White_Space property
 4044|  84.5M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 17.4M, False: 67.1M]
  |  Branch (4044:27): [True: 3.01M, False: 14.3M]
  ------------------
 4045|  84.5M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 2.74M, False: 78.7M]
  ------------------
 4046|  84.5M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 499k, False: 78.2M]
  ------------------
 4047|  84.5M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 240k, False: 78.0M]
  ------------------
 4048|  84.5M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 244k, False: 77.8M]
  ------------------
 4049|  84.5M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 115k, False: 77.6M]
  ------------------
 4050|  84.5M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 102, False: 77.6M]
  ------------------
 4051|  84.5M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|  18.8k|{
 7074|  18.8k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 18.8k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 18.8k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 18.8k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 18.8k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 18.8k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 18.8k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 18.8k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 18.8k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 18.8k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 18.8k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 18.8k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 18.8k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 18.8k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 18.8k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 18.8k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 18.8k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 18.8k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 18.8k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 18.8k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|  2.09k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 2.09k, False: 16.7k]
  ------------------
 7107|  6.27k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 4.18k, False: 14.6k]
  ------------------
 7108|  10.4k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 4.18k, False: 14.6k]
  ------------------
 7109|  18.8k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 8.36k, False: 10.4k]
  ------------------
 7110|  18.8k|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 18.8k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 18.8k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  18.8k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|  18.8k|            SCN_CLANG_POP
 7121|  18.8k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|  18.8k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  18.8k|{
 3650|  18.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  18.8k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  21.2k|{
 3650|  21.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  21.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  10.9k|{
 3650|  10.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  10.9k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7215|  1.26M|{
 7216|  1.26M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.26M]
  ------------------
 7217|  1.26M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7217:9): [True: 1.22M, False: 40.5k]
  ------------------
 7218|  1.26M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7218:9): [True: 21.7k, False: 18.8k]
  ------------------
 7219|  1.26M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7219:9): [True: 0, False: 18.8k]
  ------------------
 7220|  1.26M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7220:9): [True: 0, False: 18.8k]
  ------------------
 7221|  1.24M|        return;
 7222|  1.24M|    }
 7223|  18.8k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7223:9): [True: 18.8k, False: 0]
  ------------------
 7224|  18.8k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 7225|       |            // clang-format off
 7226|  18.8k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7227|       |            // clang-format on
 7228|  18.8k|        }
 7229|      0|        return;
 7230|  18.8k|    }
 7231|      0|    SCN_UNLIKELY_ATTR
 7232|      0|    handler.on_error("Invalid type specifier for string");
 7233|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  33.5M|    {
 4203|  33.5M|        assert(m_begin);
 4204|  33.5M|        return m_end == nullptr;
 4205|  33.5M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   143k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   143k|    else {
 3716|   143k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   143k|    }
 3718|   143k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|   737k|    {
 4220|   737k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 737k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   737k|        return parent()->get_segment_starting_at(position());
 4226|   737k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  19.5M|    {
 4214|  19.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  19.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  19.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  19.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|   737k|    {
 4109|   737k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 422k, False: 315k]
  |  |  ------------------
  ------------------
 4110|   737k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   422k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   422k|        }
 4113|   315k|        const auto start = pos - m_putback_buffer.size();
 4114|   315k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   315k|        return m_current_view.substr(start);
 4116|   315k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|   830k|    {
 4198|   830k|        return m_position;
 4199|   830k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|   472k|    {
 4131|   472k|        return m_is_contiguous;
 4132|   472k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   501M|    {
 4203|   501M|        assert(m_begin);
 4204|   501M|        return m_end == nullptr;
 4205|   501M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   885k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   885k|    else {
 3716|   885k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   885k|    }
 3718|   885k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  2.67M|    {
 4220|  2.67M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 2.67M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  2.67M|        return parent()->get_segment_starting_at(position());
 4226|  2.67M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|   292M|    {
 4214|   292M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   292M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   292M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   292M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   292M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  2.67M|    {
 4109|  2.67M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.77M, False: 905k]
  |  |  ------------------
  ------------------
 4110|  2.67M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.77M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.77M|        }
 4113|   905k|        const auto start = pos - m_putback_buffer.size();
 4114|   905k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   905k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   905k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   905k|        return m_current_view.substr(start);
 4116|   905k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  3.21M|    {
 4198|  3.21M|        return m_position;
 4199|  3.21M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  2.72M|    {
 4131|  2.72M|        return m_is_contiguous;
 4132|  2.72M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   696k|    {
 3180|   696k|        return static_cast<D&>(*this);
 3181|   696k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   696k|    {
 3221|   696k|        return detail::to_address(ranges::begin(derived()));
 3222|   696k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.77M|    {
 3180|  1.77M|        return static_cast<D&>(*this);
 3181|  1.77M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  1.77M|    {
 3221|  1.77M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.77M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|  64.7k|    {
 8180|  64.7k|        return ranges::subrange{begin(), end()};
 8181|  64.7k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   192k|    {
 8164|   192k|        return m_current;
 8165|   192k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|  64.7k|    {
 8172|  64.7k|        return ranges::default_sentinel;
 8173|  64.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  2.25M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.25M|    static_cast<    \
  |  |  929|  2.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.25M|    static_cast<    \
  |  |  929|  2.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.25M|    {
 3312|  2.25M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  3.12M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   148k|    {
 1837|   148k|        return detail::transform_error_impl(std::move(*this),
 1838|   148k|                                            std::forward<F>(f));
 1839|   148k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   148k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   148k|    else {
 1333|   148k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   148k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   148k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 145k, False: 2.44k]
  |  |  ------------------
  ------------------
 1335|   148k|                   ? result(*std::forward<Exp>(exp))
 1336|   148k|                   : result(unexpect,
 1337|  2.44k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.44k|                                           std::forward<Exp>(exp).error()));
 1339|   148k|    }
 1340|   148k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   296k|    {
  485|   296k|        return m_has_value;
  486|   296k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   145k|    {
 1663|   145k|        return std::move(value());
 1664|   145k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   145k|    {
 1627|   145k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   145k|        return this->get_value();
 1629|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   145k|    {
  451|   145k|        return m_value;
  452|   145k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   348k|        : base(std::in_place, std::forward<U>(val)),
 1428|   348k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   348k|    {
 1430|   348k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   348k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   348k|    {
  437|   348k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   366k|    {
 1177|   366k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  14.8k|{
 1211|  14.8k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  14.8k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.44k|    {
 1614|  2.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.44k|        return std::move(this->get_unexpected().error());
 1616|  2.44k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.44k|    {
  468|  2.44k|        return m_unexpected;
  469|  2.44k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  29.6k|    {
  361|  29.6k|        return m_unexpected;
  362|  29.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.44k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.44k|    {
 1486|  2.44k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  17.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  17.0k|          m_has_value(false)
  446|  17.0k|    {
  447|  17.0k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   365k|    {
 8180|   365k|        return ranges::subrange{begin(), end()};
 8181|   365k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|  1.09M|    {
 8164|  1.09M|        return m_current;
 8165|  1.09M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   365k|    {
 8172|   365k|        return ranges::default_sentinel;
 8173|   365k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  31.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  31.8M|    static_cast<    \
  |  |  929|  31.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  31.8M|    static_cast<    \
  |  |  929|  31.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  31.8M|    {
 3312|  31.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   892k|    {
 1837|   892k|        return detail::transform_error_impl(std::move(*this),
 1838|   892k|                                            std::forward<F>(f));
 1839|   892k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   892k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   892k|    else {
 1333|   892k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   892k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   892k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 889k, False: 2.88k]
  |  |  ------------------
  ------------------
 1335|   892k|                   ? result(*std::forward<Exp>(exp))
 1336|   892k|                   : result(unexpect,
 1337|  2.88k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.88k|                                           std::forward<Exp>(exp).error()));
 1339|   892k|    }
 1340|   892k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.78M|    {
  485|  1.78M|        return m_has_value;
  486|  1.78M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   889k|    {
 1663|   889k|        return std::move(value());
 1664|   889k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   889k|    {
 1627|   889k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   889k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   889k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   889k|        return this->get_value();
 1629|   889k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   889k|    {
  451|   889k|        return m_value;
  452|   889k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.12M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.12M|    {
 1430|  2.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.12M|    {
  437|  2.12M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.15M|    {
 1177|  2.15M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.88k|    {
 1614|  2.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.88k|        return std::move(this->get_unexpected().error());
 1616|  2.88k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.88k|    {
  468|  2.88k|        return m_unexpected;
  469|  2.88k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.88k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.88k|    {
 1486|  2.88k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  33.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.0k|          m_has_value(false)
  446|  33.0k|    {
  447|  33.0k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  50.9k|        : m_unexpected(std::forward<Err>(e))
  346|  50.9k|    {
  347|  50.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  50.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  50.9k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  29.8k|        : base(unexpect, std::move(e.error())),
 1474|  29.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.8k|    {
 1476|  29.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  33.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.6k|          m_has_value(false)
  446|  33.6k|    {
  447|  33.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   583k|    {
 1177|   583k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   547k|        : base(std::in_place, std::forward<U>(val)),
 1428|   547k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   547k|    {
 1430|   547k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   547k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   547k|    {
  437|   547k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   583k|    {
 1598|   583k|        return has_value();
 1599|   583k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.16M|    {
  485|  1.16M|        return m_has_value;
  486|  1.16M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  33.6k|    {
 1604|  33.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.6k|        return this->get_unexpected().error();
 1606|  33.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  33.6k|    {
  468|  33.6k|        return m_unexpected;
  469|  33.6k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   456k|    {
 1663|   456k|        return std::move(value());
 1664|   456k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   549k|    {
 1627|   549k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   549k|        return this->get_value();
 1629|   549k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   549k|    {
  451|   549k|        return m_value;
  452|   549k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  60.3k|        : base(unexpect, std::move(e.error())),
 1474|  60.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  60.3k|    {
 1476|  60.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  66.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  66.1k|          m_has_value(false)
  446|  66.1k|    {
  447|  66.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.31M|    {
 1177|  4.31M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  4.24M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.24M|    {
 1430|  4.24M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.24M|    {
  437|  4.24M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  4.31M|    {
 1598|  4.31M|        return has_value();
 1599|  4.31M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.63M|    {
  485|  8.63M|        return m_has_value;
  486|  8.63M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  66.1k|    {
 1604|  66.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  66.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  66.1k|        return this->get_unexpected().error();
 1606|  66.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  66.1k|    {
  468|  66.1k|        return m_unexpected;
  469|  66.1k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  3.54M|    {
 1663|  3.54M|        return std::move(value());
 1664|  3.54M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  4.24M|    {
 1627|  4.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.24M|        return this->get_value();
 1629|  4.24M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.24M|    {
  451|  4.24M|        return m_value;
  452|  4.24M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   234k|    {
 1837|   234k|        return detail::transform_error_impl(std::move(*this),
 1838|   234k|                                            std::forward<F>(f));
 1839|   234k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   234k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   234k|    else {
 1333|   234k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   234k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   234k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230k, False: 3.76k]
  |  |  ------------------
  ------------------
 1335|   234k|                   ? result(*std::forward<Exp>(exp))
 1336|   234k|                   : result(unexpect,
 1337|  3.76k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.76k|                                           std::forward<Exp>(exp).error()));
 1339|   234k|    }
 1340|   234k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   469k|    {
  485|   469k|        return m_has_value;
  486|   469k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   230k|    {
 1663|   230k|        return std::move(value());
 1664|   230k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   230k|    {
 1627|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   230k|        return this->get_value();
 1629|   230k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   230k|    {
  451|   230k|        return m_value;
  452|   230k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.76k|    {
 1614|  3.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.76k|        return std::move(this->get_unexpected().error());
 1616|  3.76k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.76k|    {
  468|  3.76k|        return m_unexpected;
  469|  3.76k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  3.76k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  3.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  3.76k|    {
 1486|  3.76k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  7.12M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  14.6k|        : base(unexpect, std::move(e.error())),
 1474|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.6k|    {
 1476|  14.6k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  1.75M|    {
 4289|  1.75M|        return x.is_at_end();
 4290|  1.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  3.60M|    {
 4333|  3.60M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 3.60M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  3.60M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 3.60M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  3.60M|        return !read_at_position();
 4340|  3.60M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  9.93M|    {
 4313|  9.93M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  9.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  9.93M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 9.93M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  9.93M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  9.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.07M, False: 1.86M]
  |  |  ------------------
  ------------------
 4320|  8.07M|            return true;
 4321|  8.07M|        }
 4322|       |
 4323|  3.70M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 1.86M, False: 1.84M]
  ------------------
 4324|  1.86M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 19.2k, False: 1.84M]
  ------------------
 4325|  19.2k|                return false;
 4326|  19.2k|            }
 4327|  1.86M|        }
 4328|  1.84M|        return true;
 4329|  1.86M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  13.6M|    {
 4089|  13.6M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  13.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  3.29M|    {
 4248|  3.29M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  3.29M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 3.29M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  3.29M|        auto res = read_at_position();
 4257|  3.29M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  3.29M|        return parent()->get_character_at(m_position);
 4259|  3.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  3.29M|    {
 4120|  3.29M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79M, False: 1.49M]
  |  |  ------------------
  ------------------
 4121|  3.29M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  1.79M|            return m_putback_buffer[pos];
 4123|  1.79M|        }
 4124|  1.49M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.49M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.49M|        return m_current_view[start];
 4127|  1.49M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   145k|        : base(std::in_place, std::forward<U>(val)),
 1428|   145k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   145k|    {
 1430|   145k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   145k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   145k|    {
  437|   145k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   148k|    {
 1177|   148k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.44k|        : base(unexpect, std::move(e.error())),
 1474|  2.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.44k|    {
 1476|  2.44k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.44k|          m_has_value(false)
  446|  2.44k|    {
  447|  2.44k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  14.8k|        : m_unexpected(std::forward<Args>(args)...)
  355|  14.8k|    {
  356|  14.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.8k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  1.33M|    {
 4283|  1.33M|        return !(lhs == rhs);
 4284|  1.33M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  1.33M|    {
 4278|  1.33M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 1.33M, False: 0]
  |  Branch (4278:46): [True: 224k, False: 1.11M]
  ------------------
 4279|  1.33M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  3.04M|    {
 4234|  3.04M|        ++m_position;
 4235|  3.04M|        (void)read_at_position();
 4236|  3.04M|        return *this;
 4237|  3.04M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  14.8k|        : m_unexpected(std::forward<Err>(e))
  346|  14.8k|    {
  347|  14.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.8k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.06k|        : base(unexpect, std::move(e.error())),
 1474|  1.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.06k|    {
 1476|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.06k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.06k|          m_has_value(false)
  446|  1.06k|    {
  447|  1.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   120k|    {
 1177|   120k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   119k|        : base(std::in_place, std::forward<U>(val)),
 1428|   119k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   119k|    {
 1430|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   119k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   119k|    {
  437|   119k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   120k|    {
 1598|   120k|        return has_value();
 1599|   120k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   241k|    {
  485|   241k|        return m_has_value;
  486|   241k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.06k|    {
 1604|  1.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.06k|        return this->get_unexpected().error();
 1606|  1.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.06k|    {
  468|  1.06k|        return m_unexpected;
  469|  1.06k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   119k|    {
 1663|   119k|        return std::move(value());
 1664|   119k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   119k|    {
 1627|   119k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   119k|        return this->get_value();
 1629|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   119k|    {
  451|   119k|        return m_value;
  452|   119k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  5.49M|    {
 3330|  5.49M|        return m_sentinel;
 3331|  5.49M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   153k|    {
 3326|   153k|        return m_iterator;
 3327|   153k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   153k|    {
 3330|   153k|        return m_sentinel;
 3331|   153k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   366k|    {
 1598|   366k|        return has_value();
 1599|   366k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   732k|    {
  485|   732k|        return m_has_value;
  486|   732k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  17.0k|    {
 1604|  17.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  17.0k|        return this->get_unexpected().error();
 1606|  17.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  17.0k|    {
  468|  17.0k|        return m_unexpected;
  469|  17.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   289k|    {
 1663|   289k|        return std::move(value());
 1664|   289k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   348k|    {
 1627|   348k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   348k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   348k|        return this->get_value();
 1629|   348k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   348k|    {
  451|   348k|        return m_value;
  452|   348k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   146k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   146k|    {
 3312|   146k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  1.85M|    {
 4300|  1.85M|        return !x.is_at_end();
 4301|  1.85M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  3.76k|        : base(unexpect, std::move(e.error())),
 1474|  3.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.76k|    {
 1476|  3.76k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  3.76k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.76k|          m_has_value(false)
  446|  3.76k|    {
  447|  3.76k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   234k|    {
 1177|   234k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   230k|        : base(std::in_place, std::forward<U>(val)),
 1428|   230k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   230k|    {
 1430|   230k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   230k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   230k|    {
  437|   230k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.50k|        : base(unexpect, std::move(e.error())),
 1474|  1.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.50k|    {
 1476|  1.50k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.50k|          m_has_value(false)
  446|  1.50k|    {
  447|  1.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   189k|    {
 1177|   189k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   188k|        : base(std::in_place, std::forward<U>(val)),
 1428|   188k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   188k|    {
 1430|   188k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   188k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   188k|    {
  437|   188k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   189k|    {
 1598|   189k|        return has_value();
 1599|   189k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   379k|    {
  485|   379k|        return m_has_value;
  486|   379k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.50k|    {
 1604|  1.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.50k|        return this->get_unexpected().error();
 1606|  1.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.50k|    {
  468|  1.50k|        return m_unexpected;
  469|  1.50k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   188k|    {
 1663|   188k|        return std::move(value());
 1664|   188k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   188k|    {
 1627|   188k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   188k|        return this->get_value();
 1629|   188k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   188k|    {
  451|   188k|        return m_value;
  452|   188k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   696k|    {
 2855|   696k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   696k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   696k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   696k|    {
 2836|   696k|        return t.data();
 2837|   696k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   122k|        : base(unexpect, std::move(e.error())),
 1474|   122k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   122k|    {
 1476|   122k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   122k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   122k|          m_has_value(false)
  446|   122k|    {
  447|   122k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.13M|    {
 1177|  3.13M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  3.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.01M|    {
 1430|  3.01M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  3.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.01M|    {
  437|  3.01M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  59.3k|    {
 1653|  59.3k|        return value();
 1654|  59.3k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  93.0k|    {
 1653|  93.0k|        return value();
 1654|  93.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    854|        : base(std::in_place, std::forward<U>(val)),
 1428|    854|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    854|    {
 1430|    854|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    854|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    854|    {
  437|    854|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  1.70k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.70k|    {
 1430|  1.70k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.70k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.70k|    {
  437|  1.70k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  30.1k|        : base(unexpect, std::move(e.error())),
 1474|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.1k|    {
 1476|  30.1k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  28.9M|    {
 4289|  28.9M|        return x.is_at_end();
 4290|  28.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  56.8M|    {
 4333|  56.8M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 56.8M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  56.8M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 56.8M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  56.8M|        return !read_at_position();
 4340|  56.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|   151M|    {
 4313|   151M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   151M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   151M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 151M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   151M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   151M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 123M, False: 27.5M]
  |  |  ------------------
  ------------------
 4320|   123M|            return true;
 4321|   123M|        }
 4322|       |
 4323|  55.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 27.5M, False: 27.5M]
  ------------------
 4324|  27.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 25.2k, False: 27.5M]
  ------------------
 4325|  25.2k|                return false;
 4326|  25.2k|            }
 4327|  27.5M|        }
 4328|  27.5M|        return true;
 4329|  27.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|   206M|    {
 4089|   206M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   206M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  55.8M|    {
 4248|  55.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  55.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  55.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 55.8M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  55.8M|        auto res = read_at_position();
 4257|  55.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  55.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  55.8M|        return parent()->get_character_at(m_position);
 4259|  55.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  55.8M|    {
 4120|  55.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  55.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.1M, False: 26.6M]
  |  |  ------------------
  ------------------
 4121|  55.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  29.1M|            return m_putback_buffer[pos];
 4123|  29.1M|        }
 4124|  26.6M|        const auto start = pos - m_putback_buffer.size();
 4125|  26.6M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  26.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  26.6M|        return m_current_view[start];
 4127|  26.6M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   155M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   155M|    else {
 3810|       |        // utf-32
 3811|   155M|        static_assert(sizeof(U) == 4);
 3812|   155M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   155M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   155M|        return 1;
 3814|   155M|    }
 3815|   155M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   889k|        : base(std::in_place, std::forward<U>(val)),
 1428|   889k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   889k|    {
 1430|   889k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   889k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   889k|    {
  437|   889k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   892k|    {
 1177|   892k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.88k|        : base(unexpect, std::move(e.error())),
 1474|  2.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.88k|    {
 1476|  2.88k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.88k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.88k|          m_has_value(false)
  446|  2.88k|    {
  447|  2.88k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  11.2M|    {
 4283|  11.2M|        return !(lhs == rhs);
 4284|  11.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  11.2M|    {
 4278|  11.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 11.2M, False: 0]
  |  Branch (4278:46): [True: 361k, False: 10.9M]
  ------------------
 4279|  11.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  38.4M|    {
 4234|  38.4M|        ++m_position;
 4235|  38.4M|        (void)read_at_position();
 4236|  38.4M|        return *this;
 4237|  38.4M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   155M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   155M|    else {
 4016|   155M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   155M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   155M|        auto cp = static_cast<char32_t>(input.front());
 4018|   155M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   155M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00M, False: 154M]
  |  |  ------------------
  ------------------
 4019|  1.00M|            return invalid_code_point;
 4020|  1.00M|        }
 4021|   154M|        return cp;
 4022|   155M|    }
 4023|   155M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.15k|        : base(unexpect, std::move(e.error())),
 1474|  1.15k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.15k|    {
 1476|  1.15k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.15k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.15k|          m_has_value(false)
  446|  1.15k|    {
  447|  1.15k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   713k|    {
 1177|   713k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   712k|        : base(std::in_place, std::forward<U>(val)),
 1428|   712k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   712k|    {
 1430|   712k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   712k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   712k|    {
  437|   712k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   713k|    {
 1598|   713k|        return has_value();
 1599|   713k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.42M|    {
  485|  1.42M|        return m_has_value;
  486|  1.42M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.15k|    {
 1604|  1.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.15k|        return this->get_unexpected().error();
 1606|  1.15k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.15k|    {
  468|  1.15k|        return m_unexpected;
  469|  1.15k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   712k|    {
 1663|   712k|        return std::move(value());
 1664|   712k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   712k|    {
 1627|   712k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   712k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   712k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   712k|        return this->get_value();
 1629|   712k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   712k|    {
  451|   712k|        return m_value;
  452|   712k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  87.3M|    {
 3330|  87.3M|        return m_sentinel;
 3331|  87.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   897k|    {
 3326|   897k|        return m_iterator;
 3327|   897k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   897k|    {
 3330|   897k|        return m_sentinel;
 3331|   897k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.15M|    {
 1598|  2.15M|        return has_value();
 1599|  2.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.31M|    {
  485|  4.31M|        return m_has_value;
  486|  4.31M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  33.0k|    {
 1604|  33.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.0k|        return this->get_unexpected().error();
 1606|  33.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  33.0k|    {
  468|  33.0k|        return m_unexpected;
  469|  33.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.77M|    {
 1663|  1.77M|        return std::move(value());
 1664|  1.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.12M|    {
 1627|  2.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.12M|        return this->get_value();
 1629|  2.12M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.12M|    {
  451|  2.12M|        return m_value;
  452|  2.12M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  72.6M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  72.6M|    else {
 3701|  72.6M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  72.6M|                                       to_address(first), to_address(last)))};
 3703|  72.6M|    }
 3704|  72.6M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   217M|{
  326|   217M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   217M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   217M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   889k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   889k|    static_cast<    \
  |  |  929|   889k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   889k|    static_cast<    \
  |  |  929|   889k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   889k|    {
 3312|   889k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  27.8M|    {
 4300|  27.8M|        return !x.is_at_end();
 4301|  27.8M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  5.76k|        : base(unexpect, std::move(e.error())),
 1474|  5.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.76k|    {
 1476|  5.76k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  5.76k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.76k|          m_has_value(false)
  446|  5.76k|    {
  447|  5.76k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.78M|    {
 1177|  1.78M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  1.77M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.77M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.77M|    {
 1430|  1.77M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.77M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.77M|    {
  437|  1.77M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.57M|    {
  485|  3.57M|        return m_has_value;
  486|  3.57M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.77M|    {
 1627|  1.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.77M|        return this->get_value();
 1629|  1.77M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.77M|    {
  451|  1.77M|        return m_value;
  452|  1.77M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.30k|        : base(unexpect, std::move(e.error())),
 1474|  2.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.30k|    {
 1476|  2.30k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.30k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.30k|          m_has_value(false)
  446|  2.30k|    {
  447|  2.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.42M|    {
 1177|  1.42M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.42M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.42M|    {
 1430|  1.42M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.42M|    {
  437|  1.42M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.78M|    {
 1837|  1.78M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.78M|                                            std::forward<F>(f));
 1839|  1.78M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.78M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.78M|    else {
 1333|  1.78M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.78M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.78M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.77M, False: 5.76k]
  |  |  ------------------
  ------------------
 1335|  1.78M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.78M|                   : result(unexpect,
 1337|  5.76k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.76k|                                           std::forward<Exp>(exp).error()));
 1339|  1.78M|    }
 1340|  1.78M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.77M|    {
 1663|  1.77M|        return std::move(value());
 1664|  1.77M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  5.76k|    {
 1614|  5.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.76k|        return std::move(this->get_unexpected().error());
 1616|  5.76k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.76k|    {
  468|  5.76k|        return m_unexpected;
  469|  5.76k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  5.76k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  5.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  5.76k|    {
 1486|  5.76k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.42M|    {
 1598|  1.42M|        return has_value();
 1599|  1.42M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.85M|    {
  485|  2.85M|        return m_has_value;
  486|  2.85M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.30k|    {
 1604|  2.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.30k|        return this->get_unexpected().error();
 1606|  2.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.30k|    {
  468|  2.30k|        return m_unexpected;
  469|  2.30k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.42M|    {
 1663|  1.42M|        return std::move(value());
 1664|  1.42M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.42M|    {
 1627|  1.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.42M|        return this->get_value();
 1629|  1.42M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.42M|    {
  451|  1.42M|        return m_value;
  452|  1.42M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.77M|    {
 2855|  1.77M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.77M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.77M|    {
 2836|  1.77M|        return t.data();
 2837|  1.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   353k|    {
 1653|   353k|        return value();
 1654|   353k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   706k|    {
 1653|   706k|        return value();
 1654|   706k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    110|        : base(std::in_place, std::forward<U>(val)),
 1428|    110|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    110|    {
 1430|    110|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    110|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    110|    {
  437|    110|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    220|        : base(std::in_place, std::forward<U>(val)),
 1428|    220|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    220|    {
 1430|    220|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    220|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    220|    {
  437|    220|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   333k|    {
 5476|   333k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   333k|        return static_cast<std::size_t>(m_desc &
 5481|   333k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   333k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   667k|    {
 5501|   667k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   667k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   333k|    {
 5444|   333k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   333k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   333k|        const auto t = type(id);
 5456|   333k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   333k|        basic_scan_arg<Context> arg;
 5461|   333k|        arg.m_type = t;
 5462|   333k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 333k, False: 0]
  ------------------
 5463|   333k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   333k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   333k|        return arg;
 5469|   333k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   333k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   333k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   333k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   333k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   333k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   333k|    {
 5505|   333k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   333k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   579k|    {
 5257|   579k|        return m_type != detail::arg_type::none_type;
 5258|   579k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   140k|{
 8428|   140k|#define SCN_VISIT(Type)                                         \
 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   140k|    }                                                           \
 8432|   140k|    else {                                                      \
 8433|   140k|        return vis(monostate_val);                              \
 8434|   140k|    }
 8435|       |
 8436|   140k|    monostate monostate_val{};
 8437|       |
 8438|   140k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 140k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 140k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 140k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 140k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 140k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 140k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 140k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 140k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 140k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 140k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 140k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 140k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 140k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 140k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 140k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 140k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 140k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 140k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  70.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 70.3k, False: 70.3k]
  ------------------
 8476|  70.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  70.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  70.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  70.3k|    }                                                           \
  |  | 8432|  70.3k|    else {                                                      \
  |  | 8433|  70.3k|        return vis(monostate_val);                              \
  |  | 8434|  70.3k|    }
  ------------------
 8477|   140k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 70.3k, False: 70.3k]
  ------------------
 8478|   140k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8479|   140k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 140k]
  ------------------
 8480|   140k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8481|   140k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 140k]
  ------------------
 8482|   140k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8483|   140k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 140k]
  ------------------
 8484|   140k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8485|   140k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 140k]
  ------------------
 8486|   140k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8487|       |
 8488|   140k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 140k]
  ------------------
 8489|   140k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   140k|            return vis(
 8491|   140k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 140k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 140k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   140k|            SCN_CLANG_POP
 8506|   140k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   181k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   181k|    {
 5555|   181k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|  68.9k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|  68.9k|    {
 8149|  68.9k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   181k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   181k|    {
 8067|   181k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   157k|{
 4353|   157k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 157k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   157k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   157k|                            ranges::default_sentinel};
 4359|   157k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   157k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   157k|    {
 4185|   157k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   157k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   157k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  88.4k|{
 8428|  88.4k|#define SCN_VISIT(Type)                                         \
 8429|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  88.4k|    }                                                           \
 8432|  88.4k|    else {                                                      \
 8433|  88.4k|        return vis(monostate_val);                              \
 8434|  88.4k|    }
 8435|       |
 8436|  88.4k|    monostate monostate_val{};
 8437|       |
 8438|  88.4k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 88.4k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 88.4k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 88.4k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 88.4k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 88.4k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 88.4k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 88.4k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 88.4k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 88.4k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 88.4k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 88.4k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 88.4k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 88.4k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 88.4k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 88.4k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 88.4k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 88.4k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 88.4k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 88.4k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  88.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 88.4k, False: 0]
  ------------------
 8478|  88.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.4k|    }                                                           \
  |  | 8432|  88.4k|    else {                                                      \
  |  | 8433|  88.4k|        return vis(monostate_val);                              \
  |  | 8434|  88.4k|    }
  ------------------
 8479|  88.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 88.4k]
  ------------------
 8480|  88.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.4k|    }                                                           \
  |  | 8432|  88.4k|    else {                                                      \
  |  | 8433|  88.4k|        return vis(monostate_val);                              \
  |  | 8434|  88.4k|    }
  ------------------
 8481|  88.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 88.4k]
  ------------------
 8482|  88.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.4k|    }                                                           \
  |  | 8432|  88.4k|    else {                                                      \
  |  | 8433|  88.4k|        return vis(monostate_val);                              \
  |  | 8434|  88.4k|    }
  ------------------
 8483|  88.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 88.4k]
  ------------------
 8484|  88.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.4k|    }                                                           \
  |  | 8432|  88.4k|    else {                                                      \
  |  | 8433|  88.4k|        return vis(monostate_val);                              \
  |  | 8434|  88.4k|    }
  ------------------
 8485|  88.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 88.4k]
  ------------------
 8486|  88.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.4k|    }                                                           \
  |  | 8432|  88.4k|    else {                                                      \
  |  | 8433|  88.4k|        return vis(monostate_val);                              \
  |  | 8434|  88.4k|    }
  ------------------
 8487|       |
 8488|  88.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 88.4k]
  ------------------
 8489|  88.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  88.4k|            return vis(
 8491|  88.4k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 88.4k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 88.4k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  88.4k|            SCN_CLANG_POP
 8506|  88.4k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   112k|{
 7055|   112k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   112k|    handler.check_args_exhausted();
 7057|   112k|    return handler.get_error();
 7058|   112k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   112k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   112k|    auto begin = format.data();
 7024|   112k|    auto it = begin;
 7025|   112k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   203k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 112k, False: 91.3k]
  ------------------
 7028|   112k|        const auto ch = *it++;
 7029|   112k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 112k, False: 0]
  ------------------
 7030|   112k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   112k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   112k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 20.9k, False: 91.3k]
  ------------------
 7034|  20.9k|                return;
 7035|  20.9k|            }
 7036|   112k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   112k|    }
 7047|       |
 7048|  91.3k|    handler.on_literal_text(begin, end);
 7049|  91.3k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   112k|{
 6953|   112k|    struct id_adapter {
 6954|   112k|        constexpr void operator()()
 6955|   112k|        {
 6956|   112k|            arg_id = handler.on_arg_id();
 6957|   112k|        }
 6958|   112k|        constexpr void operator()(std::size_t id)
 6959|   112k|        {
 6960|   112k|            arg_id = handler.on_arg_id(id);
 6961|   112k|        }
 6962|       |
 6963|   112k|        constexpr void on_error(const char* msg)
 6964|   112k|        {
 6965|   112k|            SCN_UNLIKELY_ATTR
 6966|   112k|            handler.on_error(msg);
 6967|   112k|        }
 6968|       |
 6969|   112k|        Handler& handler;
 6970|   112k|        std::size_t arg_id;
 6971|   112k|    };
 6972|       |
 6973|   112k|    ++begin;
 6974|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   112k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 112k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   112k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 112k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   112k|    else {
 6986|   112k|        auto adapter = id_adapter{handler, 0};
 6987|   112k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   112k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   112k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 112k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   112k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 112k, False: 0]
  ------------------
 6998|   112k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   112k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   112k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.36k, False: 103k]
  |  |  |  Branch (859:45): [True: 0, False: 112k]
  |  |  |  Branch (859:45): [True: 8.36k, False: 103k]
  |  |  ------------------
  ------------------
 7004|  8.36k|                handler.on_error("Unknown format specifier");
 7005|  8.36k|                return begin;
 7006|  8.36k|            }
 7007|   112k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   112k|    }
 7014|   103k|    return begin + 1;
 7015|   112k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   181k|    {
 8050|   181k|        return m_args.get(id);
 8051|   181k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   168k|    {
 8060|   168k|        return m_locale;
 8061|   168k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   181k|    {
 5576|   181k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   181k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   181k|        do_check_arg_id(id);
 5584|   181k|        return id;
 5585|   181k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   181k|{
 6064|   181k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   181k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   181k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   112k|{
 6454|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   112k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 112k, False: 0]
  |  Branch (6455:26): [True: 0, False: 112k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   112k|    handler();
 6460|   112k|    return begin;
 6461|   112k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6402|  12.5k|{
 6403|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  12.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  12.5k|    unsigned long long value = 0;
 6407|  25.0k|    do {
 6408|  25.0k|        value *= 10;
 6409|  25.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  25.0k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 25.0k]
  ------------------
 6411|  25.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  25.0k|        ++begin;
 6415|  25.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 25.0k, False: 0]
  |  Branch (6415:30): [True: 25.0k, False: 0]
  |  Branch (6415:47): [True: 12.5k, False: 12.5k]
  ------------------
 6416|  12.5k|    return static_cast<int>(value);
 6417|  12.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   112k|        {
 6956|   112k|            arg_id = handler.on_arg_id();
 6957|   112k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   362k|    {
 5262|   362k|        return m_type;
 5263|   362k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   168k|    {
 5571|   168k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   168k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   349k|    {
 5560|   349k|        return m_format.data();
 5561|   349k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   112k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   112k|    {
 7133|   112k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   112k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   112k|{
 6869|   112k|    auto do_presentation = [&]() -> const CharT* {
 6870|   112k|        if (*begin == CharT{'['}) {
 6871|   112k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   112k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   112k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   112k|                return begin;
 6877|   112k|            }
 6878|   112k|            handler.on_character_set_string(set);
 6879|   112k|            return begin;
 6880|   112k|        }
 6881|   112k|        if (*begin == CharT{'/'}) {
 6882|   112k|            return parse_presentation_regex(begin, end, handler);
 6883|   112k|        }
 6884|   112k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   112k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   112k|            handler.on_error("Invalid type specifier in format string");
 6887|   112k|            return begin;
 6888|   112k|        }
 6889|   112k|        handler.on_type(type);
 6890|   112k|        return begin;
 6891|   112k|    };
 6892|       |
 6893|   112k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 112k, False: 0]
  |  Branch (6893:28): [True: 97.9k, False: 14.2k]
  ------------------
 6894|   112k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 97.9k, False: 0]
  |  Branch (6894:36): [True: 93.8k, False: 4.18k]
  ------------------
 6895|  93.8k|        return do_presentation();
 6896|  93.8k|    }
 6897|       |
 6898|  18.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  18.4k|    begin = parse_align(begin, end, handler);
 6904|  18.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  18.4k|    begin = parse_width(begin, end, handler);
 6910|  18.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  18.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 18.4k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  18.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 4.18k, False: 14.2k]
  ------------------
 6929|  4.18k|        handler.on_localized();
 6930|  4.18k|        ++begin;
 6931|  4.18k|    }
 6932|  18.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  18.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 18.4k, False: 0]
  |  Branch (6937:25): [True: 14.2k, False: 4.18k]
  ------------------
 6938|  14.2k|        do_presentation();
 6939|  14.2k|    }
 6940|  18.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  18.4k|    return begin;
 6946|  18.4k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   159k|{
 6518|   159k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 153k, False: 6.27k]
  |  Branch (6518:33): [True: 153k, False: 0]
  ------------------
 6519|   159k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 6.27k, False: 0]
  |  Branch (6519:33): [True: 6.27k, False: 0]
  ------------------
 6520|   159k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   108k|    auto do_presentation = [&]() -> const CharT* {
 6870|   108k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 5.88k, False: 102k]
  ------------------
 6871|  5.88k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  5.88k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  5.88k|            handler.on_character_set_string(set);
 6879|  5.88k|            return begin;
 6880|  5.88k|        }
 6881|   102k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 102k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   102k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   102k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 97.9k]
  |  |  ------------------
  ------------------
 6886|  4.18k|            handler.on_error("Invalid type specifier in format string");
 6887|  4.18k|            return begin;
 6888|  4.18k|        }
 6889|  97.9k|        handler.on_type(type);
 6890|  97.9k|        return begin;
 6891|   102k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  5.88k|{
 6708|  5.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  5.88k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  5.88k|    auto start = begin;
 6712|  5.88k|    ++begin;
 6713|       |
 6714|  5.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  5.88k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 5.88k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  5.88k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 5.88k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  17.6k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 17.6k, False: 0]
  ------------------
 6739|  17.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  17.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 5.88k, False: 11.7k]
  ------------------
 6744|  5.88k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  5.88k|        }
 6746|       |
 6747|  11.7k|        parse_presentation_set_literal(begin, end, handler);
 6748|  11.7k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  5.88k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6671|  11.7k|{
 6672|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  11.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  11.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  11.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 11.7k, False: 0]
  |  Branch (6679:25): [True: 11.7k, False: 0]
  |  Branch (6679:49): [True: 11.7k, False: 0]
  ------------------
 6680|  11.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 11.7k, False: 0]
  ------------------
 6681|  11.7k|        ++begin;
 6682|       |
 6683|  11.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  11.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  11.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  11.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  11.7k|        return;
 6697|  11.7k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6647|  23.5k|{
 6648|  23.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  23.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  23.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.5k]
  |  |  |  Branch (859:45): [True: 0, False: 23.5k]
  |  |  |  Branch (859:45): [True: 0, False: 23.5k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  23.5k|    const auto cp =
 6657|  23.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  23.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.5k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  23.5k|    begin += len;
 6664|  23.5k|    return cp;
 6665|  23.5k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  8.83k|    {
 6357|  8.83k|        m_specs.charset_string_data = fmt.data();
 6358|  8.83k|        m_specs.charset_string_size = fmt.size();
 6359|  8.83k|        on_type(presentation_type::string_set);
 6360|  8.83k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   166k|{
 6466|   166k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 166k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 166k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 166k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 166k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 166k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 166k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 166k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 166k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 166k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 166k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 166k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 166k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 166k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 166k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 166k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 166k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 166k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 166k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|   153k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 153k, False: 12.5k]
  ------------------
 6497|   153k|            return presentation_type::string;
 6498|  6.27k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 6.27k, False: 159k]
  ------------------
 6499|  6.27k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 166k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 166k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 166k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 166k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  6.27k|        default:
  ------------------
  |  Branch (6510:9): [True: 6.27k, False: 159k]
  ------------------
 6511|  6.27k|            return presentation_type::none;
 6512|   166k|    }
 6513|   166k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  18.4k|{
 6543|  18.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  18.4k|    auto check_align = [](wchar_t ch) {
 6546|  18.4k|        switch (ch) {
 6547|  18.4k|            case L'<':
 6548|  18.4k|                return align_type::left;
 6549|  18.4k|            case L'>':
 6550|  18.4k|                return align_type::right;
 6551|  18.4k|            case L'^':
 6552|  18.4k|                return align_type::center;
 6553|  18.4k|            default:
 6554|  18.4k|                return align_type::none;
 6555|  18.4k|        }
 6556|  18.4k|    };
 6557|       |
 6558|  18.4k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  18.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  |  Branch (859:45): [True: 0, False: 18.4k]
  |  |  |  Branch (859:45): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6560|  18.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  18.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  18.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  18.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  18.4k|    const auto begin_before_fill = begin;
 6570|  18.4k|    begin += potential_fill_len;
 6571|       |
 6572|  18.4k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 18.4k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  18.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  18.4k|    const auto begin_after_fill = begin;
 6578|  18.4k|    ++begin;
 6579|       |
 6580|  18.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 18.4k, False: 0]
  ------------------
 6581|  18.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  18.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 5.88k, False: 12.5k]
  ------------------
 6586|  5.88k|            return begin_before_fill;
 6587|  5.88k|        }
 6588|  18.4k|    }
 6589|       |
 6590|  12.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 12.5k, False: 0]
  ------------------
 6591|  12.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 12.5k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  12.5k|        return begin_before_fill;
 6596|  12.5k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  12.5k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|  27.6k|{
 6525|  27.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|  27.6k|    else {
 6530|  27.6k|        const auto lengths =
 6531|  27.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|  27.6k|            "\3\4";
 6533|  27.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|  27.6k|        return len;
 6535|  27.6k|    }
 6536|  27.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  36.8k|    auto check_align = [](wchar_t ch) {
 6546|  36.8k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 36.8k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 36.8k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 36.8k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  36.8k|            default:
  ------------------
  |  Branch (6553:13): [True: 36.8k, False: 0]
  ------------------
 6554|  36.8k|                return align_type::none;
 6555|  36.8k|        }
 6556|  36.8k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  18.4k|{
 6608|  18.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  18.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 18.4k, False: 0]
  |  Branch (6610:33): [True: 8.36k, False: 10.0k]
  ------------------
 6611|  8.36k|        int width = parse_simple_int(begin, end);
 6612|  8.36k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.36k, False: 0]
  |  |  ------------------
  ------------------
 6613|  8.36k|            handler.on_width(width);
 6614|  8.36k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  8.36k|    }
 6620|  18.4k|    return begin;
 6621|  18.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  4.18k|    {
 7138|  4.18k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  4.18k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 4.18k, False: 0]
  ------------------
 7140|  4.18k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 4.18k, False: 0]
  ------------------
 7141|  4.18k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 4.18k, False: 0]
  ------------------
 7142|  4.18k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 4.18k, False: 0]
  ------------------
 7143|  4.18k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  4.18k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  4.18k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   103k|{
 8428|   103k|#define SCN_VISIT(Type)                                         \
 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   103k|    }                                                           \
 8432|   103k|    else {                                                      \
 8433|   103k|        return vis(monostate_val);                              \
 8434|   103k|    }
 8435|       |
 8436|   103k|    monostate monostate_val{};
 8437|       |
 8438|   103k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 103k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 103k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 103k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 103k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 103k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 103k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 103k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 103k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 103k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 103k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 103k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 103k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 103k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 103k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 103k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 103k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 103k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 103k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  51.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 51.9k, False: 51.9k]
  ------------------
 8476|  51.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  51.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  51.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  51.9k|    }                                                           \
  |  | 8432|  51.9k|    else {                                                      \
  |  | 8433|  51.9k|        return vis(monostate_val);                              \
  |  | 8434|  51.9k|    }
  ------------------
 8477|   103k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 51.9k, False: 51.9k]
  ------------------
 8478|   103k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8479|   103k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 103k]
  ------------------
 8480|   103k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8481|   103k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 103k]
  ------------------
 8482|   103k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8483|   103k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 103k]
  ------------------
 8484|   103k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8485|   103k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 103k]
  ------------------
 8486|   103k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8487|       |
 8488|   103k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 103k]
  ------------------
 8489|   103k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   103k|            return vis(
 8491|   103k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 103k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 103k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   103k|            SCN_CLANG_POP
 8506|   103k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|  68.9k|{
 7055|  68.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|  68.9k|    handler.check_args_exhausted();
 7057|  68.9k|    return handler.get_error();
 7058|  68.9k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|  68.9k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|  68.9k|    auto begin = format.data();
 7024|  68.9k|    auto it = begin;
 7025|  68.9k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   127k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 68.9k, False: 58.5k]
  ------------------
 7028|  68.9k|        const auto ch = *it++;
 7029|  68.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 68.9k, False: 0]
  ------------------
 7030|  68.9k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  68.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  68.9k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 10.4k, False: 58.5k]
  ------------------
 7034|  10.4k|                return;
 7035|  10.4k|            }
 7036|  68.9k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|  68.9k|    }
 7047|       |
 7048|  58.5k|    handler.on_literal_text(begin, end);
 7049|  58.5k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|  58.5k|    {
 8186|  58.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  58.5k|    static_cast<    \
  |  |  929|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  58.5k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|  68.9k|{
 6953|  68.9k|    struct id_adapter {
 6954|  68.9k|        constexpr void operator()()
 6955|  68.9k|        {
 6956|  68.9k|            arg_id = handler.on_arg_id();
 6957|  68.9k|        }
 6958|  68.9k|        constexpr void operator()(std::size_t id)
 6959|  68.9k|        {
 6960|  68.9k|            arg_id = handler.on_arg_id(id);
 6961|  68.9k|        }
 6962|       |
 6963|  68.9k|        constexpr void on_error(const char* msg)
 6964|  68.9k|        {
 6965|  68.9k|            SCN_UNLIKELY_ATTR
 6966|  68.9k|            handler.on_error(msg);
 6967|  68.9k|        }
 6968|       |
 6969|  68.9k|        Handler& handler;
 6970|  68.9k|        std::size_t arg_id;
 6971|  68.9k|    };
 6972|       |
 6973|  68.9k|    ++begin;
 6974|  68.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.9k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|  68.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 68.9k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|  68.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 68.9k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|  68.9k|    else {
 6986|  68.9k|        auto adapter = id_adapter{handler, 0};
 6987|  68.9k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  68.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.9k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|  68.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 68.9k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|  68.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 68.9k, False: 0]
  ------------------
 6998|  68.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.9k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|  68.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  68.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 64.7k]
  |  |  |  Branch (859:45): [True: 0, False: 68.9k]
  |  |  |  Branch (859:45): [True: 4.18k, False: 64.7k]
  |  |  ------------------
  ------------------
 7004|  4.18k|                handler.on_error("Unknown format specifier");
 7005|  4.18k|                return begin;
 7006|  4.18k|            }
 7007|  68.9k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|  68.9k|    }
 7014|  64.7k|    return begin + 1;
 7015|  68.9k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  68.9k|{
 6454|  68.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  68.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 68.9k, False: 0]
  |  Branch (6455:26): [True: 0, False: 68.9k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|  68.9k|    handler();
 6460|  68.9k|    return begin;
 6461|  68.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  68.9k|        {
 6956|  68.9k|            arg_id = handler.on_arg_id();
 6957|  68.9k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|  68.9k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  68.9k|    {
 7133|  68.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  68.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  68.9k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|  68.9k|{
 6869|  68.9k|    auto do_presentation = [&]() -> const CharT* {
 6870|  68.9k|        if (*begin == CharT{'['}) {
 6871|  68.9k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  68.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  68.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  68.9k|                return begin;
 6877|  68.9k|            }
 6878|  68.9k|            handler.on_character_set_string(set);
 6879|  68.9k|            return begin;
 6880|  68.9k|        }
 6881|  68.9k|        if (*begin == CharT{'/'}) {
 6882|  68.9k|            return parse_presentation_regex(begin, end, handler);
 6883|  68.9k|        }
 6884|  68.9k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  68.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  68.9k|            handler.on_error("Invalid type specifier in format string");
 6887|  68.9k|            return begin;
 6888|  68.9k|        }
 6889|  68.9k|        handler.on_type(type);
 6890|  68.9k|        return begin;
 6891|  68.9k|    };
 6892|       |
 6893|  68.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 68.9k, False: 0]
  |  Branch (6893:28): [True: 61.8k, False: 7.12k]
  ------------------
 6894|  68.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 61.8k, False: 0]
  |  Branch (6894:36): [True: 59.7k, False: 2.09k]
  ------------------
 6895|  59.7k|        return do_presentation();
 6896|  59.7k|    }
 6897|       |
 6898|  9.21k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  9.21k|    begin = parse_align(begin, end, handler);
 6904|  9.21k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  9.21k|    begin = parse_width(begin, end, handler);
 6910|  9.21k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  9.21k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 9.21k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  9.21k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 2.09k, False: 7.12k]
  ------------------
 6929|  2.09k|        handler.on_localized();
 6930|  2.09k|        ++begin;
 6931|  2.09k|    }
 6932|  9.21k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  9.21k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 9.21k, False: 0]
  |  Branch (6937:25): [True: 7.12k, False: 2.09k]
  ------------------
 6938|  7.12k|        do_presentation();
 6939|  7.12k|    }
 6940|  9.21k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  9.21k|    return begin;
 6946|  9.21k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|  66.8k|    auto do_presentation = [&]() -> const CharT* {
 6870|  66.8k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 2.94k, False: 63.9k]
  ------------------
 6871|  2.94k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  2.94k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  2.94k|            handler.on_character_set_string(set);
 6879|  2.94k|            return begin;
 6880|  2.94k|        }
 6881|  63.9k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 63.9k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|  63.9k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  63.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 61.8k]
  |  |  ------------------
  ------------------
 6886|  2.09k|            handler.on_error("Invalid type specifier in format string");
 6887|  2.09k|            return begin;
 6888|  2.09k|        }
 6889|  61.8k|        handler.on_type(type);
 6890|  61.8k|        return begin;
 6891|  63.9k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  2.94k|{
 6708|  2.94k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.94k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.94k|    auto start = begin;
 6712|  2.94k|    ++begin;
 6713|       |
 6714|  2.94k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  2.94k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 2.94k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  2.94k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 2.94k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  8.83k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 8.83k, False: 0]
  ------------------
 6739|  8.83k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  8.83k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 2.94k, False: 5.88k]
  ------------------
 6744|  2.94k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  2.94k|        }
 6746|       |
 6747|  5.88k|        parse_presentation_set_literal(begin, end, handler);
 6748|  5.88k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  2.94k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6671|  5.88k|{
 6672|  5.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  5.88k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  5.88k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  5.88k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 5.88k, False: 0]
  |  Branch (6679:25): [True: 5.88k, False: 0]
  |  Branch (6679:49): [True: 5.88k, False: 0]
  ------------------
 6680|  5.88k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 5.88k, False: 0]
  ------------------
 6681|  5.88k|        ++begin;
 6682|       |
 6683|  5.88k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  5.88k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  5.88k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  5.88k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  5.88k|        return;
 6697|  5.88k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6647|  11.7k|{
 6648|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  11.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  11.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  |  Branch (859:45): [True: 0, False: 11.7k]
  |  |  |  Branch (859:45): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  11.7k|    const auto cp =
 6657|  11.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  11.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  11.7k|    begin += len;
 6664|  11.7k|    return cp;
 6665|  11.7k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  9.21k|{
 6543|  9.21k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  9.21k|    auto check_align = [](wchar_t ch) {
 6546|  9.21k|        switch (ch) {
 6547|  9.21k|            case L'<':
 6548|  9.21k|                return align_type::left;
 6549|  9.21k|            case L'>':
 6550|  9.21k|                return align_type::right;
 6551|  9.21k|            case L'^':
 6552|  9.21k|                return align_type::center;
 6553|  9.21k|            default:
 6554|  9.21k|                return align_type::none;
 6555|  9.21k|        }
 6556|  9.21k|    };
 6557|       |
 6558|  9.21k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  9.21k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  |  Branch (859:45): [True: 0, False: 9.21k]
  |  |  |  Branch (859:45): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6560|  9.21k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  9.21k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  9.21k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  9.21k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  9.21k|    const auto begin_before_fill = begin;
 6570|  9.21k|    begin += potential_fill_len;
 6571|       |
 6572|  9.21k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 9.21k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  9.21k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  9.21k|    const auto begin_after_fill = begin;
 6578|  9.21k|    ++begin;
 6579|       |
 6580|  9.21k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 9.21k, False: 0]
  ------------------
 6581|  9.21k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  9.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.21k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  9.21k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 2.94k, False: 6.27k]
  ------------------
 6586|  2.94k|            return begin_before_fill;
 6587|  2.94k|        }
 6588|  9.21k|    }
 6589|       |
 6590|  6.27k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 6.27k, False: 0]
  ------------------
 6591|  6.27k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 6.27k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  6.27k|        return begin_before_fill;
 6596|  6.27k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  6.27k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  18.4k|    auto check_align = [](wchar_t ch) {
 6546|  18.4k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 18.4k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 18.4k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 18.4k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  18.4k|            default:
  ------------------
  |  Branch (6553:13): [True: 18.4k, False: 0]
  ------------------
 6554|  18.4k|                return align_type::none;
 6555|  18.4k|        }
 6556|  18.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  9.21k|{
 6608|  9.21k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  9.21k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 9.21k, False: 0]
  |  Branch (6610:33): [True: 4.18k, False: 5.03k]
  ------------------
 6611|  4.18k|        int width = parse_simple_int(begin, end);
 6612|  4.18k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.18k, False: 0]
  |  |  ------------------
  ------------------
 6613|  4.18k|            handler.on_width(width);
 6614|  4.18k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  4.18k|    }
 6620|  9.21k|    return begin;
 6621|  9.21k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  2.09k|    {
 7138|  2.09k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  2.09k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 2.09k, False: 0]
  ------------------
 7140|  2.09k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 2.09k, False: 0]
  ------------------
 7141|  2.09k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 2.09k, False: 0]
  ------------------
 7142|  2.09k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 2.09k, False: 0]
  ------------------
 7143|  2.09k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  2.09k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  2.09k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  64.7k|{
 8428|  64.7k|#define SCN_VISIT(Type)                                         \
 8429|  64.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  64.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  64.7k|    }                                                           \
 8432|  64.7k|    else {                                                      \
 8433|  64.7k|        return vis(monostate_val);                              \
 8434|  64.7k|    }
 8435|       |
 8436|  64.7k|    monostate monostate_val{};
 8437|       |
 8438|  64.7k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 64.7k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 64.7k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 64.7k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 64.7k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 64.7k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 64.7k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 64.7k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 64.7k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 64.7k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 64.7k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 64.7k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 64.7k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 64.7k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 64.7k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 64.7k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 64.7k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 64.7k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 64.7k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 64.7k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  64.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 64.7k, False: 0]
  ------------------
 8478|  64.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  64.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  64.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  64.7k|    }                                                           \
  |  | 8432|  64.7k|    else {                                                      \
  |  | 8433|  64.7k|        return vis(monostate_val);                              \
  |  | 8434|  64.7k|    }
  ------------------
 8479|  64.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 64.7k]
  ------------------
 8480|  64.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  64.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  64.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  64.7k|    }                                                           \
  |  | 8432|  64.7k|    else {                                                      \
  |  | 8433|  64.7k|        return vis(monostate_val);                              \
  |  | 8434|  64.7k|    }
  ------------------
 8481|  64.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 64.7k]
  ------------------
 8482|  64.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  64.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  64.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  64.7k|    }                                                           \
  |  | 8432|  64.7k|    else {                                                      \
  |  | 8433|  64.7k|        return vis(monostate_val);                              \
  |  | 8434|  64.7k|    }
  ------------------
 8483|  64.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 64.7k]
  ------------------
 8484|  64.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  64.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  64.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  64.7k|    }                                                           \
  |  | 8432|  64.7k|    else {                                                      \
  |  | 8433|  64.7k|        return vis(monostate_val);                              \
  |  | 8434|  64.7k|    }
  ------------------
 8485|  64.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 64.7k]
  ------------------
 8486|  64.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  64.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  64.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  64.7k|    }                                                           \
  |  | 8432|  64.7k|    else {                                                      \
  |  | 8433|  64.7k|        return vis(monostate_val);                              \
  |  | 8434|  64.7k|    }
  ------------------
 8487|       |
 8488|  64.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 64.7k]
  ------------------
 8489|  64.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  64.7k|            return vis(
 8491|  64.7k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 64.7k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 64.7k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  64.7k|            SCN_CLANG_POP
 8506|  64.7k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  13.5k|    {
 4084|  13.5k|        sync(0);
 4085|  13.5k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  2.19M|    {
 5476|  2.19M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  2.19M|        return static_cast<std::size_t>(m_desc &
 5481|  2.19M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  2.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  4.38M|    {
 5501|  4.38M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  4.38M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  2.19M|    {
 5444|  2.19M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  2.19M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  2.19M|        const auto t = type(id);
 5456|  2.19M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  2.19M|        basic_scan_arg<Context> arg;
 5461|  2.19M|        arg.m_type = t;
 5462|  2.19M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 2.19M, False: 0]
  ------------------
 5463|  2.19M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  2.19M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  2.19M|        return arg;
 5469|  2.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  2.19M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  2.19M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  2.19M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  2.19M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  2.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  2.19M|    {
 5505|  2.19M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  2.19M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  3.82M|    {
 5257|  3.82M|        return m_type != detail::arg_type::none_type;
 5258|  3.82M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  1.07M|{
 8428|  1.07M|#define SCN_VISIT(Type)                                         \
 8429|  1.07M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  1.07M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  1.07M|    }                                                           \
 8432|  1.07M|    else {                                                      \
 8433|  1.07M|        return vis(monostate_val);                              \
 8434|  1.07M|    }
 8435|       |
 8436|  1.07M|    monostate monostate_val{};
 8437|       |
 8438|  1.07M|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 1.07M]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 1.07M]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 1.07M]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 1.07M]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 1.07M]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 1.07M]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.07M]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 1.07M]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 1.07M]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 1.07M]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 1.07M]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 1.07M]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 1.07M]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 1.07M]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 1.07M]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 1.07M]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 1.07M]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.07M]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 1.07M]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.07M]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   535k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 535k, False: 535k]
  ------------------
 8480|   535k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   535k|    }                                                           \
  |  | 8432|   535k|    else {                                                      \
  |  | 8433|   535k|        return vis(monostate_val);                              \
  |  | 8434|   535k|    }
  ------------------
 8481|  1.07M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 535k, False: 535k]
  ------------------
 8482|  1.07M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  1.07M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.07M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.07M|    }                                                           \
  |  | 8432|  1.07M|    else {                                                      \
  |  | 8433|  1.07M|        return vis(monostate_val);                              \
  |  | 8434|  1.07M|    }
  ------------------
 8483|  1.07M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 1.07M]
  ------------------
 8484|  1.07M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  1.07M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.07M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.07M|    }                                                           \
  |  | 8432|  1.07M|    else {                                                      \
  |  | 8433|  1.07M|        return vis(monostate_val);                              \
  |  | 8434|  1.07M|    }
  ------------------
 8485|  1.07M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.07M]
  ------------------
 8486|  1.07M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  1.07M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.07M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.07M|    }                                                           \
  |  | 8432|  1.07M|    else {                                                      \
  |  | 8433|  1.07M|        return vis(monostate_val);                              \
  |  | 8434|  1.07M|    }
  ------------------
 8487|       |
 8488|  1.07M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 1.07M]
  ------------------
 8489|  1.07M|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  1.07M|            return vis(
 8491|  1.07M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.07M]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 1.07M]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  1.07M|            SCN_CLANG_POP
 8506|  1.07M|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  1.12M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.12M|    {
 5555|  1.12M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   373k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   373k|    static_cast<    \
  |  |  929|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   373k|    {
 8149|   373k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|  1.12M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  1.12M|    {
 8067|  1.12M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   747k|{
 7055|   747k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   747k|    handler.check_args_exhausted();
 7057|   747k|    return handler.get_error();
 7058|   747k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   747k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   747k|    auto begin = format.data();
 7024|   747k|    auto it = begin;
 7025|   747k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.45M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 747k, False: 705k]
  ------------------
 7028|   747k|        const auto ch = *it++;
 7029|   747k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 747k, False: 0]
  ------------------
 7030|   747k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   747k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   747k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 41.8k, False: 705k]
  ------------------
 7034|  41.8k|                return;
 7035|  41.8k|            }
 7036|   747k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   747k|    }
 7047|       |
 7048|   705k|    handler.on_literal_text(begin, end);
 7049|   705k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   747k|{
 6953|   747k|    struct id_adapter {
 6954|   747k|        constexpr void operator()()
 6955|   747k|        {
 6956|   747k|            arg_id = handler.on_arg_id();
 6957|   747k|        }
 6958|   747k|        constexpr void operator()(std::size_t id)
 6959|   747k|        {
 6960|   747k|            arg_id = handler.on_arg_id(id);
 6961|   747k|        }
 6962|       |
 6963|   747k|        constexpr void on_error(const char* msg)
 6964|   747k|        {
 6965|   747k|            SCN_UNLIKELY_ATTR
 6966|   747k|            handler.on_error(msg);
 6967|   747k|        }
 6968|       |
 6969|   747k|        Handler& handler;
 6970|   747k|        std::size_t arg_id;
 6971|   747k|    };
 6972|       |
 6973|   747k|    ++begin;
 6974|   747k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   747k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 747k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   747k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 747k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   747k|    else {
 6986|   747k|        auto adapter = id_adapter{handler, 0};
 6987|   747k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   747k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   747k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 747k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   747k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 747k, False: 0]
  ------------------
 6998|   747k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   747k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   747k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 730k]
  |  |  |  Branch (859:45): [True: 0, False: 747k]
  |  |  |  Branch (859:45): [True: 16.7k, False: 730k]
  |  |  ------------------
  ------------------
 7004|  16.7k|                handler.on_error("Unknown format specifier");
 7005|  16.7k|                return begin;
 7006|  16.7k|            }
 7007|   747k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   747k|    }
 7014|   730k|    return begin + 1;
 7015|   747k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|  1.12M|    {
 8050|  1.12M|        return m_args.get(id);
 8051|  1.12M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|  1.09M|    {
 8060|  1.09M|        return m_locale;
 8061|  1.09M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  1.12M|    {
 5576|  1.12M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.12M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.12M|        do_check_arg_id(id);
 5584|  1.12M|        return id;
 5585|  1.12M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  1.12M|{
 6064|  1.12M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.12M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.12M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   747k|{
 6454|   747k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   747k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 747k, False: 0]
  |  Branch (6455:26): [True: 0, False: 747k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   747k|    handler();
 6460|   747k|    return begin;
 6461|   747k|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6402|  25.0k|{
 6403|  25.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  25.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  25.0k|    unsigned long long value = 0;
 6407|  50.1k|    do {
 6408|  50.1k|        value *= 10;
 6409|  50.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  50.1k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 50.1k]
  ------------------
 6411|  50.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  50.1k|        ++begin;
 6415|  50.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 50.1k, False: 0]
  |  Branch (6415:30): [True: 50.1k, False: 0]
  |  Branch (6415:47): [True: 25.0k, False: 25.0k]
  ------------------
 6416|  25.0k|    return static_cast<int>(value);
 6417|  25.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   747k|        {
 6956|   747k|            arg_id = handler.on_arg_id();
 6957|   747k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  2.24M|    {
 5262|  2.24M|        return m_type;
 5263|  2.24M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  1.09M|    {
 5571|  1.09M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.09M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   909k|{
 4353|   909k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 909k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   909k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   909k|                            ranges::default_sentinel};
 4359|   909k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   909k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   909k|    {
 4185|   909k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   909k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   909k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   909k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   909k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   909k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   909k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  2.21M|    {
 5560|  2.21M|        return m_format.data();
 5561|  2.21M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   747k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   747k|    {
 7133|   747k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   747k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   747k|{
 6869|   747k|    auto do_presentation = [&]() -> const CharT* {
 6870|   747k|        if (*begin == CharT{'['}) {
 6871|   747k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   747k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   747k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   747k|                return begin;
 6877|   747k|            }
 6878|   747k|            handler.on_character_set_string(set);
 6879|   747k|            return begin;
 6880|   747k|        }
 6881|   747k|        if (*begin == CharT{'/'}) {
 6882|   747k|            return parse_presentation_regex(begin, end, handler);
 6883|   747k|        }
 6884|   747k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   747k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   747k|            handler.on_error("Invalid type specifier in format string");
 6887|   747k|            return begin;
 6888|   747k|        }
 6889|   747k|        handler.on_type(type);
 6890|   747k|        return begin;
 6891|   747k|    };
 6892|       |
 6893|   747k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 747k, False: 0]
  |  Branch (6893:28): [True: 722k, False: 25.3k]
  ------------------
 6894|   747k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 722k, False: 0]
  |  Branch (6894:36): [True: 714k, False: 8.36k]
  ------------------
 6895|   714k|        return do_presentation();
 6896|   714k|    }
 6897|       |
 6898|  33.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  33.6k|    begin = parse_align(begin, end, handler);
 6904|  33.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  33.6k|    begin = parse_width(begin, end, handler);
 6910|  33.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  33.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 33.6k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  33.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 8.36k, False: 25.3k]
  ------------------
 6929|  8.36k|        handler.on_localized();
 6930|  8.36k|        ++begin;
 6931|  8.36k|    }
 6932|  33.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  33.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 33.6k, False: 0]
  |  Branch (6937:25): [True: 25.3k, False: 8.36k]
  ------------------
 6938|  25.3k|        do_presentation();
 6939|  25.3k|    }
 6940|  33.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  33.6k|    return begin;
 6946|  33.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|  1.08M|{
 6518|  1.08M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 1.07M, False: 12.5k]
  |  Branch (6518:33): [True: 1.07M, False: 0]
  ------------------
 6519|  1.08M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 12.5k, False: 0]
  |  Branch (6519:33): [True: 12.5k, False: 0]
  ------------------
 6520|  1.08M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   739k|    auto do_presentation = [&]() -> const CharT* {
 6870|   739k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 8.58k, False: 730k]
  ------------------
 6871|  8.58k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  8.58k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.58k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  8.58k|            handler.on_character_set_string(set);
 6879|  8.58k|            return begin;
 6880|  8.58k|        }
 6881|   730k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 730k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   730k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   730k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.36k, False: 722k]
  |  |  ------------------
  ------------------
 6886|  8.36k|            handler.on_error("Invalid type specifier in format string");
 6887|  8.36k|            return begin;
 6888|  8.36k|        }
 6889|   722k|        handler.on_type(type);
 6890|   722k|        return begin;
 6891|   730k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  8.58k|{
 6708|  8.58k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  8.58k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  8.58k|    auto start = begin;
 6712|  8.58k|    ++begin;
 6713|       |
 6714|  8.58k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.58k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  8.58k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 8.58k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  8.58k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 8.58k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  25.7k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 25.7k, False: 0]
  ------------------
 6739|  25.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  25.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 8.58k, False: 17.1k]
  ------------------
 6744|  8.58k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  8.58k|        }
 6746|       |
 6747|  17.1k|        parse_presentation_set_literal(begin, end, handler);
 6748|  17.1k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  8.58k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6671|  17.1k|{
 6672|  17.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  17.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  17.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  17.1k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 17.1k, False: 0]
  |  Branch (6679:25): [True: 17.1k, False: 0]
  |  Branch (6679:49): [True: 17.1k, False: 0]
  ------------------
 6680|  17.1k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 17.1k, False: 0]
  ------------------
 6681|  17.1k|        ++begin;
 6682|       |
 6683|  17.1k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  17.1k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  17.1k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  17.1k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  17.1k|        return;
 6697|  17.1k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6647|  34.3k|{
 6648|  34.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  34.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  34.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34.3k]
  |  |  |  Branch (859:45): [True: 0, False: 34.3k]
  |  |  |  Branch (859:45): [True: 0, False: 34.3k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  34.3k|    const auto cp =
 6657|  34.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  34.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34.3k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  34.3k|    begin += len;
 6664|  34.3k|    return cp;
 6665|  34.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  12.8k|    {
 6357|  12.8k|        m_specs.charset_string_data = fmt.data();
 6358|  12.8k|        m_specs.charset_string_size = fmt.size();
 6359|  12.8k|        on_type(presentation_type::string_set);
 6360|  12.8k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|  1.09M|{
 6466|  1.09M|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.09M]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.09M]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.09M]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 1.09M]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.09M]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.09M]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.09M]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.09M]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.09M]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.09M]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 1.09M]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.09M]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.09M]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 1.09M]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 1.09M]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.09M]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.09M]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.09M]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|  1.07M|        case 's':
  ------------------
  |  Branch (6496:9): [True: 1.07M, False: 25.0k]
  ------------------
 6497|  1.07M|            return presentation_type::string;
 6498|  12.5k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 12.5k, False: 1.08M]
  ------------------
 6499|  12.5k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 1.09M]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 1.09M]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.09M]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 1.09M]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  12.5k|        default:
  ------------------
  |  Branch (6510:9): [True: 12.5k, False: 1.08M]
  ------------------
 6511|  12.5k|            return presentation_type::none;
 6512|  1.09M|    }
 6513|  1.09M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  33.6k|{
 6543|  33.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  33.6k|    auto check_align = [](wchar_t ch) {
 6546|  33.6k|        switch (ch) {
 6547|  33.6k|            case L'<':
 6548|  33.6k|                return align_type::left;
 6549|  33.6k|            case L'>':
 6550|  33.6k|                return align_type::right;
 6551|  33.6k|            case L'^':
 6552|  33.6k|                return align_type::center;
 6553|  33.6k|            default:
 6554|  33.6k|                return align_type::none;
 6555|  33.6k|        }
 6556|  33.6k|    };
 6557|       |
 6558|  33.6k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  33.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  67.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  |  Branch (859:45): [True: 0, False: 33.6k]
  |  |  |  Branch (859:45): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6560|  33.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  33.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  33.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  33.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  33.6k|    const auto begin_before_fill = begin;
 6570|  33.6k|    begin += potential_fill_len;
 6571|       |
 6572|  33.6k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 33.6k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  33.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  33.6k|    const auto begin_after_fill = begin;
 6578|  33.6k|    ++begin;
 6579|       |
 6580|  33.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 33.6k, False: 0]
  ------------------
 6581|  33.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  33.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 8.58k, False: 25.0k]
  ------------------
 6586|  8.58k|            return begin_before_fill;
 6587|  8.58k|        }
 6588|  33.6k|    }
 6589|       |
 6590|  25.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 25.0k, False: 0]
  ------------------
 6591|  25.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 25.0k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  25.0k|        return begin_before_fill;
 6596|  25.0k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  25.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|  50.4k|{
 6525|  50.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|  50.4k|    if constexpr (sizeof(CharT) != 1) {
 6527|  50.4k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|  50.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  67.3k|    auto check_align = [](wchar_t ch) {
 6546|  67.3k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 67.3k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 67.3k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 67.3k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  67.3k|            default:
  ------------------
  |  Branch (6553:13): [True: 67.3k, False: 0]
  ------------------
 6554|  67.3k|                return align_type::none;
 6555|  67.3k|        }
 6556|  67.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  33.6k|{
 6608|  33.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  33.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 33.6k, False: 0]
  |  Branch (6610:33): [True: 16.7k, False: 16.9k]
  ------------------
 6611|  16.7k|        int width = parse_simple_int(begin, end);
 6612|  16.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  16.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.7k, False: 0]
  |  |  ------------------
  ------------------
 6613|  16.7k|            handler.on_width(width);
 6614|  16.7k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  16.7k|    }
 6620|  33.6k|    return begin;
 6621|  33.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  8.36k|    {
 7138|  8.36k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  8.36k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.36k, False: 0]
  ------------------
 7140|  8.36k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 8.36k, False: 0]
  ------------------
 7141|  8.36k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 8.36k, False: 0]
  ------------------
 7142|  8.36k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 8.36k, False: 0]
  ------------------
 7143|  8.36k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  8.36k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  8.36k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   730k|{
 8428|   730k|#define SCN_VISIT(Type)                                         \
 8429|   730k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   730k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   730k|    }                                                           \
 8432|   730k|    else {                                                      \
 8433|   730k|        return vis(monostate_val);                              \
 8434|   730k|    }
 8435|       |
 8436|   730k|    monostate monostate_val{};
 8437|       |
 8438|   730k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 730k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 730k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 730k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 730k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 730k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 730k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 730k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 730k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 730k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 730k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 730k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 730k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 730k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 730k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 730k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 730k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 730k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 730k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 730k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 730k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   365k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 365k, False: 365k]
  ------------------
 8480|   365k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   365k|    }                                                           \
  |  | 8432|   365k|    else {                                                      \
  |  | 8433|   365k|        return vis(monostate_val);                              \
  |  | 8434|   365k|    }
  ------------------
 8481|   730k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 365k, False: 365k]
  ------------------
 8482|   730k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   730k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   730k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   730k|    }                                                           \
  |  | 8432|   730k|    else {                                                      \
  |  | 8433|   730k|        return vis(monostate_val);                              \
  |  | 8434|   730k|    }
  ------------------
 8483|   730k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 730k]
  ------------------
 8484|   730k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   730k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   730k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   730k|    }                                                           \
  |  | 8432|   730k|    else {                                                      \
  |  | 8433|   730k|        return vis(monostate_val);                              \
  |  | 8434|   730k|    }
  ------------------
 8485|   730k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 730k]
  ------------------
 8486|   730k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   730k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   730k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   730k|    }                                                           \
  |  | 8432|   730k|    else {                                                      \
  |  | 8433|   730k|        return vis(monostate_val);                              \
  |  | 8434|   730k|    }
  ------------------
 8487|       |
 8488|   730k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 730k]
  ------------------
 8489|   730k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   730k|            return vis(
 8491|   730k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 730k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 730k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   730k|            SCN_CLANG_POP
 8506|   730k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   535k|{
 8428|   535k|#define SCN_VISIT(Type)                                         \
 8429|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   535k|    }                                                           \
 8432|   535k|    else {                                                      \
 8433|   535k|        return vis(monostate_val);                              \
 8434|   535k|    }
 8435|       |
 8436|   535k|    monostate monostate_val{};
 8437|       |
 8438|   535k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 535k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 535k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 535k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 535k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 535k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 535k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 535k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 535k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 535k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 535k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 535k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 535k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 535k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 535k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 535k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 535k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 535k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 535k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 535k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 535k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 535k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   535k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 535k, False: 0]
  ------------------
 8482|   535k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   535k|    }                                                           \
  |  | 8432|   535k|    else {                                                      \
  |  | 8433|   535k|        return vis(monostate_val);                              \
  |  | 8434|   535k|    }
  ------------------
 8483|   535k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 535k]
  ------------------
 8484|   535k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   535k|    }                                                           \
  |  | 8432|   535k|    else {                                                      \
  |  | 8433|   535k|        return vis(monostate_val);                              \
  |  | 8434|   535k|    }
  ------------------
 8485|   535k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 535k]
  ------------------
 8486|   535k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   535k|    }                                                           \
  |  | 8432|   535k|    else {                                                      \
  |  | 8433|   535k|        return vis(monostate_val);                              \
  |  | 8434|   535k|    }
  ------------------
 8487|       |
 8488|   535k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 535k]
  ------------------
 8489|   535k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   535k|            return vis(
 8491|   535k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 535k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 535k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   535k|            SCN_CLANG_POP
 8506|   535k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   373k|{
 7055|   373k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   373k|    handler.check_args_exhausted();
 7057|   373k|    return handler.get_error();
 7058|   373k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   373k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   373k|    auto begin = format.data();
 7024|   373k|    auto it = begin;
 7025|   373k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   726k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 373k, False: 352k]
  ------------------
 7028|   373k|        const auto ch = *it++;
 7029|   373k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 373k, False: 0]
  ------------------
 7030|   373k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   373k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   373k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 20.9k, False: 352k]
  ------------------
 7034|  20.9k|                return;
 7035|  20.9k|            }
 7036|   373k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   373k|    }
 7047|       |
 7048|   352k|    handler.on_literal_text(begin, end);
 7049|   352k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   352k|    {
 8186|   352k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   352k|    static_cast<    \
  |  |  929|   352k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   352k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   373k|{
 6953|   373k|    struct id_adapter {
 6954|   373k|        constexpr void operator()()
 6955|   373k|        {
 6956|   373k|            arg_id = handler.on_arg_id();
 6957|   373k|        }
 6958|   373k|        constexpr void operator()(std::size_t id)
 6959|   373k|        {
 6960|   373k|            arg_id = handler.on_arg_id(id);
 6961|   373k|        }
 6962|       |
 6963|   373k|        constexpr void on_error(const char* msg)
 6964|   373k|        {
 6965|   373k|            SCN_UNLIKELY_ATTR
 6966|   373k|            handler.on_error(msg);
 6967|   373k|        }
 6968|       |
 6969|   373k|        Handler& handler;
 6970|   373k|        std::size_t arg_id;
 6971|   373k|    };
 6972|       |
 6973|   373k|    ++begin;
 6974|   373k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   373k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 373k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   373k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 373k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   373k|    else {
 6986|   373k|        auto adapter = id_adapter{handler, 0};
 6987|   373k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   373k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   373k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 373k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   373k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 373k, False: 0]
  ------------------
 6998|   373k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   373k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   373k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.36k, False: 365k]
  |  |  |  Branch (859:45): [True: 0, False: 373k]
  |  |  |  Branch (859:45): [True: 8.36k, False: 365k]
  |  |  ------------------
  ------------------
 7004|  8.36k|                handler.on_error("Unknown format specifier");
 7005|  8.36k|                return begin;
 7006|  8.36k|            }
 7007|   373k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   373k|    }
 7014|   365k|    return begin + 1;
 7015|   373k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   373k|{
 6454|   373k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   373k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 373k, False: 0]
  |  Branch (6455:26): [True: 0, False: 373k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   373k|    handler();
 6460|   373k|    return begin;
 6461|   373k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   373k|        {
 6956|   373k|            arg_id = handler.on_arg_id();
 6957|   373k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   373k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   373k|    {
 7133|   373k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   373k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   373k|{
 6869|   373k|    auto do_presentation = [&]() -> const CharT* {
 6870|   373k|        if (*begin == CharT{'['}) {
 6871|   373k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   373k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   373k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   373k|                return begin;
 6877|   373k|            }
 6878|   373k|            handler.on_character_set_string(set);
 6879|   373k|            return begin;
 6880|   373k|        }
 6881|   373k|        if (*begin == CharT{'/'}) {
 6882|   373k|            return parse_presentation_regex(begin, end, handler);
 6883|   373k|        }
 6884|   373k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   373k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   373k|            handler.on_error("Invalid type specifier in format string");
 6887|   373k|            return begin;
 6888|   373k|        }
 6889|   373k|        handler.on_type(type);
 6890|   373k|        return begin;
 6891|   373k|    };
 6892|       |
 6893|   373k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 373k, False: 0]
  |  Branch (6893:28): [True: 361k, False: 12.6k]
  ------------------
 6894|   373k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 361k, False: 0]
  |  Branch (6894:36): [True: 357k, False: 4.18k]
  ------------------
 6895|   357k|        return do_presentation();
 6896|   357k|    }
 6897|       |
 6898|  16.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  16.8k|    begin = parse_align(begin, end, handler);
 6904|  16.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  16.8k|    begin = parse_width(begin, end, handler);
 6910|  16.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  16.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 16.8k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  16.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 4.18k, False: 12.6k]
  ------------------
 6929|  4.18k|        handler.on_localized();
 6930|  4.18k|        ++begin;
 6931|  4.18k|    }
 6932|  16.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  16.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 16.8k, False: 0]
  |  Branch (6937:25): [True: 12.6k, False: 4.18k]
  ------------------
 6938|  12.6k|        do_presentation();
 6939|  12.6k|    }
 6940|  16.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  16.8k|    return begin;
 6946|  16.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   369k|    auto do_presentation = [&]() -> const CharT* {
 6870|   369k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 4.29k, False: 365k]
  ------------------
 6871|  4.29k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  4.29k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  4.29k|            handler.on_character_set_string(set);
 6879|  4.29k|            return begin;
 6880|  4.29k|        }
 6881|   365k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 365k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   365k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   365k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 361k]
  |  |  ------------------
  ------------------
 6886|  4.18k|            handler.on_error("Invalid type specifier in format string");
 6887|  4.18k|            return begin;
 6888|  4.18k|        }
 6889|   361k|        handler.on_type(type);
 6890|   361k|        return begin;
 6891|   365k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  4.29k|{
 6708|  4.29k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  4.29k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  4.29k|    auto start = begin;
 6712|  4.29k|    ++begin;
 6713|       |
 6714|  4.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  4.29k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 4.29k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  4.29k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 4.29k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  12.8k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 12.8k, False: 0]
  ------------------
 6739|  12.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  12.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 4.29k, False: 8.58k]
  ------------------
 6744|  4.29k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  4.29k|        }
 6746|       |
 6747|  8.58k|        parse_presentation_set_literal(begin, end, handler);
 6748|  8.58k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  4.29k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6671|  8.58k|{
 6672|  8.58k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  8.58k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  8.58k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.58k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  8.58k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 8.58k, False: 0]
  |  Branch (6679:25): [True: 8.58k, False: 0]
  |  Branch (6679:49): [True: 8.58k, False: 0]
  ------------------
 6680|  8.58k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 8.58k, False: 0]
  ------------------
 6681|  8.58k|        ++begin;
 6682|       |
 6683|  8.58k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  8.58k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.58k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  8.58k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.58k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  8.58k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  8.58k|        return;
 6697|  8.58k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6647|  17.1k|{
 6648|  17.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  17.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  17.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  |  Branch (859:45): [True: 0, False: 17.1k]
  |  |  |  Branch (859:45): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  17.1k|    const auto cp =
 6657|  17.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  17.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  17.1k|    begin += len;
 6664|  17.1k|    return cp;
 6665|  17.1k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  16.8k|{
 6543|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  16.8k|    auto check_align = [](wchar_t ch) {
 6546|  16.8k|        switch (ch) {
 6547|  16.8k|            case L'<':
 6548|  16.8k|                return align_type::left;
 6549|  16.8k|            case L'>':
 6550|  16.8k|                return align_type::right;
 6551|  16.8k|            case L'^':
 6552|  16.8k|                return align_type::center;
 6553|  16.8k|            default:
 6554|  16.8k|                return align_type::none;
 6555|  16.8k|        }
 6556|  16.8k|    };
 6557|       |
 6558|  16.8k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  16.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  |  Branch (859:45): [True: 0, False: 16.8k]
  |  |  |  Branch (859:45): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6560|  16.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  16.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  16.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  16.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  16.8k|    const auto begin_before_fill = begin;
 6570|  16.8k|    begin += potential_fill_len;
 6571|       |
 6572|  16.8k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 16.8k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  16.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  16.8k|    const auto begin_after_fill = begin;
 6578|  16.8k|    ++begin;
 6579|       |
 6580|  16.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 16.8k, False: 0]
  ------------------
 6581|  16.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  16.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 4.29k, False: 12.5k]
  ------------------
 6586|  4.29k|            return begin_before_fill;
 6587|  4.29k|        }
 6588|  16.8k|    }
 6589|       |
 6590|  12.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 12.5k, False: 0]
  ------------------
 6591|  12.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 12.5k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  12.5k|        return begin_before_fill;
 6596|  12.5k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  12.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  33.6k|    auto check_align = [](wchar_t ch) {
 6546|  33.6k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 33.6k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 33.6k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 33.6k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  33.6k|            default:
  ------------------
  |  Branch (6553:13): [True: 33.6k, False: 0]
  ------------------
 6554|  33.6k|                return align_type::none;
 6555|  33.6k|        }
 6556|  33.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  16.8k|{
 6608|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  16.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 16.8k, False: 0]
  |  Branch (6610:33): [True: 8.36k, False: 8.47k]
  ------------------
 6611|  8.36k|        int width = parse_simple_int(begin, end);
 6612|  8.36k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.36k, False: 0]
  |  |  ------------------
  ------------------
 6613|  8.36k|            handler.on_width(width);
 6614|  8.36k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  8.36k|    }
 6620|  16.8k|    return begin;
 6621|  16.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  4.18k|    {
 7138|  4.18k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  4.18k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 4.18k, False: 0]
  ------------------
 7140|  4.18k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 4.18k, False: 0]
  ------------------
 7141|  4.18k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 4.18k, False: 0]
  ------------------
 7142|  4.18k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 4.18k, False: 0]
  ------------------
 7143|  4.18k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  4.18k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  4.18k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   365k|{
 8428|   365k|#define SCN_VISIT(Type)                                         \
 8429|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   365k|    }                                                           \
 8432|   365k|    else {                                                      \
 8433|   365k|        return vis(monostate_val);                              \
 8434|   365k|    }
 8435|       |
 8436|   365k|    monostate monostate_val{};
 8437|       |
 8438|   365k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 365k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 365k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 365k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 365k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 365k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 365k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 365k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 365k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 365k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 365k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 365k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 365k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 365k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 365k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 365k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 365k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 365k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 365k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 365k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 365k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 365k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   365k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 365k, False: 0]
  ------------------
 8482|   365k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   365k|    }                                                           \
  |  | 8432|   365k|    else {                                                      \
  |  | 8433|   365k|        return vis(monostate_val);                              \
  |  | 8434|   365k|    }
  ------------------
 8483|   365k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 365k]
  ------------------
 8484|   365k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   365k|    }                                                           \
  |  | 8432|   365k|    else {                                                      \
  |  | 8433|   365k|        return vis(monostate_val);                              \
  |  | 8434|   365k|    }
  ------------------
 8485|   365k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 365k]
  ------------------
 8486|   365k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   365k|    }                                                           \
  |  | 8432|   365k|    else {                                                      \
  |  | 8433|   365k|        return vis(monostate_val);                              \
  |  | 8434|   365k|    }
  ------------------
 8487|       |
 8488|   365k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 365k]
  ------------------
 8489|   365k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   365k|            return vis(
 8491|   365k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 365k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 365k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   365k|            SCN_CLANG_POP
 8506|   365k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|  27.1k|    {
 4084|  27.1k|        sync(0);
 4085|  27.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  76.4k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   535k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   365k|{
   89|   365k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   365k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   365k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   365k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   730k|{
   44|   730k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   730k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   365k|{
  127|   365k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   365k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   365k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   365k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   730k|{
   60|   730k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   730k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   178k|{
  163|   178k|    T value;
  164|   178k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   178k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.09k|    }                                                  \
  |  |  |  | 3667|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   176k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   178k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   357k|{
   72|   357k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   357k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   365k|{
   89|   365k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   365k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   365k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   365k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|   365k|{
  127|   365k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   365k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   365k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   365k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   178k|{
  163|   178k|    T value;
  164|   178k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   178k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.09k|    }                                                  \
  |  |  |  | 3667|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   176k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   178k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   365k|{
   89|   365k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   365k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   365k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   365k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   365k|{
   44|   365k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   365k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|   365k|{
  127|   365k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   365k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   365k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   365k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   365k|{
   60|   365k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   365k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   178k|{
  163|   178k|    T value;
  164|   178k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   178k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.09k|    }                                                  \
  |  |  |  | 3667|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   176k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   178k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   178k|{
   72|   178k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   178k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.26M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  653|  1.26M|{
  654|  1.26M|    static_assert(std::is_same_v<Locale, std::locale>);
  655|  1.26M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2184|   103k|{
 2185|   103k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2186|   103k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2192|  63.9k|{
 2193|  63.9k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2194|  63.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  63.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.6k, False: 6.27k]
  |  |  ------------------
  ------------------
 2195|  57.6k|        source.sync(*n);
 2196|  57.6k|    }
 2197|  6.27k|    else {
 2198|  6.27k|        source.sync_all();
 2199|  6.27k|    }
 2200|  63.9k|    return n;
 2201|  63.9k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2208|   730k|{
 2209|   730k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2210|   730k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2216|   365k|{
 2217|   365k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2218|   365k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   365k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 352k, False: 12.5k]
  |  |  ------------------
  ------------------
 2219|   352k|        source.sync(*n);
 2220|   352k|    }
 2221|  12.5k|    else {
 2222|  12.5k|        source.sync_all();
 2223|  12.5k|    }
 2224|   365k|    return n;
 2225|   365k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  194|   376k|{
  195|   376k|    return find_classic_impl(
  196|   376k|        source, [](char ch) { return is_ascii_space(ch); },
  197|   376k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  198|   376k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|   380k|{
  203|   380k|    return find_classic_impl(
  204|   380k|        source, [](char ch) { return !is_ascii_space(ch); },
  205|   380k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|   380k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2141|   103k|{
 2142|   103k|    return vscan_internal(source, format, args);
 2143|   103k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2147|  63.9k|{
 2148|  63.9k|    auto n = vscan_internal(source, format, args);
 2149|  63.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  63.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.6k, False: 6.27k]
  |  |  ------------------
  ------------------
 2150|  57.6k|        source.sync(*n);
 2151|  57.6k|    }
 2152|  6.27k|    else {
 2153|  6.27k|        source.sync_all();
 2154|  6.27k|    }
 2155|  63.9k|    return n;
 2156|  63.9k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2161|   730k|{
 2162|   730k|    return vscan_internal(source, format, args);
 2163|   730k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2167|   365k|{
 2168|   365k|    auto n = vscan_internal(source, format, args);
 2169|   365k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   365k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 352k, False: 12.5k]
  |  |  ------------------
  ------------------
 2170|   352k|        source.sync(*n);
 2171|   352k|    }
 2172|  12.5k|    else {
 2173|  12.5k|        source.sync_all();
 2174|  12.5k|    }
 2175|   365k|    return n;
 2176|   365k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2251|  46.9k|{
 2252|  46.9k|    return vscan_value_internal(source, arg);
 2253|  46.9k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2256|  29.4k|{
 2257|  29.4k|    auto n = vscan_value_internal(source, arg);
 2258|  29.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  29.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.4k, False: 1.04k]
  |  |  ------------------
  ------------------
 2259|  28.4k|        source.sync(*n);
 2260|  28.4k|    }
 2261|  1.04k|    else {
 2262|  1.04k|        source.sync_all();
 2263|  1.04k|    }
 2264|  29.4k|    return n;
 2265|  29.4k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2270|   357k|{
 2271|   357k|    return vscan_value_internal(source, arg);
 2272|   357k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2276|   178k|{
 2277|   178k|    auto n = vscan_value_internal(source, arg);
 2278|   178k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   178k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 176k, False: 2.09k]
  |  |  ------------------
  ------------------
 2279|   176k|        source.sync(*n);
 2280|   176k|    }
 2281|  2.09k|    else {
 2282|  2.09k|        source.sync_all();
 2283|  2.09k|    }
 2284|   178k|    return n;
 2285|   178k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   376k|{
  119|   376k|    auto it = source.begin();
  120|       |
  121|   680k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 529k, False: 151k]
  ------------------
  122|   529k|        auto sv =
  123|   529k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|   529k|                .substr(0, 8);
  125|       |
  126|   529k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 378k, False: 150k]
  ------------------
  127|   378k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|   378k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|   378k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 165k, False: 213k]
  ------------------
  130|   165k|                break;
  131|   165k|            }
  132|   213k|            continue;
  133|   378k|        }
  134|       |
  135|   448k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 358k, False: 90.4k]
  ------------------
  136|   358k|            auto tmp =
  137|   358k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|   358k|            auto res = get_next_code_point(tmp);
  139|   358k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 59.9k, False: 298k]
  ------------------
  140|  59.9k|                return it;
  141|  59.9k|            }
  142|   298k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|   298k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|   298k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   298k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|   298k|        }
  146|   150k|    }
  147|       |
  148|   316k|    return detail::make_string_view_iterator(source, it);
  149|   376k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|   895k|{
  106|   895k|    static_assert(sizeof(*source.data()) == 1);
  107|   895k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|   895k|    uint64_t word{};
  109|   895k|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|   895k|    return has_byte_greater(word, 127) != 0;
  112|   895k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  196|  1.48M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  197|   358k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   380k|{
  119|   380k|    auto it = source.begin();
  120|       |
  121|   505k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 366k, False: 138k]
  ------------------
  122|   366k|        auto sv =
  123|   366k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|   366k|                .substr(0, 8);
  125|       |
  126|   366k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 291k, False: 74.9k]
  ------------------
  127|   291k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|   291k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|   291k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 169k, False: 122k]
  ------------------
  130|   169k|                break;
  131|   169k|            }
  132|   122k|            continue;
  133|   291k|        }
  134|       |
  135|   145k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 142k, False: 2.46k]
  ------------------
  136|   142k|            auto tmp =
  137|   142k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|   142k|            auto res = get_next_code_point(tmp);
  139|   142k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 72.4k, False: 70.4k]
  ------------------
  140|  72.4k|                return it;
  141|  72.4k|            }
  142|  70.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  70.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  70.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  70.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  70.4k|        }
  146|  74.9k|    }
  147|       |
  148|   307k|    return detail::make_string_view_iterator(source, it);
  149|   380k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|   851k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|   142k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   127k|{
 2074|   127k|    const auto argcount = args.size();
 2075|   127k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 58.9k, False: 68.9k]
  |  Branch (2075:60): [True: 58.9k, False: 0]
  ------------------
 2076|  58.9k|        auto arg = args.get(0);
 2077|  58.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  58.9k|    }
 2079|       |
 2080|  68.9k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 68.9k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|  68.9k|    SCN_UNLIKELY_ATTR
 2088|  68.9k|    {
 2089|  68.9k|        auto handler = format_handler<false, CharT>{
 2090|  68.9k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|  68.9k|        return vscan_parse_format_string(format, handler);
 2092|  68.9k|    }
 2093|  68.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   333k|{
 1626|   333k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 181k, False: 152k]
  ------------------
 1627|   181k|        return false;
 1628|   181k|    }
 1629|   152k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 152k, False: 0]
  |  Branch (1629:39): [True: 152k, False: 0]
  ------------------
 1630|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|  88.4k|{
 1659|  88.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88.4k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|  88.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  88.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 88.4k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|  88.4k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|  88.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  88.4k|    static_cast<    \
  |  |  929|  88.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|  88.4k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.13k, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.13k|    }                                                  \
  |  |  |  | 3667|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|  85.3k|    return it.position();
 1676|  88.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1900|   112k|        : format_handler_base{argcount},
 1901|   112k|          parse_ctx{format},
 1902|   112k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   112k|    {
 1904|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.30M|    format_handler_base(size_t argcount) : args_count(argcount)
 1722|  1.30M|    {
 1723|  1.30M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1724|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1725|      0|        }
 1726|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   112k|        : contiguous_ctx(source, args, loc)
 1853|   112k|    {
 1854|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   112k|{
 2039|   112k|    const auto beg = handler.get_ctx().begin();
 2040|   112k|    detail::parse_format_string<false>(format, handler);
 2041|   112k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 91.3k]
  |  |  ------------------
  ------------------
 2042|  20.9k|        return unexpected(handler.error);
 2043|  20.9k|    }
 2044|  91.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2022|   727k|    {
 2023|   727k|        return ctx.get();
 2024|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1857|   727k|    {
 1858|   727k|        return contiguous_ctx;
 1859|   727k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1907|   203k|    {
 1908|   203k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 203k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   203k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   112k|{
 1682|   112k|    auto arg = ctx.arg(id);
 1683|   112k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   112k|    return arg;
 1687|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1797|  1.30M|    {
 1798|  1.30M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1799|      0|            on_error("Invalid out-of-range argument ID");
 1800|      0|            return;
 1801|      0|        }
 1802|       |
 1803|  1.30M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1804|      0|            return on_error("Argument with this ID has already been scanned");
 1805|      0|        }
 1806|       |
 1807|  1.30M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.30M, False: 0]
  |  |  ------------------
  ------------------
 1808|  1.30M|            visited_args_lower64 |= (1ull << id);
 1809|  1.30M|            return;
 1810|  1.30M|        }
 1811|       |
 1812|      0|        id -= 64;
 1813|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1814|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1782|  1.30M|    {
 1783|  1.30M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1784|      0|            on_error("Invalid out-of-range argument ID");
 1785|      0|            return false;
 1786|      0|        }
 1787|       |
 1788|  1.30M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.30M, False: 0]
  |  |  ------------------
  ------------------
 1789|  1.30M|            return (visited_args_lower64 >> id) & 1ull;
 1790|  1.30M|        }
 1791|       |
 1792|      0|        id -= 64;
 1793|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1794|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1766|  56.4k|    {
 1767|  56.4k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.4k, False: 0]
  |  |  ------------------
  ------------------
 1768|  56.4k|            error = err;
 1769|  56.4k|        }
 1770|  56.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1944|   112k|    {
 1945|   112k|        return parse_ctx.next_arg_id();
 1946|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1985|   112k|    {
 1986|   112k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   112k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   112k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 112k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   112k|        auto specs = detail::format_specs{};
 1999|   112k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   112k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   112k|            arg.type()};
 2002|       |
 2003|   112k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   112k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 112k]
  |  Branch (2004:29): [True: 0, False: 112k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   112k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.36k, False: 103k]
  |  |  ------------------
  ------------------
 2010|  8.36k|            return parse_ctx.begin();
 2011|  8.36k|        }
 2012|   103k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   103k|        on_visit_scan_arg(
 2015|   103k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   103k|                                           get_ctx().locale()},
 2017|   103k|            arg);
 2018|   103k|        return parse_ctx.begin();
 2019|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   112k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   112k|    {
 1702|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|   103k|    {
 1957|   103k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 103k]
  |  Branch (1957:23): [True: 0, False: 103k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   103k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   103k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 91.3k]
  |  |  ------------------
  ------------------
 1964|  12.5k|            on_error(r.error());
 1965|  12.5k|        }
 1966|  91.3k|        else {
 1967|  91.3k|            get_ctx().advance_to(*r);
 1968|  91.3k|        }
 1969|   103k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1761|  37.6k|    {
 1762|  37.6k|        SCN_UNLIKELY_ATTR
 1763|  37.6k|        error = scan_error{scan_error::invalid_format_string, msg};
 1764|  37.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1729|  1.30M|    {
 1730|  1.30M|        {
 1731|  1.30M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1731:45): [True: 0, False: 1.30M]
  ------------------
 1732|  1.30M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1732:35): [True: 0, False: 1.30M]
  ------------------
 1733|  1.30M|                                      ? std::numeric_limits<uint64_t>::max()
 1734|  1.30M|                                      : (1ull << args_count_lower64) - 1;
 1735|       |
 1736|  1.30M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1736:17): [True: 0, False: 1.30M]
  ------------------
 1737|      0|                return on_error("Argument list not exhausted");
 1738|      0|            }
 1739|  1.30M|        }
 1740|       |
 1741|  1.30M|        if (args_count < 64) {
  ------------------
  |  Branch (1741:13): [True: 1.30M, False: 0]
  ------------------
 1742|  1.30M|            return;
 1743|  1.30M|        }
 1744|       |
 1745|      0|        auto last_args_count = args_count - 64;
 1746|      0|        for (auto it = visited_args_upper.begin();
 1747|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1747:14): [True: 0, False: 0]
  ------------------
 1748|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1748:17): [True: 0, False: 0]
  ------------------
 1749|      0|                return on_error("Argument list not exhausted");
 1750|      0|            }
 1751|      0|            last_args_count -= 8;
 1752|      0|        }
 1753|       |
 1754|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1755|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1755:13): [True: 0, False: 0]
  ------------------
 1756|      0|            return on_error("Argument list not exhausted");
 1757|      0|        }
 1758|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1777|  1.30M|    {
 1778|  1.30M|        return error;
 1779|  1.30M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1773|  3.87M|    {
 1774|  3.87M|        return static_cast<bool>(error);
 1775|  3.87M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1900|  68.9k|        : format_handler_base{argcount},
 1901|  68.9k|          parse_ctx{format},
 1902|  68.9k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|  68.9k|    {
 1904|  68.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  68.9k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|  68.9k|    {
 1831|  68.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|  68.9k|{
 2039|  68.9k|    const auto beg = handler.get_ctx().begin();
 2040|  68.9k|    detail::parse_format_string<false>(format, handler);
 2041|  68.9k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 58.5k]
  |  |  ------------------
  ------------------
 2042|  10.4k|        return unexpected(handler.error);
 2043|  10.4k|    }
 2044|  58.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|  68.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2022|   453k|    {
 2023|   453k|        return ctx.get();
 2024|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1834|   453k|    {
 1835|   453k|        return ctx;
 1836|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1907|   127k|    {
 1908|   127k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 127k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   127k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1681|  68.9k|{
 1682|  68.9k|    auto arg = ctx.arg(id);
 1683|  68.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.9k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|  68.9k|    return arg;
 1687|  68.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1944|  68.9k|    {
 1945|  68.9k|        return parse_ctx.next_arg_id();
 1946|  68.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1985|  68.9k|    {
 1986|  68.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|  68.9k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|  68.9k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 68.9k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|  68.9k|        auto specs = detail::format_specs{};
 1999|  68.9k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|  68.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|  68.9k|            arg.type()};
 2002|       |
 2003|  68.9k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|  68.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 68.9k]
  |  Branch (2004:29): [True: 0, False: 68.9k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|  68.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 64.7k]
  |  |  ------------------
  ------------------
 2010|  4.18k|            return parse_ctx.begin();
 2011|  4.18k|        }
 2012|  64.7k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|  64.7k|        on_visit_scan_arg(
 2015|  64.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|  64.7k|                                           get_ctx().locale()},
 2017|  64.7k|            arg);
 2018|  64.7k|        return parse_ctx.begin();
 2019|  68.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  68.9k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|  68.9k|    {
 1702|  68.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|  64.7k|    {
 1957|  64.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 64.7k]
  |  Branch (1957:23): [True: 0, False: 64.7k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|  64.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|  64.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 58.5k]
  |  |  ------------------
  ------------------
 1964|  6.27k|            on_error(r.error());
 1965|  6.27k|        }
 1966|  58.5k|        else {
 1967|  58.5k|            get_ctx().advance_to(*r);
 1968|  58.5k|        }
 1969|  64.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   206k|{
 2054|   206k|    const auto argcount = args.size();
 2055|   206k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 93.8k, False: 112k]
  |  Branch (2055:60): [True: 93.8k, False: 0]
  ------------------
 2056|  93.8k|        auto arg = args.get(0);
 2057|  93.8k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  93.8k|    static_cast<    \
  |  |  929|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  93.8k|    }
 2059|       |
 2060|   112k|    auto handler = format_handler<true, CharT>{
 2061|   112k|        ranges::subrange<const CharT*>{source.data(),
 2062|   112k|                                       source.data() + source.size()},
 2063|   112k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   112k|    return vscan_parse_format_string(format, handler);
 2065|   206k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|   140k|{
 1639|   140k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|   140k|    auto reader =
 1645|   140k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|   140k|            ranges::subrange<const CharT*>{source.data(),
 1647|   140k|                                           source.data() + source.size()},
 1648|   140k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|   140k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.27k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.27k|    }                                                  \
  |  |  |  | 3667|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|   134k|    return ranges::distance(source.data(), it);
 1651|   140k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|  1.46M|{
 2054|  1.46M|    const auto argcount = args.size();
 2055|  1.46M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 714k, False: 747k]
  |  Branch (2055:60): [True: 714k, False: 0]
  ------------------
 2056|   714k|        auto arg = args.get(0);
 2057|   714k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   714k|    static_cast<    \
  |  |  929|   714k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|   714k|    }
 2059|       |
 2060|   747k|    auto handler = format_handler<true, CharT>{
 2061|   747k|        ranges::subrange<const CharT*>{source.data(),
 2062|   747k|                                       source.data() + source.size()},
 2063|   747k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   747k|    return vscan_parse_format_string(format, handler);
 2065|  1.46M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|  2.19M|{
 1626|  2.19M|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 1.12M, False: 1.07M]
  ------------------
 1627|  1.12M|        return false;
 1628|  1.12M|    }
 1629|  1.07M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 1.07M, False: 0]
  |  Branch (1629:39): [True: 1.07M, False: 0]
  ------------------
 1630|  2.19M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|  1.07M|{
 1639|  1.07M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|  1.07M|    auto reader =
 1645|  1.07M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|  1.07M|            ranges::subrange<const CharT*>{source.data(),
 1647|  1.07M|                                           source.data() + source.size()},
 1648|  1.07M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  1.07M|    static_cast<    \
  |  |  929|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|  1.07M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.5k|    }                                                  \
  |  |  |  | 3667|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|  1.05M|    return ranges::distance(source.data(), it);
 1651|  1.07M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1900|   747k|        : format_handler_base{argcount},
 1901|   747k|          parse_ctx{format},
 1902|   747k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   747k|    {
 1904|   747k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   747k|        : contiguous_ctx(source, args, loc)
 1853|   747k|    {
 1854|   747k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   747k|{
 2039|   747k|    const auto beg = handler.get_ctx().begin();
 2040|   747k|    detail::parse_format_string<false>(format, handler);
 2041|   747k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 705k]
  |  |  ------------------
  ------------------
 2042|  41.8k|        return unexpected(handler.error);
 2043|  41.8k|    }
 2044|   705k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   747k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2022|  5.11M|    {
 2023|  5.11M|        return ctx.get();
 2024|  5.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1857|  5.11M|    {
 1858|  5.11M|        return contiguous_ctx;
 1859|  5.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1907|  1.45M|    {
 1908|  1.45M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 1.45M]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|  1.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   747k|{
 1682|   747k|    auto arg = ctx.arg(id);
 1683|   747k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 747k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   747k|    return arg;
 1687|   747k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1944|   747k|    {
 1945|   747k|        return parse_ctx.next_arg_id();
 1946|   747k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1985|   747k|    {
 1986|   747k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   747k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   747k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 747k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   747k|        auto specs = detail::format_specs{};
 1999|   747k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   747k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   747k|            arg.type()};
 2002|       |
 2003|   747k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   747k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 747k]
  |  Branch (2004:29): [True: 0, False: 747k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   747k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 730k]
  |  |  ------------------
  ------------------
 2010|  16.7k|            return parse_ctx.begin();
 2011|  16.7k|        }
 2012|   730k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   730k|        on_visit_scan_arg(
 2015|   730k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   730k|                                           get_ctx().locale()},
 2017|   730k|            arg);
 2018|   730k|        return parse_ctx.begin();
 2019|   747k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   747k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   747k|    {
 1702|   747k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|   730k|    {
 1957|   730k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 730k]
  |  Branch (1957:23): [True: 0, False: 730k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   730k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   730k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 705k]
  |  |  ------------------
  ------------------
 1964|  25.0k|            on_error(r.error());
 1965|  25.0k|        }
 1966|   705k|        else {
 1967|   705k|            get_ctx().advance_to(*r);
 1968|   705k|        }
 1969|   730k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   730k|{
 2074|   730k|    const auto argcount = args.size();
 2075|   730k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 357k, False: 373k]
  |  Branch (2075:60): [True: 357k, False: 0]
  ------------------
 2076|   357k|        auto arg = args.get(0);
 2077|   357k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|   357k|    }
 2079|       |
 2080|   373k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 373k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   373k|    SCN_UNLIKELY_ATTR
 2088|   373k|    {
 2089|   373k|        auto handler = format_handler<false, CharT>{
 2090|   373k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   373k|    static_cast<    \
  |  |  929|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   373k|    static_cast<    \
  |  |  929|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   373k|        return vscan_parse_format_string(format, handler);
 2092|   373k|    }
 2093|   373k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|   535k|{
 1659|   535k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 535k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|   535k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   535k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 535k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|   535k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|   535k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   535k|    static_cast<    \
  |  |  929|   535k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|   535k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.27k, False: 529k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.27k|    }                                                  \
  |  |  |  | 3667|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|   529k|    return it.position();
 1676|   535k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1900|   373k|        : format_handler_base{argcount},
 1901|   373k|          parse_ctx{format},
 1902|   373k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   373k|    static_cast<    \
  |  |  929|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   373k|    static_cast<    \
  |  |  929|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   373k|    {
 1904|   373k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   373k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   373k|    static_cast<    \
  |  |  929|   373k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   373k|    {
 1831|   373k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   373k|{
 2039|   373k|    const auto beg = handler.get_ctx().begin();
 2040|   373k|    detail::parse_format_string<false>(format, handler);
 2041|   373k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 352k]
  |  |  ------------------
  ------------------
 2042|  20.9k|        return unexpected(handler.error);
 2043|  20.9k|    }
 2044|   352k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   373k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2022|  2.55M|    {
 2023|  2.55M|        return ctx.get();
 2024|  2.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1834|  2.55M|    {
 1835|  2.55M|        return ctx;
 1836|  2.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1907|   726k|    {
 1908|   726k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 726k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   726k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   373k|{
 1682|   373k|    auto arg = ctx.arg(id);
 1683|   373k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   373k|    return arg;
 1687|   373k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1944|   373k|    {
 1945|   373k|        return parse_ctx.next_arg_id();
 1946|   373k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1985|   373k|    {
 1986|   373k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   373k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   373k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 373k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   373k|        auto specs = detail::format_specs{};
 1999|   373k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   373k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   373k|            arg.type()};
 2002|       |
 2003|   373k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   373k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 373k]
  |  Branch (2004:29): [True: 0, False: 373k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   373k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.36k, False: 365k]
  |  |  ------------------
  ------------------
 2010|  8.36k|            return parse_ctx.begin();
 2011|  8.36k|        }
 2012|   365k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   365k|        on_visit_scan_arg(
 2015|   365k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   365k|                                           get_ctx().locale()},
 2017|   365k|            arg);
 2018|   365k|        return parse_ctx.begin();
 2019|   373k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   373k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   373k|    {
 1702|   373k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   365k|    {
 1957|   365k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 365k]
  |  Branch (1957:23): [True: 0, False: 365k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   365k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   365k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 352k]
  |  |  ------------------
  ------------------
 1964|  12.5k|            on_error(r.error());
 1965|  12.5k|        }
 1966|   352k|        else {
 1967|   352k|            get_ctx().advance_to(*r);
 1968|   352k|        }
 1969|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  46.9k|{
 2100|  46.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  46.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  29.4k|{
 2100|  29.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  29.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|   357k|{
 2100|   357k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|   357k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|   178k|{
 2100|   178k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|   178k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  1.04k|{
 1351|  1.04k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  1.04k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  1.04k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  1.04k|            return transcode_to_string_impl_to32(src, dest);
 1362|  1.04k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  1.04k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  1.04k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  1.04k|{
 1244|  1.04k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  1.04k|    auto it = src.begin();
 1247|   365k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 364k, False: 1.04k]
  ------------------
 1248|   364k|        auto res = get_next_code_point(
 1249|   364k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   364k|                                                                 src.end()));
 1251|   364k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 360k]
  |  |  ------------------
  ------------------
 1252|  4.70k|            dest.push_back(DestCharT{0xfffd});
 1253|  4.70k|        }
 1254|   360k|        else {
 1255|   360k|            dest.push_back(res.value);
 1256|   360k|        }
 1257|   364k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   364k|    }
 1259|  1.04k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   866k|{
 1169|   866k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   866k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   866k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   866k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   866k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 841k]
  |  |  ------------------
  ------------------
 1173|  24.6k|        return {get_start_for_next_code_point(input),
 1174|  24.6k|                detail::invalid_code_point};
 1175|  24.6k|    }
 1176|   841k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   841k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1k, False: 822k]
  |  |  ------------------
  ------------------
 1177|  19.1k|        return {input.end(), detail::invalid_code_point};
 1178|  19.1k|    }
 1179|       |
 1180|   822k|    return {input.begin() + len,
 1181|   822k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   841k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  24.6k|{
 1155|  24.6k|    auto it = input.begin();
 1156|   102k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 99.9k, False: 2.45k]
  ------------------
 1157|  99.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 22.1k, False: 77.7k]
  ------------------
 1158|  22.1k|            break;
 1159|  22.1k|        }
 1160|  99.9k|    }
 1161|  24.6k|    return it;
 1162|  24.6k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  18.8k|    {
 2920|  18.8k|        SCN_UNLIKELY_ATTR
 2921|  18.8k|        m_msg = msg;
 2922|  18.8k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  1.26M|    {
 2925|  1.26M|        return m_msg == nullptr;
 2926|  1.26M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  2.33M|{
  458|  2.33M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.33M|        static_cast<unsigned char>(ch))];
  460|  2.33M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  47.8k|{
  469|  47.8k|    return static_cast<unsigned char>(ch) <= 127;
  470|  47.8k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  13.8k|{
  474|  13.8k|#if WCHAR_MIN < 0
  475|  13.8k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.4k, False: 1.32k]
  |  Branch (475:23): [True: 8.04k, False: 4.44k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  13.8k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   895k|{
  539|   895k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   895k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  4.88M|{
  784|  4.88M|    return e != eof_error::good;
  785|  4.88M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  14.8k|{
  798|  14.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  14.8k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  14.8k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  1.20M|{
 5997|  1.20M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 1.20M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  1.20M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 1.20M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  1.20M|    return {};
 6012|  1.20M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   463k|    {
  304|   463k|        ranges::advance(x, n);
  305|   463k|        return x;
  306|   463k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   463k|    {
  268|   463k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   463k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   463k|    {
  151|   463k|        i += n;
  152|   463k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.06M|    {
  108|  1.06M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.06M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.06M|    {
   87|  1.06M|        return s - i;
   88|  1.06M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.76M|    {
  108|  1.76M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.76M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.76M|    {
   87|  1.76M|        return s - i;
   88|  1.76M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   151k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   151k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   151k|        auto beg = r.begin();
  990|   151k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 151k, False: 0]
  ------------------
  991|   151k|            return false;
  992|   151k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   151k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  41.5k|    {
  763|  41.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  41.5k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  8.83k|        : m_fptr([](storage fn,
  743|  8.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.83k|              cvref<T> obj = *get<T>(fn);
  745|  8.83k|              if constexpr (std::is_void_v<R>) {
  746|  8.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.83k|              }
  748|  8.83k|              else {
  749|  8.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.83k|              }
  751|  8.83k|          }),
  752|  8.83k|          m_storage(std::addressof(f))
  753|  8.83k|    {
  754|  8.83k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  20.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.7k|              else {
  749|  20.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.7k|              }
  751|  20.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  20.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.7k|        else if constexpr (std::is_object_v<T>) {
  688|  20.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.7k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  8.83k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.83k|        {
  662|  8.83k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  90.7M|    {
  763|  90.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  90.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  90.7M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.80M|        : m_fptr([](storage fn,
  743|  2.80M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.80M|              cvref<T> obj = *get<T>(fn);
  745|  2.80M|              if constexpr (std::is_void_v<R>) {
  746|  2.80M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.80M|              }
  748|  2.80M|              else {
  749|  2.80M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.80M|              }
  751|  2.80M|          }),
  752|  2.80M|          m_storage(std::addressof(f))
  753|  2.80M|    {
  754|  2.80M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.73M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.73M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.73M|              else {
  749|  6.73M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.73M|              }
  751|  6.73M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.73M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.73M|        else if constexpr (std::is_object_v<T>) {
  688|  6.73M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.73M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.80M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.80M|        {
  662|  2.80M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  62.6k|    {
 6026|  62.6k|        const bool need_skipped_width =
 6027|  62.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 62.6k]
  |  Branch (6027:33): [True: 0, False: 62.6k]
  ------------------
 6028|  62.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  62.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 62.6k]
  ------------------
 6032|  62.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 62.6k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  62.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 62.6k, False: 0]
  |  Branch (6036:56): [True: 59.7k, False: 2.94k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  59.7k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 59.7k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   118k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.06k, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.06k|    }                                                  \
  |  |  |  | 3667|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   118k|                            make_eof_scan_error));
 6047|       |
 6048|   118k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 58.6k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  58.6k|            return result_type{it, 0};
 6056|   118k|        }
 6057|       |
 6058|  2.94k|        return result_type{rng.begin(), 0};
 6059|  62.6k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.94k|{
 1964|  2.94k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.94k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.94k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.94k|    else {
 1949|  2.94k|        auto first = range.begin();
 1950|  7.00k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 6.93k, False: 72]
  ------------------
 1951|  6.93k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.87k, False: 4.06k]
  ------------------
 1952|  2.87k|                return first;
 1953|  2.87k|            }
 1954|  6.93k|        }
 1955|     72|        return first;
 1956|  2.94k|    }
 1957|  2.94k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  58.5k|    {
  108|  58.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  58.5k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  58.5k|    {
   94|  58.5k|        iter_difference_t<I> counter{0};
   95|   636k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 578k, False: 58.5k]
  ------------------
   96|   578k|            ++i;
   97|   578k|            ++counter;
   98|   578k|        }
   99|  58.5k|        return counter;
  100|  58.5k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   235k|{
  950|   235k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.44k, False: 233k]
  |  |  ------------------
  ------------------
  951|  2.44k|        return eof_error::eof;
  952|  2.44k|    }
  953|   233k|    return eof_error::good;
  954|   235k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.75M|{
  944|  1.75M|    return is_range_eof(r.begin(), r.end());
  945|  1.75M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.75M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.75M|    {
  937|  1.75M|        return begin == end;
  938|  1.75M|    }
  939|  1.75M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   146k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   146k|    else {
 1677|   146k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   146k|    }
 1679|   146k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   146k|    {
 1525|   146k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   146k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   146k|    {
 1609|   146k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   146k|                           ranges::common_range<Range>) {
 1626|   146k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   146k|            auto end_seg = range.end().contiguous_segment();
 1628|   146k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.58k, False: 143k]
  |  |  ------------------
  ------------------
 1629|   146k|                             detail::to_address(end_seg.end()))) {
 1630|  3.58k|                auto& str = m_storage.emplace();
 1631|  3.58k|                str.reserve(range.end().position() - range.begin().position());
 1632|  3.58k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  3.58k|                m_view = string_view_type{str};
 1634|  3.58k|                return;
 1635|  3.58k|            }
 1636|       |
 1637|   143k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   143k|                                                            end_seg.data());
 1639|   143k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   146k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   288k|    {
 1570|   288k|        return m_view;
 1571|   288k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   146k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  57.8k|    {
 6068|  57.8k|        const bool need_skipped_width =
 6069|  57.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 57.8k]
  |  Branch (6069:33): [True: 0, False: 57.8k]
  ------------------
 6070|  57.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  57.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 57.8k]
  ------------------
 6073|  57.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 57.8k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  57.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 57.8k, False: 0]
  ------------------
 6082|  57.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 818, False: 57.0k]
  ------------------
 6083|  57.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 818]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    818|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 818]
  ------------------
 6085|    818|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  57.8k|        return result_type{rng.begin(), 0};
 6107|  57.8k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   373k|{
  950|   373k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.76k, False: 370k]
  |  |  ------------------
  ------------------
  951|  3.76k|        return eof_error::eof;
  952|  3.76k|    }
  953|   370k|    return eof_error::good;
  954|   373k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   373k|{
  944|   373k|    return is_range_eof(r.begin(), r.end());
  945|   373k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   373k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   373k|    {
  937|   373k|        return begin == end;
  938|   373k|    }
  939|   373k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   232k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   232k|                  ranges::sized_range<Range>) {
 1674|   232k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   232k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   232k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   232k|    {
 1478|   232k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.27M|    {
 1491|  1.27M|        return sv;
 1492|  1.27M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  5.88k|{
 1964|  5.88k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  5.88k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  5.88k|{
 1945|  5.88k|    if constexpr (ranges::common_range<Range>) {
 1946|  5.88k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  5.88k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   233k|{
 2940|   233k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 233k, False: 0]
  ------------------
 2941|   233k|        auto it = read_while_classic_space(range);
 2942|   233k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   233k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.27k, False: 230k]
  |  |  ------------------
  ------------------
 2944|  2.27k|            return unexpected(e);
 2945|  2.27k|        }
 2946|       |
 2947|   230k|        return it;
 2948|   233k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   233k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   233k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   233k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   233k|        auto buf = make_contiguous_buffer(range);
 2109|   233k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   233k|        return ranges::next(range.begin(),
 2111|   233k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   233k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   463k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   463k|                  ranges::sized_range<Range>) {
 1674|   463k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   463k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   463k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   463k|    {
 1478|   463k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  11.2k|    {
  304|  11.2k|        ranges::advance(x, n);
  305|  11.2k|        return x;
  306|  11.2k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   293k|    {
  268|   293k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   293k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   293k|    {
  181|   540k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 247k, False: 293k]
  ------------------
  182|   247k|            ++i;
  183|   247k|        }
  184|   293k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|   146k|    {
 1575|   146k|        return m_storage.has_value();
 1576|   146k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  2.19k|    {
 1580|  2.19k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  2.19k|        return *m_storage;
 1582|  2.19k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  64.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  64.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  64.7k|            auto rd = make_reader<T, char_type>();
 6195|  64.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 62.6k]
  |  |  ------------------
  ------------------
 6196|  2.09k|                return unexpected(e);
 6197|  2.09k|            }
 6198|       |
 6199|  62.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 62.6k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  62.6k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  62.6k|                return impl(rd, range, value);
 6202|  62.6k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  64.7k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|   275k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|   275k|                       std::is_same_v<T, std::wstring>) {
 5816|   275k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   275k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|   397k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   168k|    {
 3029|   168k|        reader_error_handler eh{};
 3030|   168k|        get_derived().check_specs_impl(specs, eh);
 3031|   168k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 162k]
  |  |  ------------------
  ------------------
 3032|  6.27k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  6.27k|        }
 3034|   162k|        return {};
 3035|   168k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|   168k|    {
 3040|   168k|        return static_cast<Derived&>(*this);
 3041|   168k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   168k|    {
 5199|   168k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   168k|        SCN_GCC_PUSH
 5202|   168k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   168k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   168k|        SCN_CLANG_PUSH
 5206|   168k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   168k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   168k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 168k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 168k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|   153k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 153k, False: 15.1k]
  ------------------
 5215|   153k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 153k]
  ------------------
 5216|   153k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 153k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|   153k|                else {
 5220|   153k|                    m_type = reader_type::word;
 5221|   153k|                }
 5222|   153k|                break;
 5223|      0|            }
 5224|       |
 5225|  6.27k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 6.27k, False: 162k]
  ------------------
 5226|  6.27k|                m_type = reader_type::character;
 5227|  6.27k|                break;
 5228|       |
 5229|  8.83k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 8.83k, False: 159k]
  ------------------
 5230|  8.83k|                m_type = reader_type::character_set;
 5231|  8.83k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 168k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 168k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   168k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   168k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|  62.6k|    {
 6113|  62.6k|        const bool need_skipped_width =
 6114|  62.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 62.6k]
  |  Branch (6114:33): [True: 0, False: 62.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  62.6k|        auto it = rng.begin();
 6118|  62.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  62.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 62.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  62.6k|        else {
 6127|  62.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  62.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.06k, False: 61.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.06k|    }                                                  \
  |  |  |  | 3667|  62.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  61.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  61.6k|        }
 6130|  61.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  61.6k|        std::ptrdiff_t value_width = 0;
 6134|  61.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 61.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  61.6k|        else {
 6150|  61.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  61.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  61.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.11k, False: 58.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.11k|    }                                                  \
  |  | 3667|  61.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  58.5k|                                             specs, value, loc));
 6152|       |
 6153|  58.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 58.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  58.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  58.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  58.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 57.8k, False: 606]
  ------------------
 6163|  57.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  57.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  57.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  57.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 57.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  57.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  57.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  57.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  57.8k|                                 value_width));
 6167|  57.8k|            std::tie(it, postfix_width) = postfix_result;
 6168|  57.8k|        }
 6169|       |
 6170|  58.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  58.5k|                                                 value_width, postfix_width);
 6172|  58.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 58.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  58.5k|        return it;
 6177|  58.5k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|   539k|    {
 5248|   539k|        return m_type == reader_type::word;
 5249|   539k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   379k|{
 1132|   379k|    auto it = src.begin();
 1133|  2.60M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.23M, False: 369k]
  ------------------
 1134|  2.23M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.23M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 5.74k, False: 2.23M]
  ------------------
 1136|  5.74k|            return false;
 1137|  5.74k|        }
 1138|  2.23M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 733, False: 2.23M]
  ------------------
 1139|    733|            return false;
 1140|    733|        }
 1141|  2.23M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.23M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.23M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.99k, False: 2.22M]
  ------------------
 1144|  2.99k|            return false;
 1145|  2.99k|        }
 1146|  2.22M|        it += len;
 1147|  2.22M|    }
 1148|   369k|    return true;
 1149|   379k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   143k|{
 2982|   143k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   143k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 2.19k, False: 141k]
  ------------------
 2984|  2.19k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.19k|    static_cast<    \
  |  |  929|  2.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  2.19k|        }
 2986|   141k|        else {
 2987|   141k|            dest.assign(source.view());
 2988|   141k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   143k|    return {};
 2995|   143k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  8.83k|        {
 5092|  8.83k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 8.83k, False: 0]
  ------------------
 5093|  8.83k|                return {};
 5094|  8.83k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|  19.0k|        {
 5065|  19.0k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  19.0k|            const auto val =
 5067|  19.0k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  19.0k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  19.0k|                    (val % 8)) &
 5070|  19.0k|                   1u;
 5071|  19.0k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  20.7k|        {
 5118|  20.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 1.78k, False: 19.0k]
  ------------------
 5119|  1.78k|                return false;
 5120|  1.78k|            }
 5121|       |
 5122|  19.0k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  20.7k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  8.83k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|  61.6k|    {
 5266|  61.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  61.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  61.6k|        return read_impl(range, specs, value);
 5268|  61.6k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|  61.6k|    {
 5284|  61.6k|        SCN_CLANG_PUSH
 5285|  61.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  61.6k|        switch (m_type) {
 5288|  58.6k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 58.6k, False: 2.94k]
  ------------------
 5289|  58.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 61.6k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 61.6k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.94k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.94k, False: 58.6k]
  ------------------
 5299|  2.94k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.94k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 61.6k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 61.6k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 61.6k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  61.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  61.6k|        }
 5320|       |
 5321|  61.6k|        SCN_CLANG_POP
 5322|  61.6k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   145k|    {
 4809|   145k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   145k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   145k|{
 4741|   145k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   145k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   145k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 2.78k, False: 142k]
  ------------------
 4745|  2.78k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  2.78k|                                     "Invalid encoding in scanned string");
 4747|  2.78k|    }
 4748|   142k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   142k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   142k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   142k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   145k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   145k|    else {
 2085|   145k|        auto it = range.begin();
 2086|       |
 2087|   145k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|   145k|            auto seg = get_contiguous_beginning(range);
 2089|   145k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|   145k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 145k]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|   145k|            ranges::advance(it, seg.size());
 2094|   145k|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|   145k|            ranges::subrange{it, range.end()},
 2098|   145k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   145k|    }
 2100|   145k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   293k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   293k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   293k|        else {
 1054|   293k|            return r.begin().contiguous_segment();
 1055|   293k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   293k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   281k|{
 2049|   281k|    auto it = range.begin();
 2050|  1.51M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.51M, False: 4.41k]
  ------------------
 2051|  1.51M|        const auto val =
 2052|  1.51M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.51M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.49M, False: 18.2k]
  |  |  ------------------
  ------------------
 2054|  1.49M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.49M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.49M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 277k, False: 1.21M]
  ------------------
 2057|   277k|                return it;
 2058|   277k|            }
 2059|  1.49M|        }
 2060|  1.23M|        it = val.iterator;
 2061|  1.23M|    }
 2062|       |
 2063|  4.41k|    return it;
 2064|   281k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.51M|{
 1887|  1.51M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.51M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.51M|    auto it = range.begin();
 1891|  1.51M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.51M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.2k, False: 1.49M]
  |  |  ------------------
  ------------------
 1894|  18.2k|        ++it;
 1895|  18.2k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  18.2k|        return {it, {}};
 1897|  18.2k|    }
 1898|       |
 1899|  1.49M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.41M, False: 80.3k]
  ------------------
 1900|  1.41M|        ++it;
 1901|  1.41M|        return {it, string_type(1, *range.begin())};
 1902|  1.41M|    }
 1903|       |
 1904|  80.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  80.3k|    return {it, string_type{range.begin(), it}};
 1906|  1.49M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  18.2k|{
 1155|  18.2k|    auto it = input.begin();
 1156|  43.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 42.6k, False: 683]
  ------------------
 1157|  42.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.5k, False: 25.1k]
  ------------------
 1158|  17.5k|            break;
 1159|  17.5k|        }
 1160|  42.6k|    }
 1161|  18.2k|    return it;
 1162|  18.2k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  80.3k|    {
  283|  80.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  80.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  80.3k|    {
  252|  80.3k|        constexpr iter_difference_t<I> zero{0};
  253|  80.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|   303k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 223k, False: 79.8k]
  |  Branch (255:30): [True: 223k, False: 510]
  ------------------
  256|   223k|            ++i;
  257|   223k|            ++counter;
  258|   223k|        }
  259|       |
  260|  80.3k|        return counter;
  261|  80.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  1.51M|    {
 1878|  1.51M|        return !codepoint.empty();
 1879|  1.51M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   145k|        : m_fptr([](storage fn,
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|   145k|              if constexpr (std::is_void_v<R>) {
  746|   145k|                  obj(static_cast<decltype(args)>(args)...);
  747|   145k|              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
  752|   145k|          m_storage(std::addressof(f))
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   889k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   889k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   889k|              else {
  749|   889k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   889k|              }
  751|   889k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   889k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   889k|        else if constexpr (std::is_object_v<T>) {
  688|   889k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   889k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|   889k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   145k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   145k|        {
  662|   145k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  2.94k|    {
 5037|  2.94k|        auto it = read_source_impl(range, {specs});
 5038|  2.94k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 854]
  |  |  ------------------
  ------------------
 5039|  2.09k|            return unexpected(it.error());
 5040|  2.09k|        }
 5041|       |
 5042|    854|        return read_string_impl(range, *it, value);
 5043|  2.94k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  2.94k|    {
 5142|  2.94k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  2.94k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  2.94k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  2.94k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  2.94k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 2.94k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  2.94k|        const auto cb = [&](SourceCharT ch) {
 5165|  2.94k|            return cb_wrapper.on_ascii_only(ch);
 5166|  2.94k|        };
 5167|       |
 5168|  2.94k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 2.94k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  2.94k|        auto it = read_while_code_unit(range, cb);
 5173|  2.94k|        return check_nonempty(it, range);
 5174|  2.94k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  2.94k|    {
 5180|  2.94k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 2.09k, False: 854]
  ------------------
 5181|  2.09k|            return unexpected_scan_error(
 5182|  2.09k|                scan_error::invalid_scanned_value,
 5183|  2.09k|                "No characters matched in [character set]");
 5184|  2.09k|        }
 5185|       |
 5186|    854|        return it;
 5187|  2.94k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   136k|{
 2070|   136k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   136k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.94k|        : m_fptr([](storage fn,
  743|  2.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.94k|              cvref<T> obj = *get<T>(fn);
  745|  2.94k|              if constexpr (std::is_void_v<R>) {
  746|  2.94k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.94k|              }
  748|  2.94k|              else {
  749|  2.94k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.94k|              }
  751|  2.94k|          }),
  752|  2.94k|          m_storage(std::addressof(f))
  753|  2.94k|    {
  754|  2.94k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  6.93k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.93k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.93k|              else {
  749|  6.93k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.93k|              }
  751|  6.93k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.93k|    {
  684|  6.93k|        if constexpr (std::is_const_v<T>) {
  685|  6.93k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.93k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5164|  6.93k|        const auto cb = [&](SourceCharT ch) {
 5165|  6.93k|            return cb_wrapper.on_ascii_only(ch);
 5166|  6.93k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.94k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.94k|        {
  667|  2.94k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    854|{
 4741|    854|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    854|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    854|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 854]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    854|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    854|    static_cast<    \
  |  |  929|    854|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    854|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 854]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    854|    return SCN_MOVE(result);
  ------------------
  |  |  928|    854|    static_cast<    \
  |  |  929|    854|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    854|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  49.0k|    {
 5266|  49.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  49.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  49.0k|        return read_impl(range, specs, value);
 5268|  49.0k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  49.0k|    {
 5284|  49.0k|        SCN_CLANG_PUSH
 5285|  49.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  49.0k|        switch (m_type) {
 5288|  46.1k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 46.1k, False: 2.94k]
  ------------------
 5289|  46.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 49.0k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 49.0k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.94k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.94k, False: 46.1k]
  ------------------
 5299|  2.94k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.94k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 49.0k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 49.0k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 49.0k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  49.0k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  49.0k|        }
 5320|       |
 5321|  49.0k|        SCN_CLANG_POP
 5322|  49.0k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   115k|    {
 4809|   115k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   115k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   115k|{
 4741|   115k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   115k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   115k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 3.34k, False: 112k]
  ------------------
 4745|  3.34k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  3.34k|                                     "Invalid encoding in scanned string");
 4747|  3.34k|    }
 4748|   112k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   112k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   112k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   112k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   112k|{
 3001|   112k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   112k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   112k|    return {};
 3009|   112k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|   230k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   230k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   230k|        auto buf = make_contiguous_buffer(range);
 2080|   230k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   230k|        return ranges::next(range.begin(),
 2082|   230k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   230k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  2.94k|    {
 5037|  2.94k|        auto it = read_source_impl(range, {specs});
 5038|  2.94k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 854]
  |  |  ------------------
  ------------------
 5039|  2.09k|            return unexpected(it.error());
 5040|  2.09k|        }
 5041|       |
 5042|    854|        return read_string_impl(range, *it, value);
 5043|  2.94k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  5.88k|    {
 5142|  5.88k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  5.88k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  5.88k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.88k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  5.88k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  5.88k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 5.88k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  5.88k|        const auto cb = [&](SourceCharT ch) {
 5165|  5.88k|            return cb_wrapper.on_ascii_only(ch);
 5166|  5.88k|        };
 5167|       |
 5168|  5.88k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 5.88k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  5.88k|        auto it = read_while_code_unit(range, cb);
 5173|  5.88k|        return check_nonempty(it, range);
 5174|  5.88k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  5.88k|    {
 5180|  5.88k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.18k, False: 1.70k]
  ------------------
 5181|  4.18k|            return unexpected_scan_error(
 5182|  4.18k|                scan_error::invalid_scanned_value,
 5183|  4.18k|                "No characters matched in [character set]");
 5184|  4.18k|        }
 5185|       |
 5186|  1.70k|        return it;
 5187|  5.88k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  5.88k|        : m_fptr([](storage fn,
  743|  5.88k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.88k|              cvref<T> obj = *get<T>(fn);
  745|  5.88k|              if constexpr (std::is_void_v<R>) {
  746|  5.88k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.88k|              }
  748|  5.88k|              else {
  749|  5.88k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.88k|              }
  751|  5.88k|          }),
  752|  5.88k|          m_storage(std::addressof(f))
  753|  5.88k|    {
  754|  5.88k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  13.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.8k|              else {
  749|  13.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.8k|              }
  751|  13.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  13.8k|    {
  684|  13.8k|        if constexpr (std::is_const_v<T>) {
  685|  13.8k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.8k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  13.8k|        const auto cb = [&](SourceCharT ch) {
 5165|  13.8k|            return cb_wrapper.on_ascii_only(ch);
 5166|  13.8k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  5.88k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.88k|        {
  667|  5.88k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    854|{
 4741|    854|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    854|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    854|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 854]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    854|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    854|    static_cast<    \
  |  |  929|    854|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    854|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    854|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 854]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    854|    return SCN_MOVE(result);
  ------------------
  |  |  928|    854|    static_cast<    \
  |  |  929|    854|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    854|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|   122k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   122k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   122k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   122k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  49.0k|    {
 5266|  49.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  49.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  49.0k|        return read_impl(range, specs, value);
 5268|  49.0k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  49.0k|    {
 5284|  49.0k|        SCN_CLANG_PUSH
 5285|  49.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  49.0k|        switch (m_type) {
 5288|  46.1k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 46.1k, False: 2.94k]
  ------------------
 5289|  46.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 49.0k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 49.0k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.94k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.94k, False: 46.1k]
  ------------------
 5299|  2.94k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.94k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 49.0k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 49.0k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 49.0k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  49.0k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  49.0k|        }
 5320|       |
 5321|  49.0k|        SCN_CLANG_POP
 5322|  49.0k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   115k|    {
 4816|   115k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   115k|                                     value);
 4818|   115k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   115k|{
 4762|   115k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   115k|    auto src = [&]() {
 4765|   115k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   115k|            return make_contiguous_buffer(
 4767|   115k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   115k|        }
 4769|   115k|        else {
 4770|   115k|            return make_contiguous_buffer(
 4771|   115k|                ranges::subrange{range.begin(), result});
 4772|   115k|        }
 4773|   115k|    }();
 4774|   115k|    using src_type = decltype(src);
 4775|       |
 4776|   115k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   115k|    else {
 4789|   115k|        const auto view = src.view();
 4790|   115k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   115k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 3.34k, False: 112k]
  ------------------
 4793|  3.34k|            return unexpected_scan_error(
 4794|  3.34k|                scan_error::invalid_scanned_value,
 4795|  3.34k|                "Invalid encoding in scanned string_view");
 4796|  3.34k|        }
 4797|       |
 4798|   112k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   115k|    }
 4800|   115k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   115k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   115k|        else {
 4770|   115k|            return make_contiguous_buffer(
 4771|   115k|                ranges::subrange{range.begin(), result});
 4772|   115k|        }
 4773|   115k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  2.94k|    {
 5051|  2.94k|        auto it = read_source_impl(range, {specs});
 5052|  2.94k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 854]
  |  |  ------------------
  ------------------
 5053|  2.09k|            return unexpected(it.error());
 5054|  2.09k|        }
 5055|       |
 5056|    854|        return read_string_view_impl(range, *it, value);
 5057|  2.94k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    854|{
 4762|    854|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    854|    auto src = [&]() {
 4765|    854|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    854|            return make_contiguous_buffer(
 4767|    854|                ranges::subrange{range.begin().base(), result.base()});
 4768|    854|        }
 4769|    854|        else {
 4770|    854|            return make_contiguous_buffer(
 4771|    854|                ranges::subrange{range.begin(), result});
 4772|    854|        }
 4773|    854|    }();
 4774|    854|    using src_type = decltype(src);
 4775|       |
 4776|    854|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    854|    else {
 4789|    854|        const auto view = src.view();
 4790|    854|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    854|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 854]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    854|        return SCN_MOVE(result);
  ------------------
  |  |  928|    854|    static_cast<    \
  |  |  929|    854|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    854|    }
 4800|    854|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    854|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    854|        else {
 4770|    854|            return make_contiguous_buffer(
 4771|    854|                ranges::subrange{range.begin(), result});
 4772|    854|        }
 4773|    854|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   147k|{
 2940|   147k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 147k, False: 0]
  ------------------
 2941|   147k|        auto it = read_while_classic_space(range);
 2942|   147k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   147k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.56k, False: 145k]
  |  |  ------------------
  ------------------
 2944|  1.56k|            return unexpected(e);
 2945|  1.56k|        }
 2946|       |
 2947|   145k|        return it;
 2948|   147k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   147k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   147k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   147k|    else {
 2114|   147k|        auto it = range.begin();
 2115|       |
 2116|   147k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   147k|            auto seg = get_contiguous_beginning(range);
 2118|   147k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   147k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 11.2k, False: 136k]
  ------------------
 2120|  11.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  11.2k|            }
 2122|   136k|            ranges::advance(it, seg.size());
 2123|   136k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   147k|            return detail::is_cp_space(cp);
 2127|   147k|        });
 2128|   147k|    }
 2129|   147k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   136k|        : m_fptr([](storage fn,
  743|   136k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   136k|              cvref<T> obj = *get<T>(fn);
  745|   136k|              if constexpr (std::is_void_v<R>) {
  746|   136k|                  obj(static_cast<decltype(args)>(args)...);
  747|   136k|              }
  748|   136k|              else {
  749|   136k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   136k|              }
  751|   136k|          }),
  752|   136k|          m_storage(std::addressof(f))
  753|   136k|    {
  754|   136k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   606k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   606k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   606k|              else {
  749|   606k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   606k|              }
  751|   606k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   606k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   606k|        else if constexpr (std::is_object_v<T>) {
  688|   606k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   606k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   606k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   606k|            return detail::is_cp_space(cp);
 2127|   606k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   136k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   136k|        {
  662|   136k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   896k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   896k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   896k|        auto beg = r.begin();
  990|   896k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 896k, False: 0]
  ------------------
  991|   896k|            return false;
  992|   896k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   896k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  27.6k|    {
  763|  27.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  27.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  12.8k|        : m_fptr([](storage fn,
  743|  12.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.8k|              cvref<T> obj = *get<T>(fn);
  745|  12.8k|              if constexpr (std::is_void_v<R>) {
  746|  12.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.8k|              }
  748|  12.8k|              else {
  749|  12.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.8k|              }
  751|  12.8k|          }),
  752|  12.8k|          m_storage(std::addressof(f))
  753|  12.8k|    {
  754|  12.8k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  13.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.8k|              else {
  749|  13.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.8k|              }
  751|  13.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  13.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.8k|        else if constexpr (std::is_object_v<T>) {
  688|  13.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.8k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  12.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.8k|        {
  662|  12.8k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   361k|    {
 6026|   361k|        const bool need_skipped_width =
 6027|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 361k]
  |  Branch (6027:33): [True: 0, False: 361k]
  ------------------
 6028|   361k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   361k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 361k]
  ------------------
 6032|   361k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 361k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   361k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 361k, False: 0]
  |  Branch (6036:56): [True: 357k, False: 4.29k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   357k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 357k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   712k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 355k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.15k|    }                                                  \
  |  |  |  | 3667|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   712k|                            make_eof_scan_error));
 6047|       |
 6048|   712k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 355k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   355k|            return result_type{it, 0};
 6056|   712k|        }
 6057|       |
 6058|  4.29k|        return result_type{rng.begin(), 0};
 6059|   361k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  4.29k|{
 1964|  4.29k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  4.29k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  4.29k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  4.29k|    else {
 1949|  4.29k|        auto first = range.begin();
 1950|  4.65k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 4.60k, False: 52]
  ------------------
 1951|  4.60k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 4.23k, False: 366]
  ------------------
 1952|  4.23k|                return first;
 1953|  4.23k|            }
 1954|  4.60k|        }
 1955|     52|        return first;
 1956|  4.29k|    }
 1957|  4.29k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   352k|    {
  108|   352k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   352k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   352k|    {
   94|   352k|        iter_difference_t<I> counter{0};
   95|  10.4M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 10.1M, False: 352k]
  ------------------
   96|  10.1M|            ++i;
   97|  10.1M|            ++counter;
   98|  10.1M|        }
   99|   352k|        return counter;
  100|   352k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.42M|{
  950|  1.42M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 1.42M]
  |  |  ------------------
  ------------------
  951|  2.88k|        return eof_error::eof;
  952|  2.88k|    }
  953|  1.42M|    return eof_error::good;
  954|  1.42M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  28.9M|{
  944|  28.9M|    return is_range_eof(r.begin(), r.end());
  945|  28.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  28.9M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  28.9M|    {
  937|  28.9M|        return begin == end;
  938|  28.9M|    }
  939|  28.9M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|   889k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   889k|    else {
 1677|   889k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   889k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   889k|    }
 1679|   889k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   889k|    {
 1525|   889k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   889k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   889k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   889k|    {
 1609|   889k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   889k|                           ranges::common_range<Range>) {
 1626|   889k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   889k|            auto end_seg = range.end().contiguous_segment();
 1628|   889k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   889k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.09k, False: 885k]
  |  |  ------------------
  ------------------
 1629|   889k|                             detail::to_address(end_seg.end()))) {
 1630|  4.09k|                auto& str = m_storage.emplace();
 1631|  4.09k|                str.reserve(range.end().position() - range.begin().position());
 1632|  4.09k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  4.09k|                m_view = string_view_type{str};
 1634|  4.09k|                return;
 1635|  4.09k|            }
 1636|       |
 1637|   885k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   885k|                                                            end_seg.data());
 1639|   885k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   889k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  1.77M|    {
 1570|  1.77M|        return m_view;
 1571|  1.77M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|   889k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   351k|    {
 6068|   351k|        const bool need_skipped_width =
 6069|   351k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 351k]
  |  Branch (6069:33): [True: 0, False: 351k]
  ------------------
 6070|   351k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   351k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 351k]
  ------------------
 6073|   351k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 351k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   351k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 351k, False: 0]
  ------------------
 6082|   351k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 84, False: 351k]
  ------------------
 6083|   351k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 84]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|     84|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 84]
  ------------------
 6085|     84|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   351k|        return result_type{rng.begin(), 0};
 6107|   351k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  55.0M|{
 1887|  55.0M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  55.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  55.0M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  55.0M|    auto it = range.begin();
 1891|  55.0M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  55.0M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  55.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.0M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  55.0M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 55.0M, False: 0]
  ------------------
 1900|  55.0M|        ++it;
 1901|  55.0M|        return {it, string_type(1, *range.begin())};
 1902|  55.0M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  55.0M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  57.8M|{
  944|  57.8M|    return is_range_eof(r.begin(), r.end());
  945|  57.8M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  57.8M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  57.8M|    {
  937|  57.8M|        return begin == end;
  938|  57.8M|    }
  939|  57.8M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  55.0M|    {
 1878|  55.0M|        return !codepoint.empty();
 1879|  55.0M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.85M|{
  950|  2.85M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.76k, False: 2.84M]
  |  |  ------------------
  ------------------
  951|  5.76k|        return eof_error::eof;
  952|  5.76k|    }
  953|  2.84M|    return eof_error::good;
  954|  2.85M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  1.77M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.77M|                  ranges::sized_range<Range>) {
 1674|  1.77M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.77M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  1.77M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.77M|    {
 1478|  1.77M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  2.66M|    {
 1491|  2.66M|        return sv;
 1492|  2.66M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  8.58k|{
 1964|  8.58k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  8.58k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  8.58k|{
 1945|  8.58k|    if constexpr (ranges::common_range<Range>) {
 1946|  8.58k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  8.58k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.78M|{
 2940|  1.78M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.78M, False: 0]
  ------------------
 2941|  1.78M|        auto it = read_while_classic_space(range);
 2942|  1.78M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.78M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 1.77M]
  |  |  ------------------
  ------------------
 2944|  2.88k|            return unexpected(e);
 2945|  2.88k|        }
 2946|       |
 2947|  1.77M|        return it;
 2948|  1.78M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.78M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.78M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.78M|    else {
 2114|  1.78M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.78M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.78M|            return detail::is_cp_space(cp);
 2127|  1.78M|        });
 2128|  1.78M|    }
 2129|  1.78M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  1.78M|{
 2070|  1.78M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.78M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  3.56M|{
 2049|  3.56M|    auto it = range.begin();
 2050|  55.0M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 55.0M, False: 14.9k]
  ------------------
 2051|  55.0M|        const auto val =
 2052|  55.0M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  55.0M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  55.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 55.0M, False: 0]
  |  |  ------------------
  ------------------
 2054|  55.0M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  55.0M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  55.0M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 3.54M, False: 51.4M]
  ------------------
 2057|  3.54M|                return it;
 2058|  3.54M|            }
 2059|  55.0M|        }
 2060|  51.4M|        it = val.iterator;
 2061|  51.4M|    }
 2062|       |
 2063|  14.9k|    return it;
 2064|  3.56M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.78M|        : m_fptr([](storage fn,
  743|  1.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78M|              cvref<T> obj = *get<T>(fn);
  745|  1.78M|              if constexpr (std::is_void_v<R>) {
  746|  1.78M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.78M|              }
  748|  1.78M|              else {
  749|  1.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78M|              }
  751|  1.78M|          }),
  752|  1.78M|          m_storage(std::addressof(f))
  753|  1.78M|    {
  754|  1.78M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  4.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.08M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.08M|              else {
  749|  4.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.08M|              }
  751|  4.08M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  4.08M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.08M|        else if constexpr (std::is_object_v<T>) {
  688|  4.08M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.08M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  4.08M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  4.08M|            return detail::is_cp_space(cp);
 2127|  4.08M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.78M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.78M|        {
  662|  1.78M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   883k|    {
 1575|   883k|        return m_storage.has_value();
 1576|   883k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|  1.42k|    {
 1580|  1.42k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.42k|        return *m_storage;
 1582|  1.42k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  2.70M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.09M|    {
 3029|  1.09M|        reader_error_handler eh{};
 3030|  1.09M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.09M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 1.08M]
  |  |  ------------------
  ------------------
 3032|  12.5k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  12.5k|        }
 3034|  1.08M|        return {};
 3035|  1.09M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  1.09M|    {
 3040|  1.09M|        return static_cast<Derived&>(*this);
 3041|  1.09M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  1.09M|    {
 5199|  1.09M|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  1.09M|        SCN_GCC_PUSH
 5202|  1.09M|        SCN_GCC_IGNORE("-Wswitch")
 5203|  1.09M|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  1.09M|        SCN_CLANG_PUSH
 5206|  1.09M|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  1.09M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  1.09M|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 1.09M]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 1.09M]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|  1.07M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 1.07M, False: 25.4k]
  ------------------
 5215|  1.07M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 1.07M]
  ------------------
 5216|  1.07M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 1.07M]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|  1.07M|                else {
 5220|  1.07M|                    m_type = reader_type::word;
 5221|  1.07M|                }
 5222|  1.07M|                break;
 5223|      0|            }
 5224|       |
 5225|  12.5k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 12.5k, False: 1.08M]
  ------------------
 5226|  12.5k|                m_type = reader_type::character;
 5227|  12.5k|                break;
 5228|       |
 5229|  12.8k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 12.8k, False: 1.08M]
  ------------------
 5230|  12.8k|                m_type = reader_type::character_set;
 5231|  12.8k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 1.09M]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 1.09M]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|  1.09M|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  1.09M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  3.74M|    {
 5248|  3.74M|        return m_type == reader_type::word;
 5249|  3.74M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  2.66M|{
 1132|  2.66M|    auto it = src.begin();
 1133|  75.2M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 72.6M, False: 2.64M]
  ------------------
 1134|  72.6M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  72.6M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 72.6M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  72.6M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 72.6M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  72.6M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  72.6M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  72.6M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 22.7k, False: 72.6M]
  ------------------
 1144|  22.7k|            return false;
 1145|  22.7k|        }
 1146|  72.6M|        it += len;
 1147|  72.6M|    }
 1148|  2.64M|    return true;
 1149|  2.66M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|  12.8k|        {
 5092|  12.8k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 12.8k, False: 0]
  ------------------
 5093|  12.8k|                return {};
 5094|  12.8k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  8.04k|        {
 5065|  8.04k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  8.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  8.04k|            const auto val =
 5067|  8.04k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  8.04k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  8.04k|                    (val % 8)) &
 5070|  8.04k|                   1u;
 5071|  8.04k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  13.8k|        {
 5118|  13.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 5.77k, False: 8.04k]
  ------------------
 5119|  5.77k|                return false;
 5120|  5.77k|            }
 5121|       |
 5122|  8.04k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  13.8k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  12.8k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   889k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   889k|    else {
 2085|   889k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   889k|        return read_until_code_point(
 2097|   889k|            ranges::subrange{it, range.end()},
 2098|   889k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   889k|    }
 2100|   889k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.78M|{
 2049|  1.78M|    auto it = range.begin();
 2050|  27.5M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 27.5M, False: 7.46k]
  ------------------
 2051|  27.5M|        const auto val =
 2052|  27.5M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  27.5M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  27.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.5M, False: 0]
  |  |  ------------------
  ------------------
 2054|  27.5M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  27.5M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  27.5M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.77M, False: 25.7M]
  ------------------
 2057|  1.77M|                return it;
 2058|  1.77M|            }
 2059|  27.5M|        }
 2060|  25.7M|        it = val.iterator;
 2061|  25.7M|    }
 2062|       |
 2063|  7.46k|    return it;
 2064|  1.78M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  27.5M|{
 1887|  27.5M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  27.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  27.5M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  27.5M|    auto it = range.begin();
 1891|  27.5M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  27.5M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  27.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.5M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  27.5M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 27.5M, False: 0]
  ------------------
 1900|  27.5M|        ++it;
 1901|  27.5M|        return {it, string_type(1, *range.begin())};
 1902|  27.5M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  27.5M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  27.5M|    {
 1878|  27.5M|        return !codepoint.empty();
 1879|  27.5M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   889k|        : m_fptr([](storage fn,
  743|   889k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   889k|              cvref<T> obj = *get<T>(fn);
  745|   889k|              if constexpr (std::is_void_v<R>) {
  746|   889k|                  obj(static_cast<decltype(args)>(args)...);
  747|   889k|              }
  748|   889k|              else {
  749|   889k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   889k|              }
  751|   889k|          }),
  752|   889k|          m_storage(std::addressof(f))
  753|   889k|    {
  754|   889k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  25.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.4M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  25.4M|              else {
  749|  25.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.4M|              }
  751|  25.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  25.4M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  25.4M|        else if constexpr (std::is_object_v<T>) {
  688|  25.4M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  25.4M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  25.4M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   889k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   889k|        {
  662|   889k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  4.29k|    {
 5142|  4.29k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  4.29k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  4.29k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  4.29k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  4.29k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 4.29k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  4.29k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.29k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.29k|        };
 5167|       |
 5168|  4.29k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 4.29k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  4.29k|        auto it = read_while_code_unit(range, cb);
 5173|  4.29k|        return check_nonempty(it, range);
 5174|  4.29k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  4.29k|    {
 5180|  4.29k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.18k, False: 110]
  ------------------
 5181|  4.18k|            return unexpected_scan_error(
 5182|  4.18k|                scan_error::invalid_scanned_value,
 5183|  4.18k|                "No characters matched in [character set]");
 5184|  4.18k|        }
 5185|       |
 5186|    110|        return it;
 5187|  4.29k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   891k|{
 2070|   891k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   891k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  4.29k|        : m_fptr([](storage fn,
  743|  4.29k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.29k|              cvref<T> obj = *get<T>(fn);
  745|  4.29k|              if constexpr (std::is_void_v<R>) {
  746|  4.29k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.29k|              }
  748|  4.29k|              else {
  749|  4.29k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.29k|              }
  751|  4.29k|          }),
  752|  4.29k|          m_storage(std::addressof(f))
  753|  4.29k|    {
  754|  4.29k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.60k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.60k|              else {
  749|  4.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.60k|              }
  751|  4.60k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.60k|    {
  684|  4.60k|        if constexpr (std::is_const_v<T>) {
  685|  4.60k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.60k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5164|  4.60k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.60k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.60k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  4.29k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.29k|        {
  667|  4.29k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  1.77M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  1.77M|    else {
 2085|  1.77M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  1.77M|        return read_until_code_point(
 2097|  1.77M|            ranges::subrange{it, range.end()},
 2098|  1.77M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  1.77M|    }
 2100|  1.77M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.77M|        : m_fptr([](storage fn,
  743|  1.77M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.77M|              cvref<T> obj = *get<T>(fn);
  745|  1.77M|              if constexpr (std::is_void_v<R>) {
  746|  1.77M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.77M|              }
  748|  1.77M|              else {
  749|  1.77M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.77M|              }
  751|  1.77M|          }),
  752|  1.77M|          m_storage(std::addressof(f))
  753|  1.77M|    {
  754|  1.77M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  50.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.9M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.9M|              else {
  749|  50.9M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.9M|              }
  751|  50.9M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  50.9M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.9M|        else if constexpr (std::is_object_v<T>) {
  688|  50.9M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.9M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  50.9M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.77M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.77M|        {
  662|  1.77M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  8.58k|    {
 5142|  8.58k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  8.58k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  8.58k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.58k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  8.58k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  8.58k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 8.58k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  8.58k|        const auto cb = [&](SourceCharT ch) {
 5165|  8.58k|            return cb_wrapper.on_ascii_only(ch);
 5166|  8.58k|        };
 5167|       |
 5168|  8.58k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 8.58k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  8.58k|        auto it = read_while_code_unit(range, cb);
 5173|  8.58k|        return check_nonempty(it, range);
 5174|  8.58k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  8.58k|    {
 5180|  8.58k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 8.36k, False: 220]
  ------------------
 5181|  8.36k|            return unexpected_scan_error(
 5182|  8.36k|                scan_error::invalid_scanned_value,
 5183|  8.36k|                "No characters matched in [character set]");
 5184|  8.36k|        }
 5185|       |
 5186|    220|        return it;
 5187|  8.58k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  8.58k|        : m_fptr([](storage fn,
  743|  8.58k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.58k|              cvref<T> obj = *get<T>(fn);
  745|  8.58k|              if constexpr (std::is_void_v<R>) {
  746|  8.58k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.58k|              }
  748|  8.58k|              else {
  749|  8.58k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.58k|              }
  751|  8.58k|          }),
  752|  8.58k|          m_storage(std::addressof(f))
  753|  8.58k|    {
  754|  8.58k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.20k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.20k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.20k|              else {
  749|  9.20k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.20k|              }
  751|  9.20k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.20k|    {
  684|  9.20k|        if constexpr (std::is_const_v<T>) {
  685|  9.20k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.20k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  9.20k|        const auto cb = [&](SourceCharT ch) {
 5165|  9.20k|            return cb_wrapper.on_ascii_only(ch);
 5166|  9.20k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  8.58k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.58k|        {
  667|  8.58k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   365k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   365k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   365k|            auto rd = make_reader<T, char_type>();
 6195|   365k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 361k]
  |  |  ------------------
  ------------------
 6196|  4.18k|                return unexpected(e);
 6197|  4.18k|            }
 6198|       |
 6199|   361k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 361k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   361k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   361k|                return impl(rd, range, value);
 6202|   361k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   365k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  1.80M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  1.80M|                       std::is_same_v<T, std::wstring>) {
 5816|  1.80M|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  1.80M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|   361k|    {
 6113|   361k|        const bool need_skipped_width =
 6114|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 361k]
  |  Branch (6114:33): [True: 0, False: 361k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   361k|        auto it = rng.begin();
 6118|   361k|        std::ptrdiff_t prefix_width = 0;
 6119|   361k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 361k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   361k|        else {
 6127|   361k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.15k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   360k|            std::tie(it, prefix_width) = prefix_result;
 6129|   360k|        }
 6130|   360k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   360k|        std::ptrdiff_t value_width = 0;
 6134|   360k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 360k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   360k|        else {
 6150|   360k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.20k, False: 352k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.20k|    }                                                  \
  |  | 3667|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   352k|                                             specs, value, loc));
 6152|       |
 6153|   352k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 352k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   352k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   352k|        std::ptrdiff_t postfix_width = 0;
 6162|   352k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 351k, False: 986]
  ------------------
 6163|   351k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   351k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   351k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   351k|                                 value_width));
 6167|   351k|            std::tie(it, postfix_width) = postfix_result;
 6168|   351k|        }
 6169|       |
 6170|   352k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   352k|                                                 value_width, postfix_width);
 6172|   352k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 352k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   352k|        return it;
 6177|   352k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   882k|{
 2982|   882k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   882k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 1.42k, False: 880k]
  ------------------
 2984|  1.42k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.42k|    static_cast<    \
  |  |  929|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  1.42k|        }
 2986|   880k|        else {
 2987|   880k|            dest.assign(source.view());
 2988|   880k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   882k|    return {};
 2995|   882k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|   360k|    {
 5266|   360k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   360k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   360k|        return read_impl(range, specs, value);
 5268|   360k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|   360k|    {
 5284|   360k|        SCN_CLANG_PUSH
 5285|   360k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   360k|        switch (m_type) {
 5288|   355k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 355k, False: 4.29k]
  ------------------
 5289|   355k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 360k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 360k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.29k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.29k, False: 355k]
  ------------------
 5299|  4.29k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.29k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 360k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 360k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 360k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   360k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   360k|        }
 5320|       |
 5321|   360k|        SCN_CLANG_POP
 5322|   360k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   889k|    {
 4809|   889k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   889k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   889k|{
 4741|   889k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   889k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   889k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.57k, False: 882k]
  ------------------
 4745|  7.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.57k|                                     "Invalid encoding in scanned string");
 4747|  7.57k|    }
 4748|   882k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   882k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   882k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   882k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  4.29k|    {
 5037|  4.29k|        auto it = read_source_impl(range, {specs});
 5038|  4.29k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 110]
  |  |  ------------------
  ------------------
 5039|  4.18k|            return unexpected(it.error());
 5040|  4.18k|        }
 5041|       |
 5042|    110|        return read_string_impl(range, *it, value);
 5043|  4.29k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    110|{
 4741|    110|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    110|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    110|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 110]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    110|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    110|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    110|    return SCN_MOVE(result);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    110|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|   360k|    {
 5266|   360k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   360k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   360k|        return read_impl(range, specs, value);
 5268|   360k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|   360k|    {
 5284|   360k|        SCN_CLANG_PUSH
 5285|   360k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   360k|        switch (m_type) {
 5288|   355k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 355k, False: 4.29k]
  ------------------
 5289|   355k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 360k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 360k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.29k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.29k, False: 355k]
  ------------------
 5299|  4.29k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.29k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 360k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 360k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 360k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   360k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   360k|        }
 5320|       |
 5321|   360k|        SCN_CLANG_POP
 5322|   360k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   889k|    {
 4809|   889k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   889k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   889k|{
 4741|   889k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   889k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   889k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.57k, False: 882k]
  ------------------
 4745|  7.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.57k|                                     "Invalid encoding in scanned string");
 4747|  7.57k|    }
 4748|   882k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   882k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   882k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   882k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   882k|{
 3001|   882k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   882k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   882k|    return {};
 3009|   882k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  4.29k|    {
 5037|  4.29k|        auto it = read_source_impl(range, {specs});
 5038|  4.29k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 110]
  |  |  ------------------
  ------------------
 5039|  4.18k|            return unexpected(it.error());
 5040|  4.18k|        }
 5041|       |
 5042|    110|        return read_string_impl(range, *it, value);
 5043|  4.29k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    110|{
 4741|    110|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    110|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    110|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 110]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    110|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    110|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    110|    return SCN_MOVE(result);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    110|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|   901k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   901k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   901k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   901k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|   360k|    {
 5266|   360k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   360k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   360k|        return read_impl(range, specs, value);
 5268|   360k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|   360k|    {
 5284|   360k|        SCN_CLANG_PUSH
 5285|   360k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   360k|        switch (m_type) {
 5288|   355k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 355k, False: 4.29k]
  ------------------
 5289|   355k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 360k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 360k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.29k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.29k, False: 355k]
  ------------------
 5299|  4.29k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.29k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 360k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 360k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 360k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   360k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   360k|        }
 5320|       |
 5321|   360k|        SCN_CLANG_POP
 5322|   360k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   889k|    {
 4816|   889k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   889k|                                     value);
 4818|   889k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   889k|{
 4762|   889k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   889k|    auto src = [&]() {
 4765|   889k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   889k|            return make_contiguous_buffer(
 4767|   889k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   889k|        }
 4769|   889k|        else {
 4770|   889k|            return make_contiguous_buffer(
 4771|   889k|                ranges::subrange{range.begin(), result});
 4772|   889k|        }
 4773|   889k|    }();
 4774|   889k|    using src_type = decltype(src);
 4775|       |
 4776|   889k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   889k|    else {
 4789|   889k|        const auto view = src.view();
 4790|   889k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   889k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 7.57k, False: 882k]
  ------------------
 4793|  7.57k|            return unexpected_scan_error(
 4794|  7.57k|                scan_error::invalid_scanned_value,
 4795|  7.57k|                "Invalid encoding in scanned string_view");
 4796|  7.57k|        }
 4797|       |
 4798|   882k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   882k|    static_cast<    \
  |  |  929|   882k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   889k|    }
 4800|   889k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   889k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   889k|        else {
 4770|   889k|            return make_contiguous_buffer(
 4771|   889k|                ranges::subrange{range.begin(), result});
 4772|   889k|        }
 4773|   889k|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  4.29k|    {
 5051|  4.29k|        auto it = read_source_impl(range, {specs});
 5052|  4.29k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 110]
  |  |  ------------------
  ------------------
 5053|  4.18k|            return unexpected(it.error());
 5054|  4.18k|        }
 5055|       |
 5056|    110|        return read_string_view_impl(range, *it, value);
 5057|  4.29k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    110|{
 4762|    110|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    110|    auto src = [&]() {
 4765|    110|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    110|            return make_contiguous_buffer(
 4767|    110|                ranges::subrange{range.begin().base(), result.base()});
 4768|    110|        }
 4769|    110|        else {
 4770|    110|            return make_contiguous_buffer(
 4771|    110|                ranges::subrange{range.begin(), result});
 4772|    110|        }
 4773|    110|    }();
 4774|    110|    using src_type = decltype(src);
 4775|       |
 4776|    110|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    110|    else {
 4789|    110|        const auto view = src.view();
 4790|    110|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    110|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 110]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    110|        return SCN_MOVE(result);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    110|    }
 4800|    110|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    110|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    110|        else {
 4770|    110|            return make_contiguous_buffer(
 4771|    110|                ranges::subrange{range.begin(), result});
 4772|    110|        }
 4773|    110|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   891k|{
 2940|   891k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 891k, False: 0]
  ------------------
 2941|   891k|        auto it = read_while_classic_space(range);
 2942|   891k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   891k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 889k]
  |  |  ------------------
  ------------------
 2944|  1.44k|            return unexpected(e);
 2945|  1.44k|        }
 2946|       |
 2947|   889k|        return it;
 2948|   891k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   891k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   891k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   891k|    else {
 2114|   891k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   891k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   891k|            return detail::is_cp_space(cp);
 2127|   891k|        });
 2128|   891k|    }
 2129|   891k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   891k|        : m_fptr([](storage fn,
  743|   891k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   891k|              cvref<T> obj = *get<T>(fn);
  745|   891k|              if constexpr (std::is_void_v<R>) {
  746|   891k|                  obj(static_cast<decltype(args)>(args)...);
  747|   891k|              }
  748|   891k|              else {
  749|   891k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   891k|              }
  751|   891k|          }),
  752|   891k|          m_storage(std::addressof(f))
  753|   891k|    {
  754|   891k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.04M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.04M|              else {
  749|  2.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.04M|              }
  751|  2.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.04M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.04M|        else if constexpr (std::is_object_v<T>) {
  688|  2.04M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.04M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  2.04M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.04M|            return detail::is_cp_space(cp);
 2127|  2.04M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   891k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   891k|        {
  662|   891k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   140k|{
 5784|   140k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 139k]
  |  |  ------------------
  ------------------
 5785|  1.48k|        return unexpected(e);
 5786|  1.48k|    }
 5787|       |
 5788|   139k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 139k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   139k|    return skip_classic_whitespace(range);
 5793|   139k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  70.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  70.3k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  70.3k|            auto rd = make_reader<T, char_type>();
 5865|  70.3k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  70.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|  70.3k|    {
 5852|  70.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  70.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.12k, False: 69.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.12k|    }                                                  \
  |  |  |  | 3667|  70.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  69.2k|                        .transform_error(make_eof_scan_error));
 5854|  69.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  70.3k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|  69.2k|    {
 5255|  69.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  69.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  69.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  70.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  70.3k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  70.3k|            auto rd = make_reader<T, char_type>();
 5865|  70.3k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  70.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|  70.3k|    {
 5852|  70.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  70.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.12k, False: 69.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.12k|    }                                                  \
  |  |  |  | 3667|  70.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  69.2k|                        .transform_error(make_eof_scan_error));
 5854|  69.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  70.3k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|  69.2k|    {
 5255|  69.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  69.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  69.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  88.4k|{
 5784|  88.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 879, False: 87.6k]
  |  |  ------------------
  ------------------
 5785|    879|        return unexpected(e);
 5786|    879|    }
 5787|       |
 5788|  87.6k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 87.6k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  87.6k|    return skip_classic_whitespace(range);
 5793|  87.6k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  88.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  88.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  88.4k|            auto rd = make_reader<T, char_type>();
 5869|  88.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 88.4k, False: 0]
  ------------------
 5870|  88.4k|                return impl(rd, range, value);
 5871|  88.4k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  88.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|  88.4k|    {
 5852|  88.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 87.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.38k|    }                                                  \
  |  |  |  | 3667|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  87.1k|                        .transform_error(make_eof_scan_error));
 5854|  87.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  88.4k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|  87.1k|    {
 5255|  87.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  87.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  87.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  87.1k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   112k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   112k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   112k|          m_current(m_range.begin())
 2867|   112k|    {
 2868|   112k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   307k|    {
 2872|   307k|        return m_current;
 2873|   307k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   195k|    {
 2877|   195k|        return m_range.end();
 2878|   195k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  91.3k|    {
 2892|  91.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  91.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  91.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  91.3k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 91.3k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  91.3k|        }
 2898|  91.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  91.3k|    static_cast<    \
  |  |  929|  91.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  91.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   103k|    {
 2882|   103k|        return ranges::subrange{begin(), end()};
 2883|   103k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  99.7k|    {
 6026|  99.7k|        const bool need_skipped_width =
 6027|  99.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 99.7k]
  |  Branch (6027:33): [True: 0, False: 99.7k]
  ------------------
 6028|  99.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  99.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 99.7k]
  ------------------
 6032|  99.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 99.7k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  99.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 99.7k, False: 0]
  |  Branch (6036:56): [True: 93.8k, False: 5.88k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  93.8k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 93.8k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   186k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  93.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  93.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  93.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.50k|    }                                                  \
  |  |  |  | 3667|  93.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   186k|                            make_eof_scan_error));
 6047|       |
 6048|   186k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 92.3k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  92.3k|            return result_type{it, 0};
 6056|   186k|        }
 6057|       |
 6058|  5.88k|        return result_type{rng.begin(), 0};
 6059|  99.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  90.2k|    {
 6068|  90.2k|        const bool need_skipped_width =
 6069|  90.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 90.2k]
  |  Branch (6069:33): [True: 0, False: 90.2k]
  ------------------
 6070|  90.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  90.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 90.2k]
  ------------------
 6073|  90.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 90.2k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  90.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 90.2k, False: 0]
  ------------------
 6082|  90.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.63k, False: 88.6k]
  ------------------
 6083|  90.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 1.63k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  1.63k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 1.63k]
  ------------------
 6085|  1.63k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  90.2k|        return result_type{rng.begin(), 0};
 6107|  90.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  51.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  51.9k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  51.9k|            auto rd = make_reader<T, char_type>();
 6187|  51.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 49.8k]
  |  |  ------------------
  ------------------
 6188|  2.09k|                return unexpected(e);
 6189|  2.09k|            }
 6190|       |
 6191|  49.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  49.8k|    {
 6113|  49.8k|        const bool need_skipped_width =
 6114|  49.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 49.8k]
  |  Branch (6114:33): [True: 0, False: 49.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  49.8k|        auto it = rng.begin();
 6118|  49.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  49.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 49.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  49.8k|        else {
 6127|  49.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  49.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 752, False: 49.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    752|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    752|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    752|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    752|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    752|    }                                                  \
  |  |  |  | 3667|  49.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  49.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  49.0k|        }
 6130|  49.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  49.0k|        std::ptrdiff_t value_width = 0;
 6134|  49.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 49.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  49.0k|        else {
 6150|  49.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.42k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.42k|    }                                                  \
  |  | 3667|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.6k|                                             specs, value, loc));
 6152|       |
 6153|  45.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.1k, False: 532]
  ------------------
 6163|  45.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.1k|                                 value_width));
 6167|  45.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.1k|        }
 6169|       |
 6170|  45.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.6k|                                                 value_width, postfix_width);
 6172|  45.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.6k|        return it;
 6177|  45.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  51.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  51.9k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  51.9k|            auto rd = make_reader<T, char_type>();
 6187|  51.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 49.8k]
  |  |  ------------------
  ------------------
 6188|  2.09k|                return unexpected(e);
 6189|  2.09k|            }
 6190|       |
 6191|  49.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  49.8k|    {
 6113|  49.8k|        const bool need_skipped_width =
 6114|  49.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 49.8k]
  |  Branch (6114:33): [True: 0, False: 49.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  49.8k|        auto it = rng.begin();
 6118|  49.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  49.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 49.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  49.8k|        else {
 6127|  49.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  49.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 752, False: 49.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    752|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    752|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    752|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    752|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    752|    }                                                  \
  |  |  |  | 3667|  49.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  49.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  49.0k|        }
 6130|  49.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  49.0k|        std::ptrdiff_t value_width = 0;
 6134|  49.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 49.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  49.0k|        else {
 6150|  49.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.42k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.42k|    }                                                  \
  |  | 3667|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.6k|                                             specs, value, loc));
 6152|       |
 6153|  45.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.1k, False: 532]
  ------------------
 6163|  45.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.1k|                                 value_width));
 6167|  45.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.1k|        }
 6169|       |
 6170|  45.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.6k|                                                 value_width, postfix_width);
 6172|  45.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.6k|        return it;
 6177|  45.6k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  1.07M|{
 5784|  1.07M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 1.06M]
  |  |  ------------------
  ------------------
 5785|  2.88k|        return unexpected(e);
 5786|  2.88k|    }
 5787|       |
 5788|  1.06M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 1.06M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  1.06M|    return skip_classic_whitespace(range);
 5793|  1.06M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   535k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   535k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   535k|            auto rd = make_reader<T, char_type>();
 5865|   535k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   535k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|   535k|    {
 5852|   535k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 533k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.72k|    }                                                  \
  |  |  |  | 3667|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   533k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   533k|                        .transform_error(make_eof_scan_error));
 5854|   533k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   535k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|   533k|    {
 5255|   533k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   533k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   533k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   533k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   535k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   535k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   535k|            auto rd = make_reader<T, char_type>();
 5865|   535k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   535k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|   535k|    {
 5852|   535k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 533k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.72k|    }                                                  \
  |  |  |  | 3667|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   533k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   533k|                        .transform_error(make_eof_scan_error));
 5854|   533k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   535k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|   533k|    {
 5255|   533k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   533k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   533k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   533k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   747k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   747k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   747k|          m_current(m_range.begin())
 2867|   747k|    {
 2868|   747k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  2.18M|    {
 2872|  2.18M|        return m_current;
 2873|  2.18M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.43M|    {
 2877|  1.43M|        return m_range.end();
 2878|  1.43M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   705k|    {
 2892|   705k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   705k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   705k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 705k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   705k|        }
 2898|   705k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   705k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   730k|    {
 2882|   730k|        return ranges::subrange{begin(), end()};
 2883|   730k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   722k|    {
 6026|   722k|        const bool need_skipped_width =
 6027|   722k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 722k]
  |  Branch (6027:33): [True: 0, False: 722k]
  ------------------
 6028|   722k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   722k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 722k]
  ------------------
 6032|   722k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 722k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   722k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 722k, False: 0]
  |  Branch (6036:56): [True: 714k, False: 8.58k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   714k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 714k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.42M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   714k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   714k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   714k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   714k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.30k, False: 711k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.30k|    }                                                  \
  |  |  |  | 3667|   714k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.42M|                            make_eof_scan_error));
 6047|       |
 6048|  1.42M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 711k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   711k|            return result_type{it, 0};
 6056|  1.42M|        }
 6057|       |
 6058|  8.58k|        return result_type{rng.begin(), 0};
 6059|   722k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   703k|    {
 6068|   703k|        const bool need_skipped_width =
 6069|   703k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 703k]
  |  Branch (6069:33): [True: 0, False: 703k]
  ------------------
 6070|   703k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   703k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 703k]
  ------------------
 6073|   703k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 703k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   703k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 703k, False: 0]
  ------------------
 6082|   703k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 168, False: 703k]
  ------------------
 6083|   703k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 168]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    168|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 168]
  ------------------
 6085|    168|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   703k|        return result_type{rng.begin(), 0};
 6107|   703k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   365k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   365k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   365k|            auto rd = make_reader<T, char_type>();
 6187|   365k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 361k]
  |  |  ------------------
  ------------------
 6188|  4.18k|                return unexpected(e);
 6189|  4.18k|            }
 6190|       |
 6191|   361k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   365k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|   361k|    {
 6113|   361k|        const bool need_skipped_width =
 6114|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 361k]
  |  Branch (6114:33): [True: 0, False: 361k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   361k|        auto it = rng.begin();
 6118|   361k|        std::ptrdiff_t prefix_width = 0;
 6119|   361k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 361k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   361k|        else {
 6127|   361k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.15k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   360k|            std::tie(it, prefix_width) = prefix_result;
 6129|   360k|        }
 6130|   360k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   360k|        std::ptrdiff_t value_width = 0;
 6134|   360k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 360k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   360k|        else {
 6150|   360k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.20k, False: 352k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.20k|    }                                                  \
  |  | 3667|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   352k|                                             specs, value, loc));
 6152|       |
 6153|   352k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 352k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   352k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   352k|        std::ptrdiff_t postfix_width = 0;
 6162|   352k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 351k, False: 986]
  ------------------
 6163|   351k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   351k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   351k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   351k|                                 value_width));
 6167|   351k|            std::tie(it, postfix_width) = postfix_result;
 6168|   351k|        }
 6169|       |
 6170|   352k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   352k|                                                 value_width, postfix_width);
 6172|   352k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 352k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   352k|        return it;
 6177|   352k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   365k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   365k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   365k|            auto rd = make_reader<T, char_type>();
 6187|   365k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.18k, False: 361k]
  |  |  ------------------
  ------------------
 6188|  4.18k|                return unexpected(e);
 6189|  4.18k|            }
 6190|       |
 6191|   361k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   365k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|   361k|    {
 6113|   361k|        const bool need_skipped_width =
 6114|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 361k]
  |  Branch (6114:33): [True: 0, False: 361k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   361k|        auto it = rng.begin();
 6118|   361k|        std::ptrdiff_t prefix_width = 0;
 6119|   361k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 361k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   361k|        else {
 6127|   361k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.15k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   360k|            std::tie(it, prefix_width) = prefix_result;
 6129|   360k|        }
 6130|   360k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   360k|        std::ptrdiff_t value_width = 0;
 6134|   360k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 360k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   360k|        else {
 6150|   360k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.20k, False: 352k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.20k|    }                                                  \
  |  | 3667|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   352k|                                             specs, value, loc));
 6152|       |
 6153|   352k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 352k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   352k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   352k|        std::ptrdiff_t postfix_width = 0;
 6162|   352k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 351k, False: 986]
  ------------------
 6163|   351k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   351k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   351k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   351k|                                 value_width));
 6167|   351k|            std::tie(it, postfix_width) = postfix_result;
 6168|   351k|        }
 6169|       |
 6170|   352k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   352k|                                                 value_width, postfix_width);
 6172|   352k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 352k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   352k|        return it;
 6177|   352k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   535k|{
 5784|   535k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 534k]
  |  |  ------------------
  ------------------
 5785|  1.44k|        return unexpected(e);
 5786|  1.44k|    }
 5787|       |
 5788|   534k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 534k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   534k|    return skip_classic_whitespace(range);
 5793|   534k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|   535k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   535k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   535k|            auto rd = make_reader<T, char_type>();
 5869|   535k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 535k, False: 0]
  ------------------
 5870|   535k|                return impl(rd, range, value);
 5871|   535k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   535k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|   535k|    {
 5852|   535k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 533k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.72k|    }                                                  \
  |  |  |  | 3667|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   533k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   533k|                        .transform_error(make_eof_scan_error));
 5854|   533k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   535k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|   533k|    {
 5255|   533k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   533k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   533k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   533k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.04k|{
   52|  1.04k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.04k|    string_buffer.resize(size);
   56|  1.04k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.04k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.04k|    const auto wsv_reinterpret_size =
   61|  1.04k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 216, False: 829]
  ------------------
   62|  1.04k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.04k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.04k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.04k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.04k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.04k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.04k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.04k|{
  122|  1.04k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.04k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.04k|    buf.resize(sizeof...(Args));
  125|  1.04k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.04k|    return buf;
  127|  1.04k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.04k|{
  108|  1.04k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  1.04k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  1.04k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.04k|{
  185|  1.04k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.04k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.04k|                                   format_strings);
  188|  1.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.04k|{
  133|       |    // Regular scan
  134|  6.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.27k, False: 1.04k]
  ------------------
  135|  6.27k|        auto it = scn::ranges::begin(source);
  136|  51.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  51.5k|            auto result = scn::scan<T>(
  139|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  51.5k|                scn::runtime_format(f));
  141|  51.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.27k, False: 45.2k]
  ------------------
  142|  6.27k|                break;
  143|  6.27k|            }
  144|  45.2k|            it = result->begin();
  145|  45.2k|        }
  146|  6.27k|    }
  147|       |
  148|       |    // scan localized
  149|  6.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.27k, False: 1.04k]
  ------------------
  150|  6.27k|        auto it = scn::ranges::begin(source);
  151|  51.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  51.5k|            auto result = scn::scan<T>(
  154|  51.5k|                global_locale,
  155|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  51.5k|                scn::runtime_format(f));
  157|  51.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.27k, False: 45.2k]
  ------------------
  158|  6.27k|                break;
  159|  6.27k|            }
  160|  45.2k|            it = result->begin();
  161|  45.2k|        }
  162|  6.27k|    }
  163|       |
  164|       |    // scan_value
  165|  1.04k|    {
  166|  1.04k|        auto it = scn::ranges::begin(source);
  167|  23.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.4k|            auto result = scn::scan_value<T>(
  170|  23.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.04k, False: 22.4k]
  ------------------
  172|  1.04k|                break;
  173|  1.04k|            }
  174|  22.4k|            it = result->begin();
  175|  22.4k|        }
  176|  1.04k|    }
  177|  1.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.04k|{
  133|       |    // Regular scan
  134|  6.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.27k, False: 1.04k]
  ------------------
  135|  6.27k|        auto it = scn::ranges::begin(source);
  136|  51.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  51.5k|            auto result = scn::scan<T>(
  139|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  51.5k|                scn::runtime_format(f));
  141|  51.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.27k, False: 45.2k]
  ------------------
  142|  6.27k|                break;
  143|  6.27k|            }
  144|  45.2k|            it = result->begin();
  145|  45.2k|        }
  146|  6.27k|    }
  147|       |
  148|       |    // scan localized
  149|  6.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.27k, False: 1.04k]
  ------------------
  150|  6.27k|        auto it = scn::ranges::begin(source);
  151|  51.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  51.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  51.5k|            auto result = scn::scan<T>(
  154|  51.5k|                global_locale,
  155|  51.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  51.5k|                scn::runtime_format(f));
  157|  51.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.27k, False: 45.2k]
  ------------------
  158|  6.27k|                break;
  159|  6.27k|            }
  160|  45.2k|            it = result->begin();
  161|  45.2k|        }
  162|  6.27k|    }
  163|       |
  164|       |    // scan_value
  165|  1.04k|    {
  166|  1.04k|        auto it = scn::ranges::begin(source);
  167|  23.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.4k|            auto result = scn::scan_value<T>(
  170|  23.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.04k, False: 22.4k]
  ------------------
  172|  1.04k|                break;
  173|  1.04k|            }
  174|  22.4k|            it = result->begin();
  175|  22.4k|        }
  176|  1.04k|    }
  177|  1.04k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.04k|{
  133|       |    // Regular scan
  134|  6.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.27k, False: 1.04k]
  ------------------
  135|  6.27k|        auto it = scn::ranges::begin(source);
  136|  63.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  63.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  63.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  63.9k|            auto result = scn::scan<T>(
  139|  63.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  63.9k|                scn::runtime_format(f));
  141|  63.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.27k, False: 57.6k]
  ------------------
  142|  6.27k|                break;
  143|  6.27k|            }
  144|  57.6k|            it = result->begin();
  145|  57.6k|        }
  146|  6.27k|    }
  147|       |
  148|       |    // scan localized
  149|  6.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.27k, False: 1.04k]
  ------------------
  150|  6.27k|        auto it = scn::ranges::begin(source);
  151|  63.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  63.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  63.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  63.9k|            auto result = scn::scan<T>(
  154|  63.9k|                global_locale,
  155|  63.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  63.9k|                scn::runtime_format(f));
  157|  63.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.27k, False: 57.6k]
  ------------------
  158|  6.27k|                break;
  159|  6.27k|            }
  160|  57.6k|            it = result->begin();
  161|  57.6k|        }
  162|  6.27k|    }
  163|       |
  164|       |    // scan_value
  165|  1.04k|    {
  166|  1.04k|        auto it = scn::ranges::begin(source);
  167|  29.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  29.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.4k|            auto result = scn::scan_value<T>(
  170|  29.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.04k, False: 28.4k]
  ------------------
  172|  1.04k|                break;
  173|  1.04k|            }
  174|  28.4k|            it = result->begin();
  175|  28.4k|        }
  176|  1.04k|    }
  177|  1.04k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.04k|{
   90|  1.04k|    using char_type = ranges::range_value_t<Source>;
   91|  1.04k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.04k|    deque.clear();
   93|  1.04k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.04k|              std::back_inserter(deque));
   95|  1.04k|    return deque;
   96|  1.04k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.04k|{
   79|  1.04k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  1.04k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  1.04k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.04k|{
  122|  1.04k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.04k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.04k|    buf.resize(sizeof...(Args));
  125|  1.04k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.04k|    return buf;
  127|  1.04k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.04k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  1.04k|    else {
  112|  1.04k|        return wformat_string_view_buffer;
  113|  1.04k|    }
  114|  1.04k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.09k|{
  185|  2.09k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.09k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.09k|                                   format_strings);
  188|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   365k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   365k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   365k|            auto result = scn::scan<T>(
  139|   365k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   365k|                scn::runtime_format(f));
  141|   365k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 352k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   352k|            it = result->begin();
  145|   352k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   365k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   365k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   365k|            auto result = scn::scan<T>(
  154|   365k|                global_locale,
  155|   365k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   365k|                scn::runtime_format(f));
  157|   365k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 352k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   352k|            it = result->begin();
  161|   352k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|   178k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   178k|            auto result = scn::scan_value<T>(
  170|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   178k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 176k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|   176k|            it = result->begin();
  175|   176k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   365k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   365k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   365k|            auto result = scn::scan<T>(
  139|   365k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   365k|                scn::runtime_format(f));
  141|   365k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 352k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   352k|            it = result->begin();
  145|   352k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   365k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   365k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   365k|            auto result = scn::scan<T>(
  154|   365k|                global_locale,
  155|   365k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   365k|                scn::runtime_format(f));
  157|   365k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 352k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   352k|            it = result->begin();
  161|   352k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|   178k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   178k|            auto result = scn::scan_value<T>(
  170|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   178k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 176k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|   176k|            it = result->begin();
  175|   176k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   365k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   365k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   365k|            auto result = scn::scan<T>(
  139|   365k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   365k|                scn::runtime_format(f));
  141|   365k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 352k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   352k|            it = result->begin();
  145|   352k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   365k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   365k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   365k|            auto result = scn::scan<T>(
  154|   365k|                global_locale,
  155|   365k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   365k|                scn::runtime_format(f));
  157|   365k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 352k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   352k|            it = result->begin();
  161|   352k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|   178k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   178k|            auto result = scn::scan_value<T>(
  170|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   178k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 176k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|   176k|            it = result->begin();
  175|   176k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.09k|{
   90|  2.09k|    using char_type = ranges::range_value_t<Source>;
   91|  2.09k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.09k|    deque.clear();
   93|  2.09k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.09k|              std::back_inserter(deque));
   95|  2.09k|    return deque;
   96|  2.09k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.09k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  2.09k|    else {
   83|  2.09k|        return wnoncontiguous_buffer;
   84|  2.09k|    }
   85|  2.09k|}

LLVMFuzzerTestOneInput:
   57|  1.04k|{
   58|  1.04k|    scn::fuzz::run(data, size);
   59|  1.04k|    return 0;
   60|  1.04k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.04k|{
   36|  1.04k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.04k]
  |  Branch (36:35): [True: 0, False: 1.04k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.04k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.04k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.04k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.04k|    do_basic_run(sv, f);
   45|       |
   46|  1.04k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.04k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.04k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.04k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.04k, False: 0]
  ------------------
   50|  1.04k|        do_basic_run(wsv_transcode, wf);
   51|  1.04k|    }
   52|  1.04k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.04k|{
   25|  1.04k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.04k|                                                           format_strings);
   27|  1.04k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.04k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.04k|            source, format_strings);
   30|  1.04k|    }
   31|  1.04k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.04k|{
   25|  1.04k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.04k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.04k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.09k|{
   25|  2.09k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.09k|                                                           format_strings);
   27|  2.09k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.09k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.09k|            source, format_strings);
   30|  2.09k|    }
   31|  2.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.09k|{
   25|  2.09k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.09k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.09k|}

