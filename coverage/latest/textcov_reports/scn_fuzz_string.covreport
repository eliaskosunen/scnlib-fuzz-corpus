_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  4.30M|{
 4068|  4.30M|    if constexpr (sizeof(U) == 1) {
 4069|  4.30M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  4.30M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  4.30M|{
 4032|  4.30M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  4.30M|    SCN_GCC_COMPAT_PUSH
 4035|  4.30M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  4.30M|    constexpr char lengths[] =
 4037|  4.30M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  4.30M|        "\1\1\1\1\1\1\1\1"
 4039|  4.30M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  4.30M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  4.30M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  4.30M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  4.30M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  4.30M|    SCN_GCC_COMPAT_POP
 4046|  4.30M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  4.11M|{
 4274|  4.11M|    if constexpr (sizeof(CharT) == 1) {
 4275|  4.11M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  4.11M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  4.11M|{
 4087|  4.11M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  4.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  4.11M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  4.11M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  4.11M|    };
 4092|       |
 4093|  4.11M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 3.71M, False: 397k]
  ------------------
 4094|  3.71M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 230, False: 3.71M]
  ------------------
 4095|    230|            SCN_UNLIKELY_ATTR
 4096|    230|            return invalid_code_point;
 4097|    230|        }
 4098|  3.71M|        return static_cast<char32_t>(input[0]);
 4099|  3.71M|    }
 4100|       |
 4101|   397k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 135k, False: 262k]
  ------------------
 4102|   135k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 181, False: 135k]
  ------------------
 4103|    181|            SCN_UNLIKELY_ATTR
 4104|    181|            return invalid_code_point;
 4105|    181|        }
 4106|   135k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 10.1k, False: 125k]
  ------------------
 4107|  10.1k|            SCN_UNLIKELY_ATTR
 4108|  10.1k|            return invalid_code_point;
 4109|  10.1k|        }
 4110|       |
 4111|   125k|        char32_t cp{};
 4112|   125k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   125k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   125k|        return cp;
 4115|   135k|    }
 4116|       |
 4117|   262k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 246k, False: 16.0k]
  ------------------
 4118|   246k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 25, False: 245k]
  ------------------
 4119|     25|            SCN_UNLIKELY_ATTR
 4120|     25|            return invalid_code_point;
 4121|     25|        }
 4122|   245k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 2.70k, False: 243k]
  ------------------
 4123|   245k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 1.07k, False: 242k]
  ------------------
 4124|  3.78k|            SCN_UNLIKELY_ATTR
 4125|  3.78k|            return invalid_code_point;
 4126|  3.78k|        }
 4127|       |
 4128|   242k|        char32_t cp{};
 4129|   242k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   242k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   242k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   242k|        return cp;
 4133|   245k|    }
 4134|       |
 4135|  16.0k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 16.0k, False: 0]
  ------------------
 4136|  16.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 16.0k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  16.0k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 8.95k, False: 7.07k]
  ------------------
 4141|  8.95k|            SCN_UNLIKELY_ATTR
 4142|  8.95k|            return invalid_code_point;
 4143|  8.95k|        }
 4144|  7.07k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 2.80k, False: 4.26k]
  ------------------
 4145|  7.07k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 132, False: 4.13k]
  ------------------
 4146|  7.07k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 94, False: 4.04k]
  ------------------
 4147|  3.03k|            SCN_UNLIKELY_ATTR
 4148|  3.03k|            return invalid_code_point;
 4149|  3.03k|        }
 4150|       |
 4151|  4.04k|        char32_t cp{};
 4152|  4.04k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  4.04k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  4.04k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  4.04k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  4.04k|        return cp;
 4157|  7.07k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   640k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   640k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   640k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  3.63M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  3.63M|    else {
 3966|  3.63M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  3.63M|                                       to_address(first), to_address(last)))};
 3968|  3.63M|    }
 3969|  3.63M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  11.2M|{
  316|  11.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  11.2M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  12.5M|{
  294|  12.5M|    return p;
  295|  12.5M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.72M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.72M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.72M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.72M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.72M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  23.8k|    {
 2869|  23.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  23.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  23.8k|    {
 2850|  23.8k|        return decay_copy(t.begin());
 2851|  23.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  2.07M|{
 2094|  2.07M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.07M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   439k|    {
 2926|   439k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   439k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   439k|    {
 2908|   439k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   439k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  44.6k|{
 9681|  44.6k|    auto result = make_scan_result<Source, Args...>();
 9682|  44.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  44.6k|                                   make_scan_args(result->values())));
 9684|  44.6k|    return result;
 9685|  44.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9636|   109k|{
 9637|   109k|    return scan_result_type<Source, Args...>();
 9638|   109k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   109k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   109k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   109k|    {
  613|   109k|        construct();
  614|   109k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   109k|    {
  694|   109k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   109k|        m_has_value = true;
  696|   109k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   109k|{
  396|   109k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   109k|        T(std::forward<Args>(args)...);
  398|   109k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|   109k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|   219k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   219k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6344|   241k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   525k|    {
  718|   525k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   525k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   525k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|   109k|{
 9622|   109k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.5k, False: 98.2k]
  |  |  ------------------
  ------------------
 9623|  11.5k|        out = unexpected(in.error());
 9624|  11.5k|    }
 9625|  98.2k|    else {
 9626|  98.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  98.2k|    static_cast<    \
  |  |  935|  98.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  98.2k|    }
 9628|   109k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   219k|    {
 1740|   219k|        return has_value();
 1741|   219k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   438k|    {
  490|   438k|        return m_has_value;
  491|   438k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  23.0k|    {
 1746|  23.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.0k|        return this->get_unexpected().error();
 1748|  23.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.0k|    {
  473|  23.0k|        return m_unexpected;
  474|  23.0k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|   991k|    {
  365|   991k|        return m_unexpected;
  366|   991k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   433k|        : m_unexpected(std::forward<Err>(e))
  350|   433k|    {
  351|   433k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   433k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   433k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.5k|        : base(unexpect, std::move(e.error())),
 1616|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.5k|    {
 1618|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.5k|        : m_has_value(false)
  637|  11.5k|    {
  638|  11.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  11.5k|    {
  701|  11.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.5k|                                  std::forward<Args>(args)...);
  703|  11.5k|        m_has_value = false;
  704|  11.5k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  69.0k|{
  396|  69.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  69.0k|        T(std::forward<Args>(args)...);
  398|  69.0k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   569k|        : m_unexpected(std::forward<Args>(args)...)
  359|   569k|    {
  360|   569k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   569k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   569k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  57.5k|    {
  730|  57.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  57.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  57.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  57.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.5k|    {
 1316|  11.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.5k|    {
  903|  11.5k|        assign_common(std::move(other));
  904|  11.5k|        return *this;
  905|  11.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.5k|    {
  950|  11.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.5k, False: 0]
  ------------------
  951|  11.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   560k|    {
  687|   560k|        return m_has_value;
  688|   560k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   306k|    {
  653|   306k|        return *value_ptr();
  654|   306k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.5k|    {
 1046|  11.5k|        this->destroy_value();
 1047|  11.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   109k|    {
  708|   109k|        scn::detail::destroy_at(value_ptr());
  709|   109k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   109k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   109k|    else {
  408|   109k|        p->~T();
  409|   109k|    }
  410|   109k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|   109k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.5k|    {
  701|  11.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.5k|                                  std::forward<Args>(args)...);
  703|  11.5k|        m_has_value = false;
  704|  11.5k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   103k|{
  396|   103k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   103k|        T(std::forward<Args>(args)...);
  398|   103k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.5k|    {
  678|  11.5k|        return std::move(*unexpected_ptr());
  679|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.0k|    {
  712|  23.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.0k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   138k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   138k|    else {
  408|   138k|        p->~T();
  409|   138k|    }
  410|   138k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   196k|    {
 6445|   196k|        m_range = std::forward<Other>(r);
 6446|   196k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   196k|    {
 1795|   196k|        return value();
 1796|   196k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   196k|    {
 1769|   196k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   196k|        return this->get_value();
 1771|   196k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   196k|    {
  456|   196k|        return m_value;
  457|   196k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|  89.3k|{
 9461|  89.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  89.3k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  89.3k|{
 9398|  89.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  89.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  89.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 78.7k]
  |  |  ------------------
  ------------------
 9402|  10.6k|        return unexpected(result.error());
 9403|  10.6k|    }
 9404|  78.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  89.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   219k|{
 5381|   219k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   219k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   219k|                  "\n"
 5385|   219k|                  "Unsupported range type given as input to a scanning "
 5386|   219k|                  "function.\n"
 5387|   219k|                  "A range needs to have a character type (value type) "
 5388|   219k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   219k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   219k|                  "to be included.\n"
 5391|   219k|                  "See the scnlib documentation for more details.");
 5392|   219k|    static_assert(
 5393|   219k|        !std::is_same_v<T, custom_char_traits>,
 5394|   219k|        "\n"
 5395|   219k|        "Unsupported range type given as input to a scanning "
 5396|   219k|        "function.\n"
 5397|   219k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   219k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   219k|        "not supported.");
 5400|   219k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   219k|                  "\n"
 5402|   219k|                  "Unsupported range type given as input to a scanning "
 5403|   219k|                  "function.\n"
 5404|   219k|                  "file_marker_found cannot be used as an "
 5405|   219k|                  "source range type to scn::scan.\n"
 5406|   219k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   219k|                  "and do not provide an explicit source range, "
 5408|   219k|                  "or use scn::scan with a FILE* directly.");
 5409|   219k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   219k|                  "\n"
 5411|   219k|                  "Unsupported range type given as input to a scanning "
 5412|   219k|                  "function.\n"
 5413|   219k|                  "In order to be scannable, a range needs to satisfy "
 5414|   219k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   219k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   219k|                  "\n"
 5417|   219k|                  "Unsupported range type given as input to a scanning "
 5418|   219k|                  "function.\n"
 5419|   219k|                  "A range needs to model forward_range and have a valid "
 5420|   219k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   219k|                  "Examples of scannable ranges are std::string, "
 5422|   219k|                  "std::string_view, "
 5423|   219k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   219k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   219k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   219k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   219k|{
 5320|   219k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   219k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   219k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   219k|    {
 3000|   219k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   219k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   219k|    {
 2981|   219k|        return t.data();
 2982|   219k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   219k|    {
 3383|   219k|        return detail::to_address(ranges::begin(derived()));
 3384|   219k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.26M|{
  316|  1.26M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.26M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   415k|    {
 2869|   415k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   415k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   415k|    {
 2850|   415k|        return decay_copy(t.begin());
 2851|   415k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  2.61M|    {
 3480|  2.61M|        return m_iterator;
 3481|  2.61M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   219k|    {
 3339|   219k|        return static_cast<const D&>(*this);
 3340|   219k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   219k|    {
 3075|   219k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   219k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   219k|    {
 3041|   219k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   219k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  2.18M|{
 2094|  2.18M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.18M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   922k|    {
 3496|   922k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   922k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  3.13M|    {
 1740|  3.13M|        return has_value();
 1741|  3.13M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.23M|    {
  490|  6.23M|        return m_has_value;
  491|  6.23M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   103k|    {
 1746|   103k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   103k|        return this->get_unexpected().error();
 1748|   103k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   103k|    {
  473|   103k|        return m_unexpected;
  474|   103k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  23.0k|        : base(unexpect, std::move(e.error())),
 1616|  23.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.0k|    {
 1618|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  23.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.0k|          m_has_value(false)
  451|  23.0k|    {
  452|  23.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   219k|    {
 1316|   219k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   196k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   196k|                      ranges::iterator_t<SourceRange>>) {
 6677|   196k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   196k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   996k|    {
 2869|   996k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   996k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   996k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   996k|    {
 2850|   996k|        return decay_copy(t.begin());
 2851|   996k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   196k|{
 6662|   196k|    return ranges::end(source);
 6663|   196k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   196k|    {
 2926|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   196k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   196k|    {
 2908|   196k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.26M|    {
 3484|  1.26M|        return m_sentinel;
 3485|  1.26M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  2.99M|    {
 1795|  2.99M|        return value();
 1796|  2.99M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  2.99M|    {
 1769|  2.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.99M|        return this->get_value();
 1771|  2.99M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.99M|    {
  456|  2.99M|        return m_value;
  457|  2.99M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   196k|        : base(std::in_place, std::forward<U>(val)),
 1570|   196k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   196k|    {
 1572|   196k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   196k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   196k|    {
  442|   196k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8767|  89.3k|    {
 8768|  89.3k|        return m_str;
 8769|  89.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|   196k|{
 6110|   196k|    detail::check_scan_arg_types<Args...>();
 6111|   196k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   196k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5824|   241k|{
 5825|   241k|    constexpr bool default_constructible_constraint =
 5826|   241k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   241k|    static_assert(default_constructible_constraint,
 5828|   241k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   241k|    constexpr bool destructible_constraint =
 5831|   241k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   241k|    static_assert(destructible_constraint,
 5833|   241k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   241k|    constexpr bool non_reference_constraint =
 5836|   241k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   241k|    static_assert(non_reference_constraint,
 5838|   241k|                  "Scan argument types must not be references");
 5839|       |
 5840|   241k|    constexpr bool movable_constraint =
 5841|   241k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   241k|    static_assert(movable_constraint,
 5843|   241k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   241k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   241k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   241k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|   196k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   196k|    {
 6087|   196k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|   196k|    {
 6095|   196k|        return {detail::make_arg<
 6096|   196k|            kind, Context,
 6097|   196k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   196k|                                 typename Context::char_type>::value>(args)...};
 6099|   196k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|   196k|{
 5875|   196k|    return make_value<Context>(value).ref_value;
 5876|   196k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|   241k|{
 5810|   241k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   241k|                                  needs_context_tag>) {
 5814|   241k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   241k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|   241k|    {                                                                        \
 5649|   241k|        return val;                                                          \
 5650|   241k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5778|   241k|{
 5779|   241k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   241k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   241k|    constexpr bool scannable_char =
 5783|   241k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   241k|    static_assert(scannable_char,
 5785|   241k|                  "Cannot scan an argument of an unsupported character "
 5786|   241k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   241k|    constexpr bool scannable_const =
 5789|   241k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   241k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   241k|    constexpr bool scannable_disabled =
 5793|   241k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   241k|    static_assert(scannable_disabled,
 5795|   241k|                  "Cannot scan an argument that has been disabled by "
 5796|   241k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   241k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   241k|    static_assert(
 5800|   241k|        scannable,
 5801|   241k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   241k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   241k|    return arg_value{arg};
 5805|   241k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5562|   241k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   241k|    {
 5564|   241k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6353|   196k|    {
 6354|   196k|        return m_values;
 6355|   196k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   196k|        : basic_scan_args(store.desc, store.args.data())
 6136|   196k|    {
 6137|   196k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|   285k|        : m_desc(desc), m_builtin_values(data)
 6188|   285k|    {
 6189|   285k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.51M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.51M|    static_cast<    \
  |  |  935|  1.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.51M|    static_cast<    \
  |  |  935|  1.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.51M|    {
 3466|  1.51M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   285k|{
 8441|   285k|    return s;
 8442|   285k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   285k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  89.3k|        : m_str(r.str)
 8763|  89.3k|    {
 8764|  89.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   109k|    {
 1740|   109k|        return has_value();
 1741|   109k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   306k|    {
 1815|   306k|        return &value();
 1816|   306k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   306k|    {
 1769|   306k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   306k|        return this->get_value();
 1771|   306k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   196k|    {
 6434|   196k|        return ranges::begin(m_range);
 6435|   196k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   121k|    {
  643|   121k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 98.2k, False: 23.0k]
  ------------------
  644|  98.2k|            destroy_value();
  645|  98.2k|        }
  646|  23.0k|        else {
  647|  23.0k|            destroy_unexpected();
  648|  23.0k|        }
  649|   121k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  44.6k|{
 9750|  44.6k|    auto result = make_scan_result<Source, Args...>();
 9751|  44.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  44.6k|                                   make_scan_args(result->values())));
 9753|  44.6k|    return result;
 9754|  44.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|  89.3k|{
 9479|  89.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  89.3k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  89.3k|{
 9414|  89.3k|#if !SCN_DISABLE_LOCALE
 9415|  89.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  89.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  89.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  89.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  89.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 78.7k]
  |  |  ------------------
  ------------------
 9422|  10.6k|        return unexpected(result.error());
 9423|  10.6k|    }
 9424|  78.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  89.3k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|  20.3k|{
 9791|  20.3k|    auto result = make_scan_result<Source, T>();
 9792|  20.3k|    fill_scan_result(
 9793|  20.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  20.3k|                            detail::make_arg<scan_context>(result->value())));
 9795|  20.3k|    return result;
 9796|  20.3k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  40.7k|{
 9492|  40.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  40.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  40.7k|{
 9438|  40.7k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  40.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  40.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 39.0k]
  |  |  ------------------
  ------------------
 9442|  1.77k|        return unexpected(result.error());
 9443|  1.77k|    }
 9444|  39.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  40.7k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|  45.1k|{
 5860|  45.1k|    check_scan_arg_types<T>();
 5861|       |
 5862|  45.1k|    basic_scan_arg<Context> arg;
 5863|  45.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  45.1k|    arg.m_value = make_value<Context>(value);
 5865|  45.1k|    return arg;
 5866|  45.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   351k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  2.33M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  45.1k|    {
 6376|  45.1k|        return std::get<0>(m_values);
 6377|  45.1k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9680|  44.6k|{
 9681|  44.6k|    auto result = make_scan_result<Source, Args...>();
 9682|  44.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  44.6k|                                   make_scan_args(result->values())));
 9684|  44.6k|    return result;
 9685|  44.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9636|   109k|{
 9637|   109k|    return scan_result_type<Source, Args...>();
 9638|   109k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   109k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   109k|        : m_value(T{}), m_has_value(true)
  427|   109k|    {
  428|   109k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6570|   109k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6344|   109k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|   109k|{
 9622|   109k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.5k, False: 98.2k]
  |  |  ------------------
  ------------------
 9623|  11.5k|        out = unexpected(in.error());
 9624|  11.5k|    }
 9625|  98.2k|    else {
 9626|  98.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  98.2k|    static_cast<    \
  |  |  935|  98.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  98.2k|    }
 9628|   109k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  11.5k|        : base(unexpect, std::move(e.error())),
 1616|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.5k|    {
 1618|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.5k|          m_has_value(false)
  451|  11.5k|    {
  452|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.5k|    {
 1316|  11.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  11.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  11.5k|    {
  903|  11.5k|        assign_common(std::move(other));
  904|  11.5k|        return *this;
  905|  11.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  11.5k|    {
  950|  11.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.5k, False: 0]
  ------------------
  951|  11.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   438k|    {
  490|   438k|        return m_has_value;
  491|   438k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   306k|    {
  456|   306k|        return m_value;
  457|   306k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  11.5k|    {
 1046|  11.5k|        this->destroy_value();
 1047|  11.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  11.5k|    {
  504|  11.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.5k|                                  std::forward<Args>(args)...);
  506|  11.5k|        m_has_value = false;
  507|  11.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.5k|    {
  473|  11.5k|        return m_unexpected;
  474|  11.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.5k|    {
  481|  11.5k|        return std::move(m_unexpected);
  482|  11.5k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8767|  89.3k|    {
 8768|  89.3k|        return m_str;
 8769|  89.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  89.3k|{
 6110|  89.3k|    detail::check_scan_arg_types<Args...>();
 6111|  89.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  89.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5824|   109k|{
 5825|   109k|    constexpr bool default_constructible_constraint =
 5826|   109k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   109k|    static_assert(default_constructible_constraint,
 5828|   109k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   109k|    constexpr bool destructible_constraint =
 5831|   109k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   109k|    static_assert(destructible_constraint,
 5833|   109k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   109k|    constexpr bool non_reference_constraint =
 5836|   109k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   109k|    static_assert(non_reference_constraint,
 5838|   109k|                  "Scan argument types must not be references");
 5839|       |
 5840|   109k|    constexpr bool movable_constraint =
 5841|   109k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   109k|    static_assert(movable_constraint,
 5843|   109k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   109k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   109k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   109k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  89.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  89.3k|    {
 6087|  89.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  89.3k|    {
 6095|  89.3k|        return {detail::make_arg<
 6096|  89.3k|            kind, Context,
 6097|  89.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  89.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  89.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5874|  89.3k|{
 5875|  89.3k|    return make_value<Context>(value).ref_value;
 5876|  89.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5809|   109k|{
 5810|   109k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   109k|                                  needs_context_tag>) {
 5814|   109k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   109k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5648|   109k|    {                                                                        \
 5649|   109k|        return val;                                                          \
 5650|   109k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5778|   109k|{
 5779|   109k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   109k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   109k|    constexpr bool scannable_char =
 5783|   109k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   109k|    static_assert(scannable_char,
 5785|   109k|                  "Cannot scan an argument of an unsupported character "
 5786|   109k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   109k|    constexpr bool scannable_const =
 5789|   109k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   109k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   109k|    constexpr bool scannable_disabled =
 5793|   109k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   109k|    static_assert(scannable_disabled,
 5795|   109k|                  "Cannot scan an argument that has been disabled by "
 5796|   109k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   109k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   109k|    static_assert(
 5800|   109k|        scannable,
 5801|   109k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   109k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   109k|    return arg_value{arg};
 5805|   109k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5562|   109k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   109k|    {
 5564|   109k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6353|  89.3k|    {
 6354|  89.3k|        return m_values;
 6355|  89.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  89.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  89.3k|    {
 6137|  89.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  89.3k|        : m_str(r.str)
 8763|  89.3k|    {
 8764|  89.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   109k|    {
 1740|   109k|        return has_value();
 1741|   109k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   306k|    {
 1815|   306k|        return &value();
 1816|   306k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   306k|    {
 1769|   306k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   306k|        return this->get_value();
 1771|   306k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9749|  44.6k|{
 9750|  44.6k|    auto result = make_scan_result<Source, Args...>();
 9751|  44.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  44.6k|                                   make_scan_args(result->values())));
 9753|  44.6k|    return result;
 9754|  44.6k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9790|  20.3k|{
 9791|  20.3k|    auto result = make_scan_result<Source, T>();
 9792|  20.3k|    fill_scan_result(
 9793|  20.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  20.3k|                            detail::make_arg<scan_context>(result->value())));
 9795|  20.3k|    return result;
 9796|  20.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|  20.3k|{
 5860|  20.3k|    check_scan_arg_types<T>();
 5861|       |
 5862|  20.3k|    basic_scan_arg<Context> arg;
 5863|  20.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  20.3k|    arg.m_value = make_value<Context>(value);
 5865|  20.3k|    return arg;
 5866|  20.3k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  20.3k|    {
 6376|  20.3k|        return std::get<0>(m_values);
 6377|  20.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  11.5k|    {
 2869|  11.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  11.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  11.5k|    {
 2850|  11.5k|        return decay_copy(t.begin());
 2851|  11.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  5.46M|{
 2094|  5.46M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.46M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   263k|    {
 2926|   263k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   263k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   263k|    {
 2908|   263k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   263k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9680|  53.4k|{
 9681|  53.4k|    auto result = make_scan_result<Source, Args...>();
 9682|  53.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  53.4k|                                   make_scan_args(result->values())));
 9684|  53.4k|    return result;
 9685|  53.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9636|   131k|{
 9637|   131k|    return scan_result_type<Source, Args...>();
 9638|   131k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   131k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   131k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   131k|    {
  613|   131k|        construct();
  614|   131k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   131k|    {
  694|   131k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   131k|        m_has_value = true;
  696|   131k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   131k|{
  396|   131k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   131k|        T(std::forward<Args>(args)...);
  398|   131k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6570|   131k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|   131k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   131k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   634k|    {
  718|   634k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   634k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   634k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9621|   131k|{
 9622|   131k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.5k, False: 120k]
  |  |  ------------------
  ------------------
 9623|  11.5k|        out = unexpected(in.error());
 9624|  11.5k|    }
 9625|   120k|    else {
 9626|   120k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   120k|    static_cast<    \
  |  |  935|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   120k|    }
 9628|   131k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   131k|    {
 1740|   131k|        return has_value();
 1741|   131k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   263k|    {
  490|   263k|        return m_has_value;
  491|   263k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  11.5k|    {
 1746|  11.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.5k|        return this->get_unexpected().error();
 1748|  11.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.5k|    {
  473|  11.5k|        return m_unexpected;
  474|  11.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  11.5k|        : base(unexpect, std::move(e.error())),
 1616|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.5k|    {
 1618|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  11.5k|        : m_has_value(false)
  637|  11.5k|    {
  638|  11.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  11.5k|    {
  701|  11.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.5k|                                  std::forward<Args>(args)...);
  703|  11.5k|        m_has_value = false;
  704|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  57.5k|    {
  730|  57.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  57.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  57.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  57.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.5k|    {
 1316|  11.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  11.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  11.5k|    {
  903|  11.5k|        assign_common(std::move(other));
  904|  11.5k|        return *this;
  905|  11.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  11.5k|    {
  950|  11.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.5k, False: 0]
  ------------------
  951|  11.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   669k|    {
  687|   669k|        return m_has_value;
  688|   669k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   371k|    {
  653|   371k|        return *value_ptr();
  654|   371k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  11.5k|    {
 1046|  11.5k|        this->destroy_value();
 1047|  11.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   131k|    {
  708|   131k|        scn::detail::destroy_at(value_ptr());
  709|   131k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   131k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   131k|    else {
  408|   131k|        p->~T();
  409|   131k|    }
  410|   131k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6577|   131k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  11.5k|    {
  701|  11.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.5k|                                  std::forward<Args>(args)...);
  703|  11.5k|        m_has_value = false;
  704|  11.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.5k|    {
  678|  11.5k|        return std::move(*unexpected_ptr());
  679|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.0k|    {
  712|  23.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   120k|    {
 6445|   120k|        m_range = std::forward<Other>(r);
 6446|   120k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   120k|    {
 1795|   120k|        return value();
 1796|   120k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   120k|    {
 1769|   120k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   120k|        return this->get_value();
 1771|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   120k|    {
  456|   120k|        return m_value;
  457|   120k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|  53.4k|{
 9461|  53.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  53.4k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  53.4k|{
 9398|  53.4k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  53.4k|    auto result = vscan_impl(buffer, format, args);
 9401|  53.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  53.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.31k, False: 48.1k]
  |  |  ------------------
  ------------------
 9402|  5.31k|        return unexpected(result.error());
 9403|  5.31k|    }
 9404|  48.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  53.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   131k|{
 5381|   131k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   131k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   131k|                  "\n"
 5385|   131k|                  "Unsupported range type given as input to a scanning "
 5386|   131k|                  "function.\n"
 5387|   131k|                  "A range needs to have a character type (value type) "
 5388|   131k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   131k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   131k|                  "to be included.\n"
 5391|   131k|                  "See the scnlib documentation for more details.");
 5392|   131k|    static_assert(
 5393|   131k|        !std::is_same_v<T, custom_char_traits>,
 5394|   131k|        "\n"
 5395|   131k|        "Unsupported range type given as input to a scanning "
 5396|   131k|        "function.\n"
 5397|   131k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   131k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   131k|        "not supported.");
 5400|   131k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   131k|                  "\n"
 5402|   131k|                  "Unsupported range type given as input to a scanning "
 5403|   131k|                  "function.\n"
 5404|   131k|                  "file_marker_found cannot be used as an "
 5405|   131k|                  "source range type to scn::scan.\n"
 5406|   131k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   131k|                  "and do not provide an explicit source range, "
 5408|   131k|                  "or use scn::scan with a FILE* directly.");
 5409|   131k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   131k|                  "\n"
 5411|   131k|                  "Unsupported range type given as input to a scanning "
 5412|   131k|                  "function.\n"
 5413|   131k|                  "In order to be scannable, a range needs to satisfy "
 5414|   131k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   131k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   131k|                  "\n"
 5417|   131k|                  "Unsupported range type given as input to a scanning "
 5418|   131k|                  "function.\n"
 5419|   131k|                  "A range needs to model forward_range and have a valid "
 5420|   131k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   131k|                  "Examples of scannable ranges are std::string, "
 5422|   131k|                  "std::string_view, "
 5423|   131k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   131k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   131k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   131k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   131k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   131k|    else {
 5366|   131k|        return make_forward_scan_buffer(r);
 5367|   131k|    }
 5368|   131k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   131k|{
 5185|   131k|    return basic_scan_forward_buffer_impl(range);
 5186|   131k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   131k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   131k|          m_cursor(ranges::begin(*m_range))
 4766|   131k|    {
 4767|   131k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   131k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   131k|    {
 4738|   131k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   131k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   131k|    {
 4429|   131k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   131k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   251k|    {
 2869|   251k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   251k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   251k|    {
 2850|   251k|        return decay_copy(t.begin());
 2851|   251k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   371k|    {
 3480|   371k|        return m_iterator;
 3481|   371k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  1.57M|    {
 4771|  1.57M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 16.7k, False: 1.56M]
  ------------------
 4772|  16.7k|            return false;
 4773|  16.7k|        }
 4774|  1.56M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  1.56M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  1.56M|        }
 4777|  1.56M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.43M, False: 125k]
  ------------------
 4778|  1.43M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.43M|                                          this->m_current_view.begin(),
 4780|  1.43M|                                          this->m_current_view.end());
 4781|  1.43M|        }
 4782|  1.56M|        m_latest = *m_cursor;
 4783|  1.56M|        ++m_cursor;
 4784|  1.56M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  1.56M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  1.56M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  1.56M|        }
 4788|  1.56M|        return true;
 4789|  1.57M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.69M|    {
 2926|  4.69M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.69M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.69M|    {
 2908|  4.69M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.69M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  4.81M|    {
 3484|  4.81M|        return m_sentinel;
 3485|  4.81M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   131k|    {
 4346|   131k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   131k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   131k|        return true;
 4348|   131k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  11.5k|        : base(unexpect, std::move(e.error())),
 1616|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.5k|    {
 1618|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.5k|          m_has_value(false)
  451|  11.5k|    {
  452|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   131k|    {
 1316|   131k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   120k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   120k|                      ranges::iterator_t<SourceRange>>) {
 6677|   120k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   120k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   120k|    {
 2869|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   120k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   120k|    {
 2850|   120k|        return decay_copy(t.begin());
 2851|   120k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|   120k|{
 6662|   120k|    return ranges::end(source);
 6663|   120k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   120k|    {
 2926|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   120k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   120k|    {
 2908|   120k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   120k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   120k|        : base(std::in_place, std::forward<U>(val)),
 1570|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   120k|    {
 1572|   120k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   120k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   120k|    {
  442|   120k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8767|   106k|    {
 8768|   106k|        return m_str;
 8769|   106k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   251k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   251k|    static_cast<    \
  |  |  935|   251k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   251k|    static_cast<    \
  |  |  935|   251k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   251k|    {
 3466|   251k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   106k|        : m_str(r.str)
 8763|   106k|    {
 8764|   106k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   131k|    {
 1740|   131k|        return has_value();
 1741|   131k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   371k|    {
 1815|   371k|        return &value();
 1816|   371k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|   371k|    {
 1769|   371k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   371k|        return this->get_value();
 1771|   371k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|   120k|    {
 6434|   120k|        return ranges::begin(m_range);
 6435|   120k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   143k|    {
  643|   143k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 120k, False: 23.0k]
  ------------------
  644|   120k|            destroy_value();
  645|   120k|        }
  646|  23.0k|        else {
  647|  23.0k|            destroy_unexpected();
  648|  23.0k|        }
  649|   143k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9749|  53.4k|{
 9750|  53.4k|    auto result = make_scan_result<Source, Args...>();
 9751|  53.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  53.4k|                                   make_scan_args(result->values())));
 9753|  53.4k|    return result;
 9754|  53.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|  53.4k|{
 9479|  53.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  53.4k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  53.4k|{
 9414|  53.4k|#if !SCN_DISABLE_LOCALE
 9415|  53.4k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  53.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  53.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  53.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  53.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  53.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.31k, False: 48.1k]
  |  |  ------------------
  ------------------
 9422|  5.31k|        return unexpected(result.error());
 9423|  5.31k|    }
 9424|  48.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  53.4k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9790|  24.7k|{
 9791|  24.7k|    auto result = make_scan_result<Source, T>();
 9792|  24.7k|    fill_scan_result(
 9793|  24.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  24.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  24.7k|                            detail::make_arg<scan_context>(result->value())));
 9795|  24.7k|    return result;
 9796|  24.7k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  24.7k|{
 9492|  24.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  24.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  24.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  24.7k|{
 9438|  24.7k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  24.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  24.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 885, False: 23.8k]
  |  |  ------------------
  ------------------
 9442|    885|        return unexpected(result.error());
 9443|    885|    }
 9444|  23.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  24.7k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  47.7k|    {
 2869|  47.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  47.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  47.7k|    {
 2850|  47.7k|        return decay_copy(t.begin());
 2851|  47.7k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  10.2M|{
 2094|  10.2M|    return SCN_FWD(t);
  ------------------
  |  |  936|  10.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  10.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.65M|    {
 2926|  2.65M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.65M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.65M|    {
 2908|  2.65M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.65M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9636|   662k|{
 9637|   662k|    return scan_result_type<Source, Args...>();
 9638|   662k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   662k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   662k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   662k|    {
  613|   662k|        construct();
  614|   662k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   662k|    {
  694|   662k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   662k|        m_has_value = true;
  696|   662k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   662k|{
  396|   662k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   662k|        T(std::forward<Args>(args)...);
  398|   662k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|   662k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  1.32M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  1.32M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6344|  1.32M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.26M|    {
  718|  3.26M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.26M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.26M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|   662k|{
 9622|   662k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.0k, False: 639k]
  |  |  ------------------
  ------------------
 9623|  23.0k|        out = unexpected(in.error());
 9624|  23.0k|    }
 9625|   639k|    else {
 9626|   639k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   639k|    static_cast<    \
  |  |  935|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   639k|    }
 9628|   662k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.32M|    {
 1740|  1.32M|        return has_value();
 1741|  1.32M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.65M|    {
  490|  2.65M|        return m_has_value;
  491|  2.65M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  46.0k|    {
 1746|  46.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  46.0k|        return this->get_unexpected().error();
 1748|  46.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  46.0k|    {
  473|  46.0k|        return m_unexpected;
  474|  46.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  23.0k|        : base(unexpect, std::move(e.error())),
 1616|  23.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.0k|    {
 1618|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  23.0k|        : m_has_value(false)
  637|  23.0k|    {
  638|  23.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  23.0k|    {
  701|  23.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.0k|                                  std::forward<Args>(args)...);
  703|  23.0k|        m_has_value = false;
  704|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   115k|    {
  730|   115k|        return reinterpret_cast<unexpected<E>*>(
  731|   115k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   115k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   115k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.0k|    {
 1316|  23.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  23.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  23.0k|    {
  903|  23.0k|        assign_common(std::move(other));
  904|  23.0k|        return *this;
  905|  23.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  23.0k|    {
  950|  23.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.0k, False: 0]
  ------------------
  951|  23.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.33M|    {
  687|  3.33M|        return m_has_value;
  688|  3.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.94M|    {
  653|  1.94M|        return *value_ptr();
  654|  1.94M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  23.0k|    {
 1046|  23.0k|        this->destroy_value();
 1047|  23.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   662k|    {
  708|   662k|        scn::detail::destroy_at(value_ptr());
  709|   662k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   662k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   662k|    else {
  408|   662k|        p->~T();
  409|   662k|    }
  410|   662k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|   662k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  23.0k|    {
  701|  23.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.0k|                                  std::forward<Args>(args)...);
  703|  23.0k|        m_has_value = false;
  704|  23.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.0k|    {
  678|  23.0k|        return std::move(*unexpected_ptr());
  679|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.0k|    {
  712|  46.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  1.27M|    {
 6445|  1.27M|        m_range = std::forward<Other>(r);
 6446|  1.27M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.27M|    {
 1795|  1.27M|        return value();
 1796|  1.27M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.27M|    {
 1769|  1.27M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.27M|        return this->get_value();
 1771|  1.27M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.27M|    {
  456|  1.27M|        return m_value;
  457|  1.27M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   532k|{
 9398|   532k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   532k|    auto result = vscan_impl(buffer, format, args);
 9401|   532k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.2k, False: 511k]
  |  |  ------------------
  ------------------
 9402|  21.2k|        return unexpected(result.error());
 9403|  21.2k|    }
 9404|   511k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   532k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  1.32M|{
 5381|  1.32M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.32M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.32M|                  "\n"
 5385|  1.32M|                  "Unsupported range type given as input to a scanning "
 5386|  1.32M|                  "function.\n"
 5387|  1.32M|                  "A range needs to have a character type (value type) "
 5388|  1.32M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.32M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.32M|                  "to be included.\n"
 5391|  1.32M|                  "See the scnlib documentation for more details.");
 5392|  1.32M|    static_assert(
 5393|  1.32M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.32M|        "\n"
 5395|  1.32M|        "Unsupported range type given as input to a scanning "
 5396|  1.32M|        "function.\n"
 5397|  1.32M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.32M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.32M|        "not supported.");
 5400|  1.32M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.32M|                  "\n"
 5402|  1.32M|                  "Unsupported range type given as input to a scanning "
 5403|  1.32M|                  "function.\n"
 5404|  1.32M|                  "file_marker_found cannot be used as an "
 5405|  1.32M|                  "source range type to scn::scan.\n"
 5406|  1.32M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.32M|                  "and do not provide an explicit source range, "
 5408|  1.32M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.32M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.32M|                  "\n"
 5411|  1.32M|                  "Unsupported range type given as input to a scanning "
 5412|  1.32M|                  "function.\n"
 5413|  1.32M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.32M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.32M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.32M|                  "\n"
 5417|  1.32M|                  "Unsupported range type given as input to a scanning "
 5418|  1.32M|                  "function.\n"
 5419|  1.32M|                  "A range needs to model forward_range and have a valid "
 5420|  1.32M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.32M|                  "Examples of scannable ranges are std::string, "
 5422|  1.32M|                  "std::string_view, "
 5423|  1.32M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.32M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.32M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.32M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.32M|{
 5320|  1.32M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.32M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.32M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.32M|    {
 3000|  1.32M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.32M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.32M|    {
 2981|  1.32M|        return t.data();
 2982|  1.32M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  1.32M|    {
 3383|  1.32M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.32M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  5.00M|{
  316|  5.00M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  5.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  5.00M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   185M|{
  294|   185M|    return p;
  295|   185M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.60M|    {
 2869|  2.60M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.60M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.60M|    {
 2850|  2.60M|        return decay_copy(t.begin());
 2851|  2.60M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   151M|    {
 3480|   151M|        return m_iterator;
 3481|   151M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  1.32M|    {
 3339|  1.32M|        return static_cast<const D&>(*this);
 3340|  1.32M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.32M|    {
 3075|  1.32M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.32M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.32M|    {
 3041|  1.32M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.32M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.16M|    {
 3496|  3.16M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.16M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  46.0k|        : base(unexpect, std::move(e.error())),
 1616|  46.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  46.0k|    {
 1618|  46.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  46.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  46.0k|          m_has_value(false)
  451|  46.0k|    {
  452|  46.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.32M|    {
 1316|  1.32M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  1.27M|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.27M|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.27M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.27M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.66M|    {
 2869|  3.66M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.66M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.66M|    {
 2850|  3.66M|        return decay_copy(t.begin());
 2851|  3.66M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  1.27M|{
 6662|  1.27M|    return ranges::end(source);
 6663|  1.27M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.27M|    {
 2926|  1.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.27M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.27M|    {
 2908|  1.27M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.27M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   144M|    {
 3484|   144M|        return m_sentinel;
 3485|   144M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.27M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.27M|    {
 1572|  1.27M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.27M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.27M|    {
  442|  1.27M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8767|   532k|    {
 8768|   532k|        return m_str;
 8769|   532k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  1.06M|{
 6110|  1.06M|    detail::check_scan_arg_types<Args...>();
 6111|  1.06M|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.06M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5824|  1.32M|{
 5825|  1.32M|    constexpr bool default_constructible_constraint =
 5826|  1.32M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.32M|    static_assert(default_constructible_constraint,
 5828|  1.32M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.32M|    constexpr bool destructible_constraint =
 5831|  1.32M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.32M|    static_assert(destructible_constraint,
 5833|  1.32M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.32M|    constexpr bool non_reference_constraint =
 5836|  1.32M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.32M|    static_assert(non_reference_constraint,
 5838|  1.32M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.32M|    constexpr bool movable_constraint =
 5841|  1.32M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.32M|    static_assert(movable_constraint,
 5843|  1.32M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.32M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.32M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.32M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  1.06M|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.06M|    {
 6087|  1.06M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  1.06M|    {
 6095|  1.06M|        return {detail::make_arg<
 6096|  1.06M|            kind, Context,
 6097|  1.06M|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.06M|                                 typename Context::char_type>::value>(args)...};
 6099|  1.06M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  1.06M|{
 5875|  1.06M|    return make_value<Context>(value).ref_value;
 5876|  1.06M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  1.32M|{
 5810|  1.32M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.32M|                                  needs_context_tag>) {
 5814|  1.32M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.32M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  1.32M|    {                                                                        \
 5649|  1.32M|        return val;                                                          \
 5650|  1.32M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5778|  1.32M|{
 5779|  1.32M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.32M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.32M|    constexpr bool scannable_char =
 5783|  1.32M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.32M|    static_assert(scannable_char,
 5785|  1.32M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.32M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.32M|    constexpr bool scannable_const =
 5789|  1.32M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.32M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.32M|    constexpr bool scannable_disabled =
 5793|  1.32M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.32M|    static_assert(scannable_disabled,
 5795|  1.32M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.32M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.32M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.32M|    static_assert(
 5800|  1.32M|        scannable,
 5801|  1.32M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.32M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.32M|    return arg_value{arg};
 5805|  1.32M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5562|  1.32M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.32M|    {
 5564|  1.32M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6353|  1.06M|    {
 6354|  1.06M|        return m_values;
 6355|  1.06M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.06M|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.06M|    {
 6137|  1.06M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|  1.59M|        : m_desc(desc), m_builtin_values(data)
 6188|  1.59M|    {
 6189|  1.59M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  55.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  55.7M|    static_cast<    \
  |  |  935|  55.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  55.7M|    static_cast<    \
  |  |  935|  55.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  55.7M|    {
 3466|  55.7M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|  1.59M|{
 8446|  1.59M|    return s;
 8447|  1.59M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|  1.59M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   532k|        : m_str(r.str)
 8763|   532k|    {
 8764|   532k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   662k|    {
 1740|   662k|        return has_value();
 1741|   662k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.94M|    {
 1815|  1.94M|        return &value();
 1816|  1.94M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  1.94M|    {
 1769|  1.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.94M|        return this->get_value();
 1771|  1.94M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  1.27M|    {
 6434|  1.27M|        return ranges::begin(m_range);
 6435|  1.27M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   685k|    {
  643|   685k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 639k, False: 46.0k]
  ------------------
  644|   639k|            destroy_value();
  645|   639k|        }
  646|  46.0k|        else {
  647|  46.0k|            destroy_unexpected();
  648|  46.0k|        }
  649|   685k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   532k|{
 9414|   532k|#if !SCN_DISABLE_LOCALE
 9415|   532k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   532k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   532k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   532k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   532k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.2k, False: 511k]
  |  |  ------------------
  ------------------
 9422|  21.2k|        return unexpected(result.error());
 9423|  21.2k|    }
 9424|   511k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   532k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   259k|{
 9438|   259k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   259k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   259k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 255k]
  |  |  ------------------
  ------------------
 9442|  3.54k|        return unexpected(result.error());
 9443|  3.54k|    }
 9444|   255k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   259k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|   259k|{
 5860|   259k|    check_scan_arg_types<T>();
 5861|       |
 5862|   259k|    basic_scan_arg<Context> arg;
 5863|   259k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|   259k|    arg.m_value = make_value<Context>(value);
 5865|   259k|    return arg;
 5866|   259k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  1.98M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   259k|    {
 6376|   259k|        return std::get<0>(m_values);
 6377|   259k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9636|   662k|{
 9637|   662k|    return scan_result_type<Source, Args...>();
 9638|   662k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   662k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   662k|        : m_value(T{}), m_has_value(true)
  427|   662k|    {
  428|   662k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6570|   662k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6344|   662k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|   662k|{
 9622|   662k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.0k, False: 639k]
  |  |  ------------------
  ------------------
 9623|  23.0k|        out = unexpected(in.error());
 9624|  23.0k|    }
 9625|   639k|    else {
 9626|   639k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   639k|    static_cast<    \
  |  |  935|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   639k|    }
 9628|   662k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  23.0k|        : base(unexpect, std::move(e.error())),
 1616|  23.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.0k|    {
 1618|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  23.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.0k|          m_has_value(false)
  451|  23.0k|    {
  452|  23.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.0k|    {
 1316|  23.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  23.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  23.0k|    {
  903|  23.0k|        assign_common(std::move(other));
  904|  23.0k|        return *this;
  905|  23.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  23.0k|    {
  950|  23.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.0k, False: 0]
  ------------------
  951|  23.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.65M|    {
  490|  2.65M|        return m_has_value;
  491|  2.65M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.94M|    {
  456|  1.94M|        return m_value;
  457|  1.94M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  23.0k|    {
 1046|  23.0k|        this->destroy_value();
 1047|  23.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  23.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  23.0k|    {
  504|  23.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  23.0k|                                  std::forward<Args>(args)...);
  506|  23.0k|        m_has_value = false;
  507|  23.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.0k|    {
  473|  23.0k|        return m_unexpected;
  474|  23.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  23.0k|    {
  481|  23.0k|        return std::move(m_unexpected);
  482|  23.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8767|   532k|    {
 8768|   532k|        return m_str;
 8769|   532k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|   532k|{
 6110|   532k|    detail::check_scan_arg_types<Args...>();
 6111|   532k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   532k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5824|   662k|{
 5825|   662k|    constexpr bool default_constructible_constraint =
 5826|   662k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   662k|    static_assert(default_constructible_constraint,
 5828|   662k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   662k|    constexpr bool destructible_constraint =
 5831|   662k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   662k|    static_assert(destructible_constraint,
 5833|   662k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   662k|    constexpr bool non_reference_constraint =
 5836|   662k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   662k|    static_assert(non_reference_constraint,
 5838|   662k|                  "Scan argument types must not be references");
 5839|       |
 5840|   662k|    constexpr bool movable_constraint =
 5841|   662k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   662k|    static_assert(movable_constraint,
 5843|   662k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   662k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   662k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   662k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|   532k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   532k|    {
 6087|   532k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|   532k|    {
 6095|   532k|        return {detail::make_arg<
 6096|   532k|            kind, Context,
 6097|   532k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   532k|                                 typename Context::char_type>::value>(args)...};
 6099|   532k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5874|   532k|{
 5875|   532k|    return make_value<Context>(value).ref_value;
 5876|   532k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5809|   662k|{
 5810|   662k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   662k|                                  needs_context_tag>) {
 5814|   662k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   662k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5648|   662k|    {                                                                        \
 5649|   662k|        return val;                                                          \
 5650|   662k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5778|   662k|{
 5779|   662k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   662k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   662k|    constexpr bool scannable_char =
 5783|   662k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   662k|    static_assert(scannable_char,
 5785|   662k|                  "Cannot scan an argument of an unsupported character "
 5786|   662k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   662k|    constexpr bool scannable_const =
 5789|   662k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   662k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   662k|    constexpr bool scannable_disabled =
 5793|   662k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   662k|    static_assert(scannable_disabled,
 5795|   662k|                  "Cannot scan an argument that has been disabled by "
 5796|   662k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   662k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   662k|    static_assert(
 5800|   662k|        scannable,
 5801|   662k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   662k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   662k|    return arg_value{arg};
 5805|   662k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5562|   662k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   662k|    {
 5564|   662k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6353|   532k|    {
 6354|   532k|        return m_values;
 6355|   532k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   532k|        : basic_scan_args(store.desc, store.args.data())
 6136|   532k|    {
 6137|   532k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   532k|        : m_str(r.str)
 8763|   532k|    {
 8764|   532k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   662k|    {
 1740|   662k|        return has_value();
 1741|   662k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.94M|    {
 1815|  1.94M|        return &value();
 1816|  1.94M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  1.94M|    {
 1769|  1.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.94M|        return this->get_value();
 1771|  1.94M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|   129k|{
 5860|   129k|    check_scan_arg_types<T>();
 5861|       |
 5862|   129k|    basic_scan_arg<Context> arg;
 5863|   129k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|   129k|    arg.m_value = make_value<Context>(value);
 5865|   129k|    return arg;
 5866|   129k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   129k|    {
 6376|   129k|        return std::get<0>(m_values);
 6377|   129k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  23.0k|    {
 2869|  23.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  23.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  23.0k|    {
 2850|  23.0k|        return decay_copy(t.begin());
 2851|  23.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  71.4M|{
 2094|  71.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  71.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  71.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.32M|    {
 2926|  1.32M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.32M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.32M|    {
 2908|  1.32M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.32M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9636|   662k|{
 9637|   662k|    return scan_result_type<Source, Args...>();
 9638|   662k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   662k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   662k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   662k|    {
  613|   662k|        construct();
  614|   662k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   662k|    {
  694|   662k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   662k|        m_has_value = true;
  696|   662k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   662k|{
  396|   662k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   662k|        T(std::forward<Args>(args)...);
  398|   662k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6570|   662k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   662k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   662k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.26M|    {
  718|  3.26M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.26M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.26M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9621|   662k|{
 9622|   662k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.0k, False: 639k]
  |  |  ------------------
  ------------------
 9623|  23.0k|        out = unexpected(in.error());
 9624|  23.0k|    }
 9625|   639k|    else {
 9626|   639k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   639k|    static_cast<    \
  |  |  935|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   639k|    }
 9628|   662k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   662k|    {
 1740|   662k|        return has_value();
 1741|   662k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.32M|    {
  490|  1.32M|        return m_has_value;
  491|  1.32M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  23.0k|    {
 1746|  23.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.0k|        return this->get_unexpected().error();
 1748|  23.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.0k|    {
  473|  23.0k|        return m_unexpected;
  474|  23.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  23.0k|        : base(unexpect, std::move(e.error())),
 1616|  23.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.0k|    {
 1618|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  23.0k|        : m_has_value(false)
  637|  23.0k|    {
  638|  23.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  23.0k|    {
  701|  23.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.0k|                                  std::forward<Args>(args)...);
  703|  23.0k|        m_has_value = false;
  704|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   115k|    {
  730|   115k|        return reinterpret_cast<unexpected<E>*>(
  731|   115k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   115k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   115k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.0k|    {
 1316|  23.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  23.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  23.0k|    {
  903|  23.0k|        assign_common(std::move(other));
  904|  23.0k|        return *this;
  905|  23.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  23.0k|    {
  950|  23.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.0k, False: 0]
  ------------------
  951|  23.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.33M|    {
  687|  3.33M|        return m_has_value;
  688|  3.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.94M|    {
  653|  1.94M|        return *value_ptr();
  654|  1.94M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  23.0k|    {
 1046|  23.0k|        this->destroy_value();
 1047|  23.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   662k|    {
  708|   662k|        scn::detail::destroy_at(value_ptr());
  709|   662k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   662k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   662k|    else {
  408|   662k|        p->~T();
  409|   662k|    }
  410|   662k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6577|   662k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  23.0k|    {
  701|  23.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.0k|                                  std::forward<Args>(args)...);
  703|  23.0k|        m_has_value = false;
  704|  23.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.0k|    {
  678|  23.0k|        return std::move(*unexpected_ptr());
  679|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.0k|    {
  712|  46.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   639k|    {
 6445|   639k|        m_range = std::forward<Other>(r);
 6446|   639k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   639k|    {
 1795|   639k|        return value();
 1796|   639k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   639k|    {
 1769|   639k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   639k|        return this->get_value();
 1771|   639k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   639k|    {
  456|   639k|        return m_value;
  457|   639k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   266k|{
 9398|   266k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   266k|    auto result = vscan_impl(buffer, format, args);
 9401|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 255k]
  |  |  ------------------
  ------------------
 9402|  10.6k|        return unexpected(result.error());
 9403|  10.6k|    }
 9404|   255k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   266k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   662k|{
 5381|   662k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   662k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   662k|                  "\n"
 5385|   662k|                  "Unsupported range type given as input to a scanning "
 5386|   662k|                  "function.\n"
 5387|   662k|                  "A range needs to have a character type (value type) "
 5388|   662k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   662k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   662k|                  "to be included.\n"
 5391|   662k|                  "See the scnlib documentation for more details.");
 5392|   662k|    static_assert(
 5393|   662k|        !std::is_same_v<T, custom_char_traits>,
 5394|   662k|        "\n"
 5395|   662k|        "Unsupported range type given as input to a scanning "
 5396|   662k|        "function.\n"
 5397|   662k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   662k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   662k|        "not supported.");
 5400|   662k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   662k|                  "\n"
 5402|   662k|                  "Unsupported range type given as input to a scanning "
 5403|   662k|                  "function.\n"
 5404|   662k|                  "file_marker_found cannot be used as an "
 5405|   662k|                  "source range type to scn::scan.\n"
 5406|   662k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   662k|                  "and do not provide an explicit source range, "
 5408|   662k|                  "or use scn::scan with a FILE* directly.");
 5409|   662k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   662k|                  "\n"
 5411|   662k|                  "Unsupported range type given as input to a scanning "
 5412|   662k|                  "function.\n"
 5413|   662k|                  "In order to be scannable, a range needs to satisfy "
 5414|   662k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   662k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   662k|                  "\n"
 5417|   662k|                  "Unsupported range type given as input to a scanning "
 5418|   662k|                  "function.\n"
 5419|   662k|                  "A range needs to model forward_range and have a valid "
 5420|   662k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   662k|                  "Examples of scannable ranges are std::string, "
 5422|   662k|                  "std::string_view, "
 5423|   662k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   662k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   662k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   662k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   662k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   662k|    else {
 5366|   662k|        return make_forward_scan_buffer(r);
 5367|   662k|    }
 5368|   662k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   662k|{
 5185|   662k|    return basic_scan_forward_buffer_impl(range);
 5186|   662k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   662k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   662k|          m_cursor(ranges::begin(*m_range))
 4766|   662k|    {
 4767|   662k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   662k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   662k|    {
 4738|   662k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   662k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   662k|    {
 4429|   662k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   662k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.30M|    {
 2869|  1.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.30M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.30M|    {
 2850|  1.30M|        return decay_copy(t.begin());
 2851|  1.30M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.94M|    {
 3480|  1.94M|        return m_iterator;
 3481|  1.94M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  22.5M|    {
 4771|  22.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 20.4k, False: 22.5M]
  ------------------
 4772|  20.4k|            return false;
 4773|  20.4k|        }
 4774|  22.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  22.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  22.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  22.5M|        }
 4777|  22.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 21.8M, False: 650k]
  ------------------
 4778|  21.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  21.8M|                                          this->m_current_view.begin(),
 4780|  21.8M|                                          this->m_current_view.end());
 4781|  21.8M|        }
 4782|  22.5M|        m_latest = *m_cursor;
 4783|  22.5M|        ++m_cursor;
 4784|  22.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  22.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  22.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  22.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  22.5M|        }
 4788|  22.5M|        return true;
 4789|  22.5M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  67.5M|    {
 2926|  67.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  67.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  67.5M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  67.5M|    {
 2908|  67.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  67.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  67.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  68.2M|    {
 3484|  68.2M|        return m_sentinel;
 3485|  68.2M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   662k|    {
 4346|   662k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   662k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   662k|        return true;
 4348|   662k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  23.0k|        : base(unexpect, std::move(e.error())),
 1616|  23.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.0k|    {
 1618|  23.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  23.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.0k|          m_has_value(false)
  451|  23.0k|    {
  452|  23.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   662k|    {
 1316|   662k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   639k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   639k|                      ranges::iterator_t<SourceRange>>) {
 6677|   639k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   639k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   639k|    {
 2869|   639k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   639k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   639k|    {
 2850|   639k|        return decay_copy(t.begin());
 2851|   639k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|   639k|{
 6662|   639k|    return ranges::end(source);
 6663|   639k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   639k|    {
 2926|   639k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   639k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   639k|    {
 2908|   639k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   639k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   639k|        : base(std::in_place, std::forward<U>(val)),
 1570|   639k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   639k|    {
 1572|   639k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   639k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   639k|    {
  442|   639k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8767|   532k|    {
 8768|   532k|        return m_str;
 8769|   532k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.30M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.30M|    static_cast<    \
  |  |  935|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.30M|    static_cast<    \
  |  |  935|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.30M|    {
 3466|  1.30M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   532k|        : m_str(r.str)
 8763|   532k|    {
 8764|   532k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   662k|    {
 1740|   662k|        return has_value();
 1741|   662k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.94M|    {
 1815|  1.94M|        return &value();
 1816|  1.94M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  1.94M|    {
 1769|  1.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.94M|        return this->get_value();
 1771|  1.94M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|   639k|    {
 6434|   639k|        return ranges::begin(m_range);
 6435|   639k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   685k|    {
  643|   685k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 639k, False: 46.0k]
  ------------------
  644|   639k|            destroy_value();
  645|   639k|        }
  646|  46.0k|        else {
  647|  46.0k|            destroy_unexpected();
  648|  46.0k|        }
  649|   685k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   266k|{
 9414|   266k|#if !SCN_DISABLE_LOCALE
 9415|   266k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   266k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   266k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   266k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 255k]
  |  |  ------------------
  ------------------
 9422|  10.6k|        return unexpected(result.error());
 9423|  10.6k|    }
 9424|   255k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   266k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   129k|{
 9438|   129k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   129k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   129k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 127k]
  |  |  ------------------
  ------------------
 9442|  1.77k|        return unexpected(result.error());
 9443|  1.77k|    }
 9444|   127k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   129k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   135k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   135k|    {
 3742|   135k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   135k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   135k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   119k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   119k|    else {
 3981|   119k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   119k|    }
 3983|   119k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  5.18M|    {
 3480|  5.18M|        return m_iterator;
 3481|  5.18M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  73.2M|    {
 3480|  73.2M|        return m_iterator;
 3481|  73.2M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  7.37M|    {
  572|  7.37M|        return m_has_value;
  573|  7.37M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  95.5k|    {
  555|  95.5k|        return m_unexpected;
  556|  95.5k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|  95.5k|    {
 1746|  95.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  95.5k|        return this->get_unexpected().error();
 1748|  95.5k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|   975k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7034|  31.8k|    {
 7035|  31.8k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7035:13): [True: 0, False: 31.8k]
  |  Branch (7035:39): [True: 0, False: 0]
  ------------------
 7036|       |            // clang-format off
 7037|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7038|       |            // clang-format on
 7039|      0|        }
 7040|       |
 7041|  31.8k|        m_specs.width = width;
 7042|  31.8k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|   943k|    {
 7056|   943k|        m_specs.type = type;
 7057|   943k|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7072|  36.5k|    {
 7073|  36.5k|        const auto begin_value = static_cast<unsigned>(begin);
 7074|  36.5k|        const auto end_value = static_cast<unsigned>(end);
 7075|  36.5k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  36.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7076|       |
 7077|  36.5k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  36.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.5k, False: 0]
  |  |  ------------------
  ------------------
 7078|       |            // No need to bit-twiddle with a mask, because with the
 7079|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7080|  36.5k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  36.5k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7081|   987k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7081:40): [True: 950k, False: 36.5k]
  ------------------
 7082|   950k|                m_specs.charset_literals[v / 8] |=
 7083|   950k|                    static_cast<unsigned char>(1ul << (v % 8));
 7084|   950k|            }
 7085|  36.5k|        }
 7086|      0|        else {
 7087|      0|            m_specs.charset_has_nonascii = true;
 7088|      0|        }
 7089|  36.5k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|  31.8k|    {
 7118|  31.8k|        SCN_UNLIKELY_ATTR
 7119|  31.8k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|  31.8k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  1.02M|    {
 7129|  1.02M|        return m_error;
 7130|  1.02M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   123k|{
 3918|   123k|    return unexpected(scan_error{c, m});
 3919|   123k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  69.3M|{
 4308|       |    // Pattern_White_Space property
 4309|  69.3M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 12.8M, False: 56.4M]
  |  Branch (4309:27): [True: 2.34M, False: 10.4M]
  ------------------
 4310|  69.3M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 1.90M, False: 65.0M]
  ------------------
 4311|  69.3M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 398k, False: 64.6M]
  ------------------
 4312|  69.3M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 148k, False: 64.5M]
  ------------------
 4313|  69.3M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 219k, False: 64.2M]
  ------------------
 4314|  69.3M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 108k, False: 64.1M]
  ------------------
 4315|  69.3M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 45, False: 64.1M]
  ------------------
 4316|  69.3M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|  15.9k|{
 7812|  15.9k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 15.9k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 15.9k]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 15.9k]
  ------------------
 7818|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 0, False: 15.9k]
  ------------------
 7819|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 15.9k]
  ------------------
 7820|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 15.9k]
  ------------------
 7821|      0|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 15.9k]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 15.9k]
  ------------------
 7825|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 0, False: 15.9k]
  ------------------
 7826|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 15.9k]
  ------------------
 7827|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 15.9k]
  ------------------
 7828|      0|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 15.9k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 15.9k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 15.9k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 15.9k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 15.9k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 15.9k]
  ------------------
 7840|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 15.9k]
  ------------------
 7841|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 15.9k]
  ------------------
 7842|      0|            return arg_type_category::floating;
 7843|       |
 7844|  1.77k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 1.77k, False: 14.1k]
  ------------------
 7845|  5.31k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 3.54k, False: 12.3k]
  ------------------
 7846|  8.85k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 3.54k, False: 12.3k]
  ------------------
 7847|  15.9k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 7.08k, False: 8.85k]
  ------------------
 7848|  15.9k|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 15.9k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 15.9k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|  15.9k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|  15.9k|            SCN_CLANG_POP
 7859|  15.9k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|  15.9k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  7.27M|    {
 1740|  7.27M|        return has_value();
 1741|  7.27M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7953|   943k|{
 7954|   943k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7954:9): [True: 0, False: 943k]
  ------------------
 7955|   943k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7955:9): [True: 908k, False: 34.2k]
  ------------------
 7956|   943k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7956:9): [True: 18.2k, False: 15.9k]
  ------------------
 7957|   943k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7957:9): [True: 0, False: 15.9k]
  ------------------
 7958|   943k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7958:9): [True: 0, False: 15.9k]
  ------------------
 7959|   927k|        return;
 7960|   927k|    }
 7961|  15.9k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7961:9): [True: 15.9k, False: 0]
  ------------------
 7962|  15.9k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
 7963|       |            // clang-format off
 7964|  15.9k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7965|       |            // clang-format on
 7966|  15.9k|        }
 7967|      0|        return;
 7968|  15.9k|    }
 7969|      0|    SCN_UNLIKELY_ATTR
 7970|      0|    handler.on_error("Invalid type specifier for string");
 7971|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  28.4M|    {
 4473|  28.4M|        assert(m_begin);
 4474|  28.4M|        return m_end == nullptr;
 4475|  28.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   615k|    {
 4490|   615k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 615k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   615k|        return parent()->get_segment_starting_at(position());
 4496|   615k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  16.5M|    {
 4484|  16.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  16.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  16.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  16.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|   615k|    {
 4377|   615k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 350k, False: 265k]
  |  |  ------------------
  ------------------
 4378|   615k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   350k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   350k|        }
 4381|   265k|        const auto start = pos - m_putback_buffer.size();
 4382|   265k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   265k|        return m_current_view.substr(start);
 4384|   265k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   693k|    {
 4468|   693k|        return m_position;
 4469|   693k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   394k|    {
 4399|   394k|        return m_is_contiguous;
 4400|   394k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   407M|    {
 4473|   407M|        assert(m_begin);
 4474|   407M|        return m_end == nullptr;
 4475|   407M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   642k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   642k|    else {
 3981|   642k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   642k|    }
 3983|   642k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.94M|    {
 4490|  1.94M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.94M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.94M|        return parent()->get_segment_starting_at(position());
 4496|  1.94M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|   237M|    {
 4484|   237M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   237M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   237M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   237M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   237M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.94M|    {
 4377|  1.94M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.28M, False: 659k]
  |  |  ------------------
  ------------------
 4378|  1.94M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.28M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.28M|        }
 4381|   659k|        const auto start = pos - m_putback_buffer.size();
 4382|   659k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   659k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   659k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   659k|        return m_current_view.substr(start);
 4384|   659k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  2.33M|    {
 4468|  2.33M|        return m_position;
 4469|  2.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.98M|    {
 4399|  1.98M|        return m_is_contiguous;
 4400|  1.98M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   799k|    {
 3334|   799k|        return static_cast<D&>(*this);
 3335|   799k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   799k|    {
 3375|   799k|        return detail::to_address(ranges::begin(derived()));
 3376|   799k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  2.38M|    {
 3334|  2.38M|        return static_cast<D&>(*this);
 3335|  2.38M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  2.38M|    {
 3375|  2.38M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.38M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|  53.7k|    {
 8965|  53.7k|        return ranges::subrange{begin(), end()};
 8966|  53.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|  53.7k|    {
 8957|  53.7k|        return ranges::default_sentinel;
 8958|  53.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  1.90M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.90M|    static_cast<    \
  |  |  935|  1.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.90M|    static_cast<    \
  |  |  935|  1.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.90M|    {
 3466|  1.90M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|  2.32M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   123k|    {
 1979|   123k|        return detail::transform_error_impl(std::move(*this),
 1980|   123k|                                            std::forward<F>(f));
 1981|   123k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   123k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   123k|    else {
 1472|   123k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   123k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   123k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 121k, False: 2.09k]
  |  |  ------------------
  ------------------
 1474|   123k|                   ? result(*std::forward<Exp>(exp))
 1475|   123k|                   : result(unexpect,
 1476|  2.09k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.09k|                                           std::forward<Exp>(exp).error()));
 1478|   123k|    }
 1479|   123k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   247k|    {
  490|   247k|        return m_has_value;
  491|   247k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   121k|    {
 1805|   121k|        return std::move(value());
 1806|   121k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   121k|    {
 1769|   121k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   121k|        return this->get_value();
 1771|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   121k|    {
  456|   121k|        return m_value;
  457|   121k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   290k|        : base(std::in_place, std::forward<U>(val)),
 1570|   290k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   290k|    {
 1572|   290k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   290k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   290k|    {
  442|   290k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   305k|    {
 1316|   305k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  11.8k|{
 1350|  11.8k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  11.8k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.09k|    {
 1756|  2.09k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.09k|        return std::move(this->get_unexpected().error());
 1758|  2.09k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.09k|    {
  473|  2.09k|        return m_unexpected;
  474|  2.09k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  23.6k|    {
  365|  23.6k|        return m_unexpected;
  366|  23.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.09k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.09k|    {
 1628|  2.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   266k|    {
 8965|   266k|        return ranges::subrange{begin(), end()};
 8966|   266k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   266k|    {
 8957|   266k|        return ranges::default_sentinel;
 8958|   266k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  25.6M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  25.6M|    static_cast<    \
  |  |  935|  25.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  25.6M|    static_cast<    \
  |  |  935|  25.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  25.6M|    {
 3466|  25.6M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   648k|    {
 1979|   648k|        return detail::transform_error_impl(std::move(*this),
 1980|   648k|                                            std::forward<F>(f));
 1981|   648k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   648k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   648k|    else {
 1472|   648k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   648k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   648k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 646k, False: 2.16k]
  |  |  ------------------
  ------------------
 1474|   648k|                   ? result(*std::forward<Exp>(exp))
 1475|   648k|                   : result(unexpect,
 1476|  2.16k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.16k|                                           std::forward<Exp>(exp).error()));
 1478|   648k|    }
 1479|   648k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.29M|    {
  490|  1.29M|        return m_has_value;
  491|  1.29M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   646k|    {
 1805|   646k|        return std::move(value());
 1806|   646k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   646k|    {
 1769|   646k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   646k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   646k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   646k|        return this->get_value();
 1771|   646k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   646k|    {
  456|   646k|        return m_value;
  457|   646k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.54M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.54M|    {
 1572|  1.54M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.54M|    {
  442|  1.54M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.56M|    {
 1316|  1.56M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.16k|    {
 1756|  2.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.16k|        return std::move(this->get_unexpected().error());
 1758|  2.16k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.16k|    {
  473|  2.16k|        return m_unexpected;
  474|  2.16k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.16k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.16k|    {
 1628|  2.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  27.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  27.8k|          m_has_value(false)
  451|  27.8k|    {
  452|  27.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   123k|        : m_unexpected(std::forward<Err>(e))
  350|   123k|    {
  351|   123k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   123k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   123k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   103k|        : base(unexpect, std::move(e.error())),
 1616|   103k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   103k|    {
 1618|   103k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   103k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   103k|          m_has_value(false)
  451|   103k|    {
  452|   103k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.33M|    {
 1316|  2.33M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  25.2k|        : base(unexpect, std::move(e.error())),
 1616|  25.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.2k|    {
 1618|  25.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  28.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.5k|          m_has_value(false)
  451|  28.5k|    {
  452|  28.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   506k|    {
 1316|   506k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   476k|        : base(std::in_place, std::forward<U>(val)),
 1570|   476k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   476k|    {
 1572|   476k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   476k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   476k|    {
  442|   476k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   506k|    {
 1740|   506k|        return has_value();
 1741|   506k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.01M|    {
  490|  1.01M|        return m_has_value;
  491|  1.01M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  28.5k|    {
 1746|  28.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  28.5k|        return this->get_unexpected().error();
 1748|  28.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.5k|    {
  473|  28.5k|        return m_unexpected;
  474|  28.5k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   397k|    {
 1805|   397k|        return std::move(value());
 1806|   397k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   477k|    {
 1769|   477k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   477k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   477k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   477k|        return this->get_value();
 1771|   477k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   477k|    {
  456|   477k|        return m_value;
  457|   477k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  51.3k|        : base(unexpect, std::move(e.error())),
 1616|  51.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  51.3k|    {
 1618|  51.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  55.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  55.6k|          m_has_value(false)
  451|  55.6k|    {
  452|  55.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.13M|    {
 1316|  3.13M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  3.08M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.08M|    {
 1572|  3.08M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.08M|    {
  442|  3.08M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  3.13M|    {
 1740|  3.13M|        return has_value();
 1741|  3.13M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.27M|    {
  490|  6.27M|        return m_has_value;
  491|  6.27M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  55.6k|    {
 1746|  55.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  55.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  55.6k|        return this->get_unexpected().error();
 1748|  55.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  55.6k|    {
  473|  55.6k|        return m_unexpected;
  474|  55.6k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.57M|    {
 1805|  2.57M|        return std::move(value());
 1806|  2.57M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.08M|    {
 1769|  3.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.08M|        return this->get_value();
 1771|  3.08M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.08M|    {
  456|  3.08M|        return m_value;
  457|  3.08M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   203k|    {
 1979|   203k|        return detail::transform_error_impl(std::move(*this),
 1980|   203k|                                            std::forward<F>(f));
 1981|   203k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   203k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   203k|    else {
 1472|   203k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   203k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   203k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 200k, False: 3.25k]
  |  |  ------------------
  ------------------
 1474|   203k|                   ? result(*std::forward<Exp>(exp))
 1475|   203k|                   : result(unexpect,
 1476|  3.25k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.25k|                                           std::forward<Exp>(exp).error()));
 1478|   203k|    }
 1479|   203k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   407k|    {
  490|   407k|        return m_has_value;
  491|   407k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   200k|    {
 1805|   200k|        return std::move(value());
 1806|   200k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   200k|    {
 1769|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   200k|        return this->get_value();
 1771|   200k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   200k|    {
  456|   200k|        return m_value;
  457|   200k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  3.25k|    {
 1756|  3.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.25k|        return std::move(this->get_unexpected().error());
 1758|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.25k|    {
  473|  3.25k|        return m_unexpected;
  474|  3.25k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  3.25k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  3.25k|    {
 1628|  3.25k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   159k|    {
 8949|   159k|        return m_current;
 8950|   159k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   143k|    {
 8842|   143k|        return m_locale;
 8843|   143k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   154k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   154k|    {
 8849|   154k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   795k|    {
 8949|   795k|        return m_current;
 8950|   795k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   799k|    {
 8842|   799k|        return m_locale;
 8843|   799k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   820k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   820k|    static_cast<    \
  |  |  935|   820k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   820k|    static_cast<    \
  |  |  935|   820k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   820k|    {
 8849|   820k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  25.6k|        : base(unexpect, std::move(e.error())),
 1616|  25.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.6k|    {
 1618|  25.6k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   127k|        : base(unexpect, std::move(e.error())),
 1616|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   127k|    {
 1618|   127k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   127k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   127k|          m_has_value(false)
  550|   127k|    {
  551|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   127k|    {
 1316|   127k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  6.28M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  6.28M|        : m_deferred_init(), m_has_value(true)
  529|  6.28M|    {
  530|  6.28M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  1.48M|    {
 4559|  1.48M|        return x.is_at_end();
 4560|  1.48M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  3.05M|    {
 4603|  3.05M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 3.05M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  3.05M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 3.05M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  3.05M|        return !read_at_position();
 4610|  3.05M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  8.43M|    {
 4583|  8.43M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  8.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  8.43M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 8.43M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  8.43M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  8.43M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.85M, False: 1.57M]
  |  |  ------------------
  ------------------
 4590|  6.85M|            return true;
 4591|  6.85M|        }
 4592|       |
 4593|  3.13M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 1.57M, False: 1.56M]
  ------------------
 4594|  1.57M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 16.7k, False: 1.56M]
  ------------------
 4595|  16.7k|                return false;
 4596|  16.7k|            }
 4597|  1.57M|        }
 4598|  1.56M|        return true;
 4599|  1.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  2.79M|    {
 4518|  2.79M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  2.79M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 2.79M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  2.79M|        auto res = read_at_position();
 4527|  2.79M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  2.79M|        return parent()->get_character_at(m_position);
 4529|  2.79M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  2.79M|    {
 4388|  2.79M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.52M, False: 1.27M]
  |  |  ------------------
  ------------------
 4389|  2.79M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  1.52M|            return m_putback_buffer[pos];
 4391|  1.52M|        }
 4392|  1.27M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.27M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.27M|        return m_current_view[start];
 4395|  1.27M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   121k|        : base(std::in_place, std::forward<U>(val)),
 1570|   121k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   121k|    {
 1572|   121k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   121k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   121k|    {
  442|   121k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   123k|    {
 1316|   123k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.09k|        : base(unexpect, std::move(e.error())),
 1616|  2.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.09k|    {
 1618|  2.09k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.09k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.09k|          m_has_value(false)
  451|  2.09k|    {
  452|  2.09k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  11.8k|        : m_unexpected(std::forward<Args>(args)...)
  359|  11.8k|    {
  360|  11.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  11.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  2.58M|    {
 4504|  2.58M|        ++m_position;
 4505|  2.58M|        (void)read_at_position();
 4506|  2.58M|        return *this;
 4507|  2.58M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  1.13M|    {
 4553|  1.13M|        return !(lhs == rhs);
 4554|  1.13M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  1.13M|    {
 4548|  1.13M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 1.13M, False: 0]
  |  Branch (4548:46): [True: 194k, False: 945k]
  ------------------
 4549|  1.13M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  11.8k|        : m_unexpected(std::forward<Err>(e))
  350|  11.8k|    {
  351|  11.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  11.8k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    902|        : base(unexpect, std::move(e.error())),
 1616|    902|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    902|    {
 1618|    902|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    902|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    902|          m_has_value(false)
  451|    902|    {
  452|    902|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  99.9k|    {
 1316|  99.9k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  99.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  99.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  99.0k|    {
 1572|  99.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  99.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  99.0k|    {
  442|  99.0k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  99.9k|    {
 1740|  99.9k|        return has_value();
 1741|  99.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   199k|    {
  490|   199k|        return m_has_value;
  491|   199k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    902|    {
 1746|    902|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    902|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    902|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    902|        return this->get_unexpected().error();
 1748|    902|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    902|    {
  473|    902|        return m_unexpected;
  474|    902|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  99.0k|    {
 1805|  99.0k|        return std::move(value());
 1806|  99.0k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  99.0k|    {
 1769|  99.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  99.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  99.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  99.0k|        return this->get_value();
 1771|  99.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  99.0k|    {
  456|  99.0k|        return m_value;
  457|  99.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  4.65M|    {
 3484|  4.65M|        return m_sentinel;
 3485|  4.65M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   305k|    {
 1740|   305k|        return has_value();
 1741|   305k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   610k|    {
  490|   610k|        return m_has_value;
  491|   610k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  14.4k|    {
 1746|  14.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.4k|        return this->get_unexpected().error();
 1748|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   241k|    {
 1805|   241k|        return std::move(value());
 1806|   241k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   290k|    {
 1769|   290k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   290k|        return this->get_value();
 1771|   290k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   290k|    {
  456|   290k|        return m_value;
  457|   290k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   128k|    {
 3480|   128k|        return m_iterator;
 3481|   128k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   128k|    {
 3484|   128k|        return m_sentinel;
 3485|   128k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   122k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   122k|    static_cast<    \
  |  |  935|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   122k|    static_cast<    \
  |  |  935|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   122k|    {
 3466|   122k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  1.57M|    {
 4570|  1.57M|        return !x.is_at_end();
 4571|  1.57M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  3.25k|        : base(unexpect, std::move(e.error())),
 1616|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.25k|    {
 1618|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.25k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.25k|          m_has_value(false)
  451|  3.25k|    {
  452|  3.25k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   203k|    {
 1316|   203k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   200k|        : base(std::in_place, std::forward<U>(val)),
 1570|   200k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   200k|    {
 1572|   200k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   200k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   200k|    {
  442|   200k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.30k|        : base(unexpect, std::move(e.error())),
 1616|  1.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.30k|    {
 1618|  1.30k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.30k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.30k|          m_has_value(false)
  451|  1.30k|    {
  452|  1.30k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   165k|    {
 1316|   165k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   163k|        : base(std::in_place, std::forward<U>(val)),
 1570|   163k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   163k|    {
 1572|   163k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   163k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   163k|    {
  442|   163k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   165k|    {
 1740|   165k|        return has_value();
 1741|   165k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   330k|    {
  490|   330k|        return m_has_value;
  491|   330k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  1.30k|    {
 1746|  1.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.30k|        return this->get_unexpected().error();
 1748|  1.30k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.30k|    {
  473|  1.30k|        return m_unexpected;
  474|  1.30k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   163k|    {
 1805|   163k|        return std::move(value());
 1806|   163k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   163k|    {
 1769|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   163k|        return this->get_value();
 1771|   163k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   163k|    {
  456|   163k|        return m_value;
  457|   163k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   799k|    {
 3000|   799k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   799k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   799k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   799k|    {
 2981|   799k|        return t.data();
 2982|   799k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.23M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.23M|    {
 1572|  2.23M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.23M|    {
  442|  2.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  49.1k|    {
 1795|  49.1k|        return value();
 1796|  49.1k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  80.8k|    {
 1795|  80.8k|        return value();
 1796|  80.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    694|        : base(std::in_place, std::forward<U>(val)),
 1570|    694|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    694|    {
 1572|    694|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    694|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    694|    {
  442|    694|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.38k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.38k|    {
 1572|  1.38k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.38k|    {
  442|  1.38k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  23.5M|    {
 4559|  23.5M|        return x.is_at_end();
 4560|  23.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  46.3M|    {
 4603|  46.3M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 46.3M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  46.3M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 46.3M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  46.3M|        return !read_at_position();
 4610|  46.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|   122M|    {
 4583|   122M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   122M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   122M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   122M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 122M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   122M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   122M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 100M, False: 22.5M]
  |  |  ------------------
  ------------------
 4590|   100M|            return true;
 4591|   100M|        }
 4592|       |
 4593|  45.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 22.5M, False: 22.5M]
  ------------------
 4594|  22.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 20.4k, False: 22.5M]
  ------------------
 4595|  20.4k|                return false;
 4596|  20.4k|            }
 4597|  22.5M|        }
 4598|  22.5M|        return true;
 4599|  22.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|   167M|    {
 4357|   167M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   167M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  45.3M|    {
 4518|  45.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  45.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  45.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 45.3M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  45.3M|        auto res = read_at_position();
 4527|  45.3M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  45.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  45.3M|        return parent()->get_character_at(m_position);
 4529|  45.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  45.3M|    {
 4388|  45.3M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  45.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.4M, False: 21.8M]
  |  |  ------------------
  ------------------
 4389|  45.3M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  23.4M|            return m_putback_buffer[pos];
 4391|  23.4M|        }
 4392|  21.8M|        const auto start = pos - m_putback_buffer.size();
 4393|  21.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  21.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  21.8M|        return m_current_view[start];
 4395|  21.8M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   646k|        : base(std::in_place, std::forward<U>(val)),
 1570|   646k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   646k|    {
 1572|   646k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   646k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   646k|    {
  442|   646k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   648k|    {
 1316|   648k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.16k|        : base(unexpect, std::move(e.error())),
 1616|  2.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.16k|    {
 1618|  2.16k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.16k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.16k|          m_has_value(false)
  451|  2.16k|    {
  452|  2.16k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  31.1M|    {
 4504|  31.1M|        ++m_position;
 4505|  31.1M|        (void)read_at_position();
 4506|  31.1M|        return *this;
 4507|  31.1M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  8.89M|    {
 4553|  8.89M|        return !(lhs == rhs);
 4554|  8.89M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  8.90M|    {
 4548|  8.90M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 8.90M, False: 0]
  |  Branch (4548:46): [True: 262k, False: 8.63M]
  ------------------
 4549|  8.90M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   127M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   127M|    else {
 4075|       |        // utf-32
 4076|   127M|        static_assert(sizeof(U) == 4);
 4077|   127M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   127M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   127M|        return 1;
 4079|   127M|    }
 4080|   127M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   127M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   127M|    else {
 4281|   127M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   127M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   127M|        auto cp = static_cast<char32_t>(input.front());
 4283|   127M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   127M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 762k, False: 126M]
  |  |  ------------------
  ------------------
 4284|   762k|            return invalid_code_point;
 4285|   762k|        }
 4286|   126M|        return cp;
 4287|   127M|    }
 4288|   127M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    866|        : base(unexpect, std::move(e.error())),
 1616|    866|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    866|    {
 1618|    866|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    866|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    866|          m_has_value(false)
  451|    866|    {
  452|    866|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   518k|    {
 1316|   518k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   517k|        : base(std::in_place, std::forward<U>(val)),
 1570|   517k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   517k|    {
 1572|   517k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   517k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   517k|    {
  442|   517k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   518k|    {
 1740|   518k|        return has_value();
 1741|   518k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.03M|    {
  490|  1.03M|        return m_has_value;
  491|  1.03M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    866|    {
 1746|    866|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    866|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    866|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    866|        return this->get_unexpected().error();
 1748|    866|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    866|    {
  473|    866|        return m_unexpected;
  474|    866|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   517k|    {
 1805|   517k|        return std::move(value());
 1806|   517k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   517k|    {
 1769|   517k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   517k|        return this->get_value();
 1771|   517k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   517k|    {
  456|   517k|        return m_value;
  457|   517k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  71.0M|    {
 3484|  71.0M|        return m_sentinel;
 3485|  71.0M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.56M|    {
 1740|  1.56M|        return has_value();
 1741|  1.56M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.13M|    {
  490|  3.13M|        return m_has_value;
  491|  3.13M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  27.8k|    {
 1746|  27.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  27.8k|        return this->get_unexpected().error();
 1748|  27.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  27.8k|    {
  473|  27.8k|        return m_unexpected;
  474|  27.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.28M|    {
 1805|  1.28M|        return std::move(value());
 1806|  1.28M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.54M|    {
 1769|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.54M|        return this->get_value();
 1771|  1.54M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.54M|    {
  456|  1.54M|        return m_value;
  457|  1.54M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  60.1M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  60.1M|    else {
 3966|  60.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  60.1M|                                       to_address(first), to_address(last)))};
 3968|  60.1M|    }
 3969|  60.1M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   180M|{
  316|   180M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   180M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   180M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   653k|    {
 3480|   653k|        return m_iterator;
 3481|   653k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   653k|    {
 3484|   653k|        return m_sentinel;
 3485|   653k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   646k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   646k|    static_cast<    \
  |  |  935|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   646k|    static_cast<    \
  |  |  935|   646k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   646k|    {
 3466|   646k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  22.7M|    {
 4570|  22.7M|        return !x.is_at_end();
 4571|  22.7M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  4.33k|        : base(unexpect, std::move(e.error())),
 1616|  4.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.33k|    {
 1618|  4.33k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  4.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.33k|          m_has_value(false)
  451|  4.33k|    {
  452|  4.33k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.29M|    {
 1316|  1.29M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.29M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.29M|    {
 1572|  1.29M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.29M|    {
  442|  1.29M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.59M|    {
  490|  2.59M|        return m_has_value;
  491|  2.59M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.29M|    {
 1769|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.29M|        return this->get_value();
 1771|  1.29M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.29M|    {
  456|  1.29M|        return m_value;
  457|  1.29M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.73k|        : base(unexpect, std::move(e.error())),
 1616|  1.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.73k|    {
 1618|  1.73k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.73k|          m_has_value(false)
  451|  1.73k|    {
  452|  1.73k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.03M|    {
 1316|  1.03M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.03M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.03M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.03M|    {
 1572|  1.03M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.03M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.03M|    {
  442|  1.03M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.29M|    {
 1979|  1.29M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.29M|                                            std::forward<F>(f));
 1981|  1.29M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.29M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.29M|    else {
 1472|  1.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.29M, False: 4.33k]
  |  |  ------------------
  ------------------
 1474|  1.29M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.29M|                   : result(unexpect,
 1476|  4.33k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.33k|                                           std::forward<Exp>(exp).error()));
 1478|  1.29M|    }
 1479|  1.29M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.29M|    {
 1805|  1.29M|        return std::move(value());
 1806|  1.29M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  4.33k|    {
 1756|  4.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.33k|        return std::move(this->get_unexpected().error());
 1758|  4.33k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.33k|    {
  473|  4.33k|        return m_unexpected;
  474|  4.33k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  4.33k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  4.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  4.33k|    {
 1628|  4.33k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  1.03M|    {
 1740|  1.03M|        return has_value();
 1741|  1.03M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.07M|    {
  490|  2.07M|        return m_has_value;
  491|  2.07M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.73k|    {
 1746|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.73k|        return this->get_unexpected().error();
 1748|  1.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.73k|    {
  473|  1.73k|        return m_unexpected;
  474|  1.73k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.03M|    {
 1805|  1.03M|        return std::move(value());
 1806|  1.03M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.03M|    {
 1769|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03M|        return this->get_value();
 1771|  1.03M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.38M|    {
 3000|  2.38M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.38M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.38M|    {
 2981|  2.38M|        return t.data();
 2982|  2.38M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   255k|    {
 1795|   255k|        return value();
 1796|   255k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   511k|    {
 1795|   511k|        return value();
 1796|   511k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|     90|        : base(std::in_place, std::forward<U>(val)),
 1570|     90|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|     90|    {
 1572|     90|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|     90|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|     90|    {
  442|     90|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    180|        : base(std::in_place, std::forward<U>(val)),
 1570|    180|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    180|    {
 1572|    180|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    180|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    180|    {
  442|    180|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  11.5M|    {
 4357|  11.5M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  11.5M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   285k|    {
 6177|   285k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 285k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   285k|        return static_cast<std::size_t>(m_desc &
 6182|   285k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   285k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   571k|    {
 6203|   571k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   571k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   285k|    {
 6145|   285k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 285k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   285k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 285k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   285k|        const auto t = type(id);
 6157|   285k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 285k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   285k|        basic_scan_arg<Context> arg;
 6162|   285k|        arg.m_type = t;
 6163|   285k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 285k, False: 0]
  ------------------
 6164|   285k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   285k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   285k|        return arg;
 6170|   285k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   285k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   285k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   285k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   285k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   285k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   285k|    {
 6207|   285k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   285k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|   494k|    {
 5961|   494k|        return m_type != detail::arg_type::none_type;
 5962|   494k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   122k|{
 9300|   122k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   122k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   122k|{
 9201|   122k|#define SCN_VISIT(Type)                                                \
 9202|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   122k|    }                                                                  \
 9205|   122k|    else {                                                             \
 9206|   122k|        return vis(monostate_val);                                     \
 9207|   122k|    }
 9208|       |
 9209|   122k|    monostate monostate_val{};
 9210|       |
 9211|   122k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 122k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 122k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 122k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 122k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 122k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 122k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 122k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 122k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 122k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 122k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 122k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 122k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 122k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 122k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 122k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 122k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 122k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 122k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|  61.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 61.1k, False: 61.1k]
  ------------------
 9249|  61.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  61.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  61.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  61.1k|    }                                                                  \
  |  | 9205|  61.1k|    else {                                                             \
  |  | 9206|  61.1k|        return vis(monostate_val);                                     \
  |  | 9207|  61.1k|    }
  ------------------
 9250|   122k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 61.1k, False: 61.1k]
  ------------------
 9251|   122k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   122k|    }                                                                  \
  |  | 9205|   122k|    else {                                                             \
  |  | 9206|   122k|        return vis(monostate_val);                                     \
  |  | 9207|   122k|    }
  ------------------
 9252|   122k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 122k]
  ------------------
 9253|   122k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   122k|    }                                                                  \
  |  | 9205|   122k|    else {                                                             \
  |  | 9206|   122k|        return vis(monostate_val);                                     \
  |  | 9207|   122k|    }
  ------------------
 9254|   122k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 122k]
  ------------------
 9255|   122k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   122k|    }                                                                  \
  |  | 9205|   122k|    else {                                                             \
  |  | 9206|   122k|        return vis(monostate_val);                                     \
  |  | 9207|   122k|    }
  ------------------
 9256|   122k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 122k]
  ------------------
 9257|   122k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   122k|    }                                                                  \
  |  | 9205|   122k|    else {                                                             \
  |  | 9206|   122k|        return vis(monostate_val);                                     \
  |  | 9207|   122k|    }
  ------------------
 9258|   122k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 122k]
  ------------------
 9259|   122k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   122k|    }                                                                  \
  |  | 9205|   122k|    else {                                                             \
  |  | 9206|   122k|        return vis(monostate_val);                                     \
  |  | 9207|   122k|    }
  ------------------
 9260|       |
 9261|   122k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 122k]
  ------------------
 9262|   122k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   122k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   122k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 122k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 122k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   122k|            SCN_CLANG_POP
 9279|   122k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   649k|{
 6006|   649k|    return arg.m_type;
 6007|   649k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   340k|{
 6018|   340k|    return arg.m_value;
 6019|   340k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   154k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   154k|    {
 6258|   154k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|  57.2k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  57.2k|    static_cast<    \
  |  |  935|  57.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  57.2k|    {
 8934|  57.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   131k|{
 4691|   131k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 131k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   131k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   131k|                            ranges::default_sentinel};
 4697|   131k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   131k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   131k|    {
 4455|   131k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   131k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   131k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  74.3k|{
 9300|  74.3k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  74.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  74.3k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  74.3k|{
 9201|  74.3k|#define SCN_VISIT(Type)                                                \
 9202|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  74.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  74.3k|    }                                                                  \
 9205|  74.3k|    else {                                                             \
 9206|  74.3k|        return vis(monostate_val);                                     \
 9207|  74.3k|    }
 9208|       |
 9209|  74.3k|    monostate monostate_val{};
 9210|       |
 9211|  74.3k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 74.3k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 74.3k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 74.3k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 74.3k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 74.3k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 74.3k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 74.3k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 74.3k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 74.3k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 74.3k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 74.3k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 74.3k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 74.3k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 74.3k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 74.3k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 74.3k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 74.3k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 74.3k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 74.3k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|  74.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 74.3k, False: 0]
  ------------------
 9251|  74.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  74.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  74.3k|    }                                                                  \
  |  | 9205|  74.3k|    else {                                                             \
  |  | 9206|  74.3k|        return vis(monostate_val);                                     \
  |  | 9207|  74.3k|    }
  ------------------
 9252|  74.3k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 74.3k]
  ------------------
 9253|  74.3k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  74.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  74.3k|    }                                                                  \
  |  | 9205|  74.3k|    else {                                                             \
  |  | 9206|  74.3k|        return vis(monostate_val);                                     \
  |  | 9207|  74.3k|    }
  ------------------
 9254|  74.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 74.3k]
  ------------------
 9255|  74.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  74.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  74.3k|    }                                                                  \
  |  | 9205|  74.3k|    else {                                                             \
  |  | 9206|  74.3k|        return vis(monostate_val);                                     \
  |  | 9207|  74.3k|    }
  ------------------
 9256|  74.3k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 74.3k]
  ------------------
 9257|  74.3k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  74.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  74.3k|    }                                                                  \
  |  | 9205|  74.3k|    else {                                                             \
  |  | 9206|  74.3k|        return vis(monostate_val);                                     \
  |  | 9207|  74.3k|    }
  ------------------
 9258|  74.3k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 74.3k]
  ------------------
 9259|  74.3k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  74.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  74.3k|    }                                                                  \
  |  | 9205|  74.3k|    else {                                                             \
  |  | 9206|  74.3k|        return vis(monostate_val);                                     \
  |  | 9207|  74.3k|    }
  ------------------
 9260|       |
 9261|  74.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 74.3k]
  ------------------
 9262|  74.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  74.3k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  74.3k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 74.3k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 74.3k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  74.3k|            SCN_CLANG_POP
 9279|  74.3k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  97.1k|    {
 3075|  97.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  97.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  97.1k|    {
 3041|  97.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  97.1k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  97.1k|{
 7793|  97.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  97.1k|    handler.check_args_exhausted();
 7795|  97.1k|    return handler.get_error();
 7796|  97.1k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  97.1k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  97.1k|    auto begin = format.data();
 7761|  97.1k|    auto it = begin;
 7762|  97.1k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   176k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 97.1k, False: 79.4k]
  ------------------
 7765|  97.1k|        const auto ch = *it++;
 7766|  97.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 97.1k, False: 0]
  ------------------
 7767|  97.1k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  97.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  97.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 17.7k, False: 79.4k]
  ------------------
 7771|  17.7k|                return;
 7772|  17.7k|            }
 7773|  97.1k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  97.1k|    }
 7784|       |
 7785|  79.4k|    handler.on_literal_text(begin, end);
 7786|  79.4k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  97.1k|{
 7690|  97.1k|    struct id_adapter {
 7691|  97.1k|        constexpr void operator()()
 7692|  97.1k|        {
 7693|  97.1k|            arg_id = handler.on_arg_id();
 7694|  97.1k|        }
 7695|  97.1k|        constexpr void operator()(std::size_t id)
 7696|  97.1k|        {
 7697|  97.1k|            arg_id = handler.on_arg_id(id);
 7698|  97.1k|        }
 7699|       |
 7700|  97.1k|        constexpr void on_error(const char* msg)
 7701|  97.1k|        {
 7702|  97.1k|            SCN_UNLIKELY_ATTR
 7703|  97.1k|            handler.on_error(msg);
 7704|  97.1k|        }
 7705|       |
 7706|  97.1k|        Handler& handler;
 7707|  97.1k|        std::size_t arg_id;
 7708|  97.1k|    };
 7709|       |
 7710|  97.1k|    ++begin;
 7711|  97.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 97.1k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  97.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 97.1k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  97.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 97.1k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  97.1k|    else {
 7723|  97.1k|        auto adapter = id_adapter{handler, 0};
 7724|  97.1k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  97.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 97.1k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  97.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 97.1k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  97.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 97.1k, False: 0]
  ------------------
 7735|  97.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 97.1k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  97.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  97.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.08k, False: 90.0k]
  |  |  |  Branch (865:45): [True: 0, False: 97.1k]
  |  |  |  Branch (865:45): [True: 7.08k, False: 90.0k]
  |  |  ------------------
  ------------------
 7741|  7.08k|                handler.on_error("Unknown format specifier");
 7742|  7.08k|                return begin;
 7743|  7.08k|            }
 7744|  97.1k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  97.1k|    }
 7751|  90.0k|    return begin + 1;
 7752|  97.1k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   154k|    {
 8832|   154k|        return m_args.get(id);
 8833|   154k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   154k|    {
 6286|   154k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   154k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   154k|        do_check_arg_id(id);
 6294|   154k|        return id;
 6295|   154k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   154k|{
 6806|   154k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   154k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   154k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  97.1k|{
 7191|  97.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  97.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  97.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 97.1k, False: 0]
  |  Branch (7192:26): [True: 0, False: 97.1k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  97.1k|    handler();
 7197|  97.1k|    return begin;
 7198|  97.1k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7139|  10.6k|{
 7140|  10.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  10.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  10.6k|    unsigned long long value = 0;
 7144|  21.2k|    do {
 7145|  21.2k|        value *= 10;
 7146|  21.2k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  21.2k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 0, False: 21.2k]
  ------------------
 7148|  21.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|      0|            return -1;
 7150|      0|        }
 7151|  21.2k|        ++begin;
 7152|  21.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 21.2k, False: 0]
  |  Branch (7152:30): [True: 21.2k, False: 0]
  |  Branch (7152:47): [True: 10.6k, False: 10.6k]
  ------------------
 7153|  10.6k|    return static_cast<int>(value);
 7154|  10.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  97.1k|        {
 7693|  97.1k|            arg_id = handler.on_arg_id();
 7694|  97.1k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   143k|    {
 6281|   143k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   143k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|   298k|    {
 6270|   298k|        return m_format.data();
 6271|   298k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  97.1k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  97.1k|    {
 7871|  97.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  97.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  97.1k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|  97.1k|{
 7606|  97.1k|    auto do_presentation = [&]() -> const CharT* {
 7607|  97.1k|        if (*begin == CharT{'['}) {
 7608|  97.1k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  97.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  97.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  97.1k|                return begin;
 7614|  97.1k|            }
 7615|  97.1k|            handler.on_character_set_string(set);
 7616|  97.1k|            return begin;
 7617|  97.1k|        }
 7618|  97.1k|        if (*begin == CharT{'/'}) {
 7619|  97.1k|            return parse_presentation_regex(begin, end, handler);
 7620|  97.1k|        }
 7621|  97.1k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  97.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  97.1k|            handler.on_error("Invalid type specifier in format string");
 7624|  97.1k|            return begin;
 7625|  97.1k|        }
 7626|  97.1k|        handler.on_type(type);
 7627|  97.1k|        return begin;
 7628|  97.1k|    };
 7629|       |
 7630|  97.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 97.1k, False: 0]
  |  Branch (7630:28): [True: 85.1k, False: 12.0k]
  ------------------
 7631|  97.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 85.1k, False: 0]
  |  Branch (7631:36): [True: 81.5k, False: 3.54k]
  ------------------
 7632|  81.5k|        return do_presentation();
 7633|  81.5k|    }
 7634|       |
 7635|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  15.5k|    begin = parse_align(begin, end, handler);
 7641|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  15.5k|    begin = parse_width(begin, end, handler);
 7647|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  15.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 15.5k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  15.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 3.54k, False: 12.0k]
  ------------------
 7666|  3.54k|        handler.on_localized();
 7667|  3.54k|        ++begin;
 7668|  3.54k|    }
 7669|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  15.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 15.5k, False: 0]
  |  Branch (7674:25): [True: 12.0k, False: 3.54k]
  ------------------
 7675|  12.0k|        do_presentation();
 7676|  12.0k|    }
 7677|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  15.5k|    return begin;
 7683|  15.5k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|   136k|{
 7255|   136k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 131k, False: 5.31k]
  |  Branch (7255:33): [True: 131k, False: 0]
  ------------------
 7256|   136k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 5.31k, False: 0]
  |  Branch (7256:33): [True: 5.31k, False: 0]
  ------------------
 7257|   136k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  93.5k|    auto do_presentation = [&]() -> const CharT* {
 7607|  93.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 4.92k, False: 88.6k]
  ------------------
 7608|  4.92k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  4.92k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.92k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  4.92k|            handler.on_character_set_string(set);
 7616|  4.92k|            return begin;
 7617|  4.92k|        }
 7618|  88.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 88.6k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|  88.6k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  88.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 85.1k]
  |  |  ------------------
  ------------------
 7623|  3.54k|            handler.on_error("Invalid type specifier in format string");
 7624|  3.54k|            return begin;
 7625|  3.54k|        }
 7626|  85.1k|        handler.on_type(type);
 7627|  85.1k|        return begin;
 7628|  88.6k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  4.92k|{
 7445|  4.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  4.92k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  4.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  4.92k|    auto start = begin;
 7449|  4.92k|    ++begin;
 7450|       |
 7451|  4.92k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.92k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  4.92k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 4.92k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  4.92k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 4.92k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  14.7k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 14.7k, False: 0]
  ------------------
 7476|  14.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  14.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 4.92k, False: 9.85k]
  ------------------
 7481|  4.92k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  4.92k|        }
 7483|       |
 7484|  9.85k|        parse_presentation_set_literal(begin, end, handler);
 7485|  9.85k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  4.92k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7408|  9.85k|{
 7409|  9.85k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  9.85k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  9.85k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.85k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  9.85k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 9.85k, False: 0]
  |  Branch (7416:25): [True: 9.85k, False: 0]
  |  Branch (7416:49): [True: 9.85k, False: 0]
  ------------------
 7417|  9.85k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 9.85k, False: 0]
  ------------------
 7418|  9.85k|        ++begin;
 7419|       |
 7420|  9.85k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  9.85k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.85k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  9.85k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.85k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  9.85k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  9.85k|        return;
 7434|  9.85k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7384|  19.7k|{
 7385|  19.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  19.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  19.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.7k]
  |  |  |  Branch (865:45): [True: 0, False: 19.7k]
  |  |  |  Branch (865:45): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  19.7k|    const auto cp =
 7394|  19.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  19.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  19.7k|    begin += len;
 7401|  19.7k|    return cp;
 7402|  19.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  7.39k|    {
 7099|  7.39k|        m_specs.charset_string_data = fmt.data();
 7100|  7.39k|        m_specs.charset_string_size = fmt.size();
 7101|  7.39k|        on_type(presentation_type::string_set);
 7102|  7.39k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|   141k|{
 7203|   141k|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 141k]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 141k]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 141k]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 141k]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 141k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 141k]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 141k]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 141k]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 141k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 141k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 141k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 141k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 141k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 141k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 141k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 141k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 141k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 141k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|   131k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 131k, False: 10.6k]
  ------------------
 7234|   131k|            return presentation_type::string;
 7235|  5.31k|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 5.31k, False: 136k]
  ------------------
 7236|  5.31k|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 141k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 141k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 141k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 141k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  5.31k|        default:
  ------------------
  |  Branch (7247:9): [True: 5.31k, False: 136k]
  ------------------
 7248|  5.31k|            return presentation_type::none;
 7249|   141k|    }
 7250|   141k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  15.5k|{
 7280|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  15.5k|    auto check_align = [](wchar_t ch) {
 7283|  15.5k|        switch (ch) {
 7284|  15.5k|            case L'<':
 7285|  15.5k|                return align_type::left;
 7286|  15.5k|            case L'>':
 7287|  15.5k|                return align_type::right;
 7288|  15.5k|            case L'^':
 7289|  15.5k|                return align_type::center;
 7290|  15.5k|            default:
 7291|  15.5k|                return align_type::none;
 7292|  15.5k|        }
 7293|  15.5k|    };
 7294|       |
 7295|  15.5k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  15.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  |  Branch (865:45): [True: 0, False: 15.5k]
  |  |  |  Branch (865:45): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7297|  15.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  15.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  15.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  15.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  15.5k|    const auto begin_before_fill = begin;
 7307|  15.5k|    begin += potential_fill_len;
 7308|       |
 7309|  15.5k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 15.5k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  15.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  15.5k|    const auto begin_after_fill = begin;
 7315|  15.5k|    ++begin;
 7316|       |
 7317|  15.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 15.5k, False: 0]
  ------------------
 7318|  15.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  15.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 4.92k, False: 10.6k]
  ------------------
 7323|  4.92k|            return begin_before_fill;
 7324|  4.92k|        }
 7325|  15.5k|    }
 7326|       |
 7327|  10.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 10.6k, False: 0]
  ------------------
 7328|  10.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 10.6k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  10.6k|        return begin_before_fill;
 7333|  10.6k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  10.6k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|  23.3k|{
 7262|  23.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|  23.3k|    else {
 7267|  23.3k|        const auto lengths =
 7268|  23.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|  23.3k|            "\3\4";
 7270|  23.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|  23.3k|        return len;
 7272|  23.3k|    }
 7273|  23.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  31.0k|    auto check_align = [](wchar_t ch) {
 7283|  31.0k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 31.0k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 31.0k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 31.0k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  31.0k|            default:
  ------------------
  |  Branch (7290:13): [True: 31.0k, False: 0]
  ------------------
 7291|  31.0k|                return align_type::none;
 7292|  31.0k|        }
 7293|  31.0k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  15.5k|{
 7345|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  15.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 15.5k, False: 0]
  |  Branch (7347:33): [True: 7.08k, False: 8.46k]
  ------------------
 7348|  7.08k|        int width = parse_simple_int(begin, end);
 7349|  7.08k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  7.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.08k, False: 0]
  |  |  ------------------
  ------------------
 7350|  7.08k|            handler.on_width(width);
 7351|  7.08k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  7.08k|    }
 7357|  15.5k|    return begin;
 7358|  15.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|  3.54k|    {
 7876|  3.54k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  3.54k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 3.54k, False: 0]
  ------------------
 7878|  3.54k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 3.54k, False: 0]
  ------------------
 7879|  3.54k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 3.54k, False: 0]
  ------------------
 7880|  3.54k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 3.54k, False: 0]
  ------------------
 7881|  3.54k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  3.54k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  3.54k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  90.0k|{
 9300|  90.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  90.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  90.0k|{
 9201|  90.0k|#define SCN_VISIT(Type)                                                \
 9202|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  90.0k|    }                                                                  \
 9205|  90.0k|    else {                                                             \
 9206|  90.0k|        return vis(monostate_val);                                     \
 9207|  90.0k|    }
 9208|       |
 9209|  90.0k|    monostate monostate_val{};
 9210|       |
 9211|  90.0k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 90.0k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 90.0k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 90.0k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 90.0k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 90.0k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 90.0k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 90.0k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 90.0k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 90.0k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 90.0k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 90.0k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 90.0k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 90.0k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 90.0k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 90.0k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 90.0k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 90.0k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 90.0k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|  45.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 45.0k, False: 45.0k]
  ------------------
 9249|  45.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  45.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.0k|    }                                                                  \
  |  | 9205|  45.0k|    else {                                                             \
  |  | 9206|  45.0k|        return vis(monostate_val);                                     \
  |  | 9207|  45.0k|    }
  ------------------
 9250|  90.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 45.0k, False: 45.0k]
  ------------------
 9251|  90.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.0k|    }                                                                  \
  |  | 9205|  90.0k|    else {                                                             \
  |  | 9206|  90.0k|        return vis(monostate_val);                                     \
  |  | 9207|  90.0k|    }
  ------------------
 9252|  90.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 90.0k]
  ------------------
 9253|  90.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.0k|    }                                                                  \
  |  | 9205|  90.0k|    else {                                                             \
  |  | 9206|  90.0k|        return vis(monostate_val);                                     \
  |  | 9207|  90.0k|    }
  ------------------
 9254|  90.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 90.0k]
  ------------------
 9255|  90.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.0k|    }                                                                  \
  |  | 9205|  90.0k|    else {                                                             \
  |  | 9206|  90.0k|        return vis(monostate_val);                                     \
  |  | 9207|  90.0k|    }
  ------------------
 9256|  90.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 90.0k]
  ------------------
 9257|  90.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.0k|    }                                                                  \
  |  | 9205|  90.0k|    else {                                                             \
  |  | 9206|  90.0k|        return vis(monostate_val);                                     \
  |  | 9207|  90.0k|    }
  ------------------
 9258|  90.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 90.0k]
  ------------------
 9259|  90.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.0k|    }                                                                  \
  |  | 9205|  90.0k|    else {                                                             \
  |  | 9206|  90.0k|        return vis(monostate_val);                                     \
  |  | 9207|  90.0k|    }
  ------------------
 9260|       |
 9261|  90.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 90.0k]
  ------------------
 9262|  90.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  90.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  90.0k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 90.0k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 90.0k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  90.0k|            SCN_CLANG_POP
 9279|  90.0k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  57.2k|{
 7793|  57.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  57.2k|    handler.check_args_exhausted();
 7795|  57.2k|    return handler.get_error();
 7796|  57.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  57.2k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  57.2k|    auto begin = format.data();
 7761|  57.2k|    auto it = begin;
 7762|  57.2k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   105k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 57.2k, False: 48.4k]
  ------------------
 7765|  57.2k|        const auto ch = *it++;
 7766|  57.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 57.2k, False: 0]
  ------------------
 7767|  57.2k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  57.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  57.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 8.85k, False: 48.4k]
  ------------------
 7771|  8.85k|                return;
 7772|  8.85k|            }
 7773|  57.2k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  57.2k|    }
 7784|       |
 7785|  48.4k|    handler.on_literal_text(begin, end);
 7786|  48.4k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|  48.4k|    {
 8971|  48.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  48.4k|    static_cast<    \
  |  |  935|  48.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|  48.4k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|  57.2k|{
 7690|  57.2k|    struct id_adapter {
 7691|  57.2k|        constexpr void operator()()
 7692|  57.2k|        {
 7693|  57.2k|            arg_id = handler.on_arg_id();
 7694|  57.2k|        }
 7695|  57.2k|        constexpr void operator()(std::size_t id)
 7696|  57.2k|        {
 7697|  57.2k|            arg_id = handler.on_arg_id(id);
 7698|  57.2k|        }
 7699|       |
 7700|  57.2k|        constexpr void on_error(const char* msg)
 7701|  57.2k|        {
 7702|  57.2k|            SCN_UNLIKELY_ATTR
 7703|  57.2k|            handler.on_error(msg);
 7704|  57.2k|        }
 7705|       |
 7706|  57.2k|        Handler& handler;
 7707|  57.2k|        std::size_t arg_id;
 7708|  57.2k|    };
 7709|       |
 7710|  57.2k|    ++begin;
 7711|  57.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.2k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  57.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 57.2k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  57.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 57.2k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  57.2k|    else {
 7723|  57.2k|        auto adapter = id_adapter{handler, 0};
 7724|  57.2k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  57.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.2k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  57.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 57.2k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  57.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 57.2k, False: 0]
  ------------------
 7735|  57.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.2k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  57.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  57.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 53.7k]
  |  |  |  Branch (865:45): [True: 0, False: 57.2k]
  |  |  |  Branch (865:45): [True: 3.54k, False: 53.7k]
  |  |  ------------------
  ------------------
 7741|  3.54k|                handler.on_error("Unknown format specifier");
 7742|  3.54k|                return begin;
 7743|  3.54k|            }
 7744|  57.2k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  57.2k|    }
 7751|  53.7k|    return begin + 1;
 7752|  57.2k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  57.2k|{
 7191|  57.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  57.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 57.2k, False: 0]
  |  Branch (7192:26): [True: 0, False: 57.2k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  57.2k|    handler();
 7197|  57.2k|    return begin;
 7198|  57.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  57.2k|        {
 7693|  57.2k|            arg_id = handler.on_arg_id();
 7694|  57.2k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|  57.2k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  57.2k|    {
 7871|  57.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  57.2k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|  57.2k|{
 7606|  57.2k|    auto do_presentation = [&]() -> const CharT* {
 7607|  57.2k|        if (*begin == CharT{'['}) {
 7608|  57.2k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  57.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  57.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  57.2k|                return begin;
 7614|  57.2k|            }
 7615|  57.2k|            handler.on_character_set_string(set);
 7616|  57.2k|            return begin;
 7617|  57.2k|        }
 7618|  57.2k|        if (*begin == CharT{'/'}) {
 7619|  57.2k|            return parse_presentation_regex(begin, end, handler);
 7620|  57.2k|        }
 7621|  57.2k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  57.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  57.2k|            handler.on_error("Invalid type specifier in format string");
 7624|  57.2k|            return begin;
 7625|  57.2k|        }
 7626|  57.2k|        handler.on_type(type);
 7627|  57.2k|        return begin;
 7628|  57.2k|    };
 7629|       |
 7630|  57.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 57.2k, False: 0]
  |  Branch (7630:28): [True: 51.2k, False: 6.00k]
  ------------------
 7631|  57.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 51.2k, False: 0]
  |  Branch (7631:36): [True: 49.5k, False: 1.77k]
  ------------------
 7632|  49.5k|        return do_presentation();
 7633|  49.5k|    }
 7634|       |
 7635|  7.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  7.77k|    begin = parse_align(begin, end, handler);
 7641|  7.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  7.77k|    begin = parse_width(begin, end, handler);
 7647|  7.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  7.77k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 7.77k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  7.77k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 1.77k, False: 6.00k]
  ------------------
 7666|  1.77k|        handler.on_localized();
 7667|  1.77k|        ++begin;
 7668|  1.77k|    }
 7669|  7.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  7.77k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 7.77k, False: 0]
  |  Branch (7674:25): [True: 6.00k, False: 1.77k]
  ------------------
 7675|  6.00k|        do_presentation();
 7676|  6.00k|    }
 7677|  7.77k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  7.77k|    return begin;
 7683|  7.77k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|  55.5k|    auto do_presentation = [&]() -> const CharT* {
 7607|  55.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 2.46k, False: 53.0k]
  ------------------
 7608|  2.46k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  2.46k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  2.46k|            handler.on_character_set_string(set);
 7616|  2.46k|            return begin;
 7617|  2.46k|        }
 7618|  53.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 53.0k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|  53.0k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  53.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 51.2k]
  |  |  ------------------
  ------------------
 7623|  1.77k|            handler.on_error("Invalid type specifier in format string");
 7624|  1.77k|            return begin;
 7625|  1.77k|        }
 7626|  51.2k|        handler.on_type(type);
 7627|  51.2k|        return begin;
 7628|  53.0k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7444|  2.46k|{
 7445|  2.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.46k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.46k|    auto start = begin;
 7449|  2.46k|    ++begin;
 7450|       |
 7451|  2.46k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  2.46k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 2.46k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  2.46k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 2.46k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  7.39k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 7.39k, False: 0]
  ------------------
 7476|  7.39k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.39k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  7.39k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 2.46k, False: 4.92k]
  ------------------
 7481|  2.46k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  2.46k|        }
 7483|       |
 7484|  4.92k|        parse_presentation_set_literal(begin, end, handler);
 7485|  4.92k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  2.46k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7408|  4.92k|{
 7409|  4.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  4.92k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  4.92k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.92k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  4.92k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 4.92k, False: 0]
  |  Branch (7416:25): [True: 4.92k, False: 0]
  |  Branch (7416:49): [True: 4.92k, False: 0]
  ------------------
 7417|  4.92k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 4.92k, False: 0]
  ------------------
 7418|  4.92k|        ++begin;
 7419|       |
 7420|  4.92k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  4.92k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.92k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  4.92k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.92k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  4.92k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  4.92k|        return;
 7434|  4.92k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7384|  9.85k|{
 7385|  9.85k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  9.85k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  9.85k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.85k]
  |  |  |  Branch (865:45): [True: 0, False: 9.85k]
  |  |  |  Branch (865:45): [True: 0, False: 9.85k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  9.85k|    const auto cp =
 7394|  9.85k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  9.85k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.85k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  9.85k|    begin += len;
 7401|  9.85k|    return cp;
 7402|  9.85k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|  7.77k|{
 7280|  7.77k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  7.77k|    auto check_align = [](wchar_t ch) {
 7283|  7.77k|        switch (ch) {
 7284|  7.77k|            case L'<':
 7285|  7.77k|                return align_type::left;
 7286|  7.77k|            case L'>':
 7287|  7.77k|                return align_type::right;
 7288|  7.77k|            case L'^':
 7289|  7.77k|                return align_type::center;
 7290|  7.77k|            default:
 7291|  7.77k|                return align_type::none;
 7292|  7.77k|        }
 7293|  7.77k|    };
 7294|       |
 7295|  7.77k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  7.77k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  |  Branch (865:45): [True: 0, False: 7.77k]
  |  |  |  Branch (865:45): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7297|  7.77k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  7.77k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  7.77k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  7.77k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  7.77k|    const auto begin_before_fill = begin;
 7307|  7.77k|    begin += potential_fill_len;
 7308|       |
 7309|  7.77k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 7.77k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  7.77k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  7.77k|    const auto begin_after_fill = begin;
 7315|  7.77k|    ++begin;
 7316|       |
 7317|  7.77k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 7.77k, False: 0]
  ------------------
 7318|  7.77k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.77k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  7.77k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 2.46k, False: 5.31k]
  ------------------
 7323|  2.46k|            return begin_before_fill;
 7324|  2.46k|        }
 7325|  7.77k|    }
 7326|       |
 7327|  5.31k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 5.31k, False: 0]
  ------------------
 7328|  5.31k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 5.31k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  5.31k|        return begin_before_fill;
 7333|  5.31k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  5.31k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|  15.5k|    auto check_align = [](wchar_t ch) {
 7283|  15.5k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 15.5k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 15.5k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 15.5k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  15.5k|            default:
  ------------------
  |  Branch (7290:13): [True: 15.5k, False: 0]
  ------------------
 7291|  15.5k|                return align_type::none;
 7292|  15.5k|        }
 7293|  15.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|  7.77k|{
 7345|  7.77k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  7.77k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 7.77k, False: 0]
  |  Branch (7347:33): [True: 3.54k, False: 4.23k]
  ------------------
 7348|  3.54k|        int width = parse_simple_int(begin, end);
 7349|  3.54k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.54k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.54k, False: 0]
  |  |  ------------------
  ------------------
 7350|  3.54k|            handler.on_width(width);
 7351|  3.54k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  3.54k|    }
 7357|  7.77k|    return begin;
 7358|  7.77k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|  1.77k|    {
 7876|  1.77k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  1.77k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 1.77k, False: 0]
  ------------------
 7878|  1.77k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 1.77k, False: 0]
  ------------------
 7879|  1.77k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 1.77k, False: 0]
  ------------------
 7880|  1.77k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 1.77k, False: 0]
  ------------------
 7881|  1.77k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  1.77k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  1.77k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|  53.7k|{
 9300|  53.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  53.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  53.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  53.7k|{
 9201|  53.7k|#define SCN_VISIT(Type)                                                \
 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  53.7k|    }                                                                  \
 9205|  53.7k|    else {                                                             \
 9206|  53.7k|        return vis(monostate_val);                                     \
 9207|  53.7k|    }
 9208|       |
 9209|  53.7k|    monostate monostate_val{};
 9210|       |
 9211|  53.7k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 53.7k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 53.7k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 53.7k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 53.7k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 53.7k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 53.7k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 53.7k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 53.7k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 53.7k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 53.7k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 53.7k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 53.7k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 53.7k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 53.7k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 53.7k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 53.7k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 53.7k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 53.7k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 53.7k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|  53.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 53.7k, False: 0]
  ------------------
 9251|  53.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.7k|    }                                                                  \
  |  | 9205|  53.7k|    else {                                                             \
  |  | 9206|  53.7k|        return vis(monostate_val);                                     \
  |  | 9207|  53.7k|    }
  ------------------
 9252|  53.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 53.7k]
  ------------------
 9253|  53.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.7k|    }                                                                  \
  |  | 9205|  53.7k|    else {                                                             \
  |  | 9206|  53.7k|        return vis(monostate_val);                                     \
  |  | 9207|  53.7k|    }
  ------------------
 9254|  53.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 53.7k]
  ------------------
 9255|  53.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.7k|    }                                                                  \
  |  | 9205|  53.7k|    else {                                                             \
  |  | 9206|  53.7k|        return vis(monostate_val);                                     \
  |  | 9207|  53.7k|    }
  ------------------
 9256|  53.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 53.7k]
  ------------------
 9257|  53.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.7k|    }                                                                  \
  |  | 9205|  53.7k|    else {                                                             \
  |  | 9206|  53.7k|        return vis(monostate_val);                                     \
  |  | 9207|  53.7k|    }
  ------------------
 9258|  53.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 53.7k]
  ------------------
 9259|  53.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.7k|    }                                                                  \
  |  | 9205|  53.7k|    else {                                                             \
  |  | 9206|  53.7k|        return vis(monostate_val);                                     \
  |  | 9207|  53.7k|    }
  ------------------
 9260|       |
 9261|  53.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 53.7k]
  ------------------
 9262|  53.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  53.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  53.7k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 53.7k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 53.7k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  53.7k|            SCN_CLANG_POP
 9279|  53.7k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  11.5k|    {
 4352|  11.5k|        return sync(0);
 4353|  11.5k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|  1.59M|    {
 6177|  1.59M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  1.59M|        return static_cast<std::size_t>(m_desc &
 6182|  1.59M|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  1.59M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|  3.19M|    {
 6203|  3.19M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  3.19M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  1.59M|    {
 6145|  1.59M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  1.59M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  1.59M|        const auto t = type(id);
 6157|  1.59M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.59M|        basic_scan_arg<Context> arg;
 6162|  1.59M|        arg.m_type = t;
 6163|  1.59M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 1.59M, False: 0]
  ------------------
 6164|  1.59M|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  1.59M|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  1.59M|        return arg;
 6170|  1.59M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  1.59M|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  1.59M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  1.59M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  1.59M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  1.59M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  1.59M|    {
 6207|  1.59M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  1.59M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  2.78M|    {
 5961|  2.78M|        return m_type != detail::arg_type::none_type;
 5962|  2.78M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   777k|{
 9300|   777k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   777k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   777k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   777k|{
 9201|   777k|#define SCN_VISIT(Type)                                                \
 9202|   777k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   777k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   777k|    }                                                                  \
 9205|   777k|    else {                                                             \
 9206|   777k|        return vis(monostate_val);                                     \
 9207|   777k|    }
 9208|       |
 9209|   777k|    monostate monostate_val{};
 9210|       |
 9211|   777k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 777k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 777k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 777k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 777k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 777k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 777k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 777k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 777k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 777k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 777k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 777k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 777k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 777k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 777k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 777k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 777k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 777k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 777k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 777k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 777k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|   388k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 388k, False: 388k]
  ------------------
 9253|   388k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   388k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   388k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   388k|    }                                                                  \
  |  | 9205|   388k|    else {                                                             \
  |  | 9206|   388k|        return vis(monostate_val);                                     \
  |  | 9207|   388k|    }
  ------------------
 9254|   777k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 388k, False: 388k]
  ------------------
 9255|   777k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   777k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   777k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   777k|    }                                                                  \
  |  | 9205|   777k|    else {                                                             \
  |  | 9206|   777k|        return vis(monostate_val);                                     \
  |  | 9207|   777k|    }
  ------------------
 9256|   777k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 777k]
  ------------------
 9257|   777k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   777k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   777k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   777k|    }                                                                  \
  |  | 9205|   777k|    else {                                                             \
  |  | 9206|   777k|        return vis(monostate_val);                                     \
  |  | 9207|   777k|    }
  ------------------
 9258|   777k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 777k]
  ------------------
 9259|   777k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   777k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   777k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   777k|    }                                                                  \
  |  | 9205|   777k|    else {                                                             \
  |  | 9206|   777k|        return vis(monostate_val);                                     \
  |  | 9207|   777k|    }
  ------------------
 9260|       |
 9261|   777k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 777k]
  ------------------
 9262|   777k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   777k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   777k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 777k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 777k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   777k|            SCN_CLANG_POP
 9279|   777k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  3.60M|{
 6006|  3.60M|    return arg.m_type;
 6007|  3.60M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  1.96M|{
 6018|  1.96M|    return arg.m_value;
 6019|  1.96M|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   820k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   820k|    {
 6258|   820k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   273k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   273k|    static_cast<    \
  |  |  935|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   273k|    {
 8934|   273k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   547k|    {
 3075|   547k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   547k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   547k|    {
 3041|   547k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   547k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   547k|{
 7793|   547k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   547k|    handler.check_args_exhausted();
 7795|   547k|    return handler.get_error();
 7796|   547k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   547k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   547k|    auto begin = format.data();
 7761|   547k|    auto it = begin;
 7762|   547k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  1.05M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 547k, False: 511k]
  ------------------
 7765|   547k|        const auto ch = *it++;
 7766|   547k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 547k, False: 0]
  ------------------
 7767|   547k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   547k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   547k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 35.4k, False: 511k]
  ------------------
 7771|  35.4k|                return;
 7772|  35.4k|            }
 7773|   547k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   547k|    }
 7784|       |
 7785|   511k|    handler.on_literal_text(begin, end);
 7786|   511k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   547k|{
 7690|   547k|    struct id_adapter {
 7691|   547k|        constexpr void operator()()
 7692|   547k|        {
 7693|   547k|            arg_id = handler.on_arg_id();
 7694|   547k|        }
 7695|   547k|        constexpr void operator()(std::size_t id)
 7696|   547k|        {
 7697|   547k|            arg_id = handler.on_arg_id(id);
 7698|   547k|        }
 7699|       |
 7700|   547k|        constexpr void on_error(const char* msg)
 7701|   547k|        {
 7702|   547k|            SCN_UNLIKELY_ATTR
 7703|   547k|            handler.on_error(msg);
 7704|   547k|        }
 7705|       |
 7706|   547k|        Handler& handler;
 7707|   547k|        std::size_t arg_id;
 7708|   547k|    };
 7709|       |
 7710|   547k|    ++begin;
 7711|   547k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 547k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   547k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 547k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   547k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 547k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   547k|    else {
 7723|   547k|        auto adapter = id_adapter{handler, 0};
 7724|   547k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   547k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 547k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   547k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 547k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   547k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 547k, False: 0]
  ------------------
 7735|   547k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 547k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   547k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   547k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.1k, False: 532k]
  |  |  |  Branch (865:45): [True: 0, False: 547k]
  |  |  |  Branch (865:45): [True: 14.1k, False: 532k]
  |  |  ------------------
  ------------------
 7741|  14.1k|                handler.on_error("Unknown format specifier");
 7742|  14.1k|                return begin;
 7743|  14.1k|            }
 7744|   547k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   547k|    }
 7751|   532k|    return begin + 1;
 7752|   547k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   820k|    {
 8832|   820k|        return m_args.get(id);
 8833|   820k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   820k|    {
 6286|   820k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 820k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   820k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   820k|        do_check_arg_id(id);
 6294|   820k|        return id;
 6295|   820k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   820k|{
 6806|   820k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   820k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   820k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   547k|{
 7191|   547k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   547k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 547k, False: 0]
  |  Branch (7192:26): [True: 0, False: 547k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   547k|    handler();
 7197|   547k|    return begin;
 7198|   547k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7139|  21.2k|{
 7140|  21.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  21.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  21.2k|    unsigned long long value = 0;
 7144|  42.4k|    do {
 7145|  42.4k|        value *= 10;
 7146|  42.4k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  42.4k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 0, False: 42.4k]
  ------------------
 7148|  42.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|      0|            return -1;
 7150|      0|        }
 7151|  42.4k|        ++begin;
 7152|  42.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 42.4k, False: 0]
  |  Branch (7152:30): [True: 42.4k, False: 0]
  |  Branch (7152:47): [True: 21.2k, False: 21.2k]
  ------------------
 7153|  21.2k|    return static_cast<int>(value);
 7154|  21.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   547k|        {
 7693|   547k|            arg_id = handler.on_arg_id();
 7694|   547k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   799k|    {
 6281|   799k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   799k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   662k|{
 4691|   662k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 662k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   662k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   662k|                            ranges::default_sentinel};
 4697|   662k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   662k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   662k|    {
 4455|   662k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   662k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   662k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  1.62M|    {
 6270|  1.62M|        return m_format.data();
 6271|  1.62M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   547k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   547k|    {
 7871|   547k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   547k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   547k|{
 7606|   547k|    auto do_presentation = [&]() -> const CharT* {
 7607|   547k|        if (*begin == CharT{'['}) {
 7608|   547k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   547k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   547k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   547k|                return begin;
 7614|   547k|            }
 7615|   547k|            handler.on_character_set_string(set);
 7616|   547k|            return begin;
 7617|   547k|        }
 7618|   547k|        if (*begin == CharT{'/'}) {
 7619|   547k|            return parse_presentation_regex(begin, end, handler);
 7620|   547k|        }
 7621|   547k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   547k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   547k|            handler.on_error("Invalid type specifier in format string");
 7624|   547k|            return begin;
 7625|   547k|        }
 7626|   547k|        handler.on_type(type);
 7627|   547k|        return begin;
 7628|   547k|    };
 7629|       |
 7630|   547k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 547k, False: 0]
  |  Branch (7630:28): [True: 525k, False: 21.4k]
  ------------------
 7631|   547k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 525k, False: 0]
  |  Branch (7631:36): [True: 518k, False: 7.08k]
  ------------------
 7632|   518k|        return do_presentation();
 7633|   518k|    }
 7634|       |
 7635|  28.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  28.5k|    begin = parse_align(begin, end, handler);
 7641|  28.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  28.5k|    begin = parse_width(begin, end, handler);
 7647|  28.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  28.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 28.5k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  28.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 7.08k, False: 21.4k]
  ------------------
 7666|  7.08k|        handler.on_localized();
 7667|  7.08k|        ++begin;
 7668|  7.08k|    }
 7669|  28.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  28.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 28.5k, False: 0]
  |  Branch (7674:25): [True: 21.4k, False: 7.08k]
  ------------------
 7675|  21.4k|        do_presentation();
 7676|  21.4k|    }
 7677|  28.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  28.5k|    return begin;
 7683|  28.5k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   788k|{
 7255|   788k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 777k, False: 10.6k]
  |  Branch (7255:33): [True: 777k, False: 0]
  ------------------
 7256|   788k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 10.6k, False: 0]
  |  Branch (7256:33): [True: 10.6k, False: 0]
  ------------------
 7257|   788k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   540k|    auto do_presentation = [&]() -> const CharT* {
 7607|   540k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 7.26k, False: 532k]
  ------------------
 7608|  7.26k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  7.26k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  7.26k|            handler.on_character_set_string(set);
 7616|  7.26k|            return begin;
 7617|  7.26k|        }
 7618|   532k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 532k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   532k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   532k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.08k, False: 525k]
  |  |  ------------------
  ------------------
 7623|  7.08k|            handler.on_error("Invalid type specifier in format string");
 7624|  7.08k|            return begin;
 7625|  7.08k|        }
 7626|   525k|        handler.on_type(type);
 7627|   525k|        return begin;
 7628|   532k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  7.26k|{
 7445|  7.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  7.26k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  7.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  7.26k|    auto start = begin;
 7449|  7.26k|    ++begin;
 7450|       |
 7451|  7.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  7.26k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 7.26k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  7.26k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 7.26k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  21.7k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 21.7k, False: 0]
  ------------------
 7476|  21.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.7k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  21.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 7.26k, False: 14.5k]
  ------------------
 7481|  7.26k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  7.26k|        }
 7483|       |
 7484|  14.5k|        parse_presentation_set_literal(begin, end, handler);
 7485|  14.5k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  7.26k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7408|  14.5k|{
 7409|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  14.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  14.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  14.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 14.5k, False: 0]
  |  Branch (7416:25): [True: 14.5k, False: 0]
  |  Branch (7416:49): [True: 14.5k, False: 0]
  ------------------
 7417|  14.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 14.5k, False: 0]
  ------------------
 7418|  14.5k|        ++begin;
 7419|       |
 7420|  14.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  14.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  14.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  14.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  14.5k|        return;
 7434|  14.5k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7384|  29.0k|{
 7385|  29.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  29.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  29.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.0k]
  |  |  |  Branch (865:45): [True: 0, False: 29.0k]
  |  |  |  Branch (865:45): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  29.0k|    const auto cp =
 7394|  29.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  29.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  29.0k|    begin += len;
 7401|  29.0k|    return cp;
 7402|  29.0k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  10.8k|    {
 7099|  10.8k|        m_specs.charset_string_data = fmt.data();
 7100|  10.8k|        m_specs.charset_string_size = fmt.size();
 7101|  10.8k|        on_type(presentation_type::string_set);
 7102|  10.8k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   799k|{
 7203|   799k|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 799k]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 799k]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 799k]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 799k]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 799k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 799k]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 799k]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 799k]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 799k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 799k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 799k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 799k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 799k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 799k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 799k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 799k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 799k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 799k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|   777k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 777k, False: 21.2k]
  ------------------
 7234|   777k|            return presentation_type::string;
 7235|  10.6k|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 10.6k, False: 788k]
  ------------------
 7236|  10.6k|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 799k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 799k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 799k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 799k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  10.6k|        default:
  ------------------
  |  Branch (7247:9): [True: 10.6k, False: 788k]
  ------------------
 7248|  10.6k|            return presentation_type::none;
 7249|   799k|    }
 7250|   799k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  28.5k|{
 7280|  28.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  28.5k|    auto check_align = [](wchar_t ch) {
 7283|  28.5k|        switch (ch) {
 7284|  28.5k|            case L'<':
 7285|  28.5k|                return align_type::left;
 7286|  28.5k|            case L'>':
 7287|  28.5k|                return align_type::right;
 7288|  28.5k|            case L'^':
 7289|  28.5k|                return align_type::center;
 7290|  28.5k|            default:
 7291|  28.5k|                return align_type::none;
 7292|  28.5k|        }
 7293|  28.5k|    };
 7294|       |
 7295|  28.5k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  28.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  57.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  |  Branch (865:45): [True: 0, False: 28.5k]
  |  |  |  Branch (865:45): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7297|  28.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  28.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  28.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  28.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  28.5k|    const auto begin_before_fill = begin;
 7307|  28.5k|    begin += potential_fill_len;
 7308|       |
 7309|  28.5k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 28.5k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  28.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  28.5k|    const auto begin_after_fill = begin;
 7315|  28.5k|    ++begin;
 7316|       |
 7317|  28.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 28.5k, False: 0]
  ------------------
 7318|  28.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  28.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 7.26k, False: 21.2k]
  ------------------
 7323|  7.26k|            return begin_before_fill;
 7324|  7.26k|        }
 7325|  28.5k|    }
 7326|       |
 7327|  21.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 21.2k, False: 0]
  ------------------
 7328|  21.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 21.2k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  21.2k|        return begin_before_fill;
 7333|  21.2k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  21.2k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|  42.7k|{
 7262|  42.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|  42.7k|    if constexpr (sizeof(CharT) != 1) {
 7264|  42.7k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|  42.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  57.0k|    auto check_align = [](wchar_t ch) {
 7283|  57.0k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 57.0k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 57.0k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 57.0k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  57.0k|            default:
  ------------------
  |  Branch (7290:13): [True: 57.0k, False: 0]
  ------------------
 7291|  57.0k|                return align_type::none;
 7292|  57.0k|        }
 7293|  57.0k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  28.5k|{
 7345|  28.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  28.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 28.5k, False: 0]
  |  Branch (7347:33): [True: 14.1k, False: 14.3k]
  ------------------
 7348|  14.1k|        int width = parse_simple_int(begin, end);
 7349|  14.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  14.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.1k, False: 0]
  |  |  ------------------
  ------------------
 7350|  14.1k|            handler.on_width(width);
 7351|  14.1k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  14.1k|    }
 7357|  28.5k|    return begin;
 7358|  28.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|  7.08k|    {
 7876|  7.08k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  7.08k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 7.08k, False: 0]
  ------------------
 7878|  7.08k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 7.08k, False: 0]
  ------------------
 7879|  7.08k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 7.08k, False: 0]
  ------------------
 7880|  7.08k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 7.08k, False: 0]
  ------------------
 7881|  7.08k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  7.08k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  7.08k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   532k|{
 9300|   532k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   532k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   532k|{
 9201|   532k|#define SCN_VISIT(Type)                                                \
 9202|   532k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   532k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   532k|    }                                                                  \
 9205|   532k|    else {                                                             \
 9206|   532k|        return vis(monostate_val);                                     \
 9207|   532k|    }
 9208|       |
 9209|   532k|    monostate monostate_val{};
 9210|       |
 9211|   532k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 532k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 532k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 532k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 532k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 532k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 532k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 532k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 532k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 532k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 532k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 532k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 532k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 532k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 532k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 532k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 532k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 532k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 532k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 532k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 532k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|   266k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 266k, False: 266k]
  ------------------
 9253|   266k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   266k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   266k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   266k|    }                                                                  \
  |  | 9205|   266k|    else {                                                             \
  |  | 9206|   266k|        return vis(monostate_val);                                     \
  |  | 9207|   266k|    }
  ------------------
 9254|   532k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 266k, False: 266k]
  ------------------
 9255|   532k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   532k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   532k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   532k|    }                                                                  \
  |  | 9205|   532k|    else {                                                             \
  |  | 9206|   532k|        return vis(monostate_val);                                     \
  |  | 9207|   532k|    }
  ------------------
 9256|   532k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 532k]
  ------------------
 9257|   532k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   532k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   532k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   532k|    }                                                                  \
  |  | 9205|   532k|    else {                                                             \
  |  | 9206|   532k|        return vis(monostate_val);                                     \
  |  | 9207|   532k|    }
  ------------------
 9258|   532k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 532k]
  ------------------
 9259|   532k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   532k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   532k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   532k|    }                                                                  \
  |  | 9205|   532k|    else {                                                             \
  |  | 9206|   532k|        return vis(monostate_val);                                     \
  |  | 9207|   532k|    }
  ------------------
 9260|       |
 9261|   532k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 532k]
  ------------------
 9262|   532k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   532k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   532k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 532k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 532k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   532k|            SCN_CLANG_POP
 9279|   532k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|   388k|{
 9300|   388k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   388k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   388k|{
 9201|   388k|#define SCN_VISIT(Type)                                                \
 9202|   388k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   388k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   388k|    }                                                                  \
 9205|   388k|    else {                                                             \
 9206|   388k|        return vis(monostate_val);                                     \
 9207|   388k|    }
 9208|       |
 9209|   388k|    monostate monostate_val{};
 9210|       |
 9211|   388k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 388k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 388k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 388k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 388k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 388k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 388k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 388k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 388k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 388k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 388k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 388k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 388k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 388k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 388k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 388k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 388k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 388k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 388k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 388k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 388k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 388k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|   388k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 388k, False: 0]
  ------------------
 9255|   388k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   388k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   388k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   388k|    }                                                                  \
  |  | 9205|   388k|    else {                                                             \
  |  | 9206|   388k|        return vis(monostate_val);                                     \
  |  | 9207|   388k|    }
  ------------------
 9256|   388k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 388k]
  ------------------
 9257|   388k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   388k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   388k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   388k|    }                                                                  \
  |  | 9205|   388k|    else {                                                             \
  |  | 9206|   388k|        return vis(monostate_val);                                     \
  |  | 9207|   388k|    }
  ------------------
 9258|   388k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 388k]
  ------------------
 9259|   388k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   388k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   388k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   388k|    }                                                                  \
  |  | 9205|   388k|    else {                                                             \
  |  | 9206|   388k|        return vis(monostate_val);                                     \
  |  | 9207|   388k|    }
  ------------------
 9260|       |
 9261|   388k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 388k]
  ------------------
 9262|   388k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   388k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   388k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 388k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 388k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   388k|            SCN_CLANG_POP
 9279|   388k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   273k|{
 7793|   273k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   273k|    handler.check_args_exhausted();
 7795|   273k|    return handler.get_error();
 7796|   273k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   273k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   273k|    auto begin = format.data();
 7761|   273k|    auto it = begin;
 7762|   273k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   529k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 273k, False: 255k]
  ------------------
 7765|   273k|        const auto ch = *it++;
 7766|   273k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 273k, False: 0]
  ------------------
 7767|   273k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   273k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   273k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 17.7k, False: 255k]
  ------------------
 7771|  17.7k|                return;
 7772|  17.7k|            }
 7773|   273k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   273k|    }
 7784|       |
 7785|   255k|    handler.on_literal_text(begin, end);
 7786|   255k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|   255k|    {
 8971|   255k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   255k|    static_cast<    \
  |  |  935|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   255k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   273k|{
 7690|   273k|    struct id_adapter {
 7691|   273k|        constexpr void operator()()
 7692|   273k|        {
 7693|   273k|            arg_id = handler.on_arg_id();
 7694|   273k|        }
 7695|   273k|        constexpr void operator()(std::size_t id)
 7696|   273k|        {
 7697|   273k|            arg_id = handler.on_arg_id(id);
 7698|   273k|        }
 7699|       |
 7700|   273k|        constexpr void on_error(const char* msg)
 7701|   273k|        {
 7702|   273k|            SCN_UNLIKELY_ATTR
 7703|   273k|            handler.on_error(msg);
 7704|   273k|        }
 7705|       |
 7706|   273k|        Handler& handler;
 7707|   273k|        std::size_t arg_id;
 7708|   273k|    };
 7709|       |
 7710|   273k|    ++begin;
 7711|   273k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   273k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 273k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   273k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 273k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   273k|    else {
 7723|   273k|        auto adapter = id_adapter{handler, 0};
 7724|   273k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   273k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   273k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 273k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   273k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 273k, False: 0]
  ------------------
 7735|   273k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   273k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   273k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.08k, False: 266k]
  |  |  |  Branch (865:45): [True: 0, False: 273k]
  |  |  |  Branch (865:45): [True: 7.08k, False: 266k]
  |  |  ------------------
  ------------------
 7741|  7.08k|                handler.on_error("Unknown format specifier");
 7742|  7.08k|                return begin;
 7743|  7.08k|            }
 7744|   273k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   273k|    }
 7751|   266k|    return begin + 1;
 7752|   273k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   273k|{
 7191|   273k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   273k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 273k, False: 0]
  |  Branch (7192:26): [True: 0, False: 273k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   273k|    handler();
 7197|   273k|    return begin;
 7198|   273k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   273k|        {
 7693|   273k|            arg_id = handler.on_arg_id();
 7694|   273k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   273k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   273k|    {
 7871|   273k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   273k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   273k|{
 7606|   273k|    auto do_presentation = [&]() -> const CharT* {
 7607|   273k|        if (*begin == CharT{'['}) {
 7608|   273k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   273k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   273k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   273k|                return begin;
 7614|   273k|            }
 7615|   273k|            handler.on_character_set_string(set);
 7616|   273k|            return begin;
 7617|   273k|        }
 7618|   273k|        if (*begin == CharT{'/'}) {
 7619|   273k|            return parse_presentation_regex(begin, end, handler);
 7620|   273k|        }
 7621|   273k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   273k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   273k|            handler.on_error("Invalid type specifier in format string");
 7624|   273k|            return begin;
 7625|   273k|        }
 7626|   273k|        handler.on_type(type);
 7627|   273k|        return begin;
 7628|   273k|    };
 7629|       |
 7630|   273k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 273k, False: 0]
  |  Branch (7630:28): [True: 262k, False: 10.7k]
  ------------------
 7631|   273k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 262k, False: 0]
  |  Branch (7631:36): [True: 259k, False: 3.54k]
  ------------------
 7632|   259k|        return do_presentation();
 7633|   259k|    }
 7634|       |
 7635|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  14.2k|    begin = parse_align(begin, end, handler);
 7641|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  14.2k|    begin = parse_width(begin, end, handler);
 7647|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  14.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 14.2k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  14.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 3.54k, False: 10.7k]
  ------------------
 7666|  3.54k|        handler.on_localized();
 7667|  3.54k|        ++begin;
 7668|  3.54k|    }
 7669|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  14.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 14.2k, False: 0]
  |  Branch (7674:25): [True: 10.7k, False: 3.54k]
  ------------------
 7675|  10.7k|        do_presentation();
 7676|  10.7k|    }
 7677|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  14.2k|    return begin;
 7683|  14.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   270k|    auto do_presentation = [&]() -> const CharT* {
 7607|   270k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 3.63k, False: 266k]
  ------------------
 7608|  3.63k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  3.63k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  3.63k|            handler.on_character_set_string(set);
 7616|  3.63k|            return begin;
 7617|  3.63k|        }
 7618|   266k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 266k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   266k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   266k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 262k]
  |  |  ------------------
  ------------------
 7623|  3.54k|            handler.on_error("Invalid type specifier in format string");
 7624|  3.54k|            return begin;
 7625|  3.54k|        }
 7626|   262k|        handler.on_type(type);
 7627|   262k|        return begin;
 7628|   266k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7444|  3.63k|{
 7445|  3.63k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  3.63k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  3.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  3.63k|    auto start = begin;
 7449|  3.63k|    ++begin;
 7450|       |
 7451|  3.63k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  3.63k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 3.63k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  3.63k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 3.63k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  10.8k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 10.8k, False: 0]
  ------------------
 7476|  10.8k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 10.8k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  10.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 3.63k, False: 7.26k]
  ------------------
 7481|  3.63k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  3.63k|        }
 7483|       |
 7484|  7.26k|        parse_presentation_set_literal(begin, end, handler);
 7485|  7.26k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  3.63k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7408|  7.26k|{
 7409|  7.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  7.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  7.26k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  7.26k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  7.26k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 7.26k, False: 0]
  |  Branch (7416:25): [True: 7.26k, False: 0]
  |  Branch (7416:49): [True: 7.26k, False: 0]
  ------------------
 7417|  7.26k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 7.26k, False: 0]
  ------------------
 7418|  7.26k|        ++begin;
 7419|       |
 7420|  7.26k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  7.26k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  7.26k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.26k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  7.26k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  7.26k|        return;
 7434|  7.26k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7384|  14.5k|{
 7385|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  14.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  14.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  |  Branch (865:45): [True: 0, False: 14.5k]
  |  |  |  Branch (865:45): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  14.5k|    const auto cp =
 7394|  14.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  14.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  14.5k|    begin += len;
 7401|  14.5k|    return cp;
 7402|  14.5k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|  14.2k|{
 7280|  14.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  14.2k|    auto check_align = [](wchar_t ch) {
 7283|  14.2k|        switch (ch) {
 7284|  14.2k|            case L'<':
 7285|  14.2k|                return align_type::left;
 7286|  14.2k|            case L'>':
 7287|  14.2k|                return align_type::right;
 7288|  14.2k|            case L'^':
 7289|  14.2k|                return align_type::center;
 7290|  14.2k|            default:
 7291|  14.2k|                return align_type::none;
 7292|  14.2k|        }
 7293|  14.2k|    };
 7294|       |
 7295|  14.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  14.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  |  Branch (865:45): [True: 0, False: 14.2k]
  |  |  |  Branch (865:45): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7297|  14.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  14.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  14.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  14.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  14.2k|    const auto begin_before_fill = begin;
 7307|  14.2k|    begin += potential_fill_len;
 7308|       |
 7309|  14.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 14.2k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  14.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  14.2k|    const auto begin_after_fill = begin;
 7315|  14.2k|    ++begin;
 7316|       |
 7317|  14.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 14.2k, False: 0]
  ------------------
 7318|  14.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  14.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 3.63k, False: 10.6k]
  ------------------
 7323|  3.63k|            return begin_before_fill;
 7324|  3.63k|        }
 7325|  14.2k|    }
 7326|       |
 7327|  10.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 10.6k, False: 0]
  ------------------
 7328|  10.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 10.6k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  10.6k|        return begin_before_fill;
 7333|  10.6k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  10.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|  28.5k|    auto check_align = [](wchar_t ch) {
 7283|  28.5k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 28.5k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 28.5k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 28.5k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  28.5k|            default:
  ------------------
  |  Branch (7290:13): [True: 28.5k, False: 0]
  ------------------
 7291|  28.5k|                return align_type::none;
 7292|  28.5k|        }
 7293|  28.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|  14.2k|{
 7345|  14.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  14.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 14.2k, False: 0]
  |  Branch (7347:33): [True: 7.08k, False: 7.17k]
  ------------------
 7348|  7.08k|        int width = parse_simple_int(begin, end);
 7349|  7.08k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  7.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.08k, False: 0]
  |  |  ------------------
  ------------------
 7350|  7.08k|            handler.on_width(width);
 7351|  7.08k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  7.08k|    }
 7357|  14.2k|    return begin;
 7358|  14.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|  3.54k|    {
 7876|  3.54k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  3.54k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 3.54k, False: 0]
  ------------------
 7878|  3.54k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 3.54k, False: 0]
  ------------------
 7879|  3.54k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 3.54k, False: 0]
  ------------------
 7880|  3.54k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 3.54k, False: 0]
  ------------------
 7881|  3.54k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  3.54k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  3.54k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   266k|{
 9300|   266k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   266k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   266k|{
 9201|   266k|#define SCN_VISIT(Type)                                                \
 9202|   266k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   266k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   266k|    }                                                                  \
 9205|   266k|    else {                                                             \
 9206|   266k|        return vis(monostate_val);                                     \
 9207|   266k|    }
 9208|       |
 9209|   266k|    monostate monostate_val{};
 9210|       |
 9211|   266k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 266k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 266k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 266k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 266k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 266k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 266k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 266k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 266k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 266k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 266k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 266k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 266k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 266k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 266k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 266k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 266k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 266k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 266k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 266k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 266k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 266k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|   266k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 266k, False: 0]
  ------------------
 9255|   266k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   266k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   266k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   266k|    }                                                                  \
  |  | 9205|   266k|    else {                                                             \
  |  | 9206|   266k|        return vis(monostate_val);                                     \
  |  | 9207|   266k|    }
  ------------------
 9256|   266k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 266k]
  ------------------
 9257|   266k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   266k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   266k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   266k|    }                                                                  \
  |  | 9205|   266k|    else {                                                             \
  |  | 9206|   266k|        return vis(monostate_val);                                     \
  |  | 9207|   266k|    }
  ------------------
 9258|   266k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 266k]
  ------------------
 9259|   266k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   266k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   266k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   266k|    }                                                                  \
  |  | 9205|   266k|    else {                                                             \
  |  | 9206|   266k|        return vis(monostate_val);                                     \
  |  | 9207|   266k|    }
  ------------------
 9260|       |
 9261|   266k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 266k]
  ------------------
 9262|   266k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   266k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   266k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 266k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 266k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   266k|            SCN_CLANG_POP
 9279|   266k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  23.0k|    {
 4352|  23.0k|        return sync(0);
 4353|  23.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  65.5k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|   388k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   266k|{
   89|   266k|    auto result = make_scan_result<Source, Args...>();
   90|   266k|    fill_scan_result(result,
   91|   266k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   266k|                           make_scan_args<wscan_context>(result->values())));
   93|   266k|    return result;
   94|   266k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   532k|{
   44|   532k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   532k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   266k|{
  131|   266k|    auto result = make_scan_result<Source, Args...>();
  132|   266k|    fill_scan_result(result,
  133|   266k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   266k|                           make_scan_args<wscan_context>(result->values())));
  135|   266k|    return result;
  136|   266k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   532k|{
   60|   532k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   532k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   129k|{
  171|   129k|    auto result = make_scan_result<Source, T>();
  172|   129k|    fill_scan_result(
  173|   129k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   129k|                            detail::make_arg<wscan_context>(result->value())));
  175|   129k|    return result;
  176|   129k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   259k|{
   72|   259k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   259k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   266k|{
   89|   266k|    auto result = make_scan_result<Source, Args...>();
   90|   266k|    fill_scan_result(result,
   91|   266k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   266k|                           make_scan_args<wscan_context>(result->values())));
   93|   266k|    return result;
   94|   266k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   266k|{
  131|   266k|    auto result = make_scan_result<Source, Args...>();
  132|   266k|    fill_scan_result(result,
  133|   266k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   266k|                           make_scan_args<wscan_context>(result->values())));
  135|   266k|    return result;
  136|   266k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   129k|{
  171|   129k|    auto result = make_scan_result<Source, T>();
  172|   129k|    fill_scan_result(
  173|   129k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   129k|                            detail::make_arg<wscan_context>(result->value())));
  175|   129k|    return result;
  176|   129k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   266k|{
   89|   266k|    auto result = make_scan_result<Source, Args...>();
   90|   266k|    fill_scan_result(result,
   91|   266k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   266k|                           make_scan_args<wscan_context>(result->values())));
   93|   266k|    return result;
   94|   266k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   266k|{
   44|   266k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   266k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   266k|{
  131|   266k|    auto result = make_scan_result<Source, Args...>();
  132|   266k|    fill_scan_result(result,
  133|   266k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   266k|                           make_scan_args<wscan_context>(result->values())));
  135|   266k|    return result;
  136|   266k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   266k|{
   60|   266k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   266k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   129k|{
  171|   129k|    auto result = make_scan_result<Source, T>();
  172|   129k|    fill_scan_result(
  173|   129k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   129k|                            detail::make_arg<wscan_context>(result->value())));
  175|   129k|    return result;
  176|   129k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   129k|{
   72|   129k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   129k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   942k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   942k|{
  309|   942k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   942k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  89.3k|{
 1903|  89.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  89.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  53.4k|{
 1911|  53.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  53.4k|    return sync_after_vscan(source, n);
 1913|  53.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   532k|{
 1921|   532k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   532k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   266k|{
 1929|   266k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   266k|    return sync_after_vscan(source, n);
 1931|   266k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   322k|{
  207|   322k|    return find_classic_impl(
  208|   322k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   322k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   322k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   325k|{
  215|   325k|    return find_classic_impl(
  216|   325k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   325k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   325k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  89.3k|{
 1872|  89.3k|    return vscan_internal(source, format, args);
 1873|  89.3k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  53.4k|{
 1878|  53.4k|    auto n = vscan_internal(source, format, args);
 1879|  53.4k|    return sync_after_vscan(source, n);
 1880|  53.4k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   532k|{
 1886|   532k|    return vscan_internal(source, format, args);
 1887|   532k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   266k|{
 1892|   266k|    auto n = vscan_internal(source, format, args);
 1893|   266k|    return sync_after_vscan(source, n);
 1894|   266k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  40.7k|{
 1958|  40.7k|    return vscan_value_internal(source, arg);
 1959|  40.7k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  24.7k|{
 1963|  24.7k|    auto n = vscan_value_internal(source, arg);
 1964|  24.7k|    return sync_after_vscan(source, n);
 1965|  24.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|   259k|{
 1971|   259k|    return vscan_value_internal(source, arg);
 1972|   259k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|   129k|{
 1977|   129k|    auto n = vscan_value_internal(source, arg);
 1978|   129k|    return sync_after_vscan(source, n);
 1979|   129k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   322k|{
  131|   322k|    auto it = source.begin();
  132|       |
  133|   598k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 472k, False: 126k]
  ------------------
  134|   472k|        auto sv =
  135|   472k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   472k|                .substr(0, 8);
  137|       |
  138|   472k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 328k, False: 144k]
  ------------------
  139|   328k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   328k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   328k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 134k, False: 193k]
  ------------------
  142|   134k|                break;
  143|   134k|            }
  144|   193k|            continue;
  145|   328k|        }
  146|       |
  147|   433k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 350k, False: 82.2k]
  ------------------
  148|   350k|            auto tmp =
  149|   350k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   350k|            auto res = get_next_code_point(tmp);
  151|   350k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 61.9k, False: 288k]
  ------------------
  152|  61.9k|                return it;
  153|  61.9k|            }
  154|   288k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   288k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   288k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   288k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   288k|        }
  158|   144k|    }
  159|       |
  160|   260k|    return detail::make_string_view_iterator(source, it);
  161|   322k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   774k|{
  118|   774k|    static_assert(sizeof(*source.data()) == 1);
  119|   774k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   774k|    uint64_t word{};
  121|   774k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   774k|    return has_byte_greater(word, 127) != 0;
  124|   774k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.33M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   350k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   325k|{
  131|   325k|    auto it = source.begin();
  132|       |
  133|   416k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 302k, False: 113k]
  ------------------
  134|   302k|        auto sv =
  135|   302k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   302k|                .substr(0, 8);
  137|       |
  138|   302k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 224k, False: 77.4k]
  ------------------
  139|   224k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   224k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   224k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 137k, False: 87.2k]
  ------------------
  142|   137k|                break;
  143|   137k|            }
  144|  87.2k|            continue;
  145|   224k|        }
  146|       |
  147|   151k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 148k, False: 3.10k]
  ------------------
  148|   148k|            auto tmp =
  149|   148k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   148k|            auto res = get_next_code_point(tmp);
  151|   148k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 74.3k, False: 74.1k]
  ------------------
  152|  74.3k|                return it;
  153|  74.3k|            }
  154|  74.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  74.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  74.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  74.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  74.1k|        }
  158|  77.4k|    }
  159|       |
  160|   251k|    return detail::make_string_view_iterator(source, it);
  161|   325k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   572k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   148k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   106k|{
 1769|   106k|    const auto argcount = args.size();
 1770|   106k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 49.5k, False: 57.2k]
  |  Branch (1770:60): [True: 49.5k, False: 0]
  ------------------
 1771|  49.5k|        auto arg = args.get(0);
 1772|  49.5k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  49.5k|    static_cast<    \
  |  |  935|  49.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  49.5k|    }
 1774|       |
 1775|  57.2k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 57.2k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  57.2k|    SCN_UNLIKELY_ATTR
 1783|  57.2k|    {
 1784|  57.2k|        auto handler = format_handler<false, CharT>{
 1785|  57.2k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  57.2k|    static_cast<    \
  |  |  935|  57.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  57.2k|    static_cast<    \
  |  |  935|  57.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  57.2k|        return vscan_parse_format_string(format, handler);
 1787|  57.2k|    }
 1788|  57.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   285k|{
 1317|   285k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 154k, False: 131k]
  ------------------
 1318|   154k|        return false;
 1319|   154k|    }
 1320|   131k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 131k, False: 0]
  |  Branch (1320:39): [True: 131k, False: 0]
  ------------------
 1321|   285k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  74.3k|{
 1350|  74.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74.3k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  74.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  74.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 74.3k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  74.3k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  74.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  74.3k|    static_cast<    \
  |  |  935|  74.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  74.3k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  74.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  74.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  74.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.65k, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.65k|    }                                                  \
  |  |  |  | 3939|  74.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  71.6k|    return it.position();
 1367|  74.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  97.1k|        : format_handler_base{argcount},
 1593|  97.1k|          parse_ctx{format},
 1594|  97.1k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  97.1k|    {
 1596|  97.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   975k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   975k|    {
 1412|   975k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   975k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  97.1k|        : contiguous_ctx(source, args, loc)
 1544|  97.1k|    {
 1545|  97.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  97.1k|{
 1734|  97.1k|    const auto beg = handler.get_ctx().begin();
 1735|  97.1k|    detail::parse_format_string<false>(format, handler);
 1736|  97.1k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.7k, False: 79.4k]
  |  |  ------------------
  ------------------
 1737|  17.7k|        return unexpected(err.error());
 1738|  17.7k|    }
 1739|  79.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  97.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   630k|    {
 1718|   630k|        return ctx.get();
 1719|   630k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   630k|    {
 1549|   630k|        return contiguous_ctx;
 1550|   630k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   176k|    {
 1600|   176k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 176k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   176k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|  47.7k|    {
 1460|  47.7k|        error = unexpected(err);
 1461|  47.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  97.1k|{
 1372|  97.1k|    auto arg = ctx.arg(id);
 1373|  97.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 97.1k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  97.1k|    return arg;
 1377|  97.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   975k|    {
 1486|   975k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   975k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   975k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   975k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 975k, False: 0]
  |  |  ------------------
  ------------------
 1498|   975k|            visited_args_lower64 |= (1ull << id);
 1499|   975k|            return;
 1500|   975k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   975k|    {
 1470|   975k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 975k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   975k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   975k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 975k, False: 0]
  |  |  ------------------
  ------------------
 1477|   975k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   975k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   975k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  97.1k|    {
 1640|  97.1k|        return parse_ctx.next_arg_id();
 1641|  97.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  97.1k|    {
 1680|  97.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  97.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  97.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 97.1k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  97.1k|        auto specs = detail::format_specs{};
 1693|  97.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  97.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  97.1k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  97.1k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  97.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 97.1k]
  |  Branch (1698:29): [True: 0, False: 97.1k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  97.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.08k, False: 90.0k]
  |  |  ------------------
  ------------------
 1705|  7.08k|            return parse_ctx.begin();
 1706|  7.08k|        }
 1707|  90.0k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  90.0k|        on_visit_scan_arg(
 1710|  90.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  90.0k|                                           get_ctx().locale()},
 1712|  90.0k|            arg);
 1713|  90.0k|        return parse_ctx.begin();
 1714|  97.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  97.1k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  97.1k|    {
 1391|  97.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  90.0k|    {
 1651|  90.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 90.0k]
  |  Branch (1651:13): [True: 0, False: 90.0k]
  |  Branch (1651:29): [True: 0, False: 90.0k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  90.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  90.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 79.4k]
  |  |  ------------------
  ------------------
 1658|  10.6k|            on_error(r.error());
 1659|  10.6k|        }
 1660|  79.4k|        else {
 1661|  79.4k|            get_ctx().advance_to(*r);
 1662|  79.4k|        }
 1663|  90.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  31.8k|    {
 1454|  31.8k|        SCN_UNLIKELY_ATTR
 1455|  31.8k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  31.8k|                                              msg);
 1457|  31.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   975k|    {
 1419|   975k|        {
 1420|   975k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 975k]
  ------------------
 1421|   975k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 975k]
  ------------------
 1422|   975k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   975k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   975k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 975k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   975k|        }
 1430|       |
 1431|   975k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 975k, False: 0]
  ------------------
 1432|   975k|            return;
 1433|   975k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  3.86M|    {
 1465|  3.86M|        return error;
 1466|  3.86M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  57.2k|        : format_handler_base{argcount},
 1593|  57.2k|          parse_ctx{format},
 1594|  57.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  57.2k|    static_cast<    \
  |  |  935|  57.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  57.2k|    static_cast<    \
  |  |  935|  57.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  57.2k|    {
 1596|  57.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  57.2k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  57.2k|    static_cast<    \
  |  |  935|  57.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  57.2k|    {
 1521|  57.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  57.2k|{
 1734|  57.2k|    const auto beg = handler.get_ctx().begin();
 1735|  57.2k|    detail::parse_format_string<false>(format, handler);
 1736|  57.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.85k, False: 48.4k]
  |  |  ------------------
  ------------------
 1737|  8.85k|        return unexpected(err.error());
 1738|  8.85k|    }
 1739|  48.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  57.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   376k|    {
 1718|   376k|        return ctx.get();
 1719|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   376k|    {
 1525|   376k|        return ctx;
 1526|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   105k|    {
 1600|   105k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 105k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   105k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  57.2k|{
 1372|  57.2k|    auto arg = ctx.arg(id);
 1373|  57.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.2k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  57.2k|    return arg;
 1377|  57.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  57.2k|    {
 1640|  57.2k|        return parse_ctx.next_arg_id();
 1641|  57.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  57.2k|    {
 1680|  57.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  57.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  57.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 57.2k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  57.2k|        auto specs = detail::format_specs{};
 1693|  57.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  57.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  57.2k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  57.2k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  57.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 57.2k]
  |  Branch (1698:29): [True: 0, False: 57.2k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  57.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 53.7k]
  |  |  ------------------
  ------------------
 1705|  3.54k|            return parse_ctx.begin();
 1706|  3.54k|        }
 1707|  53.7k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  53.7k|        on_visit_scan_arg(
 1710|  53.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  53.7k|                                           get_ctx().locale()},
 1712|  53.7k|            arg);
 1713|  53.7k|        return parse_ctx.begin();
 1714|  57.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|  57.2k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  57.2k|    {
 1391|  57.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  53.7k|    {
 1651|  53.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 53.7k]
  |  Branch (1651:13): [True: 0, False: 53.7k]
  |  Branch (1651:29): [True: 0, False: 53.7k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  53.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  53.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  53.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.31k, False: 48.4k]
  |  |  ------------------
  ------------------
 1658|  5.31k|            on_error(r.error());
 1659|  5.31k|        }
 1660|  48.4k|        else {
 1661|  48.4k|            get_ctx().advance_to(*r);
 1662|  48.4k|        }
 1663|  53.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   178k|{
 1749|   178k|    const auto argcount = args.size();
 1750|   178k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 81.5k, False: 97.1k]
  |  Branch (1750:60): [True: 81.5k, False: 0]
  ------------------
 1751|  81.5k|        auto arg = args.get(0);
 1752|  81.5k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  81.5k|    static_cast<    \
  |  |  935|  81.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  81.5k|    }
 1754|       |
 1755|  97.1k|    auto handler = format_handler<true, CharT>{
 1756|  97.1k|        ranges::subrange<const CharT*>{source.data(),
 1757|  97.1k|                                       source.data() + source.size()},
 1758|  97.1k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  97.1k|    return vscan_parse_format_string(format, handler);
 1760|   178k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   122k|{
 1330|   122k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   122k|    auto reader =
 1336|   122k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   122k|            ranges::subrange<const CharT*>{source.data(),
 1338|   122k|                                           source.data() + source.size()},
 1339|   122k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   122k|    static_cast<    \
  |  |  935|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   122k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   122k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   122k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   122k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.31k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.31k|    }                                                  \
  |  |  |  | 3939|   122k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   117k|    return ranges::distance(source.data(), it);
 1342|   122k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   131k|{
 1849|   131k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 120k, False: 11.5k]
  |  |  ------------------
  ------------------
 1850|   120k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   120k|    }
 1856|  11.5k|    else {
 1857|  11.5k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  11.5k|    }
 1863|   131k|    return result;
 1864|   131k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  1.06M|{
 1749|  1.06M|    const auto argcount = args.size();
 1750|  1.06M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 518k, False: 547k]
  |  Branch (1750:60): [True: 518k, False: 0]
  ------------------
 1751|   518k|        auto arg = args.get(0);
 1752|   518k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   518k|    static_cast<    \
  |  |  935|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   518k|    }
 1754|       |
 1755|   547k|    auto handler = format_handler<true, CharT>{
 1756|   547k|        ranges::subrange<const CharT*>{source.data(),
 1757|   547k|                                       source.data() + source.size()},
 1758|   547k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   547k|    static_cast<    \
  |  |  935|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   547k|    static_cast<    \
  |  |  935|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   547k|    return vscan_parse_format_string(format, handler);
 1760|  1.06M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.59M|{
 1317|  1.59M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 820k, False: 777k]
  ------------------
 1318|   820k|        return false;
 1319|   820k|    }
 1320|   777k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 777k, False: 0]
  |  Branch (1320:39): [True: 777k, False: 0]
  ------------------
 1321|  1.59M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   777k|{
 1330|   777k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 777k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   777k|    auto reader =
 1336|   777k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   777k|            ranges::subrange<const CharT*>{source.data(),
 1338|   777k|                                           source.data() + source.size()},
 1339|   777k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   777k|    static_cast<    \
  |  |  935|   777k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   777k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   777k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   777k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   777k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.6k, False: 767k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.6k|    }                                                  \
  |  |  |  | 3939|   777k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   767k|    return ranges::distance(source.data(), it);
 1342|   777k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   547k|        : format_handler_base{argcount},
 1593|   547k|          parse_ctx{format},
 1594|   547k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   547k|    static_cast<    \
  |  |  935|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   547k|    static_cast<    \
  |  |  935|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   547k|    {
 1596|   547k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   547k|        : contiguous_ctx(source, args, loc)
 1544|   547k|    {
 1545|   547k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   547k|{
 1734|   547k|    const auto beg = handler.get_ctx().begin();
 1735|   547k|    detail::parse_format_string<false>(format, handler);
 1736|   547k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.4k, False: 511k]
  |  |  ------------------
  ------------------
 1737|  35.4k|        return unexpected(err.error());
 1738|  35.4k|    }
 1739|   511k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   547k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  3.73M|    {
 1718|  3.73M|        return ctx.get();
 1719|  3.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  3.73M|    {
 1549|  3.73M|        return contiguous_ctx;
 1550|  3.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  1.05M|    {
 1600|  1.05M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.05M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.05M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   547k|{
 1372|   547k|    auto arg = ctx.arg(id);
 1373|   547k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 547k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   547k|    return arg;
 1377|   547k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   547k|    {
 1640|   547k|        return parse_ctx.next_arg_id();
 1641|   547k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   547k|    {
 1680|   547k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   547k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   547k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 547k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   547k|        auto specs = detail::format_specs{};
 1693|   547k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   547k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   547k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   547k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   547k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 547k]
  |  Branch (1698:29): [True: 0, False: 547k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   547k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.1k, False: 532k]
  |  |  ------------------
  ------------------
 1705|  14.1k|            return parse_ctx.begin();
 1706|  14.1k|        }
 1707|   532k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   532k|        on_visit_scan_arg(
 1710|   532k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   532k|                                           get_ctx().locale()},
 1712|   532k|            arg);
 1713|   532k|        return parse_ctx.begin();
 1714|   547k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   547k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   547k|    {
 1391|   547k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   532k|    {
 1651|   532k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 532k]
  |  Branch (1651:13): [True: 0, False: 532k]
  |  Branch (1651:29): [True: 0, False: 532k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   532k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   532k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.2k, False: 511k]
  |  |  ------------------
  ------------------
 1658|  21.2k|            on_error(r.error());
 1659|  21.2k|        }
 1660|   511k|        else {
 1661|   511k|            get_ctx().advance_to(*r);
 1662|   511k|        }
 1663|   532k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   532k|{
 1769|   532k|    const auto argcount = args.size();
 1770|   532k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 259k, False: 273k]
  |  Branch (1770:60): [True: 259k, False: 0]
  ------------------
 1771|   259k|        auto arg = args.get(0);
 1772|   259k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   259k|    static_cast<    \
  |  |  935|   259k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   259k|    }
 1774|       |
 1775|   273k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 273k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   273k|    SCN_UNLIKELY_ATTR
 1783|   273k|    {
 1784|   273k|        auto handler = format_handler<false, CharT>{
 1785|   273k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   273k|    static_cast<    \
  |  |  935|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   273k|    static_cast<    \
  |  |  935|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   273k|        return vscan_parse_format_string(format, handler);
 1787|   273k|    }
 1788|   273k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   388k|{
 1350|   388k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 388k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   388k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   388k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 388k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   388k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   388k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   388k|    static_cast<    \
  |  |  935|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   388k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   388k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   388k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   388k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.31k, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.31k|    }                                                  \
  |  |  |  | 3939|   388k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   383k|    return it.position();
 1367|   388k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   273k|        : format_handler_base{argcount},
 1593|   273k|          parse_ctx{format},
 1594|   273k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   273k|    static_cast<    \
  |  |  935|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   273k|    static_cast<    \
  |  |  935|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   273k|    {
 1596|   273k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   273k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   273k|    static_cast<    \
  |  |  935|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   273k|    {
 1521|   273k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   273k|{
 1734|   273k|    const auto beg = handler.get_ctx().begin();
 1735|   273k|    detail::parse_format_string<false>(format, handler);
 1736|   273k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.7k, False: 255k]
  |  |  ------------------
  ------------------
 1737|  17.7k|        return unexpected(err.error());
 1738|  17.7k|    }
 1739|   255k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   273k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  1.86M|    {
 1718|  1.86M|        return ctx.get();
 1719|  1.86M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  1.86M|    {
 1525|  1.86M|        return ctx;
 1526|  1.86M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   529k|    {
 1600|   529k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 529k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   529k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   273k|{
 1372|   273k|    auto arg = ctx.arg(id);
 1373|   273k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   273k|    return arg;
 1377|   273k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   273k|    {
 1640|   273k|        return parse_ctx.next_arg_id();
 1641|   273k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   273k|    {
 1680|   273k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   273k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   273k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 273k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   273k|        auto specs = detail::format_specs{};
 1693|   273k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   273k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   273k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   273k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   273k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 273k]
  |  Branch (1698:29): [True: 0, False: 273k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   273k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.08k, False: 266k]
  |  |  ------------------
  ------------------
 1705|  7.08k|            return parse_ctx.begin();
 1706|  7.08k|        }
 1707|   266k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   266k|        on_visit_scan_arg(
 1710|   266k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   266k|                                           get_ctx().locale()},
 1712|   266k|            arg);
 1713|   266k|        return parse_ctx.begin();
 1714|   273k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   273k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   273k|    {
 1391|   273k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   266k|    {
 1651|   266k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 266k]
  |  Branch (1651:13): [True: 0, False: 266k]
  |  Branch (1651:29): [True: 0, False: 266k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   266k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   266k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 255k]
  |  |  ------------------
  ------------------
 1658|  10.6k|            on_error(r.error());
 1659|  10.6k|        }
 1660|   255k|        else {
 1661|   255k|            get_ctx().advance_to(*r);
 1662|   255k|        }
 1663|   266k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   662k|{
 1849|   662k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   662k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 639k, False: 23.0k]
  |  |  ------------------
  ------------------
 1850|   639k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   639k|    }
 1856|  23.0k|    else {
 1857|  23.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.0k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  23.0k|    }
 1863|   662k|    return result;
 1864|   662k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  40.7k|{
 1795|  40.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  40.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  24.7k|{
 1795|  24.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  24.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  24.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|   259k|{
 1795|   259k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   259k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   129k|{
 1795|   129k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   129k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    885|{
 1462|    885|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    885|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    885|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    885|            return transcode_to_string_impl_to32(src, dest);
 1473|    885|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    885|    SCN_EXPECT(false);
  ------------------
  |  |  930|    885|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    885|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    885|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    885|{
 1355|    885|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    885|    auto it = src.begin();
 1358|   299k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 298k, False: 885]
  ------------------
 1359|   298k|        auto res = get_next_code_point(
 1360|   298k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   298k|                                                                 src.end()));
 1362|   298k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.89k, False: 295k]
  |  |  ------------------
  ------------------
 1363|  3.89k|            dest.push_back(DestCharT{0xfffd});
 1364|  3.89k|        }
 1365|   295k|        else {
 1366|   295k|            dest.push_back(res.value);
 1367|   295k|        }
 1368|   298k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   298k|    }
 1370|    885|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   798k|{
 1279|   798k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   798k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   798k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   798k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   798k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   798k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.3k, False: 775k]
  |  |  ------------------
  ------------------
 1283|  22.3k|        return {get_start_for_next_code_point(input),
 1284|  22.3k|                detail::invalid_code_point};
 1285|  22.3k|    }
 1286|   775k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.1k, False: 755k]
  |  |  ------------------
  ------------------
 1287|  20.1k|        return {input.end(), detail::invalid_code_point};
 1288|  20.1k|    }
 1289|       |
 1290|   755k|    return {input.begin() + len,
 1291|   755k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   775k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  22.3k|{
 1265|  22.3k|    auto it = input.begin();
 1266|  87.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 85.9k, False: 1.90k]
  ------------------
 1267|  85.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 20.4k, False: 65.4k]
  ------------------
 1268|  20.4k|            break;
 1269|  20.4k|        }
 1270|  85.9k|    }
 1271|  22.3k|    return it;
 1272|  22.3k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  15.9k|    {
 3046|  15.9k|        SCN_UNLIKELY_ATTR
 3047|  15.9k|        m_msg = msg;
 3048|  15.9k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|   943k|    {
 3051|   943k|        return m_msg == nullptr;
 3052|   943k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.90M|{
  458|  1.90M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.90M|        static_cast<unsigned char>(ch))];
  460|  1.90M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  39.3k|{
  469|  39.3k|    return static_cast<unsigned char>(ch) <= 127;
  470|  39.3k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  11.6k|{
  474|  11.6k|#if WCHAR_MIN < 0
  475|  11.6k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 10.4k, False: 1.26k]
  |  Branch (475:23): [True: 6.73k, False: 3.67k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  11.6k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   774k|{
  539|   774k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   774k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.63M|{
  784|  3.63M|    return e != eof_error::good;
  785|  3.63M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  11.8k|{
  798|  11.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  11.8k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  11.8k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6045|   895k|{
 6046|   895k|    if (specs.width != 0) {
  ------------------
  |  Branch (6046:9): [True: 0, False: 895k]
  ------------------
 6047|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 0]
  ------------------
 6048|      0|            return detail::unexpected_scan_error(
 6049|      0|                scan_error::length_too_short,
 6050|      0|                "Scanned value too narrow, width did not exceed what "
 6051|      0|                "was specified in the format string");
 6052|      0|        }
 6053|      0|    }
 6054|   895k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6054:9): [True: 0, False: 895k]
  ------------------
 6055|       |        // Ensured by take_width_view
 6056|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6057|      0|                   specs.precision);
 6058|      0|    }
 6059|   895k|    return {};
 6060|   895k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   403k|    {
  304|   403k|        ranges::advance(x, n);
  305|   403k|        return x;
  306|   403k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   403k|    {
  268|   403k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   403k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   403k|    {
  151|   403k|        i += n;
  152|   403k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   974k|    {
  108|   974k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   974k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   974k|    {
   87|   974k|        return s - i;
   88|   974k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.27M|    {
  108|  1.27M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.27M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.27M|    {
   87|  1.27M|        return s - i;
   88|  1.27M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   266k|    {
 2993|   266k|        return m_current;
 2994|   266k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.59M|    {
 2993|  1.59M|        return m_current;
 2994|  1.59M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   126k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   126k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   126k|        auto beg = r.begin();
  991|   126k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 126k, False: 0]
  ------------------
  992|   126k|            return false;
  993|   126k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   126k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  34.2k|    {
  763|  34.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  34.2k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.39k|        : m_fptr([](storage fn,
  743|  7.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.39k|              cvref<T> obj = *get<T>(fn);
  745|  7.39k|              if constexpr (std::is_void_v<R>) {
  746|  7.39k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.39k|              }
  748|  7.39k|              else {
  749|  7.39k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.39k|              }
  751|  7.39k|          }),
  752|  7.39k|          m_storage(std::addressof(f))
  753|  7.39k|    {
  754|  7.39k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  17.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.1k|              else {
  749|  17.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.1k|              }
  751|  17.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  17.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.1k|        else if constexpr (std::is_object_v<T>) {
  688|  17.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.1k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.39k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.39k|        {
  662|  7.39k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  73.8M|    {
  763|  73.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  73.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  73.8M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.05M|        : m_fptr([](storage fn,
  743|  2.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.05M|              cvref<T> obj = *get<T>(fn);
  745|  2.05M|              if constexpr (std::is_void_v<R>) {
  746|  2.05M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.05M|              }
  748|  2.05M|              else {
  749|  2.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.05M|              }
  751|  2.05M|          }),
  752|  2.05M|          m_storage(std::addressof(f))
  753|  2.05M|    {
  754|  2.05M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  4.99M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.99M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.99M|              else {
  749|  4.99M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.99M|              }
  751|  4.99M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.99M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.99M|        else if constexpr (std::is_object_v<T>) {
  688|  4.99M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.99M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.05M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.05M|        {
  662|  2.05M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6073|  51.9k|    {
 6074|  51.9k|        const bool need_skipped_width =
 6075|  51.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 51.9k]
  |  Branch (6075:33): [True: 0, False: 51.9k]
  ------------------
 6076|  51.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  51.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 51.9k]
  ------------------
 6080|  51.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 51.9k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|  51.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 51.9k, False: 0]
  |  Branch (6084:56): [True: 49.5k, False: 2.46k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  49.5k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 49.5k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  98.1k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  49.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  49.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  49.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 902, False: 48.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    902|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    902|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    902|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    902|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    902|    }                                                  \
  |  |  |  | 3939|  49.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  98.1k|                            make_eof_scan_error));
 6095|       |
 6096|  98.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 48.6k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|  48.6k|            return result_type{it, 0};
 6104|  98.1k|        }
 6105|       |
 6106|  2.46k|        return result_type{rng.begin(), 0};
 6107|  51.9k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.46k|{
 2075|  2.46k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.46k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.46k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.46k|    else {
 2060|  2.46k|        auto first = range.begin();
 2061|  5.78k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 5.71k, False: 76]
  ------------------
 2062|  5.71k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.38k, False: 3.32k]
  ------------------
 2063|  2.38k|                return first;
 2064|  2.38k|            }
 2065|  5.71k|        }
 2066|     76|        return first;
 2067|  2.46k|    }
 2068|  2.46k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  48.4k|    {
  108|  48.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  48.4k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  48.4k|    {
   94|  48.4k|        iter_difference_t<I> counter{0};
   95|   532k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 483k, False: 48.4k]
  ------------------
   96|   483k|            ++i;
   97|   483k|            ++counter;
   98|   483k|        }
   99|  48.4k|        return counter;
  100|  48.4k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   197k|{
  951|   197k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.09k, False: 195k]
  |  |  ------------------
  ------------------
  952|  2.09k|        return eof_error::eof;
  953|  2.09k|    }
  954|   195k|    return eof_error::good;
  955|   197k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.48M|{
  945|  1.48M|    return is_range_eof(r.begin(), r.end());
  946|  1.48M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.48M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.48M|    {
  938|  1.48M|        return begin == end;
  939|  1.48M|    }
  940|  1.48M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   122k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   122k|    else {
 1788|   122k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   122k|    }
 1790|   122k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   122k|    {
 1636|   122k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   122k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   122k|    {
 1720|   122k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   122k|                           ranges::common_range<Range>) {
 1737|   122k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   122k|            auto end_seg = range.end().contiguous_segment();
 1739|   122k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.08k, False: 119k]
  |  |  ------------------
  ------------------
 1740|   122k|                             detail::to_address(end_seg.end()))) {
 1741|  3.08k|                auto& str = m_storage.emplace();
 1742|  3.08k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.08k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.08k|                m_view = string_view_type{str};
 1745|  3.08k|                return;
 1746|  3.08k|            }
 1747|       |
 1748|   119k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   119k|                                                            end_seg.data());
 1750|   119k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   122k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   240k|    {
 1681|   240k|        return m_view;
 1682|   240k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   122k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6115|  47.9k|    {
 6116|  47.9k|        const bool need_skipped_width =
 6117|  47.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 47.9k]
  |  Branch (6117:33): [True: 0, False: 47.9k]
  ------------------
 6118|  47.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  47.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 47.9k]
  ------------------
 6121|  47.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 47.9k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|  47.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 47.9k, False: 0]
  ------------------
 6130|  47.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 656, False: 47.3k]
  ------------------
 6131|  47.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 656]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|    656|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 656]
  ------------------
 6133|    656|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|  47.9k|        return result_type{rng.begin(), 0};
 6155|  47.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   325k|{
  951|   325k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.25k, False: 321k]
  |  |  ------------------
  ------------------
  952|  3.25k|        return eof_error::eof;
  953|  3.25k|    }
  954|   321k|    return eof_error::good;
  955|   325k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   325k|{
  945|   325k|    return is_range_eof(r.begin(), r.end());
  946|   325k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   325k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   325k|    {
  938|   325k|        return begin == end;
  939|   325k|    }
  940|   325k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   202k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   202k|                  ranges::sized_range<Range>) {
 1785|   202k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   202k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   202k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   202k|    {
 1589|   202k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.10M|    {
 1602|  1.10M|        return sv;
 1603|  1.10M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.92k|{
 2075|  4.92k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.92k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  4.92k|{
 2056|  4.92k|    if constexpr (ranges::common_range<Range>) {
 2057|  4.92k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  4.92k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   202k|{
 3066|   202k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 202k, False: 0]
  ------------------
 3067|   202k|        auto it = read_while_classic_space(range);
 3068|   202k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   202k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.12k, False: 200k]
  |  |  ------------------
  ------------------
 3070|  2.12k|            return unexpected(e);
 3071|  2.12k|        }
 3072|       |
 3073|   200k|        return it;
 3074|   202k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   202k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   202k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   202k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   202k|        auto buf = make_contiguous_buffer(range);
 2220|   202k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   202k|        return ranges::next(range.begin(),
 2222|   202k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   202k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   403k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   403k|                  ranges::sized_range<Range>) {
 1785|   403k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   403k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   403k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   403k|    {
 1589|   403k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  11.3k|    {
  304|  11.3k|        ranges::advance(x, n);
  305|  11.3k|        return x;
  306|  11.3k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   244k|    {
  268|   244k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   244k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   244k|    {
  181|   452k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 207k, False: 244k]
  ------------------
  182|   207k|            ++i;
  183|   207k|        }
  184|   244k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   121k|    {
 1686|   121k|        return m_storage.has_value();
 1687|   121k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.86k|    {
 1691|  1.86k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.86k|        return *m_storage;
 1693|  1.86k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|  53.7k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|  53.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|  53.7k|            auto rd = make_reader<T, char_type>();
 6236|  53.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.77k, False: 51.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.77k|    }
  ------------------
 6237|       |
 6238|  51.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 51.9k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|  51.9k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|  51.9k|                return impl(rd, range, value);
 6241|  51.9k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  53.7k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|   234k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|   234k|                       std::is_same_v<T, std::wstring>) {
 5867|   234k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   234k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|   340k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   143k|    {
 3156|   143k|        reader_error_handler eh{};
 3157|   143k|        get_derived().check_specs_impl(specs, eh);
 3158|   143k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.31k, False: 138k]
  |  |  ------------------
  ------------------
 3159|  5.31k|            return detail::unexpected_scan_error(
 3160|  5.31k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  5.31k|        }
 3162|   138k|        return {};
 3163|   143k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|   143k|    {
 3168|   143k|        return static_cast<Derived&>(*this);
 3169|   143k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   143k|    {
 5247|   143k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   143k|        SCN_GCC_PUSH
 5250|   143k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   143k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   143k|        SCN_CLANG_PUSH
 5254|   143k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   143k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   143k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 143k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 143k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   131k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 131k, False: 12.7k]
  ------------------
 5263|   131k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 131k]
  ------------------
 5264|   131k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 131k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   131k|                else {
 5268|   131k|                    m_type = reader_type::word;
 5269|   131k|                }
 5270|   131k|                break;
 5271|      0|            }
 5272|       |
 5273|  5.31k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 5.31k, False: 138k]
  ------------------
 5274|  5.31k|                m_type = reader_type::character;
 5275|  5.31k|                break;
 5276|       |
 5277|  7.39k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 7.39k, False: 136k]
  ------------------
 5278|  7.39k|                m_type = reader_type::character_set;
 5279|  7.39k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 143k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 143k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   143k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   143k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6160|  51.9k|    {
 6161|  51.9k|        const bool need_skipped_width =
 6162|  51.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 51.9k]
  |  Branch (6162:33): [True: 0, False: 51.9k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  51.9k|        auto it = rng.begin();
 6166|  51.9k|        std::ptrdiff_t prefix_width = 0;
 6167|  51.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 51.9k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  51.9k|        else {
 6175|  51.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 902, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    902|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    902|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    902|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    902|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    902|    }                                                  \
  |  |  |  | 3939|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  51.0k|            std::tie(it, prefix_width) = prefix_result;
 6177|  51.0k|        }
 6178|  51.0k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  51.0k|        std::ptrdiff_t value_width = 0;
 6182|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 51.0k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  51.0k|        else {
 6198|  51.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.63k, False: 48.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.63k|    }                                                  \
  |  | 3939|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  48.4k|                                             specs, value, loc));
 6200|       |
 6201|  48.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 48.4k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  48.4k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  48.4k|        std::ptrdiff_t postfix_width = 0;
 6210|  48.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 47.9k, False: 492]
  ------------------
 6211|  47.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  47.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  47.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  47.9k|                                 value_width));
 6215|  47.9k|            std::tie(it, postfix_width) = postfix_result;
 6216|  47.9k|        }
 6217|       |
 6218|  48.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  48.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 48.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  48.4k|            specs, prefix_width, value_width, postfix_width));
 6220|  48.4k|        return it;
 6221|  48.4k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|   461k|    {
 5296|   461k|        return m_type == reader_type::word;
 5297|   461k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   324k|{
 1242|   324k|    auto it = src.begin();
 1243|  2.38M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 2.06M, False: 316k]
  ------------------
 1244|  2.06M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  2.06M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 4.87k, False: 2.06M]
  ------------------
 1246|  4.87k|            return false;
 1247|  4.87k|        }
 1248|  2.06M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 616, False: 2.06M]
  ------------------
 1249|    616|            return false;
 1250|    616|        }
 1251|  2.06M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  2.06M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  2.06M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.43k, False: 2.06M]
  ------------------
 1254|  2.43k|            return false;
 1255|  2.43k|        }
 1256|  2.06M|        it += len;
 1257|  2.06M|    }
 1258|   316k|    return true;
 1259|   324k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   120k|{
 3108|   120k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   120k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.86k, False: 118k]
  ------------------
 3110|  1.86k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.86k|    static_cast<    \
  |  |  935|  1.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.86k|        }
 3112|   118k|        else {
 3113|   118k|            dest.assign(source.view());
 3114|   118k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   120k|    return {};
 3121|   120k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  7.39k|        {
 5144|  7.39k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 7.39k, False: 0]
  ------------------
 5145|  7.39k|                return {};
 5146|  7.39k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|  15.4k|        {
 5117|  15.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  15.4k|            const auto val =
 5119|  15.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  15.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  15.4k|                    (val % 8)) &
 5122|  15.4k|                   1u;
 5123|  15.4k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  17.1k|        {
 5168|  17.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.69k, False: 15.4k]
  ------------------
 5169|  1.69k|                return false;
 5170|  1.69k|            }
 5171|       |
 5172|  15.4k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  17.1k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  7.39k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|  51.0k|    {
 5314|  51.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  51.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  51.0k|        return read_impl(range, specs, value);
 5316|  51.0k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|  51.0k|    {
 5332|  51.0k|        SCN_CLANG_PUSH
 5333|  51.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  51.0k|        switch (m_type) {
 5336|  48.6k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 48.6k, False: 2.46k]
  ------------------
 5337|  48.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 51.0k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 51.0k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.46k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.46k, False: 48.6k]
  ------------------
 5347|  2.46k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.46k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 51.0k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 51.0k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 51.0k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  51.0k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  51.0k|        }
 5368|       |
 5369|  51.0k|        SCN_CLANG_POP
 5370|  51.0k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   121k|    {
 4861|   121k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   121k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   121k|{
 4795|   121k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   121k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   121k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.32k, False: 119k]
  ------------------
 4799|  2.32k|        return detail::unexpected_scan_error(
 4800|  2.32k|            scan_error::invalid_scanned_value,
 4801|  2.32k|            "Invalid encoding in scanned string");
 4802|  2.32k|    }
 4803|       |
 4804|   119k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   119k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 119k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   119k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   119k|    static_cast<    \
  |  |  935|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   119k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   121k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   121k|    else {
 2196|   121k|        auto it = range.begin();
 2197|       |
 2198|   121k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|   121k|            auto seg = get_contiguous_beginning(range);
 2200|   121k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|   121k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 121k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|   121k|            ranges::advance(it, seg.size());
 2205|   121k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|   121k|            ranges::subrange{it, range.end()},
 2209|   121k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   121k|    }
 2211|   121k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   244k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   244k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   244k|        else {
 1055|   244k|            return r.begin().contiguous_segment();
 1056|   244k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   244k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   233k|{
 2160|   233k|    auto it = range.begin();
 2161|  1.28M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.28M, False: 3.77k]
  ------------------
 2162|  1.28M|        const auto val =
 2163|  1.28M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.28M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.26M, False: 18.2k]
  |  |  ------------------
  ------------------
 2165|  1.26M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.26M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.26M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 229k, False: 1.03M]
  ------------------
 2168|   229k|                return it;
 2169|   229k|            }
 2170|  1.26M|        }
 2171|  1.05M|        it = val.iterator;
 2172|  1.05M|    }
 2173|       |
 2174|  3.77k|    return it;
 2175|   233k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.28M|{
 1998|  1.28M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.28M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.28M|    auto it = range.begin();
 2002|  1.28M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.28M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.2k, False: 1.26M]
  |  |  ------------------
  ------------------
 2005|  18.2k|        ++it;
 2006|  18.2k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  18.2k|        return {it, {}};
 2008|  18.2k|    }
 2009|       |
 2010|  1.26M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.19M, False: 70.3k]
  ------------------
 2011|  1.19M|        ++it;
 2012|  1.19M|        return {it, string_type(1, *range.begin())};
 2013|  1.19M|    }
 2014|       |
 2015|  70.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  70.3k|    return {it, string_type{range.begin(), it}};
 2017|  1.26M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  18.2k|{
 1265|  18.2k|    auto it = input.begin();
 1266|  39.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 38.7k, False: 560]
  ------------------
 1267|  38.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 17.6k, False: 21.0k]
  ------------------
 1268|  17.6k|            break;
 1269|  17.6k|        }
 1270|  38.7k|    }
 1271|  18.2k|    return it;
 1272|  18.2k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  70.3k|    {
  283|  70.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  70.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  70.3k|    {
  252|  70.3k|        constexpr iter_difference_t<I> zero{0};
  253|  70.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|   259k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 189k, False: 69.9k]
  |  Branch (255:30): [True: 188k, False: 436]
  ------------------
  256|   188k|            ++i;
  257|   188k|            ++counter;
  258|   188k|        }
  259|       |
  260|  70.3k|        return counter;
  261|  70.3k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.28M|    {
 1989|  1.28M|        return !codepoint.empty();
 1990|  1.28M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   121k|        : m_fptr([](storage fn,
  743|   121k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   121k|              cvref<T> obj = *get<T>(fn);
  745|   121k|              if constexpr (std::is_void_v<R>) {
  746|   121k|                  obj(static_cast<decltype(args)>(args)...);
  747|   121k|              }
  748|   121k|              else {
  749|   121k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   121k|              }
  751|   121k|          }),
  752|   121k|          m_storage(std::addressof(f))
  753|   121k|    {
  754|   121k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   814k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   814k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   814k|              else {
  749|   814k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   814k|              }
  751|   814k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   814k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   814k|        else if constexpr (std::is_object_v<T>) {
  688|   814k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   814k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   814k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   121k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   121k|        {
  662|   121k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  2.46k|    {
 5089|  2.46k|        auto it = read_source_impl(range, {specs});
 5090|  2.46k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 694]
  |  |  ------------------
  ------------------
 5091|  1.77k|            return unexpected(it.error());
 5092|  1.77k|        }
 5093|       |
 5094|    694|        return read_string_impl(range, *it, value);
 5095|  2.46k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  2.46k|    {
 5192|  2.46k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.46k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.46k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.46k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.46k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.46k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 2.46k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  2.46k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.46k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.46k|        };
 5215|       |
 5216|  2.46k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 2.46k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  2.46k|        auto it = read_while_code_unit(range, cb);
 5221|  2.46k|        return check_nonempty(it, range);
 5222|  2.46k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  2.46k|    {
 5228|  2.46k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.77k, False: 694]
  ------------------
 5229|  1.77k|            return detail::unexpected_scan_error(
 5230|  1.77k|                scan_error::invalid_scanned_value,
 5231|  1.77k|                "No characters matched in [character set]");
 5232|  1.77k|        }
 5233|       |
 5234|    694|        return it;
 5235|  2.46k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   111k|{
 2181|   111k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   111k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.46k|        : m_fptr([](storage fn,
  743|  2.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46k|              cvref<T> obj = *get<T>(fn);
  745|  2.46k|              if constexpr (std::is_void_v<R>) {
  746|  2.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46k|              }
  748|  2.46k|              else {
  749|  2.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46k|              }
  751|  2.46k|          }),
  752|  2.46k|          m_storage(std::addressof(f))
  753|  2.46k|    {
  754|  2.46k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.71k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.71k|              else {
  749|  5.71k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.71k|              }
  751|  5.71k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.71k|    {
  684|  5.71k|        if constexpr (std::is_const_v<T>) {
  685|  5.71k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.71k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5212|  5.71k|        const auto cb = [&](SourceCharT ch) {
 5213|  5.71k|            return cb_wrapper.on_ascii_only(ch);
 5214|  5.71k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.46k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.46k|        {
  667|  2.46k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    694|{
 4795|    694|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    694|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    694|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 694]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    694|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    694|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    694|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 694]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    694|    return SCN_MOVE(result);
  ------------------
  |  |  934|    694|    static_cast<    \
  |  |  935|    694|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    694|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  42.5k|    {
 5314|  42.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  42.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  42.5k|        return read_impl(range, specs, value);
 5316|  42.5k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  42.5k|    {
 5332|  42.5k|        SCN_CLANG_PUSH
 5333|  42.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  42.5k|        switch (m_type) {
 5336|  40.1k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 40.1k, False: 2.46k]
  ------------------
 5337|  40.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 42.5k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 42.5k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.46k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.46k, False: 40.1k]
  ------------------
 5347|  2.46k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.46k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 42.5k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 42.5k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 42.5k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  42.5k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  42.5k|        }
 5368|       |
 5369|  42.5k|        SCN_CLANG_POP
 5370|  42.5k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   100k|    {
 4861|   100k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   100k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   100k|{
 4795|   100k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   100k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   100k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.80k, False: 97.5k]
  ------------------
 4799|  2.80k|        return detail::unexpected_scan_error(
 4800|  2.80k|            scan_error::invalid_scanned_value,
 4801|  2.80k|            "Invalid encoding in scanned string");
 4802|  2.80k|    }
 4803|       |
 4804|  97.5k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  97.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  97.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 97.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|  97.5k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  97.5k|    static_cast<    \
  |  |  935|  97.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  97.5k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  98.2k|{
 3128|  98.2k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  98.2k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  98.2k|    return {};
 3136|  98.2k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   200k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   200k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   200k|        auto buf = make_contiguous_buffer(range);
 2191|   200k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   200k|        return ranges::next(range.begin(),
 2193|   200k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   200k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  2.46k|    {
 5089|  2.46k|        auto it = read_source_impl(range, {specs});
 5090|  2.46k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 694]
  |  |  ------------------
  ------------------
 5091|  1.77k|            return unexpected(it.error());
 5092|  1.77k|        }
 5093|       |
 5094|    694|        return read_string_impl(range, *it, value);
 5095|  2.46k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  4.92k|    {
 5192|  4.92k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  4.92k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  4.92k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  4.92k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.92k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  4.92k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  4.92k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 4.92k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  4.92k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.92k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.92k|        };
 5215|       |
 5216|  4.92k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.92k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  4.92k|        auto it = read_while_code_unit(range, cb);
 5221|  4.92k|        return check_nonempty(it, range);
 5222|  4.92k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  4.92k|    {
 5228|  4.92k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.54k, False: 1.38k]
  ------------------
 5229|  3.54k|            return detail::unexpected_scan_error(
 5230|  3.54k|                scan_error::invalid_scanned_value,
 5231|  3.54k|                "No characters matched in [character set]");
 5232|  3.54k|        }
 5233|       |
 5234|  1.38k|        return it;
 5235|  4.92k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.92k|        : m_fptr([](storage fn,
  743|  4.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.92k|              cvref<T> obj = *get<T>(fn);
  745|  4.92k|              if constexpr (std::is_void_v<R>) {
  746|  4.92k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.92k|              }
  748|  4.92k|              else {
  749|  4.92k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.92k|              }
  751|  4.92k|          }),
  752|  4.92k|          m_storage(std::addressof(f))
  753|  4.92k|    {
  754|  4.92k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  11.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.4k|              else {
  749|  11.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.4k|              }
  751|  11.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  11.4k|    {
  684|  11.4k|        if constexpr (std::is_const_v<T>) {
  685|  11.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.4k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  11.4k|        const auto cb = [&](SourceCharT ch) {
 5213|  11.4k|            return cb_wrapper.on_ascii_only(ch);
 5214|  11.4k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.92k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.92k|        {
  667|  4.92k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    694|{
 4795|    694|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    694|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    694|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 694]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    694|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    694|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    694|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 694]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    694|    return SCN_MOVE(result);
  ------------------
  |  |  934|    694|    static_cast<    \
  |  |  935|    694|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    694|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|   106k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   106k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   106k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   106k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  42.5k|    {
 5314|  42.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  42.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  42.5k|        return read_impl(range, specs, value);
 5316|  42.5k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  42.5k|    {
 5332|  42.5k|        SCN_CLANG_PUSH
 5333|  42.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  42.5k|        switch (m_type) {
 5336|  40.1k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 40.1k, False: 2.46k]
  ------------------
 5337|  40.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 42.5k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 42.5k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.46k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.46k, False: 40.1k]
  ------------------
 5347|  2.46k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.46k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 42.5k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 42.5k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 42.5k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  42.5k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  42.5k|        }
 5368|       |
 5369|  42.5k|        SCN_CLANG_POP
 5370|  42.5k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   100k|    {
 4868|   100k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   100k|                                     value);
 4870|   100k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   100k|{
 4814|   100k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   100k|    auto src = [&]() {
 4817|   100k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   100k|            return make_contiguous_buffer(
 4819|   100k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   100k|        }
 4821|   100k|        else {
 4822|   100k|            return make_contiguous_buffer(
 4823|   100k|                ranges::subrange{range.begin(), result});
 4824|   100k|        }
 4825|   100k|    }();
 4826|   100k|    using src_type = decltype(src);
 4827|       |
 4828|   100k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   100k|    else {
 4841|   100k|        const auto view = src.view();
 4842|   100k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   100k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 2.80k, False: 97.5k]
  ------------------
 4845|  2.80k|            return detail::unexpected_scan_error(
 4846|  2.80k|                scan_error::invalid_scanned_value,
 4847|  2.80k|                "Invalid encoding in scanned string_view");
 4848|  2.80k|        }
 4849|       |
 4850|  97.5k|        return SCN_MOVE(result);
  ------------------
  |  |  934|  97.5k|    static_cast<    \
  |  |  935|  97.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   100k|    }
 4852|   100k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   100k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   100k|        else {
 4822|   100k|            return make_contiguous_buffer(
 4823|   100k|                ranges::subrange{range.begin(), result});
 4824|   100k|        }
 4825|   100k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  2.46k|    {
 5103|  2.46k|        auto it = read_source_impl(range, {specs});
 5104|  2.46k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 694]
  |  |  ------------------
  ------------------
 5105|  1.77k|            return unexpected(it.error());
 5106|  1.77k|        }
 5107|       |
 5108|    694|        return read_string_view_impl(range, *it, value);
 5109|  2.46k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    694|{
 4814|    694|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    694|    auto src = [&]() {
 4817|    694|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    694|            return make_contiguous_buffer(
 4819|    694|                ranges::subrange{range.begin().base(), result.base()});
 4820|    694|        }
 4821|    694|        else {
 4822|    694|            return make_contiguous_buffer(
 4823|    694|                ranges::subrange{range.begin(), result});
 4824|    694|        }
 4825|    694|    }();
 4826|    694|    using src_type = decltype(src);
 4827|       |
 4828|    694|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    694|    else {
 4841|    694|        const auto view = src.view();
 4842|    694|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    694|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 694]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    694|        return SCN_MOVE(result);
  ------------------
  |  |  934|    694|    static_cast<    \
  |  |  935|    694|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    694|    }
 4852|    694|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    694|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    694|        else {
 4822|    694|            return make_contiguous_buffer(
 4823|    694|                ranges::subrange{range.begin(), result});
 4824|    694|        }
 4825|    694|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   123k|{
 3066|   123k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 123k, False: 0]
  ------------------
 3067|   123k|        auto it = read_while_classic_space(range);
 3068|   123k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   123k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.39k, False: 121k]
  |  |  ------------------
  ------------------
 3070|  1.39k|            return unexpected(e);
 3071|  1.39k|        }
 3072|       |
 3073|   121k|        return it;
 3074|   123k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   123k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   123k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   123k|    else {
 2225|   123k|        auto it = range.begin();
 2226|       |
 2227|   123k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   123k|            auto seg = get_contiguous_beginning(range);
 2229|   123k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   123k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 11.3k, False: 111k]
  ------------------
 2231|  11.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  11.3k|            }
 2233|   111k|            ranges::advance(it, seg.size());
 2234|   111k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   123k|            return detail::is_cp_space(cp);
 2238|   123k|        });
 2239|   123k|    }
 2240|   123k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   111k|        : m_fptr([](storage fn,
  743|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   111k|              cvref<T> obj = *get<T>(fn);
  745|   111k|              if constexpr (std::is_void_v<R>) {
  746|   111k|                  obj(static_cast<decltype(args)>(args)...);
  747|   111k|              }
  748|   111k|              else {
  749|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   111k|              }
  751|   111k|          }),
  752|   111k|          m_storage(std::addressof(f))
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   451k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   451k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   451k|              else {
  749|   451k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   451k|              }
  751|   451k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   451k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   451k|        else if constexpr (std::is_object_v<T>) {
  688|   451k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   451k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   451k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   451k|            return detail::is_cp_space(cp);
 2238|   451k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   111k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   651k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   651k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   651k|        auto beg = r.begin();
  991|   651k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 651k, False: 0]
  ------------------
  992|   651k|            return false;
  993|   651k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   651k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  23.3k|    {
  763|  23.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  23.3k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  10.8k|        : m_fptr([](storage fn,
  743|  10.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.8k|              cvref<T> obj = *get<T>(fn);
  745|  10.8k|              if constexpr (std::is_void_v<R>) {
  746|  10.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.8k|              }
  748|  10.8k|              else {
  749|  10.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.8k|              }
  751|  10.8k|          }),
  752|  10.8k|          m_storage(std::addressof(f))
  753|  10.8k|    {
  754|  10.8k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  11.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.6k|              else {
  749|  11.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.6k|              }
  751|  11.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  11.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.6k|        else if constexpr (std::is_object_v<T>) {
  688|  11.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.6k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  10.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  10.8k|        {
  662|  10.8k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6073|   262k|    {
 6074|   262k|        const bool need_skipped_width =
 6075|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 262k]
  |  Branch (6075:33): [True: 0, False: 262k]
  ------------------
 6076|   262k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   262k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 262k]
  ------------------
 6080|   262k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 262k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   262k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 262k, False: 0]
  |  Branch (6084:56): [True: 259k, False: 3.63k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   259k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 259k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   517k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 866, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    866|    }                                                  \
  |  |  |  | 3939|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   517k|                            make_eof_scan_error));
 6095|       |
 6096|   517k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 258k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   258k|            return result_type{it, 0};
 6104|   517k|        }
 6105|       |
 6106|  3.63k|        return result_type{rng.begin(), 0};
 6107|   262k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.63k|{
 2075|  3.63k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  3.63k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  3.63k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  3.63k|    else {
 2060|  3.63k|        auto first = range.begin();
 2061|  3.94k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 3.88k, False: 52]
  ------------------
 2062|  3.88k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 3.57k, False: 310]
  ------------------
 2063|  3.57k|                return first;
 2064|  3.57k|            }
 2065|  3.88k|        }
 2066|     52|        return first;
 2067|  3.63k|    }
 2068|  3.63k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   255k|    {
  108|   255k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   255k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   255k|    {
   94|   255k|        iter_difference_t<I> counter{0};
   95|  8.61M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.36M, False: 255k]
  ------------------
   96|  8.36M|            ++i;
   97|  8.36M|            ++counter;
   98|  8.36M|        }
   99|   255k|        return counter;
  100|   255k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.03M|{
  951|  1.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.16k, False: 1.03M]
  |  |  ------------------
  ------------------
  952|  2.16k|        return eof_error::eof;
  953|  2.16k|    }
  954|  1.03M|    return eof_error::good;
  955|  1.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  23.5M|{
  945|  23.5M|    return is_range_eof(r.begin(), r.end());
  946|  23.5M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  23.5M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  23.5M|    {
  938|  23.5M|        return begin == end;
  939|  23.5M|    }
  940|  23.5M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   646k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   646k|    else {
 1788|   646k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   646k|    }
 1790|   646k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   646k|    {
 1636|   646k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   646k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   646k|    {
 1720|   646k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   646k|                           ranges::common_range<Range>) {
 1737|   646k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   646k|            auto end_seg = range.end().contiguous_segment();
 1739|   646k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.52k, False: 642k]
  |  |  ------------------
  ------------------
 1740|   646k|                             detail::to_address(end_seg.end()))) {
 1741|  3.52k|                auto& str = m_storage.emplace();
 1742|  3.52k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.52k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.52k|                m_view = string_view_type{str};
 1745|  3.52k|                return;
 1746|  3.52k|            }
 1747|       |
 1748|   642k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   642k|                                                            end_seg.data());
 1750|   642k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   646k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.28M|    {
 1681|  1.28M|        return m_view;
 1682|  1.28M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   646k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6115|   255k|    {
 6116|   255k|        const bool need_skipped_width =
 6117|   255k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 255k]
  |  Branch (6117:33): [True: 0, False: 255k]
  ------------------
 6118|   255k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   255k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 255k]
  ------------------
 6121|   255k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 255k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   255k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 255k, False: 0]
  ------------------
 6130|   255k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 64, False: 255k]
  ------------------
 6131|   255k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 64]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|     64|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 64]
  ------------------
 6133|     64|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   255k|        return result_type{rng.begin(), 0};
 6155|   255k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  45.0M|{
 1998|  45.0M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  45.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  45.0M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  45.0M|    auto it = range.begin();
 2002|  45.0M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  45.0M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  45.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 45.0M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  45.0M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 45.0M, False: 0]
  ------------------
 2011|  45.0M|        ++it;
 2012|  45.0M|        return {it, string_type(1, *range.begin())};
 2013|  45.0M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  45.0M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  47.1M|{
  945|  47.1M|    return is_range_eof(r.begin(), r.end());
  946|  47.1M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  47.1M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  47.1M|    {
  938|  47.1M|        return begin == end;
  939|  47.1M|    }
  940|  47.1M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  45.0M|    {
 1989|  45.0M|        return !codepoint.empty();
 1990|  45.0M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.07M|{
  951|  2.07M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.33k, False: 2.06M]
  |  |  ------------------
  ------------------
  952|  4.33k|        return eof_error::eof;
  953|  4.33k|    }
  954|  2.06M|    return eof_error::good;
  955|  2.07M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.29M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.29M|                  ranges::sized_range<Range>) {
 1785|  1.29M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.29M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.29M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.29M|    {
 1589|  1.29M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  1.93M|    {
 1602|  1.93M|        return sv;
 1603|  1.93M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  7.26k|{
 2075|  7.26k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  7.26k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  7.26k|{
 2056|  7.26k|    if constexpr (ranges::common_range<Range>) {
 2057|  7.26k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  7.26k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  1.29M|{
 3066|  1.29M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.29M, False: 0]
  ------------------
 3067|  1.29M|        auto it = read_while_classic_space(range);
 3068|  1.29M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.29M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 1.29M]
  |  |  ------------------
  ------------------
 3070|  2.24k|            return unexpected(e);
 3071|  2.24k|        }
 3072|       |
 3073|  1.29M|        return it;
 3074|  1.29M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.29M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.29M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.29M|    else {
 2225|  1.29M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.29M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.29M|            return detail::is_cp_space(cp);
 2238|  1.29M|        });
 2239|  1.29M|    }
 2240|  1.29M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.29M|{
 2181|  1.29M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.29M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  2.58M|{
 2160|  2.58M|    auto it = range.begin();
 2161|  45.0M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 45.0M, False: 12.1k]
  ------------------
 2162|  45.0M|        const auto val =
 2163|  45.0M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  45.0M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  45.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.0M, False: 0]
  |  |  ------------------
  ------------------
 2165|  45.0M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  45.0M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  45.0M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.57M, False: 42.4M]
  ------------------
 2168|  2.57M|                return it;
 2169|  2.57M|            }
 2170|  45.0M|        }
 2171|  42.4M|        it = val.iterator;
 2172|  42.4M|    }
 2173|       |
 2174|  12.1k|    return it;
 2175|  2.58M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.29M|        : m_fptr([](storage fn,
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|  1.29M|              if constexpr (std::is_void_v<R>) {
  746|  1.29M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.29M|              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
  752|  1.29M|          m_storage(std::addressof(f))
  753|  1.29M|    {
  754|  1.29M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.03M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.03M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.03M|              else {
  749|  3.03M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.03M|              }
  751|  3.03M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.03M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.03M|        else if constexpr (std::is_object_v<T>) {
  688|  3.03M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.03M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  3.03M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.03M|            return detail::is_cp_space(cp);
 2238|  3.03M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.29M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.29M|        {
  662|  1.29M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   640k|    {
 1686|   640k|        return m_storage.has_value();
 1687|   640k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.09k|    {
 1691|  1.09k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.09k|        return *m_storage;
 1693|  1.09k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  1.96M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   799k|    {
 3156|   799k|        reader_error_handler eh{};
 3157|   799k|        get_derived().check_specs_impl(specs, eh);
 3158|   799k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 788k]
  |  |  ------------------
  ------------------
 3159|  10.6k|            return detail::unexpected_scan_error(
 3160|  10.6k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  10.6k|        }
 3162|   788k|        return {};
 3163|   799k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|   799k|    {
 3168|   799k|        return static_cast<Derived&>(*this);
 3169|   799k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   799k|    {
 5247|   799k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   799k|        SCN_GCC_PUSH
 5250|   799k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   799k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   799k|        SCN_CLANG_PUSH
 5254|   799k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   799k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   799k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 799k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 799k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   777k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 777k, False: 21.5k]
  ------------------
 5263|   777k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 777k]
  ------------------
 5264|   777k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 777k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   777k|                else {
 5268|   777k|                    m_type = reader_type::word;
 5269|   777k|                }
 5270|   777k|                break;
 5271|      0|            }
 5272|       |
 5273|  10.6k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 10.6k, False: 788k]
  ------------------
 5274|  10.6k|                m_type = reader_type::character;
 5275|  10.6k|                break;
 5276|       |
 5277|  10.8k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 10.8k, False: 788k]
  ------------------
 5278|  10.8k|                m_type = reader_type::character_set;
 5279|  10.8k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 799k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 799k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   799k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   799k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  2.72M|    {
 5296|  2.72M|        return m_type == reader_type::word;
 5297|  2.72M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  1.93M|{
 1242|  1.93M|    auto it = src.begin();
 1243|  62.0M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 60.1M, False: 1.91M]
  ------------------
 1244|  60.1M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  60.1M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 60.1M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  60.1M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 60.1M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  60.1M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  60.1M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  60.1M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 20.0k, False: 60.1M]
  ------------------
 1254|  20.0k|            return false;
 1255|  20.0k|        }
 1256|  60.1M|        it += len;
 1257|  60.1M|    }
 1258|  1.91M|    return true;
 1259|  1.93M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  10.8k|        {
 5144|  10.8k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 10.8k, False: 0]
  ------------------
 5145|  10.8k|                return {};
 5146|  10.8k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  6.73k|        {
 5117|  6.73k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  6.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  6.73k|            const auto val =
 5119|  6.73k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  6.73k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  6.73k|                    (val % 8)) &
 5122|  6.73k|                   1u;
 5123|  6.73k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  11.6k|        {
 5168|  11.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 4.93k, False: 6.73k]
  ------------------
 5169|  4.93k|                return false;
 5170|  4.93k|            }
 5171|       |
 5172|  6.73k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  11.6k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  10.8k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   646k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   646k|    else {
 2196|   646k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   646k|        return read_until_code_point(
 2208|   646k|            ranges::subrange{it, range.end()},
 2209|   646k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   646k|    }
 2211|   646k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.29M|{
 2160|  1.29M|    auto it = range.begin();
 2161|  22.5M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 22.5M, False: 6.09k]
  ------------------
 2162|  22.5M|        const auto val =
 2163|  22.5M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  22.5M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  22.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22.5M, False: 0]
  |  |  ------------------
  ------------------
 2165|  22.5M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  22.5M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  22.5M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.28M, False: 21.2M]
  ------------------
 2168|  1.28M|                return it;
 2169|  1.28M|            }
 2170|  22.5M|        }
 2171|  21.2M|        it = val.iterator;
 2172|  21.2M|    }
 2173|       |
 2174|  6.09k|    return it;
 2175|  1.29M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  22.5M|{
 1998|  22.5M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  22.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  22.5M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  22.5M|    auto it = range.begin();
 2002|  22.5M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  22.5M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  22.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22.5M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  22.5M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 22.5M, False: 0]
  ------------------
 2011|  22.5M|        ++it;
 2012|  22.5M|        return {it, string_type(1, *range.begin())};
 2013|  22.5M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  22.5M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  22.5M|    {
 1989|  22.5M|        return !codepoint.empty();
 1990|  22.5M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   646k|        : m_fptr([](storage fn,
  743|   646k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   646k|              cvref<T> obj = *get<T>(fn);
  745|   646k|              if constexpr (std::is_void_v<R>) {
  746|   646k|                  obj(static_cast<decltype(args)>(args)...);
  747|   646k|              }
  748|   646k|              else {
  749|   646k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   646k|              }
  751|   646k|          }),
  752|   646k|          m_storage(std::addressof(f))
  753|   646k|    {
  754|   646k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  21.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.0M|              else {
  749|  21.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.0M|              }
  751|  21.0M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  21.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.0M|        else if constexpr (std::is_object_v<T>) {
  688|  21.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.0M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  21.0M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   646k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   646k|        {
  662|   646k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  3.63k|    {
 5192|  3.63k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  3.63k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  3.63k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  3.63k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  3.63k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  3.63k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 3.63k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  3.63k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.63k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.63k|        };
 5215|       |
 5216|  3.63k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 3.63k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  3.63k|        auto it = read_while_code_unit(range, cb);
 5221|  3.63k|        return check_nonempty(it, range);
 5222|  3.63k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  3.63k|    {
 5228|  3.63k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.54k, False: 90]
  ------------------
 5229|  3.54k|            return detail::unexpected_scan_error(
 5230|  3.54k|                scan_error::invalid_scanned_value,
 5231|  3.54k|                "No characters matched in [character set]");
 5232|  3.54k|        }
 5233|       |
 5234|     90|        return it;
 5235|  3.63k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   647k|{
 2181|   647k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   647k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.63k|        : m_fptr([](storage fn,
  743|  3.63k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.63k|              cvref<T> obj = *get<T>(fn);
  745|  3.63k|              if constexpr (std::is_void_v<R>) {
  746|  3.63k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.63k|              }
  748|  3.63k|              else {
  749|  3.63k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.63k|              }
  751|  3.63k|          }),
  752|  3.63k|          m_storage(std::addressof(f))
  753|  3.63k|    {
  754|  3.63k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  3.88k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.88k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.88k|              else {
  749|  3.88k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.88k|              }
  751|  3.88k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.88k|    {
  684|  3.88k|        if constexpr (std::is_const_v<T>) {
  685|  3.88k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.88k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5212|  3.88k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.88k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.88k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.63k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.63k|        {
  667|  3.63k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.29M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.29M|    else {
 2196|  1.29M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.29M|        return read_until_code_point(
 2208|  1.29M|            ranges::subrange{it, range.end()},
 2209|  1.29M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.29M|    }
 2211|  1.29M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.29M|        : m_fptr([](storage fn,
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|  1.29M|              if constexpr (std::is_void_v<R>) {
  746|  1.29M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.29M|              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
  752|  1.29M|          m_storage(std::addressof(f))
  753|  1.29M|    {
  754|  1.29M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  42.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.0M|              else {
  749|  42.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.0M|              }
  751|  42.0M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  42.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.0M|        else if constexpr (std::is_object_v<T>) {
  688|  42.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.0M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  42.0M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.29M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.29M|        {
  662|  1.29M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  7.26k|    {
 5192|  7.26k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  7.26k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  7.26k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  7.26k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  7.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 7.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  7.26k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  7.26k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 7.26k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  7.26k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.26k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.26k|        };
 5215|       |
 5216|  7.26k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 7.26k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  7.26k|        auto it = read_while_code_unit(range, cb);
 5221|  7.26k|        return check_nonempty(it, range);
 5222|  7.26k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  7.26k|    {
 5228|  7.26k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 7.08k, False: 180]
  ------------------
 5229|  7.08k|            return detail::unexpected_scan_error(
 5230|  7.08k|                scan_error::invalid_scanned_value,
 5231|  7.08k|                "No characters matched in [character set]");
 5232|  7.08k|        }
 5233|       |
 5234|    180|        return it;
 5235|  7.26k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.26k|        : m_fptr([](storage fn,
  743|  7.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.26k|              cvref<T> obj = *get<T>(fn);
  745|  7.26k|              if constexpr (std::is_void_v<R>) {
  746|  7.26k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.26k|              }
  748|  7.26k|              else {
  749|  7.26k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.26k|              }
  751|  7.26k|          }),
  752|  7.26k|          m_storage(std::addressof(f))
  753|  7.26k|    {
  754|  7.26k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  7.77k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.77k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.77k|              else {
  749|  7.77k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.77k|              }
  751|  7.77k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  7.77k|    {
  684|  7.77k|        if constexpr (std::is_const_v<T>) {
  685|  7.77k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.77k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  7.77k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.77k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.77k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.26k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.26k|        {
  667|  7.26k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|   266k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   266k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   266k|            auto rd = make_reader<T, char_type>();
 6236|   266k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   266k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.54k, False: 262k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.54k|    }
  ------------------
 6237|       |
 6238|   262k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 262k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   262k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   262k|                return impl(rd, range, value);
 6241|   262k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   266k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.31M|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.31M|                       std::is_same_v<T, std::wstring>) {
 5867|  1.31M|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.31M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6160|   262k|    {
 6161|   262k|        const bool need_skipped_width =
 6162|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 262k]
  |  Branch (6162:33): [True: 0, False: 262k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   262k|        auto it = rng.begin();
 6166|   262k|        std::ptrdiff_t prefix_width = 0;
 6167|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 262k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   262k|        else {
 6175|   262k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 866, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    866|    }                                                  \
  |  |  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   262k|            std::tie(it, prefix_width) = prefix_result;
 6177|   262k|        }
 6178|   262k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   262k|        std::ptrdiff_t value_width = 0;
 6182|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 262k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   262k|        else {
 6198|   262k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.21k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.21k|    }                                                  \
  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   255k|                                             specs, value, loc));
 6200|       |
 6201|   255k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 255k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   255k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   255k|        std::ptrdiff_t postfix_width = 0;
 6210|   255k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 255k, False: 720]
  ------------------
 6211|   255k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   255k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   255k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   255k|                                 value_width));
 6215|   255k|            std::tie(it, postfix_width) = postfix_result;
 6216|   255k|        }
 6217|       |
 6218|   255k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   255k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   255k|            specs, prefix_width, value_width, postfix_width));
 6220|   255k|        return it;
 6221|   255k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   639k|{
 3108|   639k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   639k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.09k, False: 638k]
  ------------------
 3110|  1.09k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.09k|    static_cast<    \
  |  |  935|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.09k|        }
 3112|   638k|        else {
 3113|   638k|            dest.assign(source.view());
 3114|   638k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   639k|    return {};
 3121|   639k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|   262k|    {
 5314|   262k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   262k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   262k|        return read_impl(range, specs, value);
 5316|   262k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|   262k|    {
 5332|   262k|        SCN_CLANG_PUSH
 5333|   262k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   262k|        switch (m_type) {
 5336|   258k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 258k, False: 3.63k]
  ------------------
 5337|   258k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 262k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 262k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.63k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.63k, False: 258k]
  ------------------
 5347|  3.63k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.63k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 262k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 262k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 262k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   262k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   262k|        }
 5368|       |
 5369|   262k|        SCN_CLANG_POP
 5370|   262k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   646k|    {
 4861|   646k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   646k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   646k|{
 4795|   646k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   646k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   646k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.68k, False: 639k]
  ------------------
 4799|  6.68k|        return detail::unexpected_scan_error(
 4800|  6.68k|            scan_error::invalid_scanned_value,
 4801|  6.68k|            "Invalid encoding in scanned string");
 4802|  6.68k|    }
 4803|       |
 4804|   639k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   639k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 639k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   639k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   639k|    static_cast<    \
  |  |  935|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   639k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  3.63k|    {
 5089|  3.63k|        auto it = read_source_impl(range, {specs});
 5090|  3.63k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 90]
  |  |  ------------------
  ------------------
 5091|  3.54k|            return unexpected(it.error());
 5092|  3.54k|        }
 5093|       |
 5094|     90|        return read_string_impl(range, *it, value);
 5095|  3.63k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|     90|{
 4795|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|     90|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|     90|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 90]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|     90|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     90|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 90]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     90|    return SCN_MOVE(result);
  ------------------
  |  |  934|     90|    static_cast<    \
  |  |  935|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     90|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|   262k|    {
 5314|   262k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   262k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   262k|        return read_impl(range, specs, value);
 5316|   262k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|   262k|    {
 5332|   262k|        SCN_CLANG_PUSH
 5333|   262k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   262k|        switch (m_type) {
 5336|   258k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 258k, False: 3.63k]
  ------------------
 5337|   258k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 262k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 262k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.63k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.63k, False: 258k]
  ------------------
 5347|  3.63k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.63k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 262k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 262k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 262k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   262k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   262k|        }
 5368|       |
 5369|   262k|        SCN_CLANG_POP
 5370|   262k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   646k|    {
 4861|   646k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   646k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   646k|{
 4795|   646k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   646k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   646k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 6.68k, False: 639k]
  ------------------
 4799|  6.68k|        return detail::unexpected_scan_error(
 4800|  6.68k|            scan_error::invalid_scanned_value,
 4801|  6.68k|            "Invalid encoding in scanned string");
 4802|  6.68k|    }
 4803|       |
 4804|   639k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   639k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 639k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   639k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   639k|    static_cast<    \
  |  |  935|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   639k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   639k|{
 3128|   639k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   639k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   639k|    return {};
 3136|   639k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  3.63k|    {
 5089|  3.63k|        auto it = read_source_impl(range, {specs});
 5090|  3.63k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 90]
  |  |  ------------------
  ------------------
 5091|  3.54k|            return unexpected(it.error());
 5092|  3.54k|        }
 5093|       |
 5094|     90|        return read_string_impl(range, *it, value);
 5095|  3.63k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|     90|{
 4795|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|     90|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|     90|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 90]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|     90|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|     90|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 90]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|     90|    return SCN_MOVE(result);
  ------------------
  |  |  934|     90|    static_cast<    \
  |  |  935|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|     90|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|   655k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   655k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   655k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   655k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|   262k|    {
 5314|   262k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   262k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   262k|        return read_impl(range, specs, value);
 5316|   262k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|   262k|    {
 5332|   262k|        SCN_CLANG_PUSH
 5333|   262k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   262k|        switch (m_type) {
 5336|   258k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 258k, False: 3.63k]
  ------------------
 5337|   258k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 262k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 262k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.63k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.63k, False: 258k]
  ------------------
 5347|  3.63k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.63k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 262k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 262k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 262k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   262k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   262k|        }
 5368|       |
 5369|   262k|        SCN_CLANG_POP
 5370|   262k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   646k|    {
 4868|   646k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   646k|                                     value);
 4870|   646k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   646k|{
 4814|   646k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   646k|    auto src = [&]() {
 4817|   646k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   646k|            return make_contiguous_buffer(
 4819|   646k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   646k|        }
 4821|   646k|        else {
 4822|   646k|            return make_contiguous_buffer(
 4823|   646k|                ranges::subrange{range.begin(), result});
 4824|   646k|        }
 4825|   646k|    }();
 4826|   646k|    using src_type = decltype(src);
 4827|       |
 4828|   646k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   646k|    else {
 4841|   646k|        const auto view = src.view();
 4842|   646k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   646k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 6.68k, False: 639k]
  ------------------
 4845|  6.68k|            return detail::unexpected_scan_error(
 4846|  6.68k|                scan_error::invalid_scanned_value,
 4847|  6.68k|                "Invalid encoding in scanned string_view");
 4848|  6.68k|        }
 4849|       |
 4850|   639k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   639k|    static_cast<    \
  |  |  935|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   646k|    }
 4852|   646k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   646k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   646k|        else {
 4822|   646k|            return make_contiguous_buffer(
 4823|   646k|                ranges::subrange{range.begin(), result});
 4824|   646k|        }
 4825|   646k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  3.63k|    {
 5103|  3.63k|        auto it = read_source_impl(range, {specs});
 5104|  3.63k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.54k, False: 90]
  |  |  ------------------
  ------------------
 5105|  3.54k|            return unexpected(it.error());
 5106|  3.54k|        }
 5107|       |
 5108|     90|        return read_string_view_impl(range, *it, value);
 5109|  3.63k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|     90|{
 4814|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|     90|    auto src = [&]() {
 4817|     90|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|     90|            return make_contiguous_buffer(
 4819|     90|                ranges::subrange{range.begin().base(), result.base()});
 4820|     90|        }
 4821|     90|        else {
 4822|     90|            return make_contiguous_buffer(
 4823|     90|                ranges::subrange{range.begin(), result});
 4824|     90|        }
 4825|     90|    }();
 4826|     90|    using src_type = decltype(src);
 4827|       |
 4828|     90|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|     90|    else {
 4841|     90|        const auto view = src.view();
 4842|     90|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|     90|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 90]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|     90|        return SCN_MOVE(result);
  ------------------
  |  |  934|     90|    static_cast<    \
  |  |  935|     90|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|     90|    }
 4852|     90|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|     90|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|     90|        else {
 4822|     90|            return make_contiguous_buffer(
 4823|     90|                ranges::subrange{range.begin(), result});
 4824|     90|        }
 4825|     90|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   647k|{
 3066|   647k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 647k, False: 0]
  ------------------
 3067|   647k|        auto it = read_while_classic_space(range);
 3068|   647k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   647k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   647k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.12k, False: 646k]
  |  |  ------------------
  ------------------
 3070|  1.12k|            return unexpected(e);
 3071|  1.12k|        }
 3072|       |
 3073|   646k|        return it;
 3074|   647k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   647k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   647k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   647k|    else {
 2225|   647k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   647k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   647k|            return detail::is_cp_space(cp);
 2238|   647k|        });
 2239|   647k|    }
 2240|   647k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   647k|        : m_fptr([](storage fn,
  743|   647k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   647k|              cvref<T> obj = *get<T>(fn);
  745|   647k|              if constexpr (std::is_void_v<R>) {
  746|   647k|                  obj(static_cast<decltype(args)>(args)...);
  747|   647k|              }
  748|   647k|              else {
  749|   647k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   647k|              }
  751|   647k|          }),
  752|   647k|          m_storage(std::addressof(f))
  753|   647k|    {
  754|   647k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.51M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.51M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.51M|              else {
  749|  1.51M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.51M|              }
  751|  1.51M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.51M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.51M|        else if constexpr (std::is_object_v<T>) {
  688|  1.51M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.51M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.51M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.51M|            return detail::is_cp_space(cp);
 2238|  1.51M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   647k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   647k|        {
  662|   647k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   122k|{
 5835|   122k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.12k, False: 121k]
  |  |  ------------------
  ------------------
 5836|  1.12k|        return unexpected(e);
 5837|  1.12k|    }
 5838|       |
 5839|   121k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 121k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   121k|    return skip_classic_whitespace(range);
 5844|   121k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  61.1k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  61.1k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  61.1k|            auto rd = make_reader<T, char_type>();
 5916|  61.1k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  61.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  61.1k|    {
 5903|  61.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  61.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 975, False: 60.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    975|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    975|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    975|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    975|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    975|    }                                                  \
  |  |  |  | 3939|  61.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  60.1k|                        .transform_error(make_eof_scan_error));
 5905|  60.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  61.1k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  60.1k|    {
 5303|  60.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  60.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  60.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  60.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  61.1k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  61.1k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  61.1k|            auto rd = make_reader<T, char_type>();
 5916|  61.1k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  61.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  61.1k|    {
 5903|  61.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  61.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 975, False: 60.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    975|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    975|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    975|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    975|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    975|    }                                                  \
  |  |  |  | 3939|  61.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  60.1k|                        .transform_error(make_eof_scan_error));
 5905|  60.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  61.1k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  60.1k|    {
 5303|  60.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  60.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  60.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  60.1k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  74.3k|{
 5835|  74.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 702, False: 73.5k]
  |  |  ------------------
  ------------------
 5836|    702|        return unexpected(e);
 5837|    702|    }
 5838|       |
 5839|  73.5k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 73.5k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  73.5k|    return skip_classic_whitespace(range);
 5844|  73.5k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  74.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  74.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  74.3k|            auto rd = make_reader<T, char_type>();
 5920|  74.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 74.3k, False: 0]
  ------------------
 5921|  74.3k|                return impl(rd, range, value);
 5922|  74.3k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  74.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|  74.3k|    {
 5903|  74.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  74.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  74.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  74.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.19k, False: 73.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.19k|    }                                                  \
  |  |  |  | 3939|  74.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  73.1k|                        .transform_error(make_eof_scan_error));
 5905|  73.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  74.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|  73.1k|    {
 5303|  73.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  73.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  73.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  73.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  97.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  97.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  97.1k|          m_current(m_range.begin())
 2988|  97.1k|    {
 2989|  97.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   169k|    {
 2998|   169k|        return m_range.end();
 2999|   169k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  79.4k|    {
 3013|  79.4k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  79.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  79.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  79.4k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  79.4k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 79.4k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  79.4k|        }
 3019|  79.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  79.4k|    static_cast<    \
  |  |  935|  79.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  79.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  90.0k|    {
 3003|  90.0k|        return ranges::subrange{begin(), end()};
 3004|  90.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|  86.4k|    {
 6074|  86.4k|        const bool need_skipped_width =
 6075|  86.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 86.4k]
  |  Branch (6075:33): [True: 0, False: 86.4k]
  ------------------
 6076|  86.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|  86.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 86.4k]
  ------------------
 6080|  86.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 86.4k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|  86.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 86.4k, False: 0]
  |  Branch (6084:56): [True: 81.5k, False: 4.92k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|  81.5k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 81.5k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   161k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  81.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  81.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  81.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.30k, False: 80.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.30k|    }                                                  \
  |  |  |  | 3939|  81.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   161k|                            make_eof_scan_error));
 6095|       |
 6096|   161k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 80.2k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|  80.2k|            return result_type{it, 0};
 6104|   161k|        }
 6105|       |
 6106|  4.92k|        return result_type{rng.begin(), 0};
 6107|  86.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|  78.5k|    {
 6116|  78.5k|        const bool need_skipped_width =
 6117|  78.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 78.5k]
  |  Branch (6117:33): [True: 0, False: 78.5k]
  ------------------
 6118|  78.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|  78.5k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 78.5k]
  ------------------
 6121|  78.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 78.5k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|  78.5k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 78.5k, False: 0]
  ------------------
 6130|  78.5k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 1.31k, False: 77.2k]
  ------------------
 6131|  78.5k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 1.31k]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|  1.31k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 1.31k]
  ------------------
 6133|  1.31k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|  78.5k|        return result_type{rng.begin(), 0};
 6155|  78.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  45.0k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  45.0k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  45.0k|            auto rd = make_reader<T, char_type>();
 6231|  45.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  45.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.77k, False: 43.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.77k|    }
  ------------------
 6232|  43.2k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  45.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6160|  43.2k|    {
 6161|  43.2k|        const bool need_skipped_width =
 6162|  43.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 43.2k]
  |  Branch (6162:33): [True: 0, False: 43.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  43.2k|        auto it = rng.begin();
 6166|  43.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  43.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 43.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  43.2k|        else {
 6175|  43.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  43.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 650, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    650|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    650|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    650|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    650|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    650|    }                                                  \
  |  |  |  | 3939|  43.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  42.5k|            std::tie(it, prefix_width) = prefix_result;
 6177|  42.5k|        }
 6178|  42.5k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  42.5k|        std::ptrdiff_t value_width = 0;
 6182|  42.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 42.5k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  42.5k|        else {
 6198|  42.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.89k, False: 39.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.89k|    }                                                  \
  |  | 3939|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  39.7k|                                             specs, value, loc));
 6200|       |
 6201|  39.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 39.7k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  39.7k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  39.7k|        std::ptrdiff_t postfix_width = 0;
 6210|  39.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 39.2k, False: 412]
  ------------------
 6211|  39.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  39.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  39.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  39.2k|                                 value_width));
 6215|  39.2k|            std::tie(it, postfix_width) = postfix_result;
 6216|  39.2k|        }
 6217|       |
 6218|  39.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  39.7k|            specs, prefix_width, value_width, postfix_width));
 6220|  39.7k|        return it;
 6221|  39.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|  45.0k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|  45.0k|                          basic_contiguous_scan_context<char_type>>) {
 6230|  45.0k|            auto rd = make_reader<T, char_type>();
 6231|  45.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  45.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.77k, False: 43.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.77k|    }
  ------------------
 6232|  43.2k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|  45.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|  43.2k|    {
 6161|  43.2k|        const bool need_skipped_width =
 6162|  43.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 43.2k]
  |  Branch (6162:33): [True: 0, False: 43.2k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|  43.2k|        auto it = rng.begin();
 6166|  43.2k|        std::ptrdiff_t prefix_width = 0;
 6167|  43.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 43.2k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|  43.2k|        else {
 6175|  43.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  43.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 650, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    650|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    650|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    650|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    650|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    650|    }                                                  \
  |  |  |  | 3939|  43.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|  42.5k|            std::tie(it, prefix_width) = prefix_result;
 6177|  42.5k|        }
 6178|  42.5k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|  42.5k|        std::ptrdiff_t value_width = 0;
 6182|  42.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 42.5k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|  42.5k|        else {
 6198|  42.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.89k, False: 39.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.89k|    }                                                  \
  |  | 3939|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  39.7k|                                             specs, value, loc));
 6200|       |
 6201|  39.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 39.7k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  39.7k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  39.7k|        std::ptrdiff_t postfix_width = 0;
 6210|  39.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 39.2k, False: 412]
  ------------------
 6211|  39.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  39.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  39.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  39.2k|                                 value_width));
 6215|  39.2k|            std::tie(it, postfix_width) = postfix_result;
 6216|  39.2k|        }
 6217|       |
 6218|  39.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  39.7k|            specs, prefix_width, value_width, postfix_width));
 6220|  39.7k|        return it;
 6221|  39.7k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   777k|{
 5835|   777k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.08k, False: 775k]
  |  |  ------------------
  ------------------
 5836|  2.08k|        return unexpected(e);
 5837|  2.08k|    }
 5838|       |
 5839|   775k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 775k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   775k|    return skip_classic_whitespace(range);
 5844|   775k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   388k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   388k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   388k|            auto rd = make_reader<T, char_type>();
 5916|   388k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   388k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|   388k|    {
 5903|   388k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   388k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   388k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   388k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|   388k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   387k|                        .transform_error(make_eof_scan_error));
 5905|   387k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   388k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|   387k|    {
 5303|   387k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   387k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   387k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   387k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   388k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   388k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   388k|            auto rd = make_reader<T, char_type>();
 5916|   388k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   388k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|   388k|    {
 5903|   388k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   388k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   388k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   388k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|   388k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   387k|                        .transform_error(make_eof_scan_error));
 5905|   387k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   388k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|   387k|    {
 5303|   387k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   387k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   387k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   387k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   547k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   547k|    static_cast<    \
  |  |  935|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   547k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   547k|          m_current(m_range.begin())
 2988|   547k|    {
 2989|   547k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|  1.04M|    {
 2998|  1.04M|        return m_range.end();
 2999|  1.04M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   511k|    {
 3013|   511k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   511k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   511k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 511k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   511k|        }
 3019|   511k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   511k|    static_cast<    \
  |  |  935|   511k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   511k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   532k|    {
 3003|   532k|        return ranges::subrange{begin(), end()};
 3004|   532k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|   525k|    {
 6074|   525k|        const bool need_skipped_width =
 6075|   525k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 525k]
  |  Branch (6075:33): [True: 0, False: 525k]
  ------------------
 6076|   525k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   525k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 525k]
  ------------------
 6080|   525k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 525k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   525k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 525k, False: 0]
  |  Branch (6084:56): [True: 518k, False: 7.26k]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   518k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 518k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  1.03M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   518k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   518k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   518k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   518k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.73k, False: 516k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.73k|    }                                                  \
  |  |  |  | 3939|   518k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   516k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  1.03M|                            make_eof_scan_error));
 6095|       |
 6096|  1.03M|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 516k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   516k|            return result_type{it, 0};
 6104|  1.03M|        }
 6105|       |
 6106|  7.26k|        return result_type{rng.begin(), 0};
 6107|   525k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|   510k|    {
 6116|   510k|        const bool need_skipped_width =
 6117|   510k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 510k]
  |  Branch (6117:33): [True: 0, False: 510k]
  ------------------
 6118|   510k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   510k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 510k]
  ------------------
 6121|   510k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 510k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   510k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 510k, False: 0]
  ------------------
 6130|   510k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 128, False: 510k]
  ------------------
 6131|   510k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 128]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|    128|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 128]
  ------------------
 6133|    128|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   510k|        return result_type{rng.begin(), 0};
 6155|   510k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|   266k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   266k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   266k|            auto rd = make_reader<T, char_type>();
 6231|   266k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   266k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.54k, False: 262k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.54k|    }
  ------------------
 6232|   262k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   266k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6160|   262k|    {
 6161|   262k|        const bool need_skipped_width =
 6162|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 262k]
  |  Branch (6162:33): [True: 0, False: 262k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   262k|        auto it = rng.begin();
 6166|   262k|        std::ptrdiff_t prefix_width = 0;
 6167|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 262k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   262k|        else {
 6175|   262k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 866, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    866|    }                                                  \
  |  |  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   262k|            std::tie(it, prefix_width) = prefix_result;
 6177|   262k|        }
 6178|   262k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   262k|        std::ptrdiff_t value_width = 0;
 6182|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 262k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   262k|        else {
 6198|   262k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.21k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.21k|    }                                                  \
  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   255k|                                             specs, value, loc));
 6200|       |
 6201|   255k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 255k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   255k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   255k|        std::ptrdiff_t postfix_width = 0;
 6210|   255k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 255k, False: 720]
  ------------------
 6211|   255k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   255k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   255k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   255k|                                 value_width));
 6215|   255k|            std::tie(it, postfix_width) = postfix_result;
 6216|   255k|        }
 6217|       |
 6218|   255k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   255k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   255k|            specs, prefix_width, value_width, postfix_width));
 6220|   255k|        return it;
 6221|   255k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6225|   266k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   266k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   266k|            auto rd = make_reader<T, char_type>();
 6231|   266k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   266k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.54k, False: 262k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.54k|    }
  ------------------
 6232|   262k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   266k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6160|   262k|    {
 6161|   262k|        const bool need_skipped_width =
 6162|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 262k]
  |  Branch (6162:33): [True: 0, False: 262k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   262k|        auto it = rng.begin();
 6166|   262k|        std::ptrdiff_t prefix_width = 0;
 6167|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 262k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   262k|        else {
 6175|   262k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 866, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    866|    }                                                  \
  |  |  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   262k|            std::tie(it, prefix_width) = prefix_result;
 6177|   262k|        }
 6178|   262k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   262k|        std::ptrdiff_t value_width = 0;
 6182|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 262k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   262k|        else {
 6198|   262k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.21k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.21k|    }                                                  \
  |  | 3939|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   255k|                                             specs, value, loc));
 6200|       |
 6201|   255k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 255k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   255k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   255k|        std::ptrdiff_t postfix_width = 0;
 6210|   255k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 255k, False: 720]
  ------------------
 6211|   255k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   255k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   255k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   255k|                                 value_width));
 6215|   255k|            std::tie(it, postfix_width) = postfix_result;
 6216|   255k|        }
 6217|       |
 6218|   255k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   255k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   255k|            specs, prefix_width, value_width, postfix_width));
 6220|   255k|        return it;
 6221|   255k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   388k|{
 5835|   388k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.04k, False: 387k]
  |  |  ------------------
  ------------------
 5836|  1.04k|        return unexpected(e);
 5837|  1.04k|    }
 5838|       |
 5839|   387k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 387k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   387k|    return skip_classic_whitespace(range);
 5844|   387k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|   388k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   388k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   388k|            auto rd = make_reader<T, char_type>();
 5920|   388k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 388k, False: 0]
  ------------------
 5921|   388k|                return impl(rd, range, value);
 5922|   388k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   388k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|   388k|    {
 5903|   388k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   388k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   388k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   388k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|   388k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   387k|                        .transform_error(make_eof_scan_error));
 5905|   387k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   388k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|   387k|    {
 5303|   387k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   387k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   387k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   387k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    885|{
   53|    885|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    885|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    885|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    885|    string_buffer.resize(size);
   57|    885|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    885|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    885|    const auto wsv_reinterpret_size =
   62|    885|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 141, False: 744]
  ------------------
   63|    885|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    885|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    885|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    885|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    885|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    885|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    885|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    885|{
  123|    885|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    885|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    885|    buf.resize(sizeof...(Args));
  126|    885|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    885|    return buf;
  128|    885|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    885|{
  109|    885|    if constexpr (std::is_same_v<CharT, char>) {
  110|    885|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    885|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    885|{
  186|    885|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    885|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    885|                                   format_strings);
  189|    885|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    885|{
  134|       |    // Regular scan
  135|  5.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.31k, False: 885]
  ------------------
  136|  5.31k|        auto it = scn::ranges::begin(source);
  137|  44.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  44.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  44.6k|            auto result = scn::scan<T>(
  140|  44.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  44.6k|                scn::runtime_format(f));
  142|  44.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.31k, False: 39.3k]
  ------------------
  143|  5.31k|                break;
  144|  5.31k|            }
  145|  39.3k|            it = result->begin();
  146|  39.3k|        }
  147|  5.31k|    }
  148|       |
  149|       |    // scan localized
  150|  5.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.31k, False: 885]
  ------------------
  151|  5.31k|        auto it = scn::ranges::begin(source);
  152|  44.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  44.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  44.6k|            auto result = scn::scan<T>(
  155|  44.6k|                global_locale,
  156|  44.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  44.6k|                scn::runtime_format(f));
  158|  44.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.31k, False: 39.3k]
  ------------------
  159|  5.31k|                break;
  160|  5.31k|            }
  161|  39.3k|            it = result->begin();
  162|  39.3k|        }
  163|  5.31k|    }
  164|       |
  165|       |    // scan_value
  166|    885|    {
  167|    885|        auto it = scn::ranges::begin(source);
  168|  20.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  20.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.3k|            auto result = scn::scan_value<T>(
  171|  20.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 885, False: 19.5k]
  ------------------
  173|    885|                break;
  174|    885|            }
  175|  19.5k|            it = result->begin();
  176|  19.5k|        }
  177|    885|    }
  178|    885|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    885|{
  134|       |    // Regular scan
  135|  5.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.31k, False: 885]
  ------------------
  136|  5.31k|        auto it = scn::ranges::begin(source);
  137|  44.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  44.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  44.6k|            auto result = scn::scan<T>(
  140|  44.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  44.6k|                scn::runtime_format(f));
  142|  44.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.31k, False: 39.3k]
  ------------------
  143|  5.31k|                break;
  144|  5.31k|            }
  145|  39.3k|            it = result->begin();
  146|  39.3k|        }
  147|  5.31k|    }
  148|       |
  149|       |    // scan localized
  150|  5.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.31k, False: 885]
  ------------------
  151|  5.31k|        auto it = scn::ranges::begin(source);
  152|  44.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  44.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  44.6k|            auto result = scn::scan<T>(
  155|  44.6k|                global_locale,
  156|  44.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  44.6k|                scn::runtime_format(f));
  158|  44.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.31k, False: 39.3k]
  ------------------
  159|  5.31k|                break;
  160|  5.31k|            }
  161|  39.3k|            it = result->begin();
  162|  39.3k|        }
  163|  5.31k|    }
  164|       |
  165|       |    // scan_value
  166|    885|    {
  167|    885|        auto it = scn::ranges::begin(source);
  168|  20.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  20.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.3k|            auto result = scn::scan_value<T>(
  171|  20.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 885, False: 19.5k]
  ------------------
  173|    885|                break;
  174|    885|            }
  175|  19.5k|            it = result->begin();
  176|  19.5k|        }
  177|    885|    }
  178|    885|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    885|{
  134|       |    // Regular scan
  135|  5.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.31k, False: 885]
  ------------------
  136|  5.31k|        auto it = scn::ranges::begin(source);
  137|  53.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  53.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  53.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  53.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  53.4k|            auto result = scn::scan<T>(
  140|  53.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  53.4k|                scn::runtime_format(f));
  142|  53.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.31k, False: 48.1k]
  ------------------
  143|  5.31k|                break;
  144|  5.31k|            }
  145|  48.1k|            it = result->begin();
  146|  48.1k|        }
  147|  5.31k|    }
  148|       |
  149|       |    // scan localized
  150|  5.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.31k, False: 885]
  ------------------
  151|  5.31k|        auto it = scn::ranges::begin(source);
  152|  53.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  53.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  53.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  53.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  53.4k|            auto result = scn::scan<T>(
  155|  53.4k|                global_locale,
  156|  53.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  53.4k|                scn::runtime_format(f));
  158|  53.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.31k, False: 48.1k]
  ------------------
  159|  5.31k|                break;
  160|  5.31k|            }
  161|  48.1k|            it = result->begin();
  162|  48.1k|        }
  163|  5.31k|    }
  164|       |
  165|       |    // scan_value
  166|    885|    {
  167|    885|        auto it = scn::ranges::begin(source);
  168|  24.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  24.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  24.7k|            auto result = scn::scan_value<T>(
  171|  24.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  24.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 885, False: 23.8k]
  ------------------
  173|    885|                break;
  174|    885|            }
  175|  23.8k|            it = result->begin();
  176|  23.8k|        }
  177|    885|    }
  178|    885|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    885|{
   91|    885|    using char_type = ranges::range_value_t<Source>;
   92|    885|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    885|    deque.clear();
   94|    885|    std::copy(ranges::begin(source), ranges::end(source),
   95|    885|              std::back_inserter(deque));
   96|    885|    return deque;
   97|    885|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    885|{
   80|    885|    if constexpr (std::is_same_v<CharT, char>) {
   81|    885|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    885|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    885|{
  123|    885|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    885|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    885|    buf.resize(sizeof...(Args));
  126|    885|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    885|    return buf;
  128|    885|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    885|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    885|    else {
  113|    885|        return wformat_string_view_buffer;
  114|    885|    }
  115|    885|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.77k|{
  186|  1.77k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.77k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.77k|                                   format_strings);
  189|  1.77k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.77k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.77k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|   266k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   266k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   266k|            auto result = scn::scan<T>(
  140|   266k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   266k|                scn::runtime_format(f));
  142|   266k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 255k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|   255k|            it = result->begin();
  146|   255k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.77k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|   266k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   266k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   266k|            auto result = scn::scan<T>(
  155|   266k|                global_locale,
  156|   266k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   266k|                scn::runtime_format(f));
  158|   266k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 255k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|   255k|            it = result->begin();
  162|   255k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.77k|    {
  167|  1.77k|        auto it = scn::ranges::begin(source);
  168|   129k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   129k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   129k|            auto result = scn::scan_value<T>(
  171|   129k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   129k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.77k, False: 127k]
  ------------------
  173|  1.77k|                break;
  174|  1.77k|            }
  175|   127k|            it = result->begin();
  176|   127k|        }
  177|  1.77k|    }
  178|  1.77k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.77k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.77k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|   266k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   266k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   266k|            auto result = scn::scan<T>(
  140|   266k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   266k|                scn::runtime_format(f));
  142|   266k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 255k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|   255k|            it = result->begin();
  146|   255k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.77k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|   266k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   266k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   266k|            auto result = scn::scan<T>(
  155|   266k|                global_locale,
  156|   266k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   266k|                scn::runtime_format(f));
  158|   266k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 255k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|   255k|            it = result->begin();
  162|   255k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.77k|    {
  167|  1.77k|        auto it = scn::ranges::begin(source);
  168|   129k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   129k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   129k|            auto result = scn::scan_value<T>(
  171|   129k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   129k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.77k, False: 127k]
  ------------------
  173|  1.77k|                break;
  174|  1.77k|            }
  175|   127k|            it = result->begin();
  176|   127k|        }
  177|  1.77k|    }
  178|  1.77k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.77k|{
  134|       |    // Regular scan
  135|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.6k, False: 1.77k]
  ------------------
  136|  10.6k|        auto it = scn::ranges::begin(source);
  137|   266k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   266k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   266k|            auto result = scn::scan<T>(
  140|   266k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   266k|                scn::runtime_format(f));
  142|   266k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.6k, False: 255k]
  ------------------
  143|  10.6k|                break;
  144|  10.6k|            }
  145|   255k|            it = result->begin();
  146|   255k|        }
  147|  10.6k|    }
  148|       |
  149|       |    // scan localized
  150|  10.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.6k, False: 1.77k]
  ------------------
  151|  10.6k|        auto it = scn::ranges::begin(source);
  152|   266k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   266k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   266k|            auto result = scn::scan<T>(
  155|   266k|                global_locale,
  156|   266k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   266k|                scn::runtime_format(f));
  158|   266k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.6k, False: 255k]
  ------------------
  159|  10.6k|                break;
  160|  10.6k|            }
  161|   255k|            it = result->begin();
  162|   255k|        }
  163|  10.6k|    }
  164|       |
  165|       |    // scan_value
  166|  1.77k|    {
  167|  1.77k|        auto it = scn::ranges::begin(source);
  168|   129k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   129k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   129k|            auto result = scn::scan_value<T>(
  171|   129k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   129k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.77k, False: 127k]
  ------------------
  173|  1.77k|                break;
  174|  1.77k|            }
  175|   127k|            it = result->begin();
  176|   127k|        }
  177|  1.77k|    }
  178|  1.77k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.77k|{
   91|  1.77k|    using char_type = ranges::range_value_t<Source>;
   92|  1.77k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.77k|    deque.clear();
   94|  1.77k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.77k|              std::back_inserter(deque));
   96|  1.77k|    return deque;
   97|  1.77k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.77k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.77k|    else {
   84|  1.77k|        return wnoncontiguous_buffer;
   85|  1.77k|    }
   86|  1.77k|}

LLVMFuzzerTestOneInput:
   57|    886|{
   58|    886|    scn::fuzz::run(data, size);
   59|    886|    return 0;
   60|    886|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    886|{
   36|    886|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 885]
  |  Branch (36:35): [True: 0, False: 885]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    885|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    885|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    885|                                             "{:64U}", "{:[A-Za-z]}");
   44|    885|    do_basic_run(sv, f);
   45|       |
   46|    885|    const auto& wf = get_format_strings<wchar_t>(
   47|    885|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    885|    do_basic_run(wsv_reinterpret, wf);
   49|    885|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 885, False: 0]
  ------------------
   50|    885|        do_basic_run(wsv_transcode, wf);
   51|    885|    }
   52|    885|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    885|{
   25|    885|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    885|                                                           format_strings);
   27|    885|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    885|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    885|            source, format_strings);
   30|    885|    }
   31|    885|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    885|{
   25|    885|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    885|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    885|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.77k|{
   25|  1.77k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.77k|                                                           format_strings);
   27|  1.77k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.77k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.77k|            source, format_strings);
   30|  1.77k|    }
   31|  1.77k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.77k|{
   25|  1.77k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.77k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.77k|}

