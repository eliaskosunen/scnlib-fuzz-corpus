_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  3.93M|{
 4086|  3.93M|    if constexpr (sizeof(U) == 1) {
 4087|  3.93M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  3.93M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  3.93M|{
 4050|  3.93M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  3.93M|    SCN_GCC_COMPAT_PUSH
 4053|  3.93M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  3.93M|    constexpr char lengths[] =
 4055|  3.93M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  3.93M|        "\1\1\1\1\1\1\1\1"
 4057|  3.93M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  3.93M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  3.93M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  3.93M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  3.93M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  3.93M|    SCN_GCC_COMPAT_POP
 4064|  3.93M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  3.76M|{
 4292|  3.76M|    if constexpr (sizeof(CharT) == 1) {
 4293|  3.76M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  3.76M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  3.76M|{
 4105|  3.76M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  3.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  3.76M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  3.76M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  3.76M|    };
 4110|       |
 4111|  3.76M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 3.33M, False: 428k]
  ------------------
 4112|  3.33M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 299, False: 3.33M]
  ------------------
 4113|    299|            SCN_UNLIKELY_ATTR
 4114|    299|            return invalid_code_point;
 4115|    299|        }
 4116|  3.33M|        return static_cast<char32_t>(input[0]);
 4117|  3.33M|    }
 4118|       |
 4119|   428k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 121k, False: 306k]
  ------------------
 4120|   121k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 187, False: 121k]
  ------------------
 4121|    187|            SCN_UNLIKELY_ATTR
 4122|    187|            return invalid_code_point;
 4123|    187|        }
 4124|   121k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 14.0k, False: 107k]
  ------------------
 4125|  14.0k|            SCN_UNLIKELY_ATTR
 4126|  14.0k|            return invalid_code_point;
 4127|  14.0k|        }
 4128|       |
 4129|   107k|        char32_t cp{};
 4130|   107k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|   107k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|   107k|        return cp;
 4133|   121k|    }
 4134|       |
 4135|   306k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 295k, False: 11.0k]
  ------------------
 4136|   295k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 40, False: 295k]
  ------------------
 4137|     40|            SCN_UNLIKELY_ATTR
 4138|     40|            return invalid_code_point;
 4139|     40|        }
 4140|   295k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 2.37k, False: 293k]
  ------------------
 4141|   295k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 1.12k, False: 292k]
  ------------------
 4142|  3.50k|            SCN_UNLIKELY_ATTR
 4143|  3.50k|            return invalid_code_point;
 4144|  3.50k|        }
 4145|       |
 4146|   292k|        char32_t cp{};
 4147|   292k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|   292k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|   292k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|   292k|        return cp;
 4151|   295k|    }
 4152|       |
 4153|  11.0k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 11.0k, False: 0]
  ------------------
 4154|  11.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 11.0k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  11.0k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 3.68k, False: 7.32k]
  ------------------
 4159|  3.68k|            SCN_UNLIKELY_ATTR
 4160|  3.68k|            return invalid_code_point;
 4161|  3.68k|        }
 4162|  7.32k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 3.13k, False: 4.19k]
  ------------------
 4163|  7.32k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 187, False: 4.00k]
  ------------------
 4164|  7.32k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 160, False: 3.84k]
  ------------------
 4165|  3.48k|            SCN_UNLIKELY_ATTR
 4166|  3.48k|            return invalid_code_point;
 4167|  3.48k|        }
 4168|       |
 4169|  3.84k|        char32_t cp{};
 4170|  3.84k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|  3.84k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|  3.84k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|  3.84k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|  3.84k|        return cp;
 4175|  7.32k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|   726k|    const auto is_trailing_code_unit = [](char ch) {
 4108|   726k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|   726k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  3.35M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  3.35M|    else {
 3984|  3.35M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  3.35M|                                       to_address(first), to_address(last)))};
 3986|  3.35M|    }
 3987|  3.35M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  10.4M|{
  331|  10.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  10.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  10.4M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  11.6M|{
  309|  11.6M|    return p;
  310|  11.6M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  1.65M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  1.65M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  1.65M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  1.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  1.65M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  1.65M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  24.1k|    {
 2883|  24.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  24.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  24.1k|    {
 2864|  24.1k|        return decay_copy(t.begin());
 2865|  24.1k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  2.03M|{
 2108|  2.03M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.03M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   432k|    {
 2940|   432k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   432k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   432k|    {
 2922|   432k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   432k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  43.9k|{
 9893|  43.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  43.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  43.9k|                                   make_scan_args(result->values())));
 9896|  43.9k|    return result;
 9897|  43.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9848|   107k|{
 9849|   107k|    return scan_result_type<Source, Args...>();
 9850|   107k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   107k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   107k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   107k|    {
  628|   107k|        construct();
  629|   107k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   107k|    {
  709|   107k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   107k|        m_has_value = true;
  711|   107k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  410|   107k|{
  411|   107k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   107k|        T(std::forward<Args>(args)...);
  413|   107k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6692|   107k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   215k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   215k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6466|   238k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   516k|    {
  733|   516k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   516k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   516k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|   107k|{
 9834|   107k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.6k, False: 96.3k]
  |  |  ------------------
  ------------------
 9835|  11.6k|        out = unexpected(in.error());
 9836|  11.6k|    }
 9837|  96.3k|    else {
 9838|  96.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  96.3k|    static_cast<    \
  |  | 1109|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  96.3k|    }
 9840|   107k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   215k|    {
 1754|   215k|        return has_value();
 1755|   215k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   431k|    {
  505|   431k|        return m_has_value;
  506|   431k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  23.2k|    {
 1760|  23.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  23.2k|        return this->get_unexpected().error();
 1762|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  23.2k|    {
  488|  23.2k|        return m_unexpected;
  489|  23.2k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  1.00M|    {
  380|  1.00M|        return m_unexpected;
  381|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|   438k|        : m_unexpected(std::forward<Err>(e))
  365|   438k|    {
  366|   438k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   438k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   438k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  11.6k|        : base(unexpect, std::move(e.error())),
 1630|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.6k|    {
 1632|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  11.6k|        : m_has_value(false)
  652|  11.6k|    {
  653|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  11.6k|    {
  716|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.6k|                                  std::forward<Args>(args)...);
  718|  11.6k|        m_has_value = false;
  719|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|  69.7k|{
  411|  69.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  69.7k|        T(std::forward<Args>(args)...);
  413|  69.7k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|   574k|        : m_unexpected(std::forward<Args>(args)...)
  374|   574k|    {
  375|   574k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   574k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   574k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  58.1k|    {
  745|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  746|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.6k|    {
 1330|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  11.6k|    {
  917|  11.6k|        assign_common(std::move(other));
  918|  11.6k|        return *this;
  919|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  11.6k|    {
  964|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 11.6k, False: 0]
  ------------------
  965|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 11.6k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  11.6k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   551k|    {
  702|   551k|        return m_has_value;
  703|   551k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|   300k|    {
  668|   300k|        return *value_ptr();
  669|   300k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  11.6k|    {
 1060|  11.6k|        this->destroy_value();
 1061|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   107k|    {
  723|   107k|        scn::detail::destroy_at(value_ptr());
  724|   107k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  416|   107k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   107k|    else {
  423|   107k|        p->~T();
  424|   107k|    }
  425|   107k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6699|   107k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  11.6k|    {
  716|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.6k|                                  std::forward<Args>(args)...);
  718|  11.6k|        m_has_value = false;
  719|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   104k|{
  411|   104k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   104k|        T(std::forward<Args>(args)...);
  413|   104k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  11.6k|    {
  693|  11.6k|        return std::move(*unexpected_ptr());
  694|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  23.2k|    {
  727|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  728|  23.2k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|   139k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   139k|    else {
  423|   139k|        p->~T();
  424|   139k|    }
  425|   139k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   192k|    {
 6567|   192k|        m_range = std::forward<Other>(r);
 6568|   192k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   192k|    {
 1809|   192k|        return value();
 1810|   192k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   192k|    {
 1783|   192k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   192k|        return this->get_value();
 1785|   192k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   192k|    {
  471|   192k|        return m_value;
  472|   192k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|  87.9k|{
 9655|  87.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  87.9k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  87.9k|{
 9592|  87.9k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  87.9k|    auto result = vscan_impl(buffer, format, args);
 9595|  87.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 77.1k]
  |  |  ------------------
  ------------------
 9596|  10.7k|        return unexpected(result.error());
 9597|  10.7k|    }
 9598|  77.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  87.9k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   215k|{
 5399|   215k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   215k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   215k|                  "\n"
 5403|   215k|                  "Unsupported range type given as input to a scanning "
 5404|   215k|                  "function.\n"
 5405|   215k|                  "A range needs to have a character type (value type) "
 5406|   215k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   215k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   215k|                  "to be included.\n"
 5409|   215k|                  "See the scnlib documentation for more details.");
 5410|   215k|    static_assert(
 5411|   215k|        !std::is_same_v<T, custom_char_traits>,
 5412|   215k|        "\n"
 5413|   215k|        "Unsupported range type given as input to a scanning "
 5414|   215k|        "function.\n"
 5415|   215k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   215k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   215k|        "not supported.");
 5418|   215k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   215k|                  "\n"
 5420|   215k|                  "Unsupported range type given as input to a scanning "
 5421|   215k|                  "function.\n"
 5422|   215k|                  "file_marker_found cannot be used as an "
 5423|   215k|                  "source range type to scn::scan.\n"
 5424|   215k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   215k|                  "and do not provide an explicit source range, "
 5426|   215k|                  "or use scn::scan with a FILE* directly.");
 5427|   215k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   215k|                  "\n"
 5429|   215k|                  "Unsupported range type given as input to a scanning "
 5430|   215k|                  "function.\n"
 5431|   215k|                  "In order to be scannable, a range needs to satisfy "
 5432|   215k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   215k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   215k|                  "\n"
 5435|   215k|                  "Unsupported range type given as input to a scanning "
 5436|   215k|                  "function.\n"
 5437|   215k|                  "A range needs to model forward_range and have a valid "
 5438|   215k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   215k|                  "Examples of scannable ranges are std::string, "
 5440|   215k|                  "std::string_view, "
 5441|   215k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   215k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   215k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   215k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   215k|{
 5338|   215k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   215k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   215k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   215k|    {
 3014|   215k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   215k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   215k|    {
 2995|   215k|        return t.data();
 2996|   215k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   215k|    {
 3397|   215k|        return detail::to_address(ranges::begin(derived()));
 3398|   215k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  1.24M|{
  331|  1.24M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  1.24M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   408k|    {
 2883|   408k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   408k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   408k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   408k|    {
 2864|   408k|        return decay_copy(t.begin());
 2865|   408k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  2.57M|    {
 3494|  2.57M|        return m_iterator;
 3495|  2.57M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   215k|    {
 3353|   215k|        return static_cast<const D&>(*this);
 3354|   215k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   215k|    {
 3089|   215k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   215k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   215k|    {
 3055|   215k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   215k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  2.43M|{
 2108|  2.43M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.43M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   906k|    {
 3510|   906k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   906k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  3.47M|    {
 1754|  3.47M|        return has_value();
 1755|  3.47M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  6.92M|    {
  505|  6.92M|        return m_has_value;
  506|  6.92M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   104k|    {
 1760|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   104k|        return this->get_unexpected().error();
 1762|   104k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   104k|    {
  488|   104k|        return m_unexpected;
  489|   104k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  23.2k|        : base(unexpect, std::move(e.error())),
 1630|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  23.2k|    {
 1632|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  23.2k|          m_has_value(false)
  466|  23.2k|    {
  467|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   215k|    {
 1330|   215k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   192k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   192k|                      ranges::iterator_t<SourceRange>>) {
 6799|   192k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   192k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   978k|    {
 2883|   978k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   978k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   978k|    {
 2864|   978k|        return decay_copy(t.begin());
 2865|   978k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   192k|{
 6784|   192k|    return ranges::end(source);
 6785|   192k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   192k|    {
 2940|   192k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   192k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   192k|    {
 2922|   192k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   192k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  1.23M|    {
 3498|  1.23M|        return m_sentinel;
 3499|  1.23M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  3.33M|    {
 1809|  3.33M|        return value();
 1810|  3.33M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  3.33M|    {
 1783|  3.33M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.33M|        return this->get_value();
 1785|  3.33M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  3.33M|    {
  471|  3.33M|        return m_value;
  472|  3.33M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   192k|        : base(std::in_place, std::forward<U>(val)),
 1584|   192k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   192k|    {
 1586|   192k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   192k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   192k|    {
  457|   192k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8854|  87.9k|    {
 8855|  87.9k|        return m_str;
 8856|  87.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|   193k|{
 6196|   193k|    detail::check_scan_arg_types<Args...>();
 6197|   193k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   193k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5910|   238k|{
 5911|   238k|    constexpr bool default_constructible_constraint =
 5912|   238k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   238k|    static_assert(default_constructible_constraint,
 5914|   238k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   238k|    constexpr bool destructible_constraint =
 5917|   238k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   238k|    static_assert(destructible_constraint,
 5919|   238k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   238k|    constexpr bool non_reference_constraint =
 5922|   238k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   238k|    static_assert(non_reference_constraint,
 5924|   238k|                  "Scan argument types must not be references");
 5925|       |
 5926|   238k|    constexpr bool movable_constraint =
 5927|   238k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   238k|    static_assert(movable_constraint,
 5929|   238k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   238k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   238k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   238k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|   193k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   193k|    {
 6173|   193k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|   193k|    {
 6181|   193k|        return {detail::make_arg<
 6182|   193k|            kind, Context,
 6183|   193k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   193k|                                 typename Context::char_type>::value>(args)...};
 6185|   193k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5960|   193k|{
 5961|   193k|    return make_value<Context>(value).ref_value;
 5962|   193k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5895|   238k|{
 5896|   238k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   238k|                                  needs_context_tag>) {
 5900|   238k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   238k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5702|   238k|    {                                                                        \
 5703|   238k|        return val;                                                          \
 5704|   238k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5864|   238k|{
 5865|   238k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   238k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   238k|    constexpr bool scannable_char =
 5869|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   238k|    static_assert(scannable_char,
 5871|   238k|                  "Cannot scan an argument of an unsupported character "
 5872|   238k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   238k|    constexpr bool scannable_const =
 5875|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   238k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   238k|    constexpr bool scannable_disabled =
 5879|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   238k|    static_assert(scannable_disabled,
 5881|   238k|                  "Cannot scan an argument that has been disabled by "
 5882|   238k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   238k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   238k|    static_assert(
 5886|   238k|        scannable,
 5887|   238k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   238k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   238k|    return arg_value{arg};
 5891|   238k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5645|   238k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   238k|    {
 5647|   238k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6475|   193k|    {
 6476|   193k|        return m_values;
 6477|   193k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   193k|        : basic_scan_args(store.desc, store.args.data())
 6222|   193k|    {
 6223|   193k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|   281k|        : m_desc(desc), m_builtin_values(data)
 6274|   281k|    {
 6275|   281k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  1.48M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.48M|    static_cast<    \
  |  | 1109|  1.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.48M|    static_cast<    \
  |  | 1109|  1.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.48M|    {
 3480|  1.48M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|   281k|{
 8532|   281k|    return s;
 8533|   281k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|   281k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  87.9k|        : m_str(r.str)
 8850|  87.9k|    {
 8851|  87.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   107k|    {
 1754|   107k|        return has_value();
 1755|   107k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|   300k|    {
 1829|   300k|        return &value();
 1830|   300k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|   300k|    {
 1783|   300k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   300k|        return this->get_value();
 1785|   300k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   192k|    {
 6556|   192k|        return ranges::begin(m_range);
 6557|   192k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   119k|    {
  658|   119k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 96.3k, False: 23.2k]
  ------------------
  659|  96.3k|            destroy_value();
  660|  96.3k|        }
  661|  23.2k|        else {
  662|  23.2k|            destroy_unexpected();
  663|  23.2k|        }
  664|   119k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  43.9k|{
 9962|  43.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  43.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  43.9k|                                   make_scan_args(result->values())));
 9965|  43.9k|    return result;
 9966|  43.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|  87.9k|{
 9673|  87.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  87.9k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  87.9k|{
 9608|  87.9k|#if !SCN_DISABLE_LOCALE
 9609|  87.9k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  87.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  87.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  87.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  87.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 77.1k]
  |  |  ------------------
  ------------------
 9616|  10.7k|        return unexpected(result.error());
 9617|  10.7k|    }
 9618|  77.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  87.9k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|  20.0k|{
10003|  20.0k|    auto result = make_scan_result<Source, T>();
10004|  20.0k|    fill_scan_result(
10005|  20.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  20.0k|                            detail::make_arg<scan_context>(result->value())));
10007|  20.0k|    return result;
10008|  20.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  40.0k|{
 9686|  40.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  40.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  40.0k|{
 9632|  40.0k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  40.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  40.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 38.2k]
  |  |  ------------------
  ------------------
 9636|  1.78k|        return unexpected(result.error());
 9637|  1.78k|    }
 9638|  38.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  40.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|  44.5k|{
 5946|  44.5k|    check_scan_arg_types<T>();
 5947|       |
 5948|  44.5k|    basic_scan_arg<Context> arg;
 5949|  44.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  44.5k|    arg.m_value = make_value<Context>(value);
 5951|  44.5k|    return arg;
 5952|  44.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|   346k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  2.59M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  44.5k|    {
 6498|  44.5k|        return std::get<0>(m_values);
 6499|  44.5k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9892|  43.9k|{
 9893|  43.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  43.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  43.9k|                                   make_scan_args(result->values())));
 9896|  43.9k|    return result;
 9897|  43.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9848|   107k|{
 9849|   107k|    return scan_result_type<Source, Args...>();
 9850|   107k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   107k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|   107k|        : m_value(T{}), m_has_value(true)
  442|   107k|    {
  443|   107k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6692|   107k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6466|   107k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|   107k|{
 9834|   107k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.6k, False: 96.3k]
  |  |  ------------------
  ------------------
 9835|  11.6k|        out = unexpected(in.error());
 9836|  11.6k|    }
 9837|  96.3k|    else {
 9838|  96.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  96.3k|    static_cast<    \
  |  | 1109|  96.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  96.3k|    }
 9840|   107k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  11.6k|        : base(unexpect, std::move(e.error())),
 1630|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.6k|    {
 1632|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.6k|          m_has_value(false)
  466|  11.6k|    {
  467|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.6k|    {
 1330|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  11.6k|    {
  917|  11.6k|        assign_common(std::move(other));
  918|  11.6k|        return *this;
  919|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  11.6k|    {
  964|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 11.6k, False: 0]
  ------------------
  965|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 11.6k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  11.6k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   431k|    {
  505|   431k|        return m_has_value;
  506|   431k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   300k|    {
  471|   300k|        return m_value;
  472|   300k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  11.6k|    {
 1060|  11.6k|        this->destroy_value();
 1061|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  11.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  11.6k|    {
  519|  11.6k|        scn::detail::construct_at(&get_unexpected(),
  520|  11.6k|                                  std::forward<Args>(args)...);
  521|  11.6k|        m_has_value = false;
  522|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  11.6k|    {
  488|  11.6k|        return m_unexpected;
  489|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  11.6k|    {
  496|  11.6k|        return std::move(m_unexpected);
  497|  11.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8854|  87.9k|    {
 8855|  87.9k|        return m_str;
 8856|  87.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  87.9k|{
 6196|  87.9k|    detail::check_scan_arg_types<Args...>();
 6197|  87.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  87.9k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5910|   107k|{
 5911|   107k|    constexpr bool default_constructible_constraint =
 5912|   107k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   107k|    static_assert(default_constructible_constraint,
 5914|   107k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   107k|    constexpr bool destructible_constraint =
 5917|   107k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   107k|    static_assert(destructible_constraint,
 5919|   107k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   107k|    constexpr bool non_reference_constraint =
 5922|   107k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   107k|    static_assert(non_reference_constraint,
 5924|   107k|                  "Scan argument types must not be references");
 5925|       |
 5926|   107k|    constexpr bool movable_constraint =
 5927|   107k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   107k|    static_assert(movable_constraint,
 5929|   107k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   107k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   107k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   107k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|  87.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  87.9k|    {
 6173|  87.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  87.9k|    {
 6181|  87.9k|        return {detail::make_arg<
 6182|  87.9k|            kind, Context,
 6183|  87.9k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  87.9k|                                 typename Context::char_type>::value>(args)...};
 6185|  87.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5960|  87.9k|{
 5961|  87.9k|    return make_value<Context>(value).ref_value;
 5962|  87.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5895|   107k|{
 5896|   107k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   107k|                                  needs_context_tag>) {
 5900|   107k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   107k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5702|   107k|    {                                                                        \
 5703|   107k|        return val;                                                          \
 5704|   107k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5864|   107k|{
 5865|   107k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   107k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   107k|    constexpr bool scannable_char =
 5869|   107k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   107k|    static_assert(scannable_char,
 5871|   107k|                  "Cannot scan an argument of an unsupported character "
 5872|   107k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   107k|    constexpr bool scannable_const =
 5875|   107k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   107k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   107k|    constexpr bool scannable_disabled =
 5879|   107k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   107k|    static_assert(scannable_disabled,
 5881|   107k|                  "Cannot scan an argument that has been disabled by "
 5882|   107k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   107k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   107k|    static_assert(
 5886|   107k|        scannable,
 5887|   107k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   107k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   107k|    return arg_value{arg};
 5891|   107k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5645|   107k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   107k|    {
 5647|   107k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6475|  87.9k|    {
 6476|  87.9k|        return m_values;
 6477|  87.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  87.9k|        : basic_scan_args(store.desc, store.args.data())
 6222|  87.9k|    {
 6223|  87.9k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  87.9k|        : m_str(r.str)
 8850|  87.9k|    {
 8851|  87.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   107k|    {
 1754|   107k|        return has_value();
 1755|   107k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1828|   300k|    {
 1829|   300k|        return &value();
 1830|   300k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|   300k|    {
 1783|   300k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   300k|        return this->get_value();
 1785|   300k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9961|  43.9k|{
 9962|  43.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  43.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  43.9k|                                   make_scan_args(result->values())));
 9965|  43.9k|    return result;
 9966|  43.9k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
10002|  20.0k|{
10003|  20.0k|    auto result = make_scan_result<Source, T>();
10004|  20.0k|    fill_scan_result(
10005|  20.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  20.0k|                            detail::make_arg<scan_context>(result->value())));
10007|  20.0k|    return result;
10008|  20.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|  20.0k|{
 5946|  20.0k|    check_scan_arg_types<T>();
 5947|       |
 5948|  20.0k|    basic_scan_arg<Context> arg;
 5949|  20.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  20.0k|    arg.m_value = make_value<Context>(value);
 5951|  20.0k|    return arg;
 5952|  20.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  20.0k|    {
 6498|  20.0k|        return std::get<0>(m_values);
 6499|  20.0k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  11.6k|    {
 2883|  11.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  11.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  11.6k|    {
 2864|  11.6k|        return decay_copy(t.begin());
 2865|  11.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  5.18M|{
 2108|  5.18M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  5.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  5.18M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   260k|    {
 2940|   260k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   260k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   260k|    {
 2922|   260k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   260k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9892|  52.9k|{
 9893|  52.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  52.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  52.9k|                                   make_scan_args(result->values())));
 9896|  52.9k|    return result;
 9897|  52.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9848|   130k|{
 9849|   130k|    return scan_result_type<Source, Args...>();
 9850|   130k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   130k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   130k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   130k|    {
  628|   130k|        construct();
  629|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   130k|    {
  709|   130k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   130k|        m_has_value = true;
  711|   130k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  410|   130k|{
  411|   130k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   130k|        T(std::forward<Args>(args)...);
  413|   130k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6692|   130k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   130k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   130k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   628k|    {
  733|   628k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   628k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   628k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9833|   130k|{
 9834|   130k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.6k, False: 118k]
  |  |  ------------------
  ------------------
 9835|  11.6k|        out = unexpected(in.error());
 9836|  11.6k|    }
 9837|   118k|    else {
 9838|   118k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   118k|    static_cast<    \
  |  | 1109|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   118k|    }
 9840|   130k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   130k|    {
 1754|   130k|        return has_value();
 1755|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   260k|    {
  505|   260k|        return m_has_value;
  506|   260k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  11.6k|    {
 1760|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  11.6k|        return this->get_unexpected().error();
 1762|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  11.6k|    {
  488|  11.6k|        return m_unexpected;
  489|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1629|  11.6k|        : base(unexpect, std::move(e.error())),
 1630|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.6k|    {
 1632|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  651|  11.6k|        : m_has_value(false)
  652|  11.6k|    {
  653|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  715|  11.6k|    {
  716|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.6k|                                  std::forward<Args>(args)...);
  718|  11.6k|        m_has_value = false;
  719|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  58.1k|    {
  745|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  746|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.6k|    {
 1330|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1570|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  916|  11.6k|    {
  917|  11.6k|        assign_common(std::move(other));
  918|  11.6k|        return *this;
  919|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  963|  11.6k|    {
  964|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 11.6k, False: 0]
  ------------------
  965|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 11.6k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  11.6k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   663k|    {
  702|   663k|        return m_has_value;
  703|   663k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|   367k|    {
  668|   367k|        return *value_ptr();
  669|   367k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1059|  11.6k|    {
 1060|  11.6k|        this->destroy_value();
 1061|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   130k|    {
  723|   130k|        scn::detail::destroy_at(value_ptr());
  724|   130k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  416|   130k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   130k|    else {
  423|   130k|        p->~T();
  424|   130k|    }
  425|   130k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6699|   130k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  715|  11.6k|    {
  716|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.6k|                                  std::forward<Args>(args)...);
  718|  11.6k|        m_has_value = false;
  719|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  11.6k|    {
  693|  11.6k|        return std::move(*unexpected_ptr());
  694|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  23.2k|    {
  727|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  728|  23.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   118k|    {
 6567|   118k|        m_range = std::forward<Other>(r);
 6568|   118k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   118k|    {
 1809|   118k|        return value();
 1810|   118k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   118k|    {
 1783|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   118k|        return this->get_value();
 1785|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   118k|    {
  471|   118k|        return m_value;
  472|   118k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|  52.9k|{
 9655|  52.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  52.9k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  52.9k|{
 9592|  52.9k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  52.9k|    auto result = vscan_impl(buffer, format, args);
 9595|  52.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.36k, False: 47.5k]
  |  |  ------------------
  ------------------
 9596|  5.36k|        return unexpected(result.error());
 9597|  5.36k|    }
 9598|  47.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  52.9k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   130k|{
 5399|   130k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   130k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   130k|                  "\n"
 5403|   130k|                  "Unsupported range type given as input to a scanning "
 5404|   130k|                  "function.\n"
 5405|   130k|                  "A range needs to have a character type (value type) "
 5406|   130k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   130k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   130k|                  "to be included.\n"
 5409|   130k|                  "See the scnlib documentation for more details.");
 5410|   130k|    static_assert(
 5411|   130k|        !std::is_same_v<T, custom_char_traits>,
 5412|   130k|        "\n"
 5413|   130k|        "Unsupported range type given as input to a scanning "
 5414|   130k|        "function.\n"
 5415|   130k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   130k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   130k|        "not supported.");
 5418|   130k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   130k|                  "\n"
 5420|   130k|                  "Unsupported range type given as input to a scanning "
 5421|   130k|                  "function.\n"
 5422|   130k|                  "file_marker_found cannot be used as an "
 5423|   130k|                  "source range type to scn::scan.\n"
 5424|   130k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   130k|                  "and do not provide an explicit source range, "
 5426|   130k|                  "or use scn::scan with a FILE* directly.");
 5427|   130k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   130k|                  "\n"
 5429|   130k|                  "Unsupported range type given as input to a scanning "
 5430|   130k|                  "function.\n"
 5431|   130k|                  "In order to be scannable, a range needs to satisfy "
 5432|   130k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   130k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   130k|                  "\n"
 5435|   130k|                  "Unsupported range type given as input to a scanning "
 5436|   130k|                  "function.\n"
 5437|   130k|                  "A range needs to model forward_range and have a valid "
 5438|   130k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   130k|                  "Examples of scannable ranges are std::string, "
 5440|   130k|                  "std::string_view, "
 5441|   130k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   130k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   130k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   130k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   130k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   130k|    else {
 5384|   130k|        return make_forward_scan_buffer(r);
 5385|   130k|    }
 5386|   130k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   130k|{
 5203|   130k|    return basic_scan_forward_buffer_impl(range);
 5204|   130k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   130k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   130k|          m_cursor(ranges::begin(*m_range))
 4784|   130k|    {
 4785|   130k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   130k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   130k|    {
 4756|   130k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   130k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   130k|    {
 4447|   130k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   130k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   248k|    {
 2883|   248k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   248k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   248k|    {
 2864|   248k|        return decay_copy(t.begin());
 2865|   248k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|   367k|    {
 3494|   367k|        return m_iterator;
 3495|   367k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  1.48M|    {
 4789|  1.48M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 17.0k, False: 1.47M]
  ------------------
 4790|  17.0k|            return false;
 4791|  17.0k|        }
 4792|  1.47M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  1.47M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  1.47M|        }
 4795|  1.47M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 1.34M, False: 123k]
  ------------------
 4796|  1.34M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  1.34M|                                          this->m_current_view.begin(),
 4798|  1.34M|                                          this->m_current_view.end());
 4799|  1.34M|        }
 4800|  1.47M|        m_latest = *m_cursor;
 4801|  1.47M|        ++m_cursor;
 4802|  1.47M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  1.47M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  1.47M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  1.47M|        }
 4806|  1.47M|        return true;
 4807|  1.48M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  4.42M|    {
 2940|  4.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  4.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  4.42M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  4.42M|    {
 2922|  4.42M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  4.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  4.42M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  4.54M|    {
 3498|  4.54M|        return m_sentinel;
 3499|  4.54M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   130k|    {
 4364|   130k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   130k|        return true;
 4366|   130k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  11.6k|        : base(unexpect, std::move(e.error())),
 1630|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.6k|    {
 1632|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.6k|          m_has_value(false)
  466|  11.6k|    {
  467|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   130k|    {
 1330|   130k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   118k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   118k|                      ranges::iterator_t<SourceRange>>) {
 6799|   118k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   118k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   118k|    {
 2883|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   118k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   118k|    {
 2864|   118k|        return decay_copy(t.begin());
 2865|   118k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|   118k|{
 6784|   118k|    return ranges::end(source);
 6785|   118k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   118k|    {
 2940|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   118k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   118k|    {
 2922|   118k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   118k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   118k|        : base(std::in_place, std::forward<U>(val)),
 1584|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   118k|    {
 1586|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   118k|    {
  457|   118k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8854|   105k|    {
 8855|   105k|        return m_str;
 8856|   105k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   248k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   248k|    static_cast<    \
  |  | 1109|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   248k|    static_cast<    \
  |  | 1109|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   248k|    {
 3480|   248k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   105k|        : m_str(r.str)
 8850|   105k|    {
 8851|   105k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   130k|    {
 1754|   130k|        return has_value();
 1755|   130k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|   367k|    {
 1829|   367k|        return &value();
 1830|   367k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1782|   367k|    {
 1783|   367k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   367k|        return this->get_value();
 1785|   367k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|   118k|    {
 6556|   118k|        return ranges::begin(m_range);
 6557|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   141k|    {
  658|   141k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 118k, False: 23.2k]
  ------------------
  659|   118k|            destroy_value();
  660|   118k|        }
  661|  23.2k|        else {
  662|  23.2k|            destroy_unexpected();
  663|  23.2k|        }
  664|   141k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9961|  52.9k|{
 9962|  52.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  52.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  52.9k|                                   make_scan_args(result->values())));
 9965|  52.9k|    return result;
 9966|  52.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|  52.9k|{
 9673|  52.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  52.9k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  52.9k|{
 9608|  52.9k|#if !SCN_DISABLE_LOCALE
 9609|  52.9k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  52.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  52.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  52.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  52.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.36k, False: 47.5k]
  |  |  ------------------
  ------------------
 9616|  5.36k|        return unexpected(result.error());
 9617|  5.36k|    }
 9618|  47.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  52.9k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
10002|  24.4k|{
10003|  24.4k|    auto result = make_scan_result<Source, T>();
10004|  24.4k|    fill_scan_result(
10005|  24.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  24.4k|                            detail::make_arg<scan_context>(result->value())));
10007|  24.4k|    return result;
10008|  24.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  24.4k|{
 9686|  24.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  24.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  24.4k|{
 9632|  24.4k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  24.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  24.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 894, False: 23.5k]
  |  |  ------------------
  ------------------
 9636|    894|        return unexpected(result.error());
 9637|    894|    }
 9638|  23.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  24.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  48.2k|    {
 2883|  48.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  48.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  48.2k|    {
 2864|  48.2k|        return decay_copy(t.begin());
 2865|  48.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  11.6M|{
 2108|  11.6M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  11.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  11.6M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  3.00M|    {
 2940|  3.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  3.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  3.00M|    {
 2922|  3.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  3.00M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9848|   750k|{
 9849|   750k|    return scan_result_type<Source, Args...>();
 9850|   750k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   750k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   750k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   750k|    {
  628|   750k|        construct();
  629|   750k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   750k|    {
  709|   750k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   750k|        m_has_value = true;
  711|   750k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  410|   750k|{
  411|   750k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   750k|        T(std::forward<Args>(args)...);
  413|   750k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6692|   750k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|  1.50M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|  1.50M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6466|  1.50M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  3.70M|    {
  733|  3.70M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  3.70M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  3.70M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|   750k|{
 9834|   750k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.2k, False: 727k]
  |  |  ------------------
  ------------------
 9835|  23.2k|        out = unexpected(in.error());
 9836|  23.2k|    }
 9837|   727k|    else {
 9838|   727k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   727k|    static_cast<    \
  |  | 1109|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   727k|    }
 9840|   750k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|  1.50M|    {
 1754|  1.50M|        return has_value();
 1755|  1.50M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.00M|    {
  505|  3.00M|        return m_has_value;
  506|  3.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|  46.4k|    {
 1760|  46.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  46.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  46.4k|        return this->get_unexpected().error();
 1762|  46.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  46.4k|    {
  488|  46.4k|        return m_unexpected;
  489|  46.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  23.2k|        : base(unexpect, std::move(e.error())),
 1630|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  23.2k|    {
 1632|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  23.2k|        : m_has_value(false)
  652|  23.2k|    {
  653|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  23.2k|    {
  716|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  23.2k|                                  std::forward<Args>(args)...);
  718|  23.2k|        m_has_value = false;
  719|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   116k|    {
  745|   116k|        return reinterpret_cast<unexpected<E>*>(
  746|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  23.2k|    {
 1330|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  23.2k|    {
  917|  23.2k|        assign_common(std::move(other));
  918|  23.2k|        return *this;
  919|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  23.2k|    {
  964|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 23.2k, False: 0]
  ------------------
  965|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 23.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  23.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  3.77M|    {
  702|  3.77M|        return m_has_value;
  703|  3.77M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  2.20M|    {
  668|  2.20M|        return *value_ptr();
  669|  2.20M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  23.2k|    {
 1060|  23.2k|        this->destroy_value();
 1061|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   750k|    {
  723|   750k|        scn::detail::destroy_at(value_ptr());
  724|   750k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  416|   750k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   750k|    else {
  423|   750k|        p->~T();
  424|   750k|    }
  425|   750k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6699|   750k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  23.2k|    {
  716|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  23.2k|                                  std::forward<Args>(args)...);
  718|  23.2k|        m_has_value = false;
  719|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  23.2k|    {
  693|  23.2k|        return std::move(*unexpected_ptr());
  694|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  46.4k|    {
  727|  46.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  46.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  1.45M|    {
 6567|  1.45M|        m_range = std::forward<Other>(r);
 6568|  1.45M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  1.45M|    {
 1809|  1.45M|        return value();
 1810|  1.45M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  1.45M|    {
 1783|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.45M|        return this->get_value();
 1785|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.45M|    {
  471|  1.45M|        return m_value;
  472|  1.45M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   603k|{
 9592|   603k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   603k|    auto result = vscan_impl(buffer, format, args);
 9595|   603k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   603k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.4k, False: 581k]
  |  |  ------------------
  ------------------
 9596|  21.4k|        return unexpected(result.error());
 9597|  21.4k|    }
 9598|   581k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   603k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|  1.50M|{
 5399|  1.50M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  1.50M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  1.50M|                  "\n"
 5403|  1.50M|                  "Unsupported range type given as input to a scanning "
 5404|  1.50M|                  "function.\n"
 5405|  1.50M|                  "A range needs to have a character type (value type) "
 5406|  1.50M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  1.50M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  1.50M|                  "to be included.\n"
 5409|  1.50M|                  "See the scnlib documentation for more details.");
 5410|  1.50M|    static_assert(
 5411|  1.50M|        !std::is_same_v<T, custom_char_traits>,
 5412|  1.50M|        "\n"
 5413|  1.50M|        "Unsupported range type given as input to a scanning "
 5414|  1.50M|        "function.\n"
 5415|  1.50M|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  1.50M|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  1.50M|        "not supported.");
 5418|  1.50M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  1.50M|                  "\n"
 5420|  1.50M|                  "Unsupported range type given as input to a scanning "
 5421|  1.50M|                  "function.\n"
 5422|  1.50M|                  "file_marker_found cannot be used as an "
 5423|  1.50M|                  "source range type to scn::scan.\n"
 5424|  1.50M|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  1.50M|                  "and do not provide an explicit source range, "
 5426|  1.50M|                  "or use scn::scan with a FILE* directly.");
 5427|  1.50M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  1.50M|                  "\n"
 5429|  1.50M|                  "Unsupported range type given as input to a scanning "
 5430|  1.50M|                  "function.\n"
 5431|  1.50M|                  "In order to be scannable, a range needs to satisfy "
 5432|  1.50M|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  1.50M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  1.50M|                  "\n"
 5435|  1.50M|                  "Unsupported range type given as input to a scanning "
 5436|  1.50M|                  "function.\n"
 5437|  1.50M|                  "A range needs to model forward_range and have a valid "
 5438|  1.50M|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  1.50M|                  "Examples of scannable ranges are std::string, "
 5440|  1.50M|                  "std::string_view, "
 5441|  1.50M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  1.50M|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  1.50M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  1.50M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|  1.50M|{
 5338|  1.50M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|  1.50M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|  1.50M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.50M|    {
 3014|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.50M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.50M|    {
 2995|  1.50M|        return t.data();
 2996|  1.50M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|  1.50M|    {
 3397|  1.50M|        return detail::to_address(ranges::begin(derived()));
 3398|  1.50M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  5.67M|{
  331|  5.67M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  5.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  5.67M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   186M|{
  309|   186M|    return p;
  310|   186M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.95M|    {
 2883|  2.95M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.95M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.95M|    {
 2864|  2.95M|        return decay_copy(t.begin());
 2865|  2.95M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|   155M|    {
 3494|   155M|        return m_iterator;
 3495|   155M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|  1.50M|    {
 3353|  1.50M|        return static_cast<const D&>(*this);
 3354|  1.50M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|  1.50M|    {
 3089|  1.50M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  1.50M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  1.50M|    {
 3055|  1.50M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  1.50M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  3.58M|    {
 3510|  3.58M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  3.58M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  46.4k|        : base(unexpect, std::move(e.error())),
 1630|  46.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  46.4k|    {
 1632|  46.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  46.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  46.4k|          m_has_value(false)
  466|  46.4k|    {
  467|  46.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.50M|    {
 1330|  1.50M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  1.45M|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  1.45M|                      ranges::iterator_t<SourceRange>>) {
 6799|  1.45M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  1.45M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  4.15M|    {
 2883|  4.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  4.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  4.15M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  4.15M|    {
 2864|  4.15M|        return decay_copy(t.begin());
 2865|  4.15M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|  1.45M|{
 6784|  1.45M|    return ranges::end(source);
 6785|  1.45M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.45M|    {
 2940|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.45M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.45M|    {
 2922|  1.45M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.45M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|   147M|    {
 3498|   147M|        return m_sentinel;
 3499|   147M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.45M|    {
 1586|  1.45M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.45M|    {
  457|  1.45M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8854|   603k|    {
 8855|   603k|        return m_str;
 8856|   603k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  1.20M|{
 6196|  1.20M|    detail::check_scan_arg_types<Args...>();
 6197|  1.20M|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  1.20M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5910|  1.50M|{
 5911|  1.50M|    constexpr bool default_constructible_constraint =
 5912|  1.50M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  1.50M|    static_assert(default_constructible_constraint,
 5914|  1.50M|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  1.50M|    constexpr bool destructible_constraint =
 5917|  1.50M|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  1.50M|    static_assert(destructible_constraint,
 5919|  1.50M|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  1.50M|    constexpr bool non_reference_constraint =
 5922|  1.50M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  1.50M|    static_assert(non_reference_constraint,
 5924|  1.50M|                  "Scan argument types must not be references");
 5925|       |
 5926|  1.50M|    constexpr bool movable_constraint =
 5927|  1.50M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  1.50M|    static_assert(movable_constraint,
 5929|  1.50M|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  1.50M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  1.50M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  1.50M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  1.20M|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  1.20M|    {
 6173|  1.20M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  1.20M|    {
 6181|  1.20M|        return {detail::make_arg<
 6182|  1.20M|            kind, Context,
 6183|  1.20M|            mapped_type_constant<remove_cvref_t<A>,
 6184|  1.20M|                                 typename Context::char_type>::value>(args)...};
 6185|  1.20M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5960|  1.20M|{
 5961|  1.20M|    return make_value<Context>(value).ref_value;
 5962|  1.20M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5895|  1.50M|{
 5896|  1.50M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  1.50M|                                  needs_context_tag>) {
 5900|  1.50M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  1.50M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5702|  1.50M|    {                                                                        \
 5703|  1.50M|        return val;                                                          \
 5704|  1.50M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5864|  1.50M|{
 5865|  1.50M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  1.50M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  1.50M|    constexpr bool scannable_char =
 5869|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  1.50M|    static_assert(scannable_char,
 5871|  1.50M|                  "Cannot scan an argument of an unsupported character "
 5872|  1.50M|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  1.50M|    constexpr bool scannable_const =
 5875|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  1.50M|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  1.50M|    constexpr bool scannable_disabled =
 5879|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  1.50M|    static_assert(scannable_disabled,
 5881|  1.50M|                  "Cannot scan an argument that has been disabled by "
 5882|  1.50M|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  1.50M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  1.50M|    static_assert(
 5886|  1.50M|        scannable,
 5887|  1.50M|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  1.50M|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  1.50M|    return arg_value{arg};
 5891|  1.50M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5645|  1.50M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  1.50M|    {
 5647|  1.50M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6475|  1.20M|    {
 6476|  1.20M|        return m_values;
 6477|  1.20M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  1.20M|        : basic_scan_args(store.desc, store.args.data())
 6222|  1.20M|    {
 6223|  1.20M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|  1.80M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.80M|    {
 6275|  1.80M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  57.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  57.7M|    static_cast<    \
  |  | 1109|  57.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  57.7M|    static_cast<    \
  |  | 1109|  57.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  57.7M|    {
 3480|  57.7M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|  1.80M|{
 8537|  1.80M|    return s;
 8538|  1.80M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|  1.80M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   603k|        : m_str(r.str)
 8850|   603k|    {
 8851|   603k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   750k|    {
 1754|   750k|        return has_value();
 1755|   750k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  2.20M|    {
 1829|  2.20M|        return &value();
 1830|  2.20M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  2.20M|    {
 1783|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.20M|        return this->get_value();
 1785|  2.20M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|  1.45M|    {
 6556|  1.45M|        return ranges::begin(m_range);
 6557|  1.45M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   773k|    {
  658|   773k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 727k, False: 46.4k]
  ------------------
  659|   727k|            destroy_value();
  660|   727k|        }
  661|  46.4k|        else {
  662|  46.4k|            destroy_unexpected();
  663|  46.4k|        }
  664|   773k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   603k|{
 9608|   603k|#if !SCN_DISABLE_LOCALE
 9609|   603k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   603k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   603k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   603k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   603k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   603k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.4k, False: 581k]
  |  |  ------------------
  ------------------
 9616|  21.4k|        return unexpected(result.error());
 9617|  21.4k|    }
 9618|   581k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   581k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   603k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|   294k|{
 9632|   294k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|   294k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|   294k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 290k]
  |  |  ------------------
  ------------------
 9636|  3.57k|        return unexpected(result.error());
 9637|  3.57k|    }
 9638|   290k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|   294k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|   294k|{
 5946|   294k|    check_scan_arg_types<T>();
 5947|       |
 5948|   294k|    basic_scan_arg<Context> arg;
 5949|   294k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|   294k|    arg.m_value = make_value<Context>(value);
 5951|   294k|    return arg;
 5952|   294k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  2.25M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|   294k|    {
 6498|   294k|        return std::get<0>(m_values);
 6499|   294k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9848|   750k|{
 9849|   750k|    return scan_result_type<Source, Args...>();
 9850|   750k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   750k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|   750k|        : m_value(T{}), m_has_value(true)
  442|   750k|    {
  443|   750k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6692|   750k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6466|   750k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|   750k|{
 9834|   750k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.2k, False: 727k]
  |  |  ------------------
  ------------------
 9835|  23.2k|        out = unexpected(in.error());
 9836|  23.2k|    }
 9837|   727k|    else {
 9838|   727k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   727k|    static_cast<    \
  |  | 1109|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   727k|    }
 9840|   750k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  23.2k|        : base(unexpect, std::move(e.error())),
 1630|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  23.2k|    {
 1632|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  23.2k|          m_has_value(false)
  466|  23.2k|    {
  467|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  23.2k|    {
 1330|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  23.2k|    {
  917|  23.2k|        assign_common(std::move(other));
  918|  23.2k|        return *this;
  919|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  23.2k|    {
  964|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 23.2k, False: 0]
  ------------------
  965|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 23.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  23.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.00M|    {
  505|  3.00M|        return m_has_value;
  506|  3.00M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.20M|    {
  471|  2.20M|        return m_value;
  472|  2.20M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  23.2k|    {
 1060|  23.2k|        this->destroy_value();
 1061|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  23.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  23.2k|    {
  519|  23.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  23.2k|                                  std::forward<Args>(args)...);
  521|  23.2k|        m_has_value = false;
  522|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  23.2k|    {
  488|  23.2k|        return m_unexpected;
  489|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  23.2k|    {
  496|  23.2k|        return std::move(m_unexpected);
  497|  23.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8854|   603k|    {
 8855|   603k|        return m_str;
 8856|   603k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|   603k|{
 6196|   603k|    detail::check_scan_arg_types<Args...>();
 6197|   603k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   603k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5910|   750k|{
 5911|   750k|    constexpr bool default_constructible_constraint =
 5912|   750k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   750k|    static_assert(default_constructible_constraint,
 5914|   750k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   750k|    constexpr bool destructible_constraint =
 5917|   750k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   750k|    static_assert(destructible_constraint,
 5919|   750k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   750k|    constexpr bool non_reference_constraint =
 5922|   750k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   750k|    static_assert(non_reference_constraint,
 5924|   750k|                  "Scan argument types must not be references");
 5925|       |
 5926|   750k|    constexpr bool movable_constraint =
 5927|   750k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   750k|    static_assert(movable_constraint,
 5929|   750k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   750k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   750k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   750k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|   603k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   603k|    {
 6173|   603k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|   603k|    {
 6181|   603k|        return {detail::make_arg<
 6182|   603k|            kind, Context,
 6183|   603k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   603k|                                 typename Context::char_type>::value>(args)...};
 6185|   603k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5960|   603k|{
 5961|   603k|    return make_value<Context>(value).ref_value;
 5962|   603k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5895|   750k|{
 5896|   750k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   750k|                                  needs_context_tag>) {
 5900|   750k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   750k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5702|   750k|    {                                                                        \
 5703|   750k|        return val;                                                          \
 5704|   750k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5864|   750k|{
 5865|   750k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   750k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   750k|    constexpr bool scannable_char =
 5869|   750k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   750k|    static_assert(scannable_char,
 5871|   750k|                  "Cannot scan an argument of an unsupported character "
 5872|   750k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   750k|    constexpr bool scannable_const =
 5875|   750k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   750k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   750k|    constexpr bool scannable_disabled =
 5879|   750k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   750k|    static_assert(scannable_disabled,
 5881|   750k|                  "Cannot scan an argument that has been disabled by "
 5882|   750k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   750k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   750k|    static_assert(
 5886|   750k|        scannable,
 5887|   750k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   750k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   750k|    return arg_value{arg};
 5891|   750k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5645|   750k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   750k|    {
 5647|   750k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6475|   603k|    {
 6476|   603k|        return m_values;
 6477|   603k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   603k|        : basic_scan_args(store.desc, store.args.data())
 6222|   603k|    {
 6223|   603k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   603k|        : m_str(r.str)
 8850|   603k|    {
 8851|   603k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   750k|    {
 1754|   750k|        return has_value();
 1755|   750k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  2.20M|    {
 1829|  2.20M|        return &value();
 1830|  2.20M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  2.20M|    {
 1783|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.20M|        return this->get_value();
 1785|  2.20M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|   147k|{
 5946|   147k|    check_scan_arg_types<T>();
 5947|       |
 5948|   147k|    basic_scan_arg<Context> arg;
 5949|   147k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|   147k|    arg.m_value = make_value<Context>(value);
 5951|   147k|    return arg;
 5952|   147k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|   147k|    {
 6498|   147k|        return std::get<0>(m_values);
 6499|   147k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  23.2k|    {
 2883|  23.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  23.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  23.2k|    {
 2864|  23.2k|        return decay_copy(t.begin());
 2865|  23.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  72.8M|{
 2108|  72.8M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  72.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  72.8M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.50M|    {
 2940|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.50M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.50M|    {
 2922|  1.50M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.50M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9848|   750k|{
 9849|   750k|    return scan_result_type<Source, Args...>();
 9850|   750k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   750k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   750k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   750k|    {
  628|   750k|        construct();
  629|   750k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   750k|    {
  709|   750k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   750k|        m_has_value = true;
  711|   750k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  410|   750k|{
  411|   750k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   750k|        T(std::forward<Args>(args)...);
  413|   750k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6692|   750k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   750k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   750k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  3.70M|    {
  733|  3.70M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  3.70M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  3.70M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9833|   750k|{
 9834|   750k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.2k, False: 727k]
  |  |  ------------------
  ------------------
 9835|  23.2k|        out = unexpected(in.error());
 9836|  23.2k|    }
 9837|   727k|    else {
 9838|   727k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   727k|    static_cast<    \
  |  | 1109|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   727k|    }
 9840|   750k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   750k|    {
 1754|   750k|        return has_value();
 1755|   750k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.50M|    {
  505|  1.50M|        return m_has_value;
  506|  1.50M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  23.2k|    {
 1760|  23.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  23.2k|        return this->get_unexpected().error();
 1762|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  23.2k|    {
  488|  23.2k|        return m_unexpected;
  489|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1629|  23.2k|        : base(unexpect, std::move(e.error())),
 1630|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  23.2k|    {
 1632|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  651|  23.2k|        : m_has_value(false)
  652|  23.2k|    {
  653|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  715|  23.2k|    {
  716|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  23.2k|                                  std::forward<Args>(args)...);
  718|  23.2k|        m_has_value = false;
  719|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   116k|    {
  745|   116k|        return reinterpret_cast<unexpected<E>*>(
  746|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  23.2k|    {
 1330|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1570|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  916|  23.2k|    {
  917|  23.2k|        assign_common(std::move(other));
  918|  23.2k|        return *this;
  919|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  963|  23.2k|    {
  964|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 23.2k, False: 0]
  ------------------
  965|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 23.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  23.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  3.77M|    {
  702|  3.77M|        return m_has_value;
  703|  3.77M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  2.20M|    {
  668|  2.20M|        return *value_ptr();
  669|  2.20M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1059|  23.2k|    {
 1060|  23.2k|        this->destroy_value();
 1061|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   750k|    {
  723|   750k|        scn::detail::destroy_at(value_ptr());
  724|   750k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  416|   750k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   750k|    else {
  423|   750k|        p->~T();
  424|   750k|    }
  425|   750k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6699|   750k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  715|  23.2k|    {
  716|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  717|  23.2k|                                  std::forward<Args>(args)...);
  718|  23.2k|        m_has_value = false;
  719|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  23.2k|    {
  693|  23.2k|        return std::move(*unexpected_ptr());
  694|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  46.4k|    {
  727|  46.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  46.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   727k|    {
 6567|   727k|        m_range = std::forward<Other>(r);
 6568|   727k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   727k|    {
 1809|   727k|        return value();
 1810|   727k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   727k|    {
 1783|   727k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   727k|        return this->get_value();
 1785|   727k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   727k|    {
  471|   727k|        return m_value;
  472|   727k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   301k|{
 9592|   301k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   301k|    auto result = vscan_impl(buffer, format, args);
 9595|   301k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 290k]
  |  |  ------------------
  ------------------
 9596|  10.7k|        return unexpected(result.error());
 9597|  10.7k|    }
 9598|   290k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   301k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   750k|{
 5399|   750k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   750k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   750k|                  "\n"
 5403|   750k|                  "Unsupported range type given as input to a scanning "
 5404|   750k|                  "function.\n"
 5405|   750k|                  "A range needs to have a character type (value type) "
 5406|   750k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   750k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   750k|                  "to be included.\n"
 5409|   750k|                  "See the scnlib documentation for more details.");
 5410|   750k|    static_assert(
 5411|   750k|        !std::is_same_v<T, custom_char_traits>,
 5412|   750k|        "\n"
 5413|   750k|        "Unsupported range type given as input to a scanning "
 5414|   750k|        "function.\n"
 5415|   750k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   750k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   750k|        "not supported.");
 5418|   750k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   750k|                  "\n"
 5420|   750k|                  "Unsupported range type given as input to a scanning "
 5421|   750k|                  "function.\n"
 5422|   750k|                  "file_marker_found cannot be used as an "
 5423|   750k|                  "source range type to scn::scan.\n"
 5424|   750k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   750k|                  "and do not provide an explicit source range, "
 5426|   750k|                  "or use scn::scan with a FILE* directly.");
 5427|   750k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   750k|                  "\n"
 5429|   750k|                  "Unsupported range type given as input to a scanning "
 5430|   750k|                  "function.\n"
 5431|   750k|                  "In order to be scannable, a range needs to satisfy "
 5432|   750k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   750k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   750k|                  "\n"
 5435|   750k|                  "Unsupported range type given as input to a scanning "
 5436|   750k|                  "function.\n"
 5437|   750k|                  "A range needs to model forward_range and have a valid "
 5438|   750k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   750k|                  "Examples of scannable ranges are std::string, "
 5440|   750k|                  "std::string_view, "
 5441|   750k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   750k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   750k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   750k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   750k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   750k|    else {
 5384|   750k|        return make_forward_scan_buffer(r);
 5385|   750k|    }
 5386|   750k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   750k|{
 5203|   750k|    return basic_scan_forward_buffer_impl(range);
 5204|   750k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   750k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   750k|          m_cursor(ranges::begin(*m_range))
 4784|   750k|    {
 4785|   750k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   750k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   750k|    {
 4756|   750k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   750k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   750k|    {
 4447|   750k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   750k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.47M|    {
 2883|  1.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.47M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.47M|    {
 2864|  1.47M|        return decay_copy(t.begin());
 2865|  1.47M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|  2.20M|    {
 3494|  2.20M|        return m_iterator;
 3495|  2.20M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  22.8M|    {
 4789|  22.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 20.5k, False: 22.7M]
  ------------------
 4790|  20.5k|            return false;
 4791|  20.5k|        }
 4792|  22.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  22.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  22.7M|        }
 4795|  22.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 22.0M, False: 737k]
  ------------------
 4796|  22.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  22.0M|                                          this->m_current_view.begin(),
 4798|  22.0M|                                          this->m_current_view.end());
 4799|  22.0M|        }
 4800|  22.7M|        m_latest = *m_cursor;
 4801|  22.7M|        ++m_cursor;
 4802|  22.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  22.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  22.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  22.7M|        }
 4806|  22.7M|        return true;
 4807|  22.8M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  68.3M|    {
 2940|  68.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  68.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  68.3M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  68.3M|    {
 2922|  68.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  68.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  68.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|  69.1M|    {
 3498|  69.1M|        return m_sentinel;
 3499|  69.1M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   750k|    {
 4364|   750k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   750k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   750k|        return true;
 4366|   750k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  23.2k|        : base(unexpect, std::move(e.error())),
 1630|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  23.2k|    {
 1632|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  23.2k|          m_has_value(false)
  466|  23.2k|    {
  467|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   750k|    {
 1330|   750k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   727k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   727k|                      ranges::iterator_t<SourceRange>>) {
 6799|   727k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   727k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   727k|    {
 2883|   727k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   727k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   727k|    {
 2864|   727k|        return decay_copy(t.begin());
 2865|   727k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|   727k|{
 6784|   727k|    return ranges::end(source);
 6785|   727k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   727k|    {
 2940|   727k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   727k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   727k|    {
 2922|   727k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   727k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   727k|        : base(std::in_place, std::forward<U>(val)),
 1584|   727k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   727k|    {
 1586|   727k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   727k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   727k|    {
  457|   727k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8854|   603k|    {
 8855|   603k|        return m_str;
 8856|   603k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  1.47M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.47M|    static_cast<    \
  |  | 1109|  1.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.47M|    static_cast<    \
  |  | 1109|  1.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.47M|    {
 3480|  1.47M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   603k|        : m_str(r.str)
 8850|   603k|    {
 8851|   603k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   750k|    {
 1754|   750k|        return has_value();
 1755|   750k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  2.20M|    {
 1829|  2.20M|        return &value();
 1830|  2.20M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1782|  2.20M|    {
 1783|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.20M|        return this->get_value();
 1785|  2.20M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|   727k|    {
 6556|   727k|        return ranges::begin(m_range);
 6557|   727k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   773k|    {
  658|   773k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 727k, False: 46.4k]
  ------------------
  659|   727k|            destroy_value();
  660|   727k|        }
  661|  46.4k|        else {
  662|  46.4k|            destroy_unexpected();
  663|  46.4k|        }
  664|   773k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   301k|{
 9608|   301k|#if !SCN_DISABLE_LOCALE
 9609|   301k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   301k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   301k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   301k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   301k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 290k]
  |  |  ------------------
  ------------------
 9616|  10.7k|        return unexpected(result.error());
 9617|  10.7k|    }
 9618|   290k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   301k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|   147k|{
 9632|   147k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|   147k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|   147k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 145k]
  |  |  ------------------
  ------------------
 9636|  1.78k|        return unexpected(result.error());
 9637|  1.78k|    }
 9638|   145k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|   147k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   136k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   136k|    {
 3760|   136k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   136k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   136k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   117k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   117k|    else {
 3999|   117k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   117k|    }
 4001|   117k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  4.87M|    {
 3494|  4.87M|        return m_iterator;
 3495|  4.87M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  74.8M|    {
 3494|  74.8M|        return m_iterator;
 3495|  74.8M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  8.16M|    {
  587|  8.16M|        return m_has_value;
  588|  8.16M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|  96.5k|    {
  570|  96.5k|        return m_unexpected;
  571|  96.5k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|  96.5k|    {
 1760|  96.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  96.5k|        return this->get_unexpected().error();
 1762|  96.5k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  1.07M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7119|  32.1k|    {
 7120|  32.1k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7120:13): [True: 0, False: 32.1k]
  |  Branch (7120:39): [True: 0, False: 0]
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|       |
 7126|  32.1k|        m_specs.width = width;
 7127|  32.1k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  1.04M|    {
 7141|  1.04M|        m_specs.type = type;
 7142|  1.04M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7157|  37.0k|    {
 7158|  37.0k|        const auto begin_value = static_cast<unsigned>(begin);
 7159|  37.0k|        const auto end_value = static_cast<unsigned>(end);
 7160|  37.0k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1104|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7161|       |
 7162|  37.0k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1038|  37.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 37.0k, False: 0]
  |  |  ------------------
  ------------------
 7163|       |            // No need to bit-twiddle with a mask, because with the
 7164|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7165|  37.0k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1058|  37.0k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7166|  1.00M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7166:40): [True: 963k, False: 37.0k]
  ------------------
 7167|   963k|                m_specs.charset_literals[v / 8] |=
 7168|   963k|                    static_cast<unsigned char>(1ul << (v % 8));
 7169|   963k|            }
 7170|  37.0k|        }
 7171|      0|        else {
 7172|      0|            m_specs.charset_has_nonascii = true;
 7173|      0|        }
 7174|  37.0k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7202|  32.1k|    {
 7203|  32.1k|        SCN_UNLIKELY_ATTR
 7204|  32.1k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7205|  32.1k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  1.13M|    {
 7214|  1.13M|        return m_error;
 7215|  1.13M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|   125k|{
 3936|   125k|    return unexpected(scan_error{c, m});
 3937|   125k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  70.0M|{
 4326|       |    // Pattern_White_Space property
 4327|  70.0M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 13.2M, False: 56.8M]
  |  Branch (4327:27): [True: 2.60M, False: 10.6M]
  ------------------
 4328|  70.0M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 2.14M, False: 65.3M]
  ------------------
 4329|  70.0M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 350k, False: 64.9M]
  ------------------
 4330|  70.0M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 174k, False: 64.8M]
  ------------------
 4331|  70.0M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 236k, False: 64.5M]
  ------------------
 4332|  70.0M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 174k, False: 64.4M]
  ------------------
 4333|  70.0M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 0, False: 64.4M]
  ------------------
 4334|  70.0M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|  16.0k|{
 7897|  16.0k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 16.0k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 16.0k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 16.0k]
  ------------------
 7903|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 0, False: 16.0k]
  ------------------
 7904|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 16.0k]
  ------------------
 7905|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 16.0k]
  ------------------
 7906|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 16.0k]
  ------------------
 7907|      0|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 16.0k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 16.0k]
  ------------------
 7911|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 0, False: 16.0k]
  ------------------
 7912|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 16.0k]
  ------------------
 7913|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 16.0k]
  ------------------
 7914|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 16.0k]
  ------------------
 7915|      0|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 16.0k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 16.0k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 16.0k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 16.0k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 16.0k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 0, False: 16.0k]
  ------------------
 7927|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 0, False: 16.0k]
  ------------------
 7928|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 0, False: 16.0k]
  ------------------
 7929|      0|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 16.0k]
  ------------------
 7930|      0|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 16.0k]
  ------------------
 7931|      0|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 16.0k]
  ------------------
 7932|      0|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 16.0k]
  ------------------
 7933|      0|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 16.0k]
  ------------------
 7934|      0|            return arg_type_category::floating;
 7935|       |
 7936|  3.57k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 3.57k, False: 12.5k]
  ------------------
 7937|  10.7k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 7.15k, False: 8.94k]
  ------------------
 7938|  16.0k|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 5.36k, False: 10.7k]
  ------------------
 7939|  16.0k|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 16.0k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 16.0k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|  16.0k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|  16.0k|            SCN_CLANG_POP
 7950|  16.0k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|  16.0k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  8.07M|    {
 1754|  8.07M|        return has_value();
 1755|  8.07M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8044|  1.04M|{
 8045|  1.04M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8045:9): [True: 0, False: 1.04M]
  ------------------
 8046|  1.04M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8046:9): [True: 1.01M, False: 34.6k]
  ------------------
 8047|  1.04M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (8047:9): [True: 18.5k, False: 16.0k]
  ------------------
 8048|  1.04M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8048:9): [True: 0, False: 16.0k]
  ------------------
 8049|  1.04M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (8049:9): [True: 0, False: 16.0k]
  ------------------
 8050|  1.03M|        return;
 8051|  1.03M|    }
 8052|  16.0k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8052:9): [True: 16.0k, False: 0]
  ------------------
 8053|  16.0k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1039|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 8054|       |            // clang-format off
 8055|  16.0k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8056|       |            // clang-format on
 8057|  16.0k|        }
 8058|      0|        return;
 8059|  16.0k|    }
 8060|      0|    SCN_UNLIKELY_ATTR
 8061|      0|    handler.on_error("Invalid type specifier for string");
 8062|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|  26.7M|    {
 4491|  26.7M|        assert(m_begin);
 4492|  26.7M|        return m_end == nullptr;
 4493|  26.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|   609k|    {
 4508|   609k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 609k]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|   609k|        return parent()->get_segment_starting_at(position());
 4514|   609k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  15.5M|    {
 4502|  15.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  15.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  15.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  15.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|   609k|    {
 4395|   609k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 344k, False: 265k]
  |  |  ------------------
  ------------------
 4396|   609k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   344k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   344k|        }
 4399|   265k|        const auto start = pos - m_putback_buffer.size();
 4400|   265k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   265k|        return m_current_view.substr(start);
 4402|   265k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|   686k|    {
 4486|   686k|        return m_position;
 4487|   686k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|   390k|    {
 4417|   390k|        return m_is_contiguous;
 4418|   390k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|   413M|    {
 4491|   413M|        assert(m_begin);
 4492|   413M|        return m_end == nullptr;
 4493|   413M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   730k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   730k|    else {
 3999|   730k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   730k|    }
 4001|   730k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  2.20M|    {
 4508|  2.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 2.20M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  2.20M|        return parent()->get_segment_starting_at(position());
 4514|  2.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|   240M|    {
 4502|   240M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|   240M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   240M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|   240M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|   240M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|  2.20M|    {
 4395|  2.20M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.46M, False: 746k]
  |  |  ------------------
  ------------------
 4396|  2.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|  1.46M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|  1.46M|        }
 4399|   746k|        const auto start = pos - m_putback_buffer.size();
 4400|   746k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   746k|        return m_current_view.substr(start);
 4402|   746k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|  2.65M|    {
 4486|  2.65M|        return m_position;
 4487|  2.65M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|  2.25M|    {
 4417|  2.25M|        return m_is_contiguous;
 4418|  2.25M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|   785k|    {
 3348|   785k|        return static_cast<D&>(*this);
 3349|   785k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|   785k|    {
 3389|   785k|        return detail::to_address(ranges::begin(derived()));
 3390|   785k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|  2.70M|    {
 3348|  2.70M|        return static_cast<D&>(*this);
 3349|  2.70M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|  2.70M|    {
 3389|  2.70M|        return detail::to_address(ranges::begin(derived()));
 3390|  2.70M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|  53.2k|    {
 9052|  53.2k|        return ranges::subrange{begin(), end()};
 9053|  53.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|  53.2k|    {
 9044|  53.2k|        return ranges::default_sentinel;
 9045|  53.2k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  1.80M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.80M|    static_cast<    \
  |  | 1109|  1.80M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.80M|    static_cast<    \
  |  | 1109|  1.80M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.80M|    {
 3480|  1.80M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|  2.58M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   122k|    {
 1993|   122k|        return detail::transform_error_impl(std::move(*this),
 1994|   122k|                                            std::forward<F>(f));
 1995|   122k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   122k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   122k|    else {
 1486|   122k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   122k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   122k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 120k, False: 2.11k]
  |  |  ------------------
  ------------------
 1488|   122k|                   ? result(*std::forward<Exp>(exp))
 1489|   122k|                   : result(unexpect,
 1490|  2.11k|                            trivial_invoke(std::forward<F>(f),
 1491|  2.11k|                                           std::forward<Exp>(exp).error()));
 1492|   122k|    }
 1493|   122k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   244k|    {
  505|   244k|        return m_has_value;
  506|   244k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   120k|    {
 1819|   120k|        return std::move(value());
 1820|   120k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   120k|    {
 1783|   120k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   120k|        return this->get_value();
 1785|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   120k|    {
  471|   120k|        return m_value;
  472|   120k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   286k|        : base(std::in_place, std::forward<U>(val)),
 1584|   286k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   286k|    {
 1586|   286k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   286k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   286k|    {
  457|   286k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   302k|    {
 1330|   302k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  11.7k|{
 1364|  11.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  11.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  2.11k|    {
 1770|  2.11k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.11k|        return std::move(this->get_unexpected().error());
 1772|  2.11k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  2.11k|    {
  488|  2.11k|        return m_unexpected;
  489|  2.11k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|  23.4k|    {
  380|  23.4k|        return m_unexpected;
  381|  23.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  2.11k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  2.11k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  2.11k|    {
 1642|  2.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  14.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.6k|          m_has_value(false)
  466|  14.6k|    {
  467|  14.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   301k|    {
 9052|   301k|        return ranges::subrange{begin(), end()};
 9053|   301k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   301k|    {
 9044|   301k|        return ranges::default_sentinel;
 9045|   301k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  26.3M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  26.3M|    static_cast<    \
  |  | 1109|  26.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  26.3M|    static_cast<    \
  |  | 1109|  26.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  26.3M|    {
 3480|  26.3M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   735k|    {
 1993|   735k|        return detail::transform_error_impl(std::move(*this),
 1994|   735k|                                            std::forward<F>(f));
 1995|   735k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   735k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   735k|    else {
 1486|   735k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   735k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   735k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 733k, False: 2.14k]
  |  |  ------------------
  ------------------
 1488|   735k|                   ? result(*std::forward<Exp>(exp))
 1489|   735k|                   : result(unexpect,
 1490|  2.14k|                            trivial_invoke(std::forward<F>(f),
 1491|  2.14k|                                           std::forward<Exp>(exp).error()));
 1492|   735k|    }
 1493|   735k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  1.47M|    {
  505|  1.47M|        return m_has_value;
  506|  1.47M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   733k|    {
 1819|   733k|        return std::move(value());
 1820|   733k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   733k|    {
 1783|   733k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   733k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   733k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   733k|        return this->get_value();
 1785|   733k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   733k|    {
  471|   733k|        return m_value;
  472|   733k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  1.75M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.75M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.75M|    {
 1586|  1.75M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.75M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.75M|    {
  457|  1.75M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.78M|    {
 1330|  1.78M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  2.14k|    {
 1770|  2.14k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.14k|        return std::move(this->get_unexpected().error());
 1772|  2.14k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  2.14k|    {
  488|  2.14k|        return m_unexpected;
  489|  2.14k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  2.14k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  2.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  2.14k|    {
 1642|  2.14k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  28.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.1k|          m_has_value(false)
  466|  28.1k|    {
  467|  28.1k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|   125k|        : m_unexpected(std::forward<Err>(e))
  365|   125k|    {
  366|   125k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   125k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   125k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   104k|        : base(unexpect, std::move(e.error())),
 1630|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   104k|    {
 1632|   104k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   104k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   104k|          m_has_value(false)
  466|   104k|    {
  467|   104k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.59M|    {
 1330|  2.59M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  25.5k|        : base(unexpect, std::move(e.error())),
 1630|  25.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.5k|    {
 1632|  25.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  28.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.7k|          m_has_value(false)
  466|  28.7k|    {
  467|  28.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   497k|    {
 1330|   497k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   467k|        : base(std::in_place, std::forward<U>(val)),
 1584|   467k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   467k|    {
 1586|   467k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   467k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   467k|    {
  457|   467k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|   497k|    {
 1754|   497k|        return has_value();
 1755|   497k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|   995k|    {
  505|   995k|        return m_has_value;
  506|   995k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|  28.7k|    {
 1760|  28.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  28.7k|        return this->get_unexpected().error();
 1762|  28.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.7k|    {
  488|  28.7k|        return m_unexpected;
  489|  28.7k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   389k|    {
 1819|   389k|        return std::move(value());
 1820|   389k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   468k|    {
 1783|   468k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   468k|        return this->get_value();
 1785|   468k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|   468k|    {
  471|   468k|        return m_value;
  472|   468k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  51.9k|        : base(unexpect, std::move(e.error())),
 1630|  51.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  51.9k|    {
 1632|  51.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  56.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  56.2k|          m_has_value(false)
  466|  56.2k|    {
  467|  56.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.56M|    {
 1330|  3.56M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  3.50M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.50M|    {
 1586|  3.50M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  3.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.50M|    {
  457|  3.50M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  3.56M|    {
 1754|  3.56M|        return has_value();
 1755|  3.56M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  7.12M|    {
  505|  7.12M|        return m_has_value;
  506|  7.12M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|  56.2k|    {
 1760|  56.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  56.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  56.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  56.2k|        return this->get_unexpected().error();
 1762|  56.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  56.2k|    {
  488|  56.2k|        return m_unexpected;
  489|  56.2k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  2.92M|    {
 1819|  2.92M|        return std::move(value());
 1820|  2.92M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  3.50M|    {
 1783|  3.50M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.50M|        return this->get_value();
 1785|  3.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  3.50M|    {
  471|  3.50M|        return m_value;
  472|  3.50M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   200k|    {
 1993|   200k|        return detail::transform_error_impl(std::move(*this),
 1994|   200k|                                            std::forward<F>(f));
 1995|   200k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   200k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   200k|    else {
 1486|   200k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   200k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   200k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 196k, False: 3.20k]
  |  |  ------------------
  ------------------
 1488|   200k|                   ? result(*std::forward<Exp>(exp))
 1489|   200k|                   : result(unexpect,
 1490|  3.20k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.20k|                                           std::forward<Exp>(exp).error()));
 1492|   200k|    }
 1493|   200k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   400k|    {
  505|   400k|        return m_has_value;
  506|   400k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   196k|    {
 1819|   196k|        return std::move(value());
 1820|   196k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   196k|    {
 1783|   196k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   196k|        return this->get_value();
 1785|   196k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   196k|    {
  471|   196k|        return m_value;
  472|   196k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  3.20k|    {
 1770|  3.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  3.20k|        return std::move(this->get_unexpected().error());
 1772|  3.20k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  3.20k|    {
  488|  3.20k|        return m_unexpected;
  489|  3.20k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  3.20k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  3.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  3.20k|    {
 1642|  3.20k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|   157k|    {
 9036|   157k|        return m_current;
 9037|   157k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   141k|    {
 8929|   141k|        return m_locale;
 8930|   141k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   152k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   152k|    static_cast<    \
  |  | 1109|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   152k|    static_cast<    \
  |  | 1109|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   152k|    {
 8936|   152k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  12.5k|        : base(unexpect, std::move(e.error())),
 1630|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.5k|    {
 1632|  12.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|   901k|    {
 9036|   901k|        return m_current;
 9037|   901k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   904k|    {
 8929|   904k|        return m_locale;
 8930|   904k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   926k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   926k|    static_cast<    \
  |  | 1109|   926k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   926k|    static_cast<    \
  |  | 1109|   926k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   926k|    {
 8936|   926k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  25.9k|        : base(unexpect, std::move(e.error())),
 1630|  25.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.9k|    {
 1632|  25.9k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   128k|        : base(unexpect, std::move(e.error())),
 1630|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   128k|    {
 1632|   128k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   128k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   128k|          m_has_value(false)
  565|   128k|    {
  566|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   128k|    {
 1330|   128k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  6.97M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  6.97M|        : m_deferred_init(), m_has_value(true)
  544|  6.97M|    {
  545|  6.97M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  1.38M|    {
 4577|  1.38M|        return x.is_at_end();
 4578|  1.38M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  2.86M|    {
 4621|  2.86M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 2.86M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  2.86M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 2.86M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  2.86M|        return !read_at_position();
 4628|  2.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  7.93M|    {
 4601|  7.93M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  7.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  7.93M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 7.93M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  7.93M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  7.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 6.44M, False: 1.48M]
  |  |  ------------------
  ------------------
 4608|  6.44M|            return true;
 4609|  6.44M|        }
 4610|       |
 4611|  2.95M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 1.48M, False: 1.47M]
  ------------------
 4612|  1.48M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 17.0k, False: 1.47M]
  ------------------
 4613|  17.0k|                return false;
 4614|  17.0k|            }
 4615|  1.48M|        }
 4616|  1.47M|        return true;
 4617|  1.48M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  2.60M|    {
 4536|  2.60M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  2.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  2.60M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 2.60M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  2.60M|        auto res = read_at_position();
 4545|  2.60M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  2.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  2.60M|        return parent()->get_character_at(m_position);
 4547|  2.60M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  2.60M|    {
 4406|  2.60M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.42M, False: 1.17M]
  |  |  ------------------
  ------------------
 4407|  2.60M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  1.42M|            return m_putback_buffer[pos];
 4409|  1.42M|        }
 4410|  1.17M|        const auto start = pos - m_putback_buffer.size();
 4411|  1.17M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  1.17M|        return m_current_view[start];
 4413|  1.17M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|   120k|        : base(std::in_place, std::forward<U>(val)),
 1584|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   120k|    {
 1586|   120k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   120k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   120k|    {
  457|   120k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   122k|    {
 1330|   122k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  2.11k|        : base(unexpect, std::move(e.error())),
 1630|  2.11k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.11k|    {
 1632|  2.11k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  2.11k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.11k|          m_has_value(false)
  466|  2.11k|    {
  467|  2.11k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  11.7k|        : m_unexpected(std::forward<Args>(args)...)
  374|  11.7k|    {
  375|  11.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  11.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  2.46M|    {
 4522|  2.46M|        ++m_position;
 4523|  2.46M|        (void)read_at_position();
 4524|  2.46M|        return *this;
 4525|  2.46M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  1.12M|    {
 4571|  1.12M|        return !(lhs == rhs);
 4572|  1.12M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  1.13M|    {
 4566|  1.13M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 1.13M, False: 0]
  |  Branch (4566:46): [True: 203k, False: 929k]
  ------------------
 4567|  1.13M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  11.7k|        : m_unexpected(std::forward<Err>(e))
  365|  11.7k|    {
  366|  11.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  11.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    906|        : base(unexpect, std::move(e.error())),
 1630|    906|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    906|    {
 1632|    906|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    906|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    906|          m_has_value(false)
  466|    906|    {
  467|    906|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  98.8k|    {
 1330|  98.8k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  97.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  97.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  97.9k|    {
 1586|  97.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|  97.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  97.9k|    {
  457|  97.9k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|  98.8k|    {
 1754|  98.8k|        return has_value();
 1755|  98.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|   197k|    {
  505|   197k|        return m_has_value;
  506|   197k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|    906|    {
 1760|    906|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    906|        return this->get_unexpected().error();
 1762|    906|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    906|    {
  488|    906|        return m_unexpected;
  489|    906|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  97.9k|    {
 1819|  97.9k|        return std::move(value());
 1820|  97.9k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  97.9k|    {
 1783|  97.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  97.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  97.9k|        return this->get_value();
 1785|  97.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|  97.9k|    {
  471|  97.9k|        return m_value;
  472|  97.9k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  4.35M|    {
 3498|  4.35M|        return m_sentinel;
 3499|  4.35M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   302k|    {
 1754|   302k|        return has_value();
 1755|   302k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   604k|    {
  505|   604k|        return m_has_value;
  506|   604k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|  14.6k|    {
 1760|  14.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  14.6k|        return this->get_unexpected().error();
 1762|  14.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.6k|    {
  488|  14.6k|        return m_unexpected;
  489|  14.6k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   239k|    {
 1819|   239k|        return std::move(value());
 1820|   239k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   287k|    {
 1783|   287k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   287k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   287k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   287k|        return this->get_value();
 1785|   287k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   287k|    {
  471|   287k|        return m_value;
  472|   287k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|   127k|    {
 3494|   127k|        return m_iterator;
 3495|   127k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|   127k|    {
 3498|   127k|        return m_sentinel;
 3499|   127k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   121k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   121k|    static_cast<    \
  |  | 1109|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   121k|    static_cast<    \
  |  | 1109|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   121k|    {
 3480|   121k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  1.48M|    {
 4588|  1.48M|        return !x.is_at_end();
 4589|  1.48M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  3.20k|        : base(unexpect, std::move(e.error())),
 1630|  3.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.20k|    {
 1632|  3.20k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  3.20k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.20k|          m_has_value(false)
  466|  3.20k|    {
  467|  3.20k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   200k|    {
 1330|   200k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|   196k|        : base(std::in_place, std::forward<U>(val)),
 1584|   196k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   196k|    {
 1586|   196k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   196k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   196k|    {
  457|   196k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  1.28k|        : base(unexpect, std::move(e.error())),
 1630|  1.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.28k|    {
 1632|  1.28k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.28k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.28k|          m_has_value(false)
  466|  1.28k|    {
  467|  1.28k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   162k|    {
 1330|   162k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   160k|        : base(std::in_place, std::forward<U>(val)),
 1584|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   160k|    {
 1586|   160k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   160k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   160k|    {
  457|   160k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|   162k|    {
 1754|   162k|        return has_value();
 1755|   162k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|   324k|    {
  505|   324k|        return m_has_value;
  506|   324k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  1.28k|    {
 1760|  1.28k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.28k|        return this->get_unexpected().error();
 1762|  1.28k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.28k|    {
  488|  1.28k|        return m_unexpected;
  489|  1.28k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   160k|    {
 1819|   160k|        return std::move(value());
 1820|   160k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   160k|    {
 1783|   160k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   160k|        return this->get_value();
 1785|   160k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|   160k|    {
  471|   160k|        return m_value;
  472|   160k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   785k|    {
 3014|   785k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   785k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   785k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   785k|    {
 2995|   785k|        return t.data();
 2996|   785k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  2.49M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.49M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.49M|    {
 1586|  2.49M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  2.49M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.49M|    {
  457|  2.49M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|  48.5k|    {
 1809|  48.5k|        return value();
 1810|  48.5k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  79.2k|    {
 1809|  79.2k|        return value();
 1810|  79.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1583|    696|        : base(std::in_place, std::forward<U>(val)),
 1584|    696|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    696|    {
 1586|    696|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  455|    696|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    696|    {
  457|    696|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|  1.39k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.39k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.39k|    {
 1586|  1.39k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.39k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.39k|    {
  457|  1.39k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  23.9M|    {
 4577|  23.9M|        return x.is_at_end();
 4578|  23.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  47.0M|    {
 4621|  47.0M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 47.0M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  47.0M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 47.0M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  47.0M|        return !read_at_position();
 4628|  47.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|   124M|    {
 4601|   124M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|   124M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   124M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|   124M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 124M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|   124M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|   124M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 101M, False: 22.8M]
  |  |  ------------------
  ------------------
 4608|   101M|            return true;
 4609|   101M|        }
 4610|       |
 4611|  45.6M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 22.8M, False: 22.7M]
  ------------------
 4612|  22.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 20.5k, False: 22.7M]
  ------------------
 4613|  20.5k|                return false;
 4614|  20.5k|            }
 4615|  22.8M|        }
 4616|  22.7M|        return true;
 4617|  22.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|   169M|    {
 4375|   169M|        return m_putback_buffer.size() + m_current_view.size();
 4376|   169M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  45.8M|    {
 4536|  45.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  45.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  45.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 45.8M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  45.8M|        auto res = read_at_position();
 4545|  45.8M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  45.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  45.8M|        return parent()->get_character_at(m_position);
 4547|  45.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  45.8M|    {
 4406|  45.8M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  45.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.7M, False: 22.0M]
  |  |  ------------------
  ------------------
 4407|  45.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  23.7M|            return m_putback_buffer[pos];
 4409|  23.7M|        }
 4410|  22.0M|        const auto start = pos - m_putback_buffer.size();
 4411|  22.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  22.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  22.0M|        return m_current_view[start];
 4413|  22.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|   733k|        : base(std::in_place, std::forward<U>(val)),
 1584|   733k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   733k|    {
 1586|   733k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   733k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   733k|    {
  457|   733k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   735k|    {
 1330|   735k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  2.14k|        : base(unexpect, std::move(e.error())),
 1630|  2.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.14k|    {
 1632|  2.14k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  2.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.14k|          m_has_value(false)
  466|  2.14k|    {
  467|  2.14k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  31.4M|    {
 4522|  31.4M|        ++m_position;
 4523|  31.4M|        (void)read_at_position();
 4524|  31.4M|        return *this;
 4525|  31.4M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  8.95M|    {
 4571|  8.95M|        return !(lhs == rhs);
 4572|  8.95M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  8.95M|    {
 4566|  8.95M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 8.95M, False: 0]
  |  Branch (4566:46): [True: 297k, False: 8.66M]
  ------------------
 4567|  8.95M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   128M|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   128M|    else {
 4093|       |        // utf-32
 4094|   128M|        static_assert(sizeof(U) == 4);
 4095|   128M|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   128M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   128M|        return 1;
 4097|   128M|    }
 4098|   128M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   128M|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   128M|    else {
 4299|   128M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   128M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   128M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   128M|        auto cp = static_cast<char32_t>(input.front());
 4301|   128M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   128M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 772k, False: 127M]
  |  |  ------------------
  ------------------
 4302|   772k|            return invalid_code_point;
 4303|   772k|        }
 4304|   127M|        return cp;
 4305|   128M|    }
 4306|   128M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    856|        : base(unexpect, std::move(e.error())),
 1630|    856|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    856|    {
 1632|    856|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    856|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    856|          m_has_value(false)
  466|    856|    {
  467|    856|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   588k|    {
 1330|   588k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   587k|        : base(std::in_place, std::forward<U>(val)),
 1584|   587k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   587k|    {
 1586|   587k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   587k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   587k|    {
  457|   587k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   588k|    {
 1754|   588k|        return has_value();
 1755|   588k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.17M|    {
  505|  1.17M|        return m_has_value;
  506|  1.17M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|    856|    {
 1760|    856|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    856|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    856|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    856|        return this->get_unexpected().error();
 1762|    856|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    856|    {
  488|    856|        return m_unexpected;
  489|    856|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   587k|    {
 1819|   587k|        return std::move(value());
 1820|   587k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   587k|    {
 1783|   587k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   587k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   587k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   587k|        return this->get_value();
 1785|   587k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   587k|    {
  471|   587k|        return m_value;
  472|   587k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  72.3M|    {
 3498|  72.3M|        return m_sentinel;
 3499|  72.3M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  1.78M|    {
 1754|  1.78M|        return has_value();
 1755|  1.78M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.56M|    {
  505|  3.56M|        return m_has_value;
  506|  3.56M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|  28.1k|    {
 1760|  28.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  28.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  28.1k|        return this->get_unexpected().error();
 1762|  28.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.1k|    {
  488|  28.1k|        return m_unexpected;
  489|  28.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.46M|    {
 1819|  1.46M|        return std::move(value());
 1820|  1.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.75M|    {
 1783|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.75M|        return this->get_value();
 1785|  1.75M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.75M|    {
  471|  1.75M|        return m_value;
  472|  1.75M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  60.2M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  60.2M|    else {
 3984|  60.2M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  60.2M|                                       to_address(first), to_address(last)))};
 3986|  60.2M|    }
 3987|  60.2M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   180M|{
  331|   180M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   180M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   180M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|   740k|    {
 3494|   740k|        return m_iterator;
 3495|   740k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|   740k|    {
 3498|   740k|        return m_sentinel;
 3499|   740k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   733k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   733k|    static_cast<    \
  |  | 1109|   733k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   733k|    static_cast<    \
  |  | 1109|   733k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   733k|    {
 3480|   733k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  23.0M|    {
 4588|  23.0M|        return !x.is_at_end();
 4589|  23.0M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  4.28k|        : base(unexpect, std::move(e.error())),
 1630|  4.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  4.28k|    {
 1632|  4.28k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  4.28k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  4.28k|          m_has_value(false)
  466|  4.28k|    {
  467|  4.28k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.47M|    {
 1330|  1.47M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  1.46M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.46M|    {
 1586|  1.46M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.46M|    {
  457|  1.46M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  2.94M|    {
  505|  2.94M|        return m_has_value;
  506|  2.94M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.46M|    {
 1783|  1.46M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.46M|        return this->get_value();
 1785|  1.46M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.46M|    {
  471|  1.46M|        return m_value;
  472|  1.46M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  1.71k|        : base(unexpect, std::move(e.error())),
 1630|  1.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.71k|    {
 1632|  1.71k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.71k|          m_has_value(false)
  466|  1.71k|    {
  467|  1.71k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.17M|    {
 1330|  1.17M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  1.17M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.17M|    {
 1586|  1.17M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  1.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.17M|    {
  457|  1.17M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  1.47M|    {
 1993|  1.47M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.47M|                                            std::forward<F>(f));
 1995|  1.47M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  1.47M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.47M|    else {
 1486|  1.47M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.47M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.46M, False: 4.28k]
  |  |  ------------------
  ------------------
 1488|  1.47M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.47M|                   : result(unexpect,
 1490|  4.28k|                            trivial_invoke(std::forward<F>(f),
 1491|  4.28k|                                           std::forward<Exp>(exp).error()));
 1492|  1.47M|    }
 1493|  1.47M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.46M|    {
 1819|  1.46M|        return std::move(value());
 1820|  1.46M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  4.28k|    {
 1770|  4.28k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  4.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  4.28k|        return std::move(this->get_unexpected().error());
 1772|  4.28k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  4.28k|    {
  488|  4.28k|        return m_unexpected;
  489|  4.28k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  4.28k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  4.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  4.28k|    {
 1642|  4.28k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|  1.17M|    {
 1754|  1.17M|        return has_value();
 1755|  1.17M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.35M|    {
  505|  2.35M|        return m_has_value;
  506|  2.35M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  1.71k|    {
 1760|  1.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.71k|        return this->get_unexpected().error();
 1762|  1.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.71k|    {
  488|  1.71k|        return m_unexpected;
  489|  1.71k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.17M|    {
 1819|  1.17M|        return std::move(value());
 1820|  1.17M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.17M|    {
 1783|  1.17M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.17M|        return this->get_value();
 1785|  1.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.17M|    {
  471|  1.17M|        return m_value;
  472|  1.17M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  2.70M|    {
 3014|  2.70M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  2.70M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  2.70M|    {
 2995|  2.70M|        return t.data();
 2996|  2.70M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   291k|    {
 1809|   291k|        return value();
 1810|   291k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   582k|    {
 1809|   582k|        return value();
 1810|   582k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1583|    116|        : base(std::in_place, std::forward<U>(val)),
 1584|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    116|    {
 1586|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  455|    116|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    116|    {
  457|    116|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|    232|        : base(std::in_place, std::forward<U>(val)),
 1584|    232|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    232|    {
 1586|    232|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|    232|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    232|    {
  457|    232|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  10.8M|    {
 4375|  10.8M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  10.8M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|   281k|    {
 6263|   281k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   281k|        return static_cast<std::size_t>(m_desc &
 6268|   281k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   281k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|   563k|    {
 6289|   563k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   563k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|   281k|    {
 6231|   281k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   281k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   281k|        const auto t = type(id);
 6243|   281k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   281k|        basic_scan_arg<Context> arg;
 6248|   281k|        arg.m_type = t;
 6249|   281k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 281k, False: 0]
  ------------------
 6250|   281k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   281k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   281k|        return arg;
 6256|   281k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|   281k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   281k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   281k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   281k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   281k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|   281k|    {
 6293|   281k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   281k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|   488k|    {
 6047|   488k|        return m_type != detail::arg_type::none_type;
 6048|   488k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   120k|{
 9494|   120k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   120k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   120k|{
 9353|   120k|#define SCN_VISIT(Type)                                                \
 9354|   120k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   120k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   120k|    }                                                                  \
 9357|   120k|    else {                                                             \
 9358|   120k|        return vis(monostate_val);                                     \
 9359|   120k|    }
 9360|       |
 9361|   120k|    monostate monostate_val{};
 9362|       |
 9363|   120k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 120k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 120k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 120k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 120k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 120k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 120k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 120k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 120k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 120k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 120k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 120k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 120k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 120k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 120k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 120k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 120k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 120k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 120k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 120k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 120k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 120k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 120k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 120k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 120k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 120k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  60.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 60.0k, False: 60.0k]
  ------------------
 9443|  60.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  60.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  60.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  60.0k|    }                                                                  \
  |  | 9357|  60.0k|    else {                                                             \
  |  | 9358|  60.0k|        return vis(monostate_val);                                     \
  |  | 9359|  60.0k|    }
  ------------------
 9444|  60.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 120k]
  ------------------
 9445|  60.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  60.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  60.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  60.0k|    }                                                                  \
  |  | 9357|  60.0k|    else {                                                             \
  |  | 9358|  60.0k|        return vis(monostate_val);                                     \
  |  | 9359|  60.0k|    }
  ------------------
 9446|   120k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 60.0k, False: 60.0k]
  ------------------
 9447|   120k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|   120k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|   120k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   120k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   120k|    }                                                                  \
  |  | 9357|   120k|    else {                                                             \
  |  | 9358|   120k|        return vis(monostate_val);                                     \
  |  | 9359|   120k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|   120k|        }
 9454|       |
 9455|   120k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 120k]
  ------------------
 9456|   120k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   120k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   120k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 120k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 120k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   120k|            SCN_CLANG_POP
 9473|   120k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   640k|{
 6092|   640k|    return arg.m_type;
 6093|   640k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   335k|{
 6104|   335k|    return arg.m_value;
 6105|   335k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|  56.8k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|  56.8k|    static_cast<    \
  |  | 1109|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|  56.8k|    {
 9021|  56.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   130k|{
 4709|   130k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 130k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   130k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   130k|                            ranges::default_sentinel};
 4715|   130k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   130k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   130k|    {
 4473|   130k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   130k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   130k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  73.4k|{
 9494|  73.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  73.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  73.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  73.4k|{
 9353|  73.4k|#define SCN_VISIT(Type)                                                \
 9354|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  73.4k|    }                                                                  \
 9357|  73.4k|    else {                                                             \
 9358|  73.4k|        return vis(monostate_val);                                     \
 9359|  73.4k|    }
 9360|       |
 9361|  73.4k|    monostate monostate_val{};
 9362|       |
 9363|  73.4k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 73.4k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 73.4k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 73.4k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 73.4k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 73.4k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 73.4k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 73.4k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 73.4k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 73.4k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 73.4k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 73.4k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 73.4k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 73.4k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 73.4k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 73.4k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 73.4k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 73.4k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 73.4k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 73.4k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 73.4k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 73.4k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 73.4k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 73.4k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 73.4k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 73.4k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  73.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 73.4k, False: 0]
  ------------------
 9443|  73.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.4k|    }                                                                  \
  |  | 9357|  73.4k|    else {                                                             \
  |  | 9358|  73.4k|        return vis(monostate_val);                                     \
  |  | 9359|  73.4k|    }
  ------------------
 9444|  73.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 73.4k]
  ------------------
 9445|  73.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.4k|    }                                                                  \
  |  | 9357|  73.4k|    else {                                                             \
  |  | 9358|  73.4k|        return vis(monostate_val);                                     \
  |  | 9359|  73.4k|    }
  ------------------
 9446|  73.4k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 73.4k]
  ------------------
 9447|  73.4k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  73.4k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  73.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.4k|    }                                                                  \
  |  | 9357|  73.4k|    else {                                                             \
  |  | 9358|  73.4k|        return vis(monostate_val);                                     \
  |  | 9359|  73.4k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  73.4k|        }
 9454|       |
 9455|  73.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 73.4k]
  ------------------
 9456|  73.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  73.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  73.4k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 73.4k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 73.4k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  73.4k|            SCN_CLANG_POP
 9473|  73.4k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|  95.7k|        : m_format{format},
 6362|  95.7k|          m_next_arg_id{next_arg_id},
 6363|  95.7k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  95.7k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  95.7k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  95.7k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  95.7k|    {
 6369|  95.7k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  95.7k|    {
 3089|  95.7k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  95.7k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  95.7k|    {
 3055|  95.7k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  95.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  95.7k|{
 7878|  95.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  95.7k|    handler.check_args_exhausted();
 7880|  95.7k|    return handler.get_error();
 7881|  95.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  95.7k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  95.7k|    auto begin = format.data();
 7846|  95.7k|    auto it = begin;
 7847|  95.7k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   173k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 95.7k, False: 77.8k]
  ------------------
 7850|  95.7k|        const auto ch = *it++;
 7851|  95.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 95.7k, False: 0]
  ------------------
 7852|  95.7k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  95.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  95.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 17.8k, False: 77.8k]
  ------------------
 7856|  17.8k|                return;
 7857|  17.8k|            }
 7858|  95.7k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  95.7k|    }
 7869|       |
 7870|  77.8k|    handler.on_literal_text(begin, end);
 7871|  77.8k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|  95.7k|{
 7775|  95.7k|    struct id_adapter {
 7776|  95.7k|        constexpr void operator()()
 7777|  95.7k|        {
 7778|  95.7k|            arg_id = handler.on_arg_id();
 7779|  95.7k|        }
 7780|  95.7k|        constexpr void operator()(std::size_t id)
 7781|  95.7k|        {
 7782|  95.7k|            arg_id = handler.on_arg_id(id);
 7783|  95.7k|        }
 7784|       |
 7785|  95.7k|        constexpr void on_error(const char* msg)
 7786|  95.7k|        {
 7787|  95.7k|            SCN_UNLIKELY_ATTR
 7788|  95.7k|            handler.on_error(msg);
 7789|  95.7k|        }
 7790|       |
 7791|  95.7k|        Handler& handler;
 7792|  95.7k|        std::size_t arg_id;
 7793|  95.7k|    };
 7794|       |
 7795|  95.7k|    ++begin;
 7796|  95.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 95.7k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  95.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 95.7k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  95.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 95.7k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  95.7k|    else {
 7808|  95.7k|        auto adapter = id_adapter{handler, 0};
 7809|  95.7k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  95.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 95.7k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  95.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 95.7k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  95.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 95.7k, False: 0]
  ------------------
 7820|  95.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 95.7k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  95.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  95.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.15k, False: 88.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 95.7k]
  |  |  |  Branch (1039:45): [True: 7.15k, False: 88.6k]
  |  |  ------------------
  ------------------
 7826|  7.15k|                handler.on_error("Unknown format specifier");
 7827|  7.15k|                return begin;
 7828|  7.15k|            }
 7829|  95.7k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  95.7k|    }
 7836|  88.6k|    return begin + 1;
 7837|  95.7k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   152k|    {
 8919|   152k|        return m_args.get(id);
 8920|   152k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   152k|    {
 6397|   152k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   152k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   152k|        do_check_arg_id(id);
 6405|   152k|        return id;
 6406|   152k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   152k|{
 6891|   152k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   152k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   152k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  95.7k|{
 7276|  95.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  95.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 95.7k, False: 0]
  |  Branch (7277:26): [True: 0, False: 95.7k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  95.7k|    handler();
 7282|  95.7k|    return begin;
 7283|  95.7k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7224|  10.7k|{
 7225|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  10.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  10.7k|    unsigned long long value = 0;
 7229|  21.4k|    do {
 7230|  21.4k|        value *= 10;
 7231|  21.4k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  21.4k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 0, False: 21.4k]
  ------------------
 7233|  21.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|      0|            return -1;
 7235|      0|        }
 7236|  21.4k|        ++begin;
 7237|  21.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 21.4k, False: 0]
  |  Branch (7237:30): [True: 21.4k, False: 0]
  |  Branch (7237:47): [True: 10.7k, False: 10.7k]
  ------------------
 7238|  10.7k|    return static_cast<int>(value);
 7239|  10.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  95.7k|        {
 7778|  95.7k|            arg_id = handler.on_arg_id();
 7779|  95.7k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   141k|    {
 6392|   141k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   141k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|   294k|    {
 6381|   294k|        return m_format.data();
 6382|   294k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|  95.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  95.7k|    {
 7962|  95.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  95.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|  95.7k|{
 7691|  95.7k|    auto do_presentation = [&]() -> const CharT* {
 7692|  95.7k|        if (*begin == CharT{'['}) {
 7693|  95.7k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  95.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  95.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  95.7k|                return begin;
 7699|  95.7k|            }
 7700|  95.7k|            handler.on_character_set_string(set);
 7701|  95.7k|            return begin;
 7702|  95.7k|        }
 7703|  95.7k|        if (*begin == CharT{'/'}) {
 7704|  95.7k|            return parse_presentation_regex(begin, end, handler);
 7705|  95.7k|        }
 7706|  95.7k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  95.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  95.7k|            handler.on_error("Invalid type specifier in format string");
 7709|  95.7k|            return begin;
 7710|  95.7k|        }
 7711|  95.7k|        handler.on_type(type);
 7712|  95.7k|        return begin;
 7713|  95.7k|    };
 7714|       |
 7715|  95.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 95.7k, False: 0]
  |  Branch (7715:28): [True: 83.6k, False: 12.1k]
  ------------------
 7716|  95.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 83.6k, False: 0]
  |  Branch (7716:36): [True: 80.0k, False: 3.57k]
  ------------------
 7717|  80.0k|        return do_presentation();
 7718|  80.0k|    }
 7719|       |
 7720|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  15.6k|    begin = parse_align(begin, end, handler);
 7726|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  15.6k|    begin = parse_width(begin, end, handler);
 7732|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  15.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 15.6k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  15.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 3.57k, False: 12.1k]
  ------------------
 7751|  3.57k|        handler.on_localized();
 7752|  3.57k|        ++begin;
 7753|  3.57k|    }
 7754|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  15.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 15.6k, False: 0]
  |  Branch (7759:25): [True: 12.1k, False: 3.57k]
  ------------------
 7760|  12.1k|        do_presentation();
 7761|  12.1k|    }
 7762|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  15.6k|    return begin;
 7768|  15.6k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|   134k|{
 7340|   134k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 129k, False: 5.36k]
  |  Branch (7340:33): [True: 129k, False: 0]
  ------------------
 7341|   134k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 5.36k, False: 0]
  |  Branch (7341:33): [True: 5.36k, False: 0]
  ------------------
 7342|   134k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|  92.1k|    auto do_presentation = [&]() -> const CharT* {
 7692|  92.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 4.96k, False: 87.2k]
  ------------------
 7693|  4.96k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  4.96k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  4.96k|            handler.on_character_set_string(set);
 7701|  4.96k|            return begin;
 7702|  4.96k|        }
 7703|  87.2k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 87.2k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|  87.2k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  87.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  87.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 83.6k]
  |  |  ------------------
  ------------------
 7708|  3.57k|            handler.on_error("Invalid type specifier in format string");
 7709|  3.57k|            return begin;
 7710|  3.57k|        }
 7711|  83.6k|        handler.on_type(type);
 7712|  83.6k|        return begin;
 7713|  87.2k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  4.96k|{
 7530|  4.96k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  4.96k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  4.96k|    auto start = begin;
 7534|  4.96k|    ++begin;
 7535|       |
 7536|  4.96k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  4.96k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 4.96k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  4.96k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 4.96k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  14.9k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 14.9k, False: 0]
  ------------------
 7561|  14.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  14.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 4.96k, False: 9.93k]
  ------------------
 7566|  4.96k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  4.96k|        }
 7568|       |
 7569|  9.93k|        parse_presentation_set_literal(begin, end, handler);
 7570|  9.93k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  4.96k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7493|  9.93k|{
 7494|  9.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  9.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  9.93k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  9.93k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.93k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  9.93k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 9.93k, False: 0]
  |  Branch (7501:25): [True: 9.93k, False: 0]
  |  Branch (7501:49): [True: 9.93k, False: 0]
  ------------------
 7502|  9.93k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 9.93k, False: 0]
  ------------------
 7503|  9.93k|        ++begin;
 7504|       |
 7505|  9.93k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  9.93k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.93k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  9.93k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.93k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  9.93k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  9.93k|        return;
 7519|  9.93k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7469|  19.8k|{
 7470|  19.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  19.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  19.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 19.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 19.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 19.8k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  19.8k|    const auto cp =
 7479|  19.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  19.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 19.8k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  19.8k|    begin += len;
 7486|  19.8k|    return cp;
 7487|  19.8k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  7.45k|    {
 7184|  7.45k|        m_specs.charset_string_data = fmt.data();
 7185|  7.45k|        m_specs.charset_string_size = fmt.size();
 7186|  7.45k|        on_type(presentation_type::string_set);
 7187|  7.45k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|   139k|{
 7288|   139k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 139k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 139k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 139k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 139k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 139k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 139k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 139k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 139k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 139k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 139k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|      0|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 0, False: 139k]
  ------------------
 7307|      0|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 139k]
  ------------------
 7308|      0|            return presentation_type::float_hex;
 7309|      0|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 0, False: 139k]
  ------------------
 7310|      0|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 139k]
  ------------------
 7311|      0|            return presentation_type::float_scientific;
 7312|      0|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 0, False: 139k]
  ------------------
 7313|      0|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 139k]
  ------------------
 7314|      0|            return presentation_type::float_fixed;
 7315|      0|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 0, False: 139k]
  ------------------
 7316|      0|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 139k]
  ------------------
 7317|      0|            return presentation_type::float_general;
 7318|   129k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 129k, False: 10.7k]
  ------------------
 7319|   129k|            return presentation_type::string;
 7320|  5.36k|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 5.36k, False: 134k]
  ------------------
 7321|  5.36k|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 139k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 139k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 139k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 139k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|  5.36k|        default:
  ------------------
  |  Branch (7332:9): [True: 5.36k, False: 134k]
  ------------------
 7333|  5.36k|            return presentation_type::none;
 7334|   139k|    }
 7335|   139k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  15.6k|{
 7365|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  15.6k|    auto check_align = [](wchar_t ch) {
 7368|  15.6k|        switch (ch) {
 7369|  15.6k|            case L'<':
 7370|  15.6k|                return align_type::left;
 7371|  15.6k|            case L'>':
 7372|  15.6k|                return align_type::right;
 7373|  15.6k|            case L'^':
 7374|  15.6k|                return align_type::center;
 7375|  15.6k|            default:
 7376|  15.6k|                return align_type::none;
 7377|  15.6k|        }
 7378|  15.6k|    };
 7379|       |
 7380|  15.6k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  15.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7382|  15.6k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  15.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  15.6k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  15.6k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  15.6k|    const auto begin_before_fill = begin;
 7392|  15.6k|    begin += potential_fill_len;
 7393|       |
 7394|  15.6k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 15.6k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  15.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  15.6k|    const auto begin_after_fill = begin;
 7400|  15.6k|    ++begin;
 7401|       |
 7402|  15.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 15.6k, False: 0]
  ------------------
 7403|  15.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  15.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 4.96k, False: 10.7k]
  ------------------
 7408|  4.96k|            return begin_before_fill;
 7409|  4.96k|        }
 7410|  15.6k|    }
 7411|       |
 7412|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 10.7k, False: 0]
  ------------------
 7413|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 10.7k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  10.7k|        return begin_before_fill;
 7418|  10.7k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  10.7k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|  23.5k|{
 7347|  23.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|  23.5k|    else {
 7352|  23.5k|        const auto lengths =
 7353|  23.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|  23.5k|            "\3\4";
 7355|  23.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|  23.5k|        return len;
 7357|  23.5k|    }
 7358|  23.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  31.3k|    auto check_align = [](wchar_t ch) {
 7368|  31.3k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 31.3k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 31.3k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 31.3k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  31.3k|            default:
  ------------------
  |  Branch (7375:13): [True: 31.3k, False: 0]
  ------------------
 7376|  31.3k|                return align_type::none;
 7377|  31.3k|        }
 7378|  31.3k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|  15.6k|{
 7430|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  15.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 15.6k, False: 0]
  |  Branch (7432:33): [True: 7.15k, False: 8.54k]
  ------------------
 7433|  7.15k|        int width = parse_simple_int(begin, end);
 7434|  7.15k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  7.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 7.15k, False: 0]
  |  |  ------------------
  ------------------
 7435|  7.15k|            handler.on_width(width);
 7436|  7.15k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  7.15k|    }
 7442|  15.6k|    return begin;
 7443|  15.6k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|  3.57k|    {
 7967|  3.57k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  3.57k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 3.57k, False: 0]
  ------------------
 7969|  3.57k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 3.57k, False: 0]
  ------------------
 7970|  3.57k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 3.57k, False: 0]
  ------------------
 7971|  3.57k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 3.57k, False: 0]
  ------------------
 7972|  3.57k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  3.57k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  3.57k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  88.6k|{
 9494|  88.6k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  88.6k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  88.6k|{
 9353|  88.6k|#define SCN_VISIT(Type)                                                \
 9354|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  88.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  88.6k|    }                                                                  \
 9357|  88.6k|    else {                                                             \
 9358|  88.6k|        return vis(monostate_val);                                     \
 9359|  88.6k|    }
 9360|       |
 9361|  88.6k|    monostate monostate_val{};
 9362|       |
 9363|  88.6k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 88.6k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 88.6k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 88.6k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 88.6k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 88.6k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 88.6k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 88.6k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 88.6k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 88.6k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 88.6k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 88.6k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 88.6k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 88.6k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 88.6k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 88.6k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 88.6k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 88.6k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 88.6k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 88.6k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 88.6k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 88.6k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 88.6k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 88.6k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 88.6k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 88.6k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  44.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 44.3k, False: 44.3k]
  ------------------
 9443|  44.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  44.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  44.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  44.3k|    }                                                                  \
  |  | 9357|  44.3k|    else {                                                             \
  |  | 9358|  44.3k|        return vis(monostate_val);                                     \
  |  | 9359|  44.3k|    }
  ------------------
 9444|  44.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 88.6k]
  ------------------
 9445|  44.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  44.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  44.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  44.3k|    }                                                                  \
  |  | 9357|  44.3k|    else {                                                             \
  |  | 9358|  44.3k|        return vis(monostate_val);                                     \
  |  | 9359|  44.3k|    }
  ------------------
 9446|  88.6k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 44.3k, False: 44.3k]
  ------------------
 9447|  88.6k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  88.6k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  88.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  88.6k|    }                                                                  \
  |  | 9357|  88.6k|    else {                                                             \
  |  | 9358|  88.6k|        return vis(monostate_val);                                     \
  |  | 9359|  88.6k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  88.6k|        }
 9454|       |
 9455|  88.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 88.6k]
  ------------------
 9456|  88.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  88.6k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  88.6k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 88.6k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 88.6k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  88.6k|            SCN_CLANG_POP
 9473|  88.6k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|  56.8k|        : m_format{format},
 6362|  56.8k|          m_next_arg_id{next_arg_id},
 6363|  56.8k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  56.8k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  56.8k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  56.8k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  56.8k|    {
 6369|  56.8k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  56.8k|{
 7878|  56.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  56.8k|    handler.check_args_exhausted();
 7880|  56.8k|    return handler.get_error();
 7881|  56.8k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  56.8k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  56.8k|    auto begin = format.data();
 7846|  56.8k|    auto it = begin;
 7847|  56.8k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   104k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 56.8k, False: 47.8k]
  ------------------
 7850|  56.8k|        const auto ch = *it++;
 7851|  56.8k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 56.8k, False: 0]
  ------------------
 7852|  56.8k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  56.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  56.8k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 8.94k, False: 47.8k]
  ------------------
 7856|  8.94k|                return;
 7857|  8.94k|            }
 7858|  56.8k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  56.8k|    }
 7869|       |
 7870|  47.8k|    handler.on_literal_text(begin, end);
 7871|  47.8k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|  47.8k|    {
 9058|  47.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  47.8k|    static_cast<    \
  |  | 1109|  47.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|  47.8k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|  56.8k|{
 7775|  56.8k|    struct id_adapter {
 7776|  56.8k|        constexpr void operator()()
 7777|  56.8k|        {
 7778|  56.8k|            arg_id = handler.on_arg_id();
 7779|  56.8k|        }
 7780|  56.8k|        constexpr void operator()(std::size_t id)
 7781|  56.8k|        {
 7782|  56.8k|            arg_id = handler.on_arg_id(id);
 7783|  56.8k|        }
 7784|       |
 7785|  56.8k|        constexpr void on_error(const char* msg)
 7786|  56.8k|        {
 7787|  56.8k|            SCN_UNLIKELY_ATTR
 7788|  56.8k|            handler.on_error(msg);
 7789|  56.8k|        }
 7790|       |
 7791|  56.8k|        Handler& handler;
 7792|  56.8k|        std::size_t arg_id;
 7793|  56.8k|    };
 7794|       |
 7795|  56.8k|    ++begin;
 7796|  56.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  56.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 56.8k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  56.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 56.8k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  56.8k|    else {
 7808|  56.8k|        auto adapter = id_adapter{handler, 0};
 7809|  56.8k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  56.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  56.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 56.8k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  56.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 56.8k, False: 0]
  ------------------
 7820|  56.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  56.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  56.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 53.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 56.8k]
  |  |  |  Branch (1039:45): [True: 3.57k, False: 53.2k]
  |  |  ------------------
  ------------------
 7826|  3.57k|                handler.on_error("Unknown format specifier");
 7827|  3.57k|                return begin;
 7828|  3.57k|            }
 7829|  56.8k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  56.8k|    }
 7836|  53.2k|    return begin + 1;
 7837|  56.8k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  56.8k|{
 7276|  56.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  56.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  56.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  56.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 56.8k, False: 0]
  |  Branch (7277:26): [True: 0, False: 56.8k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  56.8k|    handler();
 7282|  56.8k|    return begin;
 7283|  56.8k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  56.8k|        {
 7778|  56.8k|            arg_id = handler.on_arg_id();
 7779|  56.8k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|  56.8k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  56.8k|    {
 7962|  56.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  56.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  56.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  56.8k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|  56.8k|{
 7691|  56.8k|    auto do_presentation = [&]() -> const CharT* {
 7692|  56.8k|        if (*begin == CharT{'['}) {
 7693|  56.8k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  56.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  56.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  56.8k|                return begin;
 7699|  56.8k|            }
 7700|  56.8k|            handler.on_character_set_string(set);
 7701|  56.8k|            return begin;
 7702|  56.8k|        }
 7703|  56.8k|        if (*begin == CharT{'/'}) {
 7704|  56.8k|            return parse_presentation_regex(begin, end, handler);
 7705|  56.8k|        }
 7706|  56.8k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  56.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  56.8k|            handler.on_error("Invalid type specifier in format string");
 7709|  56.8k|            return begin;
 7710|  56.8k|        }
 7711|  56.8k|        handler.on_type(type);
 7712|  56.8k|        return begin;
 7713|  56.8k|    };
 7714|       |
 7715|  56.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 56.8k, False: 0]
  |  Branch (7715:28): [True: 50.7k, False: 6.06k]
  ------------------
 7716|  56.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 50.7k, False: 0]
  |  Branch (7716:36): [True: 48.9k, False: 1.78k]
  ------------------
 7717|  48.9k|        return do_presentation();
 7718|  48.9k|    }
 7719|       |
 7720|  7.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  7.84k|    begin = parse_align(begin, end, handler);
 7726|  7.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  7.84k|    begin = parse_width(begin, end, handler);
 7732|  7.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  7.84k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 7.84k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  7.84k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 1.78k, False: 6.06k]
  ------------------
 7751|  1.78k|        handler.on_localized();
 7752|  1.78k|        ++begin;
 7753|  1.78k|    }
 7754|  7.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  7.84k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 7.84k, False: 0]
  |  Branch (7759:25): [True: 6.06k, False: 1.78k]
  ------------------
 7760|  6.06k|        do_presentation();
 7761|  6.06k|    }
 7762|  7.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  7.84k|    return begin;
 7768|  7.84k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|  55.0k|    auto do_presentation = [&]() -> const CharT* {
 7692|  55.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 2.48k, False: 52.5k]
  ------------------
 7693|  2.48k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  2.48k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.48k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  2.48k|            handler.on_character_set_string(set);
 7701|  2.48k|            return begin;
 7702|  2.48k|        }
 7703|  52.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 52.5k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|  52.5k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  52.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 50.7k]
  |  |  ------------------
  ------------------
 7708|  1.78k|            handler.on_error("Invalid type specifier in format string");
 7709|  1.78k|            return begin;
 7710|  1.78k|        }
 7711|  50.7k|        handler.on_type(type);
 7712|  50.7k|        return begin;
 7713|  52.5k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7529|  2.48k|{
 7530|  2.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  2.48k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  2.48k|    auto start = begin;
 7534|  2.48k|    ++begin;
 7535|       |
 7536|  2.48k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.48k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  2.48k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 2.48k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  2.48k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 2.48k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  7.45k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 7.45k, False: 0]
  ------------------
 7561|  7.45k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  7.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.45k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  7.45k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 2.48k, False: 4.96k]
  ------------------
 7566|  2.48k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  2.48k|        }
 7568|       |
 7569|  4.96k|        parse_presentation_set_literal(begin, end, handler);
 7570|  4.96k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  2.48k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7493|  4.96k|{
 7494|  4.96k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  4.96k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  4.96k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  4.96k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 4.96k, False: 0]
  |  Branch (7501:25): [True: 4.96k, False: 0]
  |  Branch (7501:49): [True: 4.96k, False: 0]
  ------------------
 7502|  4.96k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 4.96k, False: 0]
  ------------------
 7503|  4.96k|        ++begin;
 7504|       |
 7505|  4.96k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  4.96k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  4.96k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  4.96k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  4.96k|        return;
 7519|  4.96k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7469|  9.93k|{
 7470|  9.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  9.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  9.93k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  9.93k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.93k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.93k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.93k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  9.93k|    const auto cp =
 7479|  9.93k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  9.93k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.93k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  9.93k|    begin += len;
 7486|  9.93k|    return cp;
 7487|  9.93k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|  7.84k|{
 7365|  7.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  7.84k|    auto check_align = [](wchar_t ch) {
 7368|  7.84k|        switch (ch) {
 7369|  7.84k|            case L'<':
 7370|  7.84k|                return align_type::left;
 7371|  7.84k|            case L'>':
 7372|  7.84k|                return align_type::right;
 7373|  7.84k|            case L'^':
 7374|  7.84k|                return align_type::center;
 7375|  7.84k|            default:
 7376|  7.84k|                return align_type::none;
 7377|  7.84k|        }
 7378|  7.84k|    };
 7379|       |
 7380|  7.84k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  7.84k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  |  Branch (1039:45): [True: 0, False: 7.84k]
  |  |  |  Branch (1039:45): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7382|  7.84k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  7.84k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  7.84k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  7.84k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  7.84k|    const auto begin_before_fill = begin;
 7392|  7.84k|    begin += potential_fill_len;
 7393|       |
 7394|  7.84k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 7.84k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  7.84k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  7.84k|    const auto begin_after_fill = begin;
 7400|  7.84k|    ++begin;
 7401|       |
 7402|  7.84k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 7.84k, False: 0]
  ------------------
 7403|  7.84k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.84k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  7.84k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 2.48k, False: 5.36k]
  ------------------
 7408|  2.48k|            return begin_before_fill;
 7409|  2.48k|        }
 7410|  7.84k|    }
 7411|       |
 7412|  5.36k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 5.36k, False: 0]
  ------------------
 7413|  5.36k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 5.36k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  5.36k|        return begin_before_fill;
 7418|  5.36k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  5.36k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|  15.6k|    auto check_align = [](wchar_t ch) {
 7368|  15.6k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 15.6k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 15.6k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 15.6k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  15.6k|            default:
  ------------------
  |  Branch (7375:13): [True: 15.6k, False: 0]
  ------------------
 7376|  15.6k|                return align_type::none;
 7377|  15.6k|        }
 7378|  15.6k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|  7.84k|{
 7430|  7.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  7.84k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 7.84k, False: 0]
  |  Branch (7432:33): [True: 3.57k, False: 4.27k]
  ------------------
 7433|  3.57k|        int width = parse_simple_int(begin, end);
 7434|  3.57k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  3.57k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 3.57k, False: 0]
  |  |  ------------------
  ------------------
 7435|  3.57k|            handler.on_width(width);
 7436|  3.57k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  3.57k|    }
 7442|  7.84k|    return begin;
 7443|  7.84k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|  1.78k|    {
 7967|  1.78k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  1.78k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 1.78k, False: 0]
  ------------------
 7969|  1.78k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 1.78k, False: 0]
  ------------------
 7970|  1.78k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 1.78k, False: 0]
  ------------------
 7971|  1.78k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 1.78k, False: 0]
  ------------------
 7972|  1.78k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  1.78k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  1.78k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|  53.2k|{
 9494|  53.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  53.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  53.2k|{
 9353|  53.2k|#define SCN_VISIT(Type)                                                \
 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  53.2k|    }                                                                  \
 9357|  53.2k|    else {                                                             \
 9358|  53.2k|        return vis(monostate_val);                                     \
 9359|  53.2k|    }
 9360|       |
 9361|  53.2k|    monostate monostate_val{};
 9362|       |
 9363|  53.2k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 53.2k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 53.2k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 53.2k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 53.2k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 53.2k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 53.2k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 53.2k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 53.2k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 53.2k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 53.2k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 53.2k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 53.2k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 53.2k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 53.2k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 53.2k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 53.2k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 53.2k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 53.2k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 53.2k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 53.2k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 53.2k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 53.2k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 53.2k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 53.2k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 53.2k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  53.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 53.2k, False: 0]
  ------------------
 9443|  53.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9444|  53.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 53.2k]
  ------------------
 9445|  53.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9446|  53.2k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 53.2k]
  ------------------
 9447|  53.2k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  53.2k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  53.2k|        }
 9454|       |
 9455|  53.2k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 53.2k]
  ------------------
 9456|  53.2k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  53.2k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  53.2k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 53.2k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 53.2k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  53.2k|            SCN_CLANG_POP
 9473|  53.2k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  11.6k|    {
 4370|  11.6k|        return sync(0);
 4371|  11.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|  1.80M|    {
 6263|  1.80M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.80M|        return static_cast<std::size_t>(m_desc &
 6268|  1.80M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.80M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|  3.61M|    {
 6289|  3.61M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  3.61M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|  1.80M|    {
 6231|  1.80M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.80M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.80M|        const auto t = type(id);
 6243|  1.80M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.80M|        basic_scan_arg<Context> arg;
 6248|  1.80M|        arg.m_type = t;
 6249|  1.80M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.80M, False: 0]
  ------------------
 6250|  1.80M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.80M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.80M|        return arg;
 6256|  1.80M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|  1.80M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.80M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.80M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.80M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.80M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|  1.80M|    {
 6293|  1.80M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.80M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  3.15M|    {
 6047|  3.15M|        return m_type != detail::arg_type::none_type;
 6048|  3.15M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   883k|{
 9494|   883k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   883k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   883k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   883k|{
 9353|   883k|#define SCN_VISIT(Type)                                                \
 9354|   883k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   883k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   883k|    }                                                                  \
 9357|   883k|    else {                                                             \
 9358|   883k|        return vis(monostate_val);                                     \
 9359|   883k|    }
 9360|       |
 9361|   883k|    monostate monostate_val{};
 9362|       |
 9363|   883k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 883k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 883k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 883k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 883k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 883k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 883k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 883k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 883k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 883k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 883k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 883k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 883k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 883k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 883k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 883k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 883k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 883k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 883k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 883k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 883k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 883k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 883k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 883k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 883k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 883k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 883k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   441k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 441k, False: 441k]
  ------------------
 9445|   441k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   441k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   441k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   441k|    }                                                                  \
  |  | 9357|   441k|    else {                                                             \
  |  | 9358|   441k|        return vis(monostate_val);                                     \
  |  | 9359|   441k|    }
  ------------------
 9446|   883k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 441k, False: 441k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   883k|            else {
 9451|   883k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   883k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   883k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   883k|    }                                                                  \
  |  | 9357|   883k|    else {                                                             \
  |  | 9358|   883k|        return vis(monostate_val);                                     \
  |  | 9359|   883k|    }
  ------------------
 9452|   883k|            }
 9453|   883k|        }
 9454|       |
 9455|   883k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 883k]
  ------------------
 9456|   883k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   883k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   883k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 883k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 883k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   883k|            SCN_CLANG_POP
 9473|   883k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  4.08M|{
 6092|  4.08M|    return arg.m_type;
 6093|  4.08M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  2.22M|{
 6104|  2.22M|    return arg.m_value;
 6105|  2.22M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   308k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   308k|    static_cast<    \
  |  | 1109|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   308k|    {
 9021|   308k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   617k|        : m_format{format},
 6362|   617k|          m_next_arg_id{next_arg_id},
 6363|   617k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   617k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   617k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   617k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   617k|    {
 6369|   617k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   617k|    {
 3089|   617k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   617k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   617k|    {
 3055|   617k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   617k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   617k|{
 7878|   617k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   617k|    handler.check_args_exhausted();
 7880|   617k|    return handler.get_error();
 7881|   617k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   617k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   617k|    auto begin = format.data();
 7846|   617k|    auto it = begin;
 7847|   617k|    const auto end = format.data() + format.size();
 7848|       |
 7849|  1.19M|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 617k, False: 581k]
  ------------------
 7850|   617k|        const auto ch = *it++;
 7851|   617k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 617k, False: 0]
  ------------------
 7852|   617k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   617k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   617k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 35.7k, False: 581k]
  ------------------
 7856|  35.7k|                return;
 7857|  35.7k|            }
 7858|   617k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   617k|    }
 7869|       |
 7870|   581k|    handler.on_literal_text(begin, end);
 7871|   581k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   617k|{
 7775|   617k|    struct id_adapter {
 7776|   617k|        constexpr void operator()()
 7777|   617k|        {
 7778|   617k|            arg_id = handler.on_arg_id();
 7779|   617k|        }
 7780|   617k|        constexpr void operator()(std::size_t id)
 7781|   617k|        {
 7782|   617k|            arg_id = handler.on_arg_id(id);
 7783|   617k|        }
 7784|       |
 7785|   617k|        constexpr void on_error(const char* msg)
 7786|   617k|        {
 7787|   617k|            SCN_UNLIKELY_ATTR
 7788|   617k|            handler.on_error(msg);
 7789|   617k|        }
 7790|       |
 7791|   617k|        Handler& handler;
 7792|   617k|        std::size_t arg_id;
 7793|   617k|    };
 7794|       |
 7795|   617k|    ++begin;
 7796|   617k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   617k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 617k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   617k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 617k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   617k|    else {
 7808|   617k|        auto adapter = id_adapter{handler, 0};
 7809|   617k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   617k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   617k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 617k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   617k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 617k, False: 0]
  ------------------
 7820|   617k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   617k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   617k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.3k, False: 603k]
  |  |  |  Branch (1039:45): [True: 0, False: 617k]
  |  |  |  Branch (1039:45): [True: 14.3k, False: 603k]
  |  |  ------------------
  ------------------
 7826|  14.3k|                handler.on_error("Unknown format specifier");
 7827|  14.3k|                return begin;
 7828|  14.3k|            }
 7829|   617k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   617k|    }
 7836|   603k|    return begin + 1;
 7837|   617k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   926k|    {
 8919|   926k|        return m_args.get(id);
 8920|   926k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   926k|    {
 6397|   926k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 926k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   926k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   926k|        do_check_arg_id(id);
 6405|   926k|        return id;
 6406|   926k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   926k|{
 6891|   926k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   926k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   926k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   617k|{
 7276|   617k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   617k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 617k, False: 0]
  |  Branch (7277:26): [True: 0, False: 617k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   617k|    handler();
 7282|   617k|    return begin;
 7283|   617k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7224|  21.4k|{
 7225|  21.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  21.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  21.4k|    unsigned long long value = 0;
 7229|  42.9k|    do {
 7230|  42.9k|        value *= 10;
 7231|  42.9k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  42.9k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 0, False: 42.9k]
  ------------------
 7233|  42.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|      0|            return -1;
 7235|      0|        }
 7236|  42.9k|        ++begin;
 7237|  42.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 42.9k, False: 0]
  |  Branch (7237:30): [True: 42.9k, False: 0]
  |  Branch (7237:47): [True: 21.4k, False: 21.4k]
  ------------------
 7238|  21.4k|    return static_cast<int>(value);
 7239|  21.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   617k|        {
 7778|   617k|            arg_id = handler.on_arg_id();
 7779|   617k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   904k|    {
 6392|   904k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   904k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   750k|{
 4709|   750k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 750k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   750k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   750k|                            ranges::default_sentinel};
 4715|   750k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   750k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   750k|    {
 4473|   750k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   750k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   750k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  1.83M|    {
 6381|  1.83M|        return m_format.data();
 6382|  1.83M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   617k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   617k|    {
 7962|   617k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   617k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   617k|{
 7691|   617k|    auto do_presentation = [&]() -> const CharT* {
 7692|   617k|        if (*begin == CharT{'['}) {
 7693|   617k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   617k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   617k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   617k|                return begin;
 7699|   617k|            }
 7700|   617k|            handler.on_character_set_string(set);
 7701|   617k|            return begin;
 7702|   617k|        }
 7703|   617k|        if (*begin == CharT{'/'}) {
 7704|   617k|            return parse_presentation_regex(begin, end, handler);
 7705|   617k|        }
 7706|   617k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   617k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   617k|            handler.on_error("Invalid type specifier in format string");
 7709|   617k|            return begin;
 7710|   617k|        }
 7711|   617k|        handler.on_type(type);
 7712|   617k|        return begin;
 7713|   617k|    };
 7714|       |
 7715|   617k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 617k, False: 0]
  |  Branch (7715:28): [True: 595k, False: 21.6k]
  ------------------
 7716|   617k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 595k, False: 0]
  |  Branch (7716:36): [True: 588k, False: 7.15k]
  ------------------
 7717|   588k|        return do_presentation();
 7718|   588k|    }
 7719|       |
 7720|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  28.8k|    begin = parse_align(begin, end, handler);
 7726|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  28.8k|    begin = parse_width(begin, end, handler);
 7732|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  28.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 28.8k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  28.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 7.15k, False: 21.6k]
  ------------------
 7751|  7.15k|        handler.on_localized();
 7752|  7.15k|        ++begin;
 7753|  7.15k|    }
 7754|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  28.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 28.8k, False: 0]
  |  Branch (7759:25): [True: 21.6k, False: 7.15k]
  ------------------
 7760|  21.6k|        do_presentation();
 7761|  21.6k|    }
 7762|  28.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  28.8k|    return begin;
 7768|  28.8k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   893k|{
 7340|   893k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 883k, False: 10.7k]
  |  Branch (7340:33): [True: 883k, False: 0]
  ------------------
 7341|   893k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 10.7k, False: 0]
  |  Branch (7341:33): [True: 10.7k, False: 0]
  ------------------
 7342|   893k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   610k|    auto do_presentation = [&]() -> const CharT* {
 7692|   610k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 7.38k, False: 603k]
  ------------------
 7693|  7.38k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  7.38k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  7.38k|            handler.on_character_set_string(set);
 7701|  7.38k|            return begin;
 7702|  7.38k|        }
 7703|   603k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 603k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   603k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   603k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   603k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.15k, False: 595k]
  |  |  ------------------
  ------------------
 7708|  7.15k|            handler.on_error("Invalid type specifier in format string");
 7709|  7.15k|            return begin;
 7710|  7.15k|        }
 7711|   595k|        handler.on_type(type);
 7712|   595k|        return begin;
 7713|   603k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  7.38k|{
 7530|  7.38k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  7.38k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  7.38k|    auto start = begin;
 7534|  7.38k|    ++begin;
 7535|       |
 7536|  7.38k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  7.38k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 7.38k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  7.38k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 7.38k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  22.1k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 22.1k, False: 0]
  ------------------
 7561|  22.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  22.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22.1k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  22.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 7.38k, False: 14.7k]
  ------------------
 7566|  7.38k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  7.38k|        }
 7568|       |
 7569|  14.7k|        parse_presentation_set_literal(begin, end, handler);
 7570|  14.7k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  7.38k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7493|  14.7k|{
 7494|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  14.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  14.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  14.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 14.7k, False: 0]
  |  Branch (7501:25): [True: 14.7k, False: 0]
  |  Branch (7501:49): [True: 14.7k, False: 0]
  ------------------
 7502|  14.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 14.7k, False: 0]
  ------------------
 7503|  14.7k|        ++begin;
 7504|       |
 7505|  14.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  14.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  14.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  14.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  14.7k|        return;
 7519|  14.7k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7469|  29.5k|{
 7470|  29.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  29.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  29.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  59.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 29.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 29.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 29.5k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  29.5k|    const auto cp =
 7479|  29.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  29.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 29.5k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  29.5k|    begin += len;
 7486|  29.5k|    return cp;
 7487|  29.5k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  11.0k|    {
 7184|  11.0k|        m_specs.charset_string_data = fmt.data();
 7185|  11.0k|        m_specs.charset_string_size = fmt.size();
 7186|  11.0k|        on_type(presentation_type::string_set);
 7187|  11.0k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   904k|{
 7288|   904k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 904k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 904k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 904k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 904k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 904k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 904k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 904k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 904k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 904k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 904k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|      0|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 0, False: 904k]
  ------------------
 7307|      0|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 904k]
  ------------------
 7308|      0|            return presentation_type::float_hex;
 7309|      0|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 0, False: 904k]
  ------------------
 7310|      0|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 904k]
  ------------------
 7311|      0|            return presentation_type::float_scientific;
 7312|      0|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 0, False: 904k]
  ------------------
 7313|      0|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 904k]
  ------------------
 7314|      0|            return presentation_type::float_fixed;
 7315|      0|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 0, False: 904k]
  ------------------
 7316|      0|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 904k]
  ------------------
 7317|      0|            return presentation_type::float_general;
 7318|   883k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 883k, False: 21.4k]
  ------------------
 7319|   883k|            return presentation_type::string;
 7320|  10.7k|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 10.7k, False: 893k]
  ------------------
 7321|  10.7k|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 904k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 904k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 904k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 904k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|  10.7k|        default:
  ------------------
  |  Branch (7332:9): [True: 10.7k, False: 893k]
  ------------------
 7333|  10.7k|            return presentation_type::none;
 7334|   904k|    }
 7335|   904k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  28.8k|{
 7365|  28.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  28.8k|    auto check_align = [](wchar_t ch) {
 7368|  28.8k|        switch (ch) {
 7369|  28.8k|            case L'<':
 7370|  28.8k|                return align_type::left;
 7371|  28.8k|            case L'>':
 7372|  28.8k|                return align_type::right;
 7373|  28.8k|            case L'^':
 7374|  28.8k|                return align_type::center;
 7375|  28.8k|            default:
 7376|  28.8k|                return align_type::none;
 7377|  28.8k|        }
 7378|  28.8k|    };
 7379|       |
 7380|  28.8k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  28.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  57.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 28.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7382|  28.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  28.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  28.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  28.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  28.8k|    const auto begin_before_fill = begin;
 7392|  28.8k|    begin += potential_fill_len;
 7393|       |
 7394|  28.8k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 28.8k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  28.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  28.8k|    const auto begin_after_fill = begin;
 7400|  28.8k|    ++begin;
 7401|       |
 7402|  28.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 28.8k, False: 0]
  ------------------
 7403|  28.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.8k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  28.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 7.38k, False: 21.4k]
  ------------------
 7408|  7.38k|            return begin_before_fill;
 7409|  7.38k|        }
 7410|  28.8k|    }
 7411|       |
 7412|  21.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 21.4k, False: 0]
  ------------------
 7413|  21.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 21.4k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  21.4k|        return begin_before_fill;
 7418|  21.4k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  21.4k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|  43.2k|{
 7347|  43.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|  43.2k|    if constexpr (sizeof(CharT) != 1) {
 7349|  43.2k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|  43.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  57.6k|    auto check_align = [](wchar_t ch) {
 7368|  57.6k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 57.6k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 57.6k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 57.6k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  57.6k|            default:
  ------------------
  |  Branch (7375:13): [True: 57.6k, False: 0]
  ------------------
 7376|  57.6k|                return align_type::none;
 7377|  57.6k|        }
 7378|  57.6k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  28.8k|{
 7430|  28.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  28.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 28.8k, False: 0]
  |  Branch (7432:33): [True: 14.3k, False: 14.5k]
  ------------------
 7433|  14.3k|        int width = parse_simple_int(begin, end);
 7434|  14.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  14.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 14.3k, False: 0]
  |  |  ------------------
  ------------------
 7435|  14.3k|            handler.on_width(width);
 7436|  14.3k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  14.3k|    }
 7442|  28.8k|    return begin;
 7443|  28.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|  7.15k|    {
 7967|  7.15k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  7.15k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 7.15k, False: 0]
  ------------------
 7969|  7.15k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 7.15k, False: 0]
  ------------------
 7970|  7.15k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 7.15k, False: 0]
  ------------------
 7971|  7.15k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 7.15k, False: 0]
  ------------------
 7972|  7.15k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  7.15k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  7.15k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   603k|{
 9494|   603k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   603k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   603k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   603k|{
 9353|   603k|#define SCN_VISIT(Type)                                                \
 9354|   603k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   603k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   603k|    }                                                                  \
 9357|   603k|    else {                                                             \
 9358|   603k|        return vis(monostate_val);                                     \
 9359|   603k|    }
 9360|       |
 9361|   603k|    monostate monostate_val{};
 9362|       |
 9363|   603k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 603k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 603k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 603k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 603k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 603k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 603k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 603k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 603k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 603k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 603k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 603k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 603k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 603k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 603k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 603k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 603k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 603k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 603k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 603k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 603k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 603k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 603k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 603k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 603k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 603k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 603k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   301k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 301k, False: 301k]
  ------------------
 9445|   301k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   301k|    }                                                                  \
  |  | 9357|   301k|    else {                                                             \
  |  | 9358|   301k|        return vis(monostate_val);                                     \
  |  | 9359|   301k|    }
  ------------------
 9446|   603k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 301k, False: 301k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   603k|            else {
 9451|   603k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   603k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   603k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   603k|    }                                                                  \
  |  | 9357|   603k|    else {                                                             \
  |  | 9358|   603k|        return vis(monostate_val);                                     \
  |  | 9359|   603k|    }
  ------------------
 9452|   603k|            }
 9453|   603k|        }
 9454|       |
 9455|   603k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 603k]
  ------------------
 9456|   603k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   603k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   603k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 603k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 603k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   603k|            SCN_CLANG_POP
 9473|   603k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   441k|{
 9494|   441k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   441k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   441k|{
 9353|   441k|#define SCN_VISIT(Type)                                                \
 9354|   441k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   441k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   441k|    }                                                                  \
 9357|   441k|    else {                                                             \
 9358|   441k|        return vis(monostate_val);                                     \
 9359|   441k|    }
 9360|       |
 9361|   441k|    monostate monostate_val{};
 9362|       |
 9363|   441k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 441k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 441k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 441k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 441k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 441k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 441k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 441k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 441k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 441k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 441k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 441k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 441k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 441k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 441k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 441k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 441k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 441k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 441k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 441k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 441k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 441k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 441k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 441k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 441k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 441k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 441k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   441k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 441k, False: 0]
  ------------------
 9445|   441k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   441k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   441k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   441k|    }                                                                  \
  |  | 9357|   441k|    else {                                                             \
  |  | 9358|   441k|        return vis(monostate_val);                                     \
  |  | 9359|   441k|    }
  ------------------
 9446|   441k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 441k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   441k|            else {
 9451|   441k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   441k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   441k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   441k|    }                                                                  \
  |  | 9357|   441k|    else {                                                             \
  |  | 9358|   441k|        return vis(monostate_val);                                     \
  |  | 9359|   441k|    }
  ------------------
 9452|   441k|            }
 9453|   441k|        }
 9454|       |
 9455|   441k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 441k]
  ------------------
 9456|   441k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   441k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   441k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 441k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 441k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   441k|            SCN_CLANG_POP
 9473|   441k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   308k|        : m_format{format},
 6362|   308k|          m_next_arg_id{next_arg_id},
 6363|   308k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   308k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   308k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   308k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   308k|    {
 6369|   308k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   308k|{
 7878|   308k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   308k|    handler.check_args_exhausted();
 7880|   308k|    return handler.get_error();
 7881|   308k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   308k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   308k|    auto begin = format.data();
 7846|   308k|    auto it = begin;
 7847|   308k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   599k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 308k, False: 290k]
  ------------------
 7850|   308k|        const auto ch = *it++;
 7851|   308k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 308k, False: 0]
  ------------------
 7852|   308k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   308k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   308k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 17.8k, False: 290k]
  ------------------
 7856|  17.8k|                return;
 7857|  17.8k|            }
 7858|   308k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   308k|    }
 7869|       |
 7870|   290k|    handler.on_literal_text(begin, end);
 7871|   290k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   290k|    {
 9058|   290k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   290k|    static_cast<    \
  |  | 1109|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   290k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   308k|{
 7775|   308k|    struct id_adapter {
 7776|   308k|        constexpr void operator()()
 7777|   308k|        {
 7778|   308k|            arg_id = handler.on_arg_id();
 7779|   308k|        }
 7780|   308k|        constexpr void operator()(std::size_t id)
 7781|   308k|        {
 7782|   308k|            arg_id = handler.on_arg_id(id);
 7783|   308k|        }
 7784|       |
 7785|   308k|        constexpr void on_error(const char* msg)
 7786|   308k|        {
 7787|   308k|            SCN_UNLIKELY_ATTR
 7788|   308k|            handler.on_error(msg);
 7789|   308k|        }
 7790|       |
 7791|   308k|        Handler& handler;
 7792|   308k|        std::size_t arg_id;
 7793|   308k|    };
 7794|       |
 7795|   308k|    ++begin;
 7796|   308k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   308k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 308k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   308k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 308k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   308k|    else {
 7808|   308k|        auto adapter = id_adapter{handler, 0};
 7809|   308k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   308k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   308k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 308k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   308k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 308k, False: 0]
  ------------------
 7820|   308k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   308k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   308k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.15k, False: 301k]
  |  |  |  Branch (1039:45): [True: 0, False: 308k]
  |  |  |  Branch (1039:45): [True: 7.15k, False: 301k]
  |  |  ------------------
  ------------------
 7826|  7.15k|                handler.on_error("Unknown format specifier");
 7827|  7.15k|                return begin;
 7828|  7.15k|            }
 7829|   308k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   308k|    }
 7836|   301k|    return begin + 1;
 7837|   308k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   308k|{
 7276|   308k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   308k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 308k, False: 0]
  |  Branch (7277:26): [True: 0, False: 308k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   308k|    handler();
 7282|   308k|    return begin;
 7283|   308k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   308k|        {
 7778|   308k|            arg_id = handler.on_arg_id();
 7779|   308k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   308k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   308k|    {
 7962|   308k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   308k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   308k|{
 7691|   308k|    auto do_presentation = [&]() -> const CharT* {
 7692|   308k|        if (*begin == CharT{'['}) {
 7693|   308k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   308k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   308k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   308k|                return begin;
 7699|   308k|            }
 7700|   308k|            handler.on_character_set_string(set);
 7701|   308k|            return begin;
 7702|   308k|        }
 7703|   308k|        if (*begin == CharT{'/'}) {
 7704|   308k|            return parse_presentation_regex(begin, end, handler);
 7705|   308k|        }
 7706|   308k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   308k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   308k|            handler.on_error("Invalid type specifier in format string");
 7709|   308k|            return begin;
 7710|   308k|        }
 7711|   308k|        handler.on_type(type);
 7712|   308k|        return begin;
 7713|   308k|    };
 7714|       |
 7715|   308k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 308k, False: 0]
  |  Branch (7715:28): [True: 297k, False: 10.8k]
  ------------------
 7716|   308k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 297k, False: 0]
  |  Branch (7716:36): [True: 294k, False: 3.57k]
  ------------------
 7717|   294k|        return do_presentation();
 7718|   294k|    }
 7719|       |
 7720|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  14.4k|    begin = parse_align(begin, end, handler);
 7726|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  14.4k|    begin = parse_width(begin, end, handler);
 7732|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  14.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 14.4k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  14.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 3.57k, False: 10.8k]
  ------------------
 7751|  3.57k|        handler.on_localized();
 7752|  3.57k|        ++begin;
 7753|  3.57k|    }
 7754|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  14.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 14.4k, False: 0]
  |  Branch (7759:25): [True: 10.8k, False: 3.57k]
  ------------------
 7760|  10.8k|        do_presentation();
 7761|  10.8k|    }
 7762|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  14.4k|    return begin;
 7768|  14.4k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   305k|    auto do_presentation = [&]() -> const CharT* {
 7692|   305k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 3.69k, False: 301k]
  ------------------
 7693|  3.69k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  3.69k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.69k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  3.69k|            handler.on_character_set_string(set);
 7701|  3.69k|            return begin;
 7702|  3.69k|        }
 7703|   301k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 301k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   301k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   301k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 297k]
  |  |  ------------------
  ------------------
 7708|  3.57k|            handler.on_error("Invalid type specifier in format string");
 7709|  3.57k|            return begin;
 7710|  3.57k|        }
 7711|   297k|        handler.on_type(type);
 7712|   297k|        return begin;
 7713|   301k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7529|  3.69k|{
 7530|  3.69k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  3.69k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  3.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  3.69k|    auto start = begin;
 7534|  3.69k|    ++begin;
 7535|       |
 7536|  3.69k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.69k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  3.69k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 3.69k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  3.69k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 3.69k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  11.0k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 11.0k, False: 0]
  ------------------
 7561|  11.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 11.0k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  11.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 3.69k, False: 7.38k]
  ------------------
 7566|  3.69k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  3.69k|        }
 7568|       |
 7569|  7.38k|        parse_presentation_set_literal(begin, end, handler);
 7570|  7.38k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  3.69k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7493|  7.38k|{
 7494|  7.38k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  7.38k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  7.38k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  7.38k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 7.38k, False: 0]
  |  Branch (7501:25): [True: 7.38k, False: 0]
  |  Branch (7501:49): [True: 7.38k, False: 0]
  ------------------
 7502|  7.38k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 7.38k, False: 0]
  ------------------
 7503|  7.38k|        ++begin;
 7504|       |
 7505|  7.38k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  7.38k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  7.38k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  7.38k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  7.38k|        return;
 7519|  7.38k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7469|  14.7k|{
 7470|  14.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  14.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  14.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  14.7k|    const auto cp =
 7479|  14.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  14.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  14.7k|    begin += len;
 7486|  14.7k|    return cp;
 7487|  14.7k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|  14.4k|{
 7365|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  14.4k|    auto check_align = [](wchar_t ch) {
 7368|  14.4k|        switch (ch) {
 7369|  14.4k|            case L'<':
 7370|  14.4k|                return align_type::left;
 7371|  14.4k|            case L'>':
 7372|  14.4k|                return align_type::right;
 7373|  14.4k|            case L'^':
 7374|  14.4k|                return align_type::center;
 7375|  14.4k|            default:
 7376|  14.4k|                return align_type::none;
 7377|  14.4k|        }
 7378|  14.4k|    };
 7379|       |
 7380|  14.4k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  14.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7382|  14.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  14.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  14.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  14.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  14.4k|    const auto begin_before_fill = begin;
 7392|  14.4k|    begin += potential_fill_len;
 7393|       |
 7394|  14.4k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 14.4k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  14.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  14.4k|    const auto begin_after_fill = begin;
 7400|  14.4k|    ++begin;
 7401|       |
 7402|  14.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 14.4k, False: 0]
  ------------------
 7403|  14.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  14.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 3.69k, False: 10.7k]
  ------------------
 7408|  3.69k|            return begin_before_fill;
 7409|  3.69k|        }
 7410|  14.4k|    }
 7411|       |
 7412|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 10.7k, False: 0]
  ------------------
 7413|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 10.7k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  10.7k|        return begin_before_fill;
 7418|  10.7k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  10.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|  28.8k|    auto check_align = [](wchar_t ch) {
 7368|  28.8k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 28.8k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 28.8k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 28.8k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  28.8k|            default:
  ------------------
  |  Branch (7375:13): [True: 28.8k, False: 0]
  ------------------
 7376|  28.8k|                return align_type::none;
 7377|  28.8k|        }
 7378|  28.8k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|  14.4k|{
 7430|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  14.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 14.4k, False: 0]
  |  Branch (7432:33): [True: 7.15k, False: 7.26k]
  ------------------
 7433|  7.15k|        int width = parse_simple_int(begin, end);
 7434|  7.15k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  7.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 7.15k, False: 0]
  |  |  ------------------
  ------------------
 7435|  7.15k|            handler.on_width(width);
 7436|  7.15k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  7.15k|    }
 7442|  14.4k|    return begin;
 7443|  14.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|  3.57k|    {
 7967|  3.57k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  3.57k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 3.57k, False: 0]
  ------------------
 7969|  3.57k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 3.57k, False: 0]
  ------------------
 7970|  3.57k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 3.57k, False: 0]
  ------------------
 7971|  3.57k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 3.57k, False: 0]
  ------------------
 7972|  3.57k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  3.57k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  3.57k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   301k|{
 9494|   301k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   301k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   301k|{
 9353|   301k|#define SCN_VISIT(Type)                                                \
 9354|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   301k|    }                                                                  \
 9357|   301k|    else {                                                             \
 9358|   301k|        return vis(monostate_val);                                     \
 9359|   301k|    }
 9360|       |
 9361|   301k|    monostate monostate_val{};
 9362|       |
 9363|   301k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 301k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 301k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 301k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 301k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 301k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 301k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 301k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 301k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 301k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 301k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 301k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 301k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 301k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 301k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 301k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 301k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 301k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 301k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 301k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 301k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 301k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 301k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 301k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 301k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 301k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 301k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   301k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 301k, False: 0]
  ------------------
 9445|   301k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   301k|    }                                                                  \
  |  | 9357|   301k|    else {                                                             \
  |  | 9358|   301k|        return vis(monostate_val);                                     \
  |  | 9359|   301k|    }
  ------------------
 9446|   301k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 301k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   301k|            else {
 9451|   301k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   301k|    }                                                                  \
  |  | 9357|   301k|    else {                                                             \
  |  | 9358|   301k|        return vis(monostate_val);                                     \
  |  | 9359|   301k|    }
  ------------------
 9452|   301k|            }
 9453|   301k|        }
 9454|       |
 9455|   301k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 301k]
  ------------------
 9456|   301k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   301k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   301k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 301k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 301k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   301k|            SCN_CLANG_POP
 9473|   301k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|  23.2k|    {
 4370|  23.2k|        return sync(0);
 4371|  23.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|  64.5k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|   441k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   301k|{
   89|   301k|    auto result = make_scan_result<Source, Args...>();
   90|   301k|    fill_scan_result(result,
   91|   301k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   301k|                           make_scan_args<wscan_context>(result->values())));
   93|   301k|    return result;
   94|   301k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   603k|{
   44|   603k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   603k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   603k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   301k|{
  131|   301k|    auto result = make_scan_result<Source, Args...>();
  132|   301k|    fill_scan_result(result,
  133|   301k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   301k|                           make_scan_args<wscan_context>(result->values())));
  135|   301k|    return result;
  136|   301k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   603k|{
   60|   603k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   603k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   603k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   147k|{
  171|   147k|    auto result = make_scan_result<Source, T>();
  172|   147k|    fill_scan_result(
  173|   147k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   147k|                            detail::make_arg<wscan_context>(result->value())));
  175|   147k|    return result;
  176|   147k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   294k|{
   72|   294k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   294k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   301k|{
   89|   301k|    auto result = make_scan_result<Source, Args...>();
   90|   301k|    fill_scan_result(result,
   91|   301k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   301k|                           make_scan_args<wscan_context>(result->values())));
   93|   301k|    return result;
   94|   301k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   301k|{
  131|   301k|    auto result = make_scan_result<Source, Args...>();
  132|   301k|    fill_scan_result(result,
  133|   301k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   301k|                           make_scan_args<wscan_context>(result->values())));
  135|   301k|    return result;
  136|   301k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   147k|{
  171|   147k|    auto result = make_scan_result<Source, T>();
  172|   147k|    fill_scan_result(
  173|   147k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   147k|                            detail::make_arg<wscan_context>(result->value())));
  175|   147k|    return result;
  176|   147k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   301k|{
   89|   301k|    auto result = make_scan_result<Source, Args...>();
   90|   301k|    fill_scan_result(result,
   91|   301k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   301k|                           make_scan_args<wscan_context>(result->values())));
   93|   301k|    return result;
   94|   301k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   301k|{
   44|   301k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   301k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   301k|{
  131|   301k|    auto result = make_scan_result<Source, Args...>();
  132|   301k|    fill_scan_result(result,
  133|   301k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   301k|                           make_scan_args<wscan_context>(result->values())));
  135|   301k|    return result;
  136|   301k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   301k|{
   60|   301k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   301k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   147k|{
  171|   147k|    auto result = make_scan_result<Source, T>();
  172|   147k|    fill_scan_result(
  173|   147k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   147k|                            detail::make_arg<wscan_context>(result->value())));
  175|   147k|    return result;
  176|   147k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   147k|{
   72|   147k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   147k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.04M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.04M|{
  309|  1.04M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.04M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2935|  87.9k|{
 2936|  87.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2937|  87.9k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2943|  52.9k|{
 2944|  52.9k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2945|  52.9k|    return sync_after_vscan(source, n);
 2946|  52.9k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2953|   603k|{
 2954|   603k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2955|   603k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2961|   301k|{
 2962|   301k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2963|   301k|    return sync_after_vscan(source, n);
 2964|   301k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   317k|{
  207|   317k|    return find_classic_impl(
  208|   317k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   317k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   317k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   320k|{
  215|   320k|    return find_classic_impl(
  216|   320k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   320k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   320k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2904|  87.9k|{
 2905|  87.9k|    return vscan_internal(source, format, args);
 2906|  87.9k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2910|  52.9k|{
 2911|  52.9k|    auto n = vscan_internal(source, format, args);
 2912|  52.9k|    return sync_after_vscan(source, n);
 2913|  52.9k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2918|   603k|{
 2919|   603k|    return vscan_internal(source, format, args);
 2920|   603k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2924|   301k|{
 2925|   301k|    auto n = vscan_internal(source, format, args);
 2926|   301k|    return sync_after_vscan(source, n);
 2927|   301k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2990|  40.0k|{
 2991|  40.0k|    return vscan_value_internal(source, arg);
 2992|  40.0k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2995|  24.4k|{
 2996|  24.4k|    auto n = vscan_value_internal(source, arg);
 2997|  24.4k|    return sync_after_vscan(source, n);
 2998|  24.4k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3003|   294k|{
 3004|   294k|    return vscan_value_internal(source, arg);
 3005|   294k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|   147k|{
 3010|   147k|    auto n = vscan_value_internal(source, arg);
 3011|   147k|    return sync_after_vscan(source, n);
 3012|   147k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   317k|{
  131|   317k|    auto it = source.begin();
  132|       |
  133|   577k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 452k, False: 124k]
  ------------------
  134|   452k|        auto sv =
  135|   452k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   452k|                .substr(0, 8);
  137|       |
  138|   452k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 293k, False: 158k]
  ------------------
  139|   293k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   293k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   293k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 120k, False: 173k]
  ------------------
  142|   120k|                break;
  143|   120k|            }
  144|   173k|            continue;
  145|   293k|        }
  146|       |
  147|   471k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 384k, False: 86.6k]
  ------------------
  148|   384k|            auto tmp =
  149|   384k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   384k|            auto res = get_next_code_point(tmp);
  151|   384k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 71.7k, False: 312k]
  ------------------
  152|  71.7k|                return it;
  153|  71.7k|            }
  154|   312k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   312k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   312k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|   312k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   312k|        }
  158|   158k|    }
  159|       |
  160|   245k|    return detail::make_string_view_iterator(source, it);
  161|   317k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   741k|{
  118|   741k|    static_assert(sizeof(*source.data()) == 1);
  119|   741k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|   741k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   741k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   741k|    uint64_t word{};
  121|   741k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   741k|    return has_byte_greater(word, 127) != 0;
  124|   741k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.08M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   384k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   320k|{
  131|   320k|    auto it = source.begin();
  132|       |
  133|   399k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 289k, False: 110k]
  ------------------
  134|   289k|        auto sv =
  135|   289k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   289k|                .substr(0, 8);
  137|       |
  138|   289k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 199k, False: 89.7k]
  ------------------
  139|   199k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   199k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   199k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 124k, False: 74.6k]
  ------------------
  142|   124k|                break;
  143|   124k|            }
  144|  74.6k|            continue;
  145|   199k|        }
  146|       |
  147|   176k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 172k, False: 3.99k]
  ------------------
  148|   172k|            auto tmp =
  149|   172k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   172k|            auto res = get_next_code_point(tmp);
  151|   172k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 85.7k, False: 86.5k]
  ------------------
  152|  85.7k|                return it;
  153|  85.7k|            }
  154|  86.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  86.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  86.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  86.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  86.5k|        }
  158|  89.7k|    }
  159|       |
  160|   235k|    return detail::make_string_view_iterator(source, it);
  161|   320k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   449k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   172k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|   105k|{
 2802|   105k|    const auto argcount = args.size();
 2803|   105k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 48.9k, False: 56.8k]
  |  Branch (2803:60): [True: 48.9k, False: 0]
  ------------------
 2804|  48.9k|        auto arg = args.get(0);
 2805|  48.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  48.9k|    static_cast<    \
  |  | 1109|  48.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|  48.9k|    }
 2807|       |
 2808|  56.8k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 56.8k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|  56.8k|    SCN_UNLIKELY_ATTR
 2816|  56.8k|    {
 2817|  56.8k|        auto handler = format_handler<false, CharT>{
 2818|  56.8k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  56.8k|    static_cast<    \
  |  | 1109|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  56.8k|    static_cast<    \
  |  | 1109|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|  56.8k|        return vscan_parse_format_string(format, handler);
 2820|  56.8k|    }
 2821|  56.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|   281k|{
 2350|   281k|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 152k, False: 129k]
  ------------------
 2351|   152k|        return false;
 2352|   152k|    }
 2353|   129k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 129k, False: 0]
  |  Branch (2353:39): [True: 129k, False: 0]
  ------------------
 2354|   281k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|  73.4k|{
 2383|  73.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 73.4k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|  73.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  73.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 73.4k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|  73.4k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|  73.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  73.4k|    static_cast<    \
  |  | 1109|  73.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|  73.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  73.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  73.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  73.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.68k, False: 70.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.68k|    }                                                  \
  |  |  |  | 3957|  73.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|  70.7k|    return it.position();
 2400|  73.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2625|  95.7k|        : format_handler_base{argcount},
 2626|  95.7k|          parse_ctx{source_tag<Source&&>, format},
 2627|  95.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  95.7k|    static_cast<    \
  |  | 1109|  95.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  95.7k|    static_cast<    \
  |  | 1109|  95.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  95.7k|    {
 2629|  95.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2443|  1.07M|    format_handler_base(size_t argcount) : args_count(argcount)
 2444|  1.07M|    {
 2445|  1.07M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 2446|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2447|      0|        }
 2448|  1.07M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2576|  95.7k|        : contiguous_ctx(source, args, loc)
 2577|  95.7k|    {
 2578|  95.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  95.7k|{
 2767|  95.7k|    const auto beg = handler.get_ctx().begin();
 2768|  95.7k|    detail::parse_format_string<false>(format, handler);
 2769|  95.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 77.8k]
  |  |  ------------------
  ------------------
 2770|  17.8k|        return unexpected(err.error());
 2771|  17.8k|    }
 2772|  77.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  95.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2750|   620k|    {
 2751|   620k|        return ctx.get();
 2752|   620k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2581|   620k|    {
 2582|   620k|        return contiguous_ctx;
 2583|   620k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2632|   173k|    {
 2633|   173k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 173k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   173k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2492|  48.2k|    {
 2493|  48.2k|        error = unexpected(err);
 2494|  48.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2404|  95.7k|{
 2405|  95.7k|    auto arg = ctx.arg(id);
 2406|  95.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 95.7k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|  95.7k|    return arg;
 2410|  95.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2518|  1.07M|    {
 2519|  1.07M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return;
 2523|      0|        }
 2524|       |
 2525|  1.07M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 2526|      0|            on_error({scan_error::invalid_format_string,
 2527|      0|                      "Argument with this ID has already been scanned"});
 2528|      0|        }
 2529|       |
 2530|  1.07M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.07M, False: 0]
  |  |  ------------------
  ------------------
 2531|  1.07M|            visited_args_lower64 |= (1ull << id);
 2532|  1.07M|            return;
 2533|  1.07M|        }
 2534|       |
 2535|      0|        id -= 64;
 2536|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2537|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2502|  1.07M|    {
 2503|  1.07M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 2504|      0|            on_error({scan_error::invalid_format_string,
 2505|      0|                      "Argument ID out-of-range"});
 2506|      0|            return false;
 2507|      0|        }
 2508|       |
 2509|  1.07M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.07M, False: 0]
  |  |  ------------------
  ------------------
 2510|  1.07M|            return (visited_args_lower64 >> id) & 1ull;
 2511|  1.07M|        }
 2512|       |
 2513|      0|        id -= 64;
 2514|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2515|  1.07M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2672|  95.7k|    {
 2673|  95.7k|        return parse_ctx.next_arg_id();
 2674|  95.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2712|  95.7k|    {
 2713|  95.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  95.7k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  95.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 95.7k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|  95.7k|        auto specs = detail::format_specs{};
 2726|  95.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|  95.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|  95.7k|            detail::get_arg_type(arg)};
 2729|       |
 2730|  95.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|  95.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 95.7k]
  |  Branch (2731:29): [True: 0, False: 95.7k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|  95.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.15k, False: 88.6k]
  |  |  ------------------
  ------------------
 2738|  7.15k|            return parse_ctx.begin();
 2739|  7.15k|        }
 2740|  88.6k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|  88.6k|        on_visit_scan_arg(
 2743|  88.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|  88.6k|                                           get_ctx().locale()},
 2745|  88.6k|            arg);
 2746|  88.6k|        return parse_ctx.begin();
 2747|  95.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2422|  95.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|  95.7k|    {
 2424|  95.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2683|  88.6k|    {
 2684|  88.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 88.6k]
  |  Branch (2684:13): [True: 0, False: 88.6k]
  |  Branch (2684:29): [True: 0, False: 88.6k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|  88.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  88.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 77.8k]
  |  |  ------------------
  ------------------
 2691|  10.7k|            on_error(r.error());
 2692|  10.7k|        }
 2693|  77.8k|        else {
 2694|  77.8k|            get_ctx().advance_to(*r);
 2695|  77.8k|        }
 2696|  88.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2486|  32.1k|    {
 2487|  32.1k|        SCN_UNLIKELY_ATTR
 2488|  32.1k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2489|  32.1k|                                              msg);
 2490|  32.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2451|  1.07M|    {
 2452|  1.07M|        {
 2453|  1.07M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2453:45): [True: 0, False: 1.07M]
  ------------------
 2454|  1.07M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2454:35): [True: 0, False: 1.07M]
  ------------------
 2455|  1.07M|                                      ? std::numeric_limits<uint64_t>::max()
 2456|  1.07M|                                      : (1ull << args_count_lower64) - 1;
 2457|       |
 2458|  1.07M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2458:17): [True: 0, False: 1.07M]
  ------------------
 2459|      0|                return on_error({scan_error::invalid_format_string,
 2460|      0|                                 "Argument list not exhausted"});
 2461|      0|            }
 2462|  1.07M|        }
 2463|       |
 2464|  1.07M|        if (args_count < 64) {
  ------------------
  |  Branch (2464:13): [True: 1.07M, False: 0]
  ------------------
 2465|  1.07M|            return;
 2466|  1.07M|        }
 2467|       |
 2468|      0|        auto last_args_count = args_count - 64;
 2469|      0|        for (auto it = visited_args_upper.begin();
 2470|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2470:14): [True: 0, False: 0]
  ------------------
 2471|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2471:17): [True: 0, False: 0]
  ------------------
 2472|      0|                return on_error({scan_error::invalid_format_string,
 2473|      0|                                 "Argument list not exhausted"});
 2474|      0|            }
 2475|      0|            last_args_count -= 8;
 2476|      0|        }
 2477|       |
 2478|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2479|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2479:13): [True: 0, False: 0]
  ------------------
 2480|      0|            return on_error({scan_error::invalid_format_string,
 2481|      0|                             "Argument list not exhausted"});
 2482|      0|        }
 2483|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2497|  4.28M|    {
 2498|  4.28M|        return error;
 2499|  4.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2625|  56.8k|        : format_handler_base{argcount},
 2626|  56.8k|          parse_ctx{source_tag<Source&&>, format},
 2627|  56.8k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  56.8k|    static_cast<    \
  |  | 1109|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  56.8k|    static_cast<    \
  |  | 1109|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|  56.8k|    {
 2629|  56.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2552|  56.8k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|  56.8k|    static_cast<    \
  |  | 1109|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|  56.8k|    {
 2554|  56.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|  56.8k|{
 2767|  56.8k|    const auto beg = handler.get_ctx().begin();
 2768|  56.8k|    detail::parse_format_string<false>(format, handler);
 2769|  56.8k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.94k, False: 47.8k]
  |  |  ------------------
  ------------------
 2770|  8.94k|        return unexpected(err.error());
 2771|  8.94k|    }
 2772|  47.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|  56.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2750|   372k|    {
 2751|   372k|        return ctx.get();
 2752|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2557|   372k|    {
 2558|   372k|        return ctx;
 2559|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2632|   104k|    {
 2633|   104k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 104k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   104k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2404|  56.8k|{
 2405|  56.8k|    auto arg = ctx.arg(id);
 2406|  56.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|  56.8k|    return arg;
 2410|  56.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2672|  56.8k|    {
 2673|  56.8k|        return parse_ctx.next_arg_id();
 2674|  56.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2712|  56.8k|    {
 2713|  56.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|  56.8k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|  56.8k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 56.8k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|  56.8k|        auto specs = detail::format_specs{};
 2726|  56.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|  56.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|  56.8k|            detail::get_arg_type(arg)};
 2729|       |
 2730|  56.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|  56.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 56.8k]
  |  Branch (2731:29): [True: 0, False: 56.8k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|  56.8k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 53.2k]
  |  |  ------------------
  ------------------
 2738|  3.57k|            return parse_ctx.begin();
 2739|  3.57k|        }
 2740|  53.2k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|  53.2k|        on_visit_scan_arg(
 2743|  53.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|  53.2k|                                           get_ctx().locale()},
 2745|  53.2k|            arg);
 2746|  53.2k|        return parse_ctx.begin();
 2747|  56.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2422|  56.8k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|  56.8k|    {
 2424|  56.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|  53.2k|    {
 2684|  53.2k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 53.2k]
  |  Branch (2684:13): [True: 0, False: 53.2k]
  |  Branch (2684:29): [True: 0, False: 53.2k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|  53.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|  53.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.36k, False: 47.8k]
  |  |  ------------------
  ------------------
 2691|  5.36k|            on_error(r.error());
 2692|  5.36k|        }
 2693|  47.8k|        else {
 2694|  47.8k|            get_ctx().advance_to(*r);
 2695|  47.8k|        }
 2696|  53.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|   175k|{
 2782|   175k|    const auto argcount = args.size();
 2783|   175k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 80.0k, False: 95.7k]
  |  Branch (2783:60): [True: 80.0k, False: 0]
  ------------------
 2784|  80.0k|        auto arg = args.get(0);
 2785|  80.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  80.0k|    static_cast<    \
  |  | 1109|  80.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|  80.0k|    }
 2787|       |
 2788|  95.7k|    auto handler = format_handler<true, CharT>{
 2789|  95.7k|        ranges::subrange<const CharT*>{source.data(),
 2790|  95.7k|                                       source.data() + source.size()},
 2791|  95.7k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  95.7k|    static_cast<    \
  |  | 1109|  95.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  95.7k|    static_cast<    \
  |  | 1109|  95.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|  95.7k|    return vscan_parse_format_string(format, handler);
 2793|   175k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|   120k|{
 2363|   120k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|   120k|    auto reader =
 2369|   120k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|   120k|            ranges::subrange<const CharT*>{source.data(),
 2371|   120k|                                           source.data() + source.size()},
 2372|   120k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   120k|    static_cast<    \
  |  | 1109|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|   120k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.36k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.36k|    }                                                  \
  |  |  |  | 3957|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|   114k|    return ranges::distance(source.data(), it);
 2375|   120k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2881|   130k|{
 2882|   130k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 118k, False: 11.6k]
  |  |  ------------------
  ------------------
 2883|   118k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|   118k|    }
 2889|  11.6k|    else {
 2890|  11.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|  11.6k|    }
 2896|   130k|    return result;
 2897|   130k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|  1.20M|{
 2782|  1.20M|    const auto argcount = args.size();
 2783|  1.20M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 588k, False: 617k]
  |  Branch (2783:60): [True: 588k, False: 0]
  ------------------
 2784|   588k|        auto arg = args.get(0);
 2785|   588k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   588k|    static_cast<    \
  |  | 1109|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|   588k|    }
 2787|       |
 2788|   617k|    auto handler = format_handler<true, CharT>{
 2789|   617k|        ranges::subrange<const CharT*>{source.data(),
 2790|   617k|                                       source.data() + source.size()},
 2791|   617k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   617k|    static_cast<    \
  |  | 1109|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   617k|    static_cast<    \
  |  | 1109|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|   617k|    return vscan_parse_format_string(format, handler);
 2793|  1.20M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|  1.80M|{
 2350|  1.80M|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 926k, False: 883k]
  ------------------
 2351|   926k|        return false;
 2352|   926k|    }
 2353|   883k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 883k, False: 0]
  |  Branch (2353:39): [True: 883k, False: 0]
  ------------------
 2354|  1.80M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|   883k|{
 2363|   883k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   883k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 883k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|   883k|    auto reader =
 2369|   883k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|   883k|            ranges::subrange<const CharT*>{source.data(),
 2371|   883k|                                           source.data() + source.size()},
 2372|   883k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   883k|    static_cast<    \
  |  | 1109|   883k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|   883k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   883k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   883k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   883k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   883k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.7k, False: 872k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.7k|    }                                                  \
  |  |  |  | 3957|   883k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|   872k|    return ranges::distance(source.data(), it);
 2375|   883k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2625|   617k|        : format_handler_base{argcount},
 2626|   617k|          parse_ctx{source_tag<Source&&>, format},
 2627|   617k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   617k|    static_cast<    \
  |  | 1109|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   617k|    static_cast<    \
  |  | 1109|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   617k|    {
 2629|   617k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2576|   617k|        : contiguous_ctx(source, args, loc)
 2577|   617k|    {
 2578|   617k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   617k|{
 2767|   617k|    const auto beg = handler.get_ctx().begin();
 2768|   617k|    detail::parse_format_string<false>(format, handler);
 2769|   617k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.7k, False: 581k]
  |  |  ------------------
  ------------------
 2770|  35.7k|        return unexpected(err.error());
 2771|  35.7k|    }
 2772|   581k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   617k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2750|  4.22M|    {
 2751|  4.22M|        return ctx.get();
 2752|  4.22M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2581|  4.22M|    {
 2582|  4.22M|        return contiguous_ctx;
 2583|  4.22M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2632|  1.19M|    {
 2633|  1.19M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 1.19M]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|  1.19M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2404|   617k|{
 2405|   617k|    auto arg = ctx.arg(id);
 2406|   617k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   617k|    return arg;
 2410|   617k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2672|   617k|    {
 2673|   617k|        return parse_ctx.next_arg_id();
 2674|   617k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2712|   617k|    {
 2713|   617k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   617k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   617k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 617k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   617k|        auto specs = detail::format_specs{};
 2726|   617k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   617k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   617k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   617k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   617k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 617k]
  |  Branch (2731:29): [True: 0, False: 617k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   617k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.3k, False: 603k]
  |  |  ------------------
  ------------------
 2738|  14.3k|            return parse_ctx.begin();
 2739|  14.3k|        }
 2740|   603k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   603k|        on_visit_scan_arg(
 2743|   603k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   603k|                                           get_ctx().locale()},
 2745|   603k|            arg);
 2746|   603k|        return parse_ctx.begin();
 2747|   617k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2422|   617k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   617k|    {
 2424|   617k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2683|   603k|    {
 2684|   603k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 603k]
  |  Branch (2684:13): [True: 0, False: 603k]
  |  Branch (2684:29): [True: 0, False: 603k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   603k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   603k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   603k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   603k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.4k, False: 581k]
  |  |  ------------------
  ------------------
 2691|  21.4k|            on_error(r.error());
 2692|  21.4k|        }
 2693|   581k|        else {
 2694|   581k|            get_ctx().advance_to(*r);
 2695|   581k|        }
 2696|   603k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|   603k|{
 2802|   603k|    const auto argcount = args.size();
 2803|   603k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 294k, False: 308k]
  |  Branch (2803:60): [True: 294k, False: 0]
  ------------------
 2804|   294k|        auto arg = args.get(0);
 2805|   294k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   294k|    static_cast<    \
  |  | 1109|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|   294k|    }
 2807|       |
 2808|   308k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 308k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|   308k|    SCN_UNLIKELY_ATTR
 2816|   308k|    {
 2817|   308k|        auto handler = format_handler<false, CharT>{
 2818|   308k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   308k|    static_cast<    \
  |  | 1109|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   308k|    static_cast<    \
  |  | 1109|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|   308k|        return vscan_parse_format_string(format, handler);
 2820|   308k|    }
 2821|   308k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|   441k|{
 2383|   441k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|   441k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   441k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|   441k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|   441k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   441k|    static_cast<    \
  |  | 1109|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|   441k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   441k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.36k, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.36k|    }                                                  \
  |  |  |  | 3957|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|   436k|    return it.position();
 2400|   441k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2625|   308k|        : format_handler_base{argcount},
 2626|   308k|          parse_ctx{source_tag<Source&&>, format},
 2627|   308k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   308k|    static_cast<    \
  |  | 1109|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   308k|    static_cast<    \
  |  | 1109|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   308k|    {
 2629|   308k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2552|   308k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   308k|    static_cast<    \
  |  | 1109|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|   308k|    {
 2554|   308k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   308k|{
 2767|   308k|    const auto beg = handler.get_ctx().begin();
 2768|   308k|    detail::parse_format_string<false>(format, handler);
 2769|   308k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 290k]
  |  |  ------------------
  ------------------
 2770|  17.8k|        return unexpected(err.error());
 2771|  17.8k|    }
 2772|   290k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   308k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2750|  2.11M|    {
 2751|  2.11M|        return ctx.get();
 2752|  2.11M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2557|  2.11M|    {
 2558|  2.11M|        return ctx;
 2559|  2.11M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2632|   599k|    {
 2633|   599k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 599k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   599k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2404|   308k|{
 2405|   308k|    auto arg = ctx.arg(id);
 2406|   308k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   308k|    return arg;
 2410|   308k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2672|   308k|    {
 2673|   308k|        return parse_ctx.next_arg_id();
 2674|   308k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2712|   308k|    {
 2713|   308k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   308k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   308k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 308k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   308k|        auto specs = detail::format_specs{};
 2726|   308k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   308k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   308k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   308k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   308k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 308k]
  |  Branch (2731:29): [True: 0, False: 308k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   308k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.15k, False: 301k]
  |  |  ------------------
  ------------------
 2738|  7.15k|            return parse_ctx.begin();
 2739|  7.15k|        }
 2740|   301k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   301k|        on_visit_scan_arg(
 2743|   301k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   301k|                                           get_ctx().locale()},
 2745|   301k|            arg);
 2746|   301k|        return parse_ctx.begin();
 2747|   308k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2422|   308k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   308k|    {
 2424|   308k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|   301k|    {
 2684|   301k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 301k]
  |  Branch (2684:13): [True: 0, False: 301k]
  |  Branch (2684:29): [True: 0, False: 301k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   301k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   301k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 290k]
  |  |  ------------------
  ------------------
 2691|  10.7k|            on_error(r.error());
 2692|  10.7k|        }
 2693|   290k|        else {
 2694|   290k|            get_ctx().advance_to(*r);
 2695|   290k|        }
 2696|   301k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2881|   750k|{
 2882|   750k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   750k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 727k, False: 23.2k]
  |  |  ------------------
  ------------------
 2883|   727k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|   727k|    }
 2889|  23.2k|    else {
 2890|  23.2k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|  23.2k|    }
 2896|   750k|    return result;
 2897|   750k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  40.0k|{
 2828|  40.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  40.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|  24.4k|{
 2828|  24.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  24.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|   294k|{
 2828|   294k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|   294k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|   147k|{
 2828|   147k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|   147k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    894|{
 1462|    894|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    894|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    894|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    894|            return transcode_to_string_impl_to32(src, dest);
 1473|    894|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    894|    SCN_EXPECT(false);
  ------------------
  |  | 1104|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    894|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    894|{
 1355|    894|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    894|    auto it = src.begin();
 1358|   282k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 281k, False: 894]
  ------------------
 1359|   281k|        auto res = get_next_code_point(
 1360|   281k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   281k|                                                                 src.end()));
 1362|   281k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.65k, False: 277k]
  |  |  ------------------
  ------------------
 1363|  3.65k|            dest.push_back(DestCharT{0xfffd});
 1364|  3.65k|        }
 1365|   277k|        else {
 1366|   277k|            dest.push_back(res.value);
 1367|   277k|        }
 1368|   281k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   281k|    }
 1370|    894|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   837k|{
 1279|   837k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   837k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   837k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   837k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   837k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   837k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.3k, False: 821k]
  |  |  ------------------
  ------------------
 1283|  16.3k|        return {get_start_for_next_code_point(input),
 1284|  16.3k|                detail::invalid_code_point};
 1285|  16.3k|    }
 1286|   821k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   821k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24.5k, False: 797k]
  |  |  ------------------
  ------------------
 1287|  24.5k|        return {input.end(), detail::invalid_code_point};
 1288|  24.5k|    }
 1289|       |
 1290|   797k|    return {input.begin() + len,
 1291|   797k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   821k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  16.3k|{
 1265|  16.3k|    auto it = input.begin();
 1266|  70.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 68.3k, False: 2.06k]
  ------------------
 1267|  68.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 14.2k, False: 54.0k]
  ------------------
 1268|  14.2k|            break;
 1269|  14.2k|        }
 1270|  68.3k|    }
 1271|  16.3k|    return it;
 1272|  16.3k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3077|  16.0k|    {
 3078|  16.0k|        SCN_UNLIKELY_ATTR
 3079|  16.0k|        m_msg = msg;
 3080|  16.0k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  1.04M|    {
 3083|  1.04M|        return m_msg == nullptr;
 3084|  1.04M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.53M|{
  458|  1.53M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.53M|        static_cast<unsigned char>(ch))];
  460|  1.53M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  40.8k|{
  469|  40.8k|    return static_cast<unsigned char>(ch) <= 127;
  470|  40.8k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.5k|{
  474|  14.5k|#if WCHAR_MIN < 0
  475|  14.5k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 13.1k, False: 1.33k]
  |  Branch (475:23): [True: 9.25k, False: 3.91k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.5k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   741k|{
  539|   741k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   741k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.04M|{
  784|  4.04M|    return e != eof_error::good;
  785|  4.04M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  11.7k|{
  798|  11.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  11.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  11.7k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6097|   998k|{
 6098|   998k|    if (specs.width != 0) {
  ------------------
  |  Branch (6098:9): [True: 0, False: 998k]
  ------------------
 6099|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6099:13): [True: 0, False: 0]
  ------------------
 6100|      0|            return detail::unexpected_scan_error(
 6101|      0|                scan_error::length_too_short,
 6102|      0|                "Scanned value too narrow, width did not exceed what "
 6103|      0|                "was specified in the format string");
 6104|      0|        }
 6105|      0|    }
 6106|   998k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6106:9): [True: 0, False: 998k]
  ------------------
 6107|       |        // Ensured by take_width_view
 6108|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6109|      0|                   specs.precision);
 6110|      0|    }
 6111|   998k|    return {};
 6112|   998k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   396k|    {
  304|   396k|        ranges::advance(x, n);
  305|   396k|        return x;
  306|   396k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   396k|    {
  268|   396k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   396k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   396k|    {
  151|   396k|        i += n;
  152|   396k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.00M|    {
  108|  1.00M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.00M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.00M|    {
   87|  1.00M|        return s - i;
   88|  1.00M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.45M|    {
  108|  1.45M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.45M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.45M|    {
   87|  1.45M|        return s - i;
   88|  1.45M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   262k|    {
 3025|   262k|        return m_current;
 3026|   262k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|  1.80M|    {
 3025|  1.80M|        return m_current;
 3026|  1.80M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   124k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   124k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   124k|        auto beg = r.begin();
  991|   124k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 124k, False: 0]
  ------------------
  992|   124k|            return false;
  993|   124k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   124k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  33.3k|    {
  763|  33.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  33.3k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.45k|        : m_fptr([](storage fn,
  743|  7.45k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.45k|              cvref<T> obj = *get<T>(fn);
  745|  7.45k|              if constexpr (std::is_void_v<R>) {
  746|  7.45k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.45k|              }
  748|  7.45k|              else {
  749|  7.45k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.45k|              }
  751|  7.45k|          }),
  752|  7.45k|          m_storage(std::addressof(f))
  753|  7.45k|    {
  754|  7.45k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  16.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.6k|              else {
  749|  16.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.6k|              }
  751|  16.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  16.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.6k|        else if constexpr (std::is_object_v<T>) {
  688|  16.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.6k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.45k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.45k|        {
  662|  7.45k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  75.0M|    {
  763|  75.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  75.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  75.0M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.31M|        : m_fptr([](storage fn,
  743|  2.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.31M|              cvref<T> obj = *get<T>(fn);
  745|  2.31M|              if constexpr (std::is_void_v<R>) {
  746|  2.31M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.31M|              }
  748|  2.31M|              else {
  749|  2.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.31M|              }
  751|  2.31M|          }),
  752|  2.31M|          m_storage(std::addressof(f))
  753|  2.31M|    {
  754|  2.31M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.53M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.53M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.53M|              else {
  749|  5.53M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.53M|              }
  751|  5.53M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.53M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.53M|        else if constexpr (std::is_object_v<T>) {
  688|  5.53M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.53M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.31M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.31M|        {
  662|  2.31M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6125|  51.4k|    {
 6126|  51.4k|        const bool need_skipped_width =
 6127|  51.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 51.4k]
  |  Branch (6127:33): [True: 0, False: 51.4k]
  ------------------
 6128|  51.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|  51.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 51.4k]
  ------------------
 6132|  51.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 51.4k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|  51.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 51.4k, False: 0]
  |  Branch (6136:56): [True: 48.9k, False: 2.48k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|  48.9k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 48.9k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|  97.0k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 906, False: 48.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    906|    }                                                  \
  |  |  |  | 3957|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|  97.0k|                            make_eof_scan_error));
 6147|       |
 6148|  97.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 48.0k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|  48.0k|            return result_type{it, 0};
 6156|  97.0k|        }
 6157|       |
 6158|  2.48k|        return result_type{rng.begin(), 0};
 6159|  51.4k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  2.48k|{
 2108|  2.48k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  2.48k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.48k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  2.48k|    else {
 2079|  2.48k|        auto first = range.begin();
 2080|  5.63k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 5.56k, False: 76]
  ------------------
 2081|  5.56k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 2.40k, False: 3.15k]
  ------------------
 2082|  2.40k|                return first;
 2083|  2.40k|            }
 2084|  5.56k|        }
 2085|     76|        return first;
 2086|  2.48k|    }
 2087|  2.48k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  47.8k|    {
  108|  47.8k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  47.8k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  47.8k|    {
   94|  47.8k|        iter_difference_t<I> counter{0};
   95|   495k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 447k, False: 47.8k]
  ------------------
   96|   447k|            ++i;
   97|   447k|            ++counter;
   98|   447k|        }
   99|  47.8k|        return counter;
  100|  47.8k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   195k|{
  951|   195k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.11k, False: 193k]
  |  |  ------------------
  ------------------
  952|  2.11k|        return eof_error::eof;
  953|  2.11k|    }
  954|   193k|    return eof_error::good;
  955|   195k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.38M|{
  945|  1.38M|    return is_range_eof(r.begin(), r.end());
  946|  1.38M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.38M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.38M|    {
  938|  1.38M|        return begin == end;
  939|  1.38M|    }
  940|  1.38M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   121k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   121k|    else {
 1788|   121k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   121k|    }
 1790|   121k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   121k|    {
 1636|   121k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   121k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   121k|    {
 1720|   121k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   121k|                           ranges::common_range<Range>) {
 1737|   121k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   121k|            auto end_seg = range.end().contiguous_segment();
 1739|   121k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.08k, False: 117k]
  |  |  ------------------
  ------------------
 1740|   121k|                             detail::to_address(end_seg.end()))) {
 1741|  3.08k|                auto& str = m_storage.emplace();
 1742|  3.08k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.08k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.08k|                m_view = string_view_type{str};
 1745|  3.08k|                return;
 1746|  3.08k|            }
 1747|       |
 1748|   117k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   117k|                                                            end_seg.data());
 1750|   117k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   121k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   237k|    {
 1681|   237k|        return m_view;
 1682|   237k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   121k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6167|  47.4k|    {
 6168|  47.4k|        const bool need_skipped_width =
 6169|  47.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 47.4k]
  |  Branch (6169:33): [True: 0, False: 47.4k]
  ------------------
 6170|  47.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|  47.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 47.4k]
  ------------------
 6173|  47.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 47.4k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|  47.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 47.4k, False: 0]
  ------------------
 6182|  47.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 658, False: 46.7k]
  ------------------
 6183|  47.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 658]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|    658|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 658]
  ------------------
 6185|    658|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|  47.4k|        return result_type{rng.begin(), 0};
 6207|  47.4k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   319k|{
  951|   319k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.20k, False: 315k]
  |  |  ------------------
  ------------------
  952|  3.20k|        return eof_error::eof;
  953|  3.20k|    }
  954|   315k|    return eof_error::good;
  955|   319k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   319k|{
  945|   319k|    return is_range_eof(r.begin(), r.end());
  946|   319k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   319k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   319k|    {
  938|   319k|        return begin == end;
  939|   319k|    }
  940|   319k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   198k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   198k|                  ranges::sized_range<Range>) {
 1785|   198k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   198k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   198k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   198k|    {
 1589|   198k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.08M|    {
 1602|  1.08M|        return sv;
 1603|  1.08M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|  4.96k|{
 2108|  4.96k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  4.96k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.96k|{
 2075|  4.96k|    if constexpr (ranges::common_range<Range>) {
 2076|  4.96k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|  4.96k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   199k|{
 3098|   199k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 199k, False: 0]
  ------------------
 3099|   199k|        auto it = read_while_classic_space(range);
 3100|   199k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   199k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.11k, False: 196k]
  |  |  ------------------
  ------------------
 3102|  2.11k|            return unexpected(e);
 3103|  2.11k|        }
 3104|       |
 3105|   196k|        return it;
 3106|   199k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   199k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   199k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   199k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   199k|        auto buf = make_contiguous_buffer(range);
 2253|   199k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   199k|        return ranges::next(range.begin(),
 2255|   199k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   199k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   396k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   396k|                  ranges::sized_range<Range>) {
 1785|   396k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   396k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   396k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   396k|    {
 1589|   396k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  13.3k|    {
  304|  13.3k|        ranges::advance(x, n);
  305|  13.3k|        return x;
  306|  13.3k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   242k|    {
  268|   242k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   242k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   242k|    {
  181|   443k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 201k, False: 242k]
  ------------------
  182|   201k|            ++i;
  183|   201k|        }
  184|   242k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   120k|    {
 1686|   120k|        return m_storage.has_value();
 1687|   120k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.85k|    {
 1691|  1.85k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.85k|        return *m_storage;
 1693|  1.85k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|  53.2k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|  53.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|  53.2k|            auto rd = make_reader<T, char_type>();
 6288|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.78k, False: 51.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.78k|    }
  ------------------
 6289|       |
 6290|  51.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 51.4k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|  51.4k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|  51.4k|                return impl(rd, range, value);
 6293|  51.4k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  53.2k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5897|   231k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|       |                       std::is_same_v<T, std::wstring_view>) {
 5912|       |        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|   231k|                       std::is_same_v<T, std::wstring>) {
 5916|   231k|        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|   231k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5291|   335k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|   141k|    {
 3188|   141k|        reader_error_handler eh{};
 3189|   141k|        get_derived().check_specs_impl(specs, eh);
 3190|   141k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.36k, False: 136k]
  |  |  ------------------
  ------------------
 3191|  5.36k|            return detail::unexpected_scan_error(
 3192|  5.36k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  5.36k|        }
 3194|   136k|        return {};
 3195|   141k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3199|   141k|    {
 3200|   141k|        return static_cast<Derived&>(*this);
 3201|   141k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5295|   141k|    {
 5296|   141k|        detail::check_string_type_specs(specs, eh);
 5297|       |
 5298|   141k|        SCN_GCC_PUSH
 5299|   141k|        SCN_GCC_IGNORE("-Wswitch")
 5300|   141k|        SCN_GCC_IGNORE("-Wswitch-default")
 5301|       |
 5302|   141k|        SCN_CLANG_PUSH
 5303|   141k|        SCN_CLANG_IGNORE("-Wswitch")
 5304|   141k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5305|       |
 5306|   141k|        switch (specs.type) {
  ------------------
  |  Branch (5306:17): [True: 0, False: 141k]
  ------------------
 5307|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5307:13): [True: 0, False: 141k]
  ------------------
 5308|      0|                m_type = reader_type::word;
 5309|      0|                break;
 5310|       |
 5311|   129k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5311:13): [True: 129k, False: 12.8k]
  ------------------
 5312|   129k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5312:21): [True: 0, False: 129k]
  ------------------
 5313|   129k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5313:21): [True: 0, False: 129k]
  ------------------
 5314|      0|                    m_type = reader_type::custom_word;
 5315|      0|                }
 5316|   129k|                else {
 5317|   129k|                    m_type = reader_type::word;
 5318|   129k|                }
 5319|   129k|                break;
 5320|      0|            }
 5321|       |
 5322|  5.36k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5322:13): [True: 5.36k, False: 136k]
  ------------------
 5323|  5.36k|                m_type = reader_type::character;
 5324|  5.36k|                break;
 5325|       |
 5326|  7.45k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5326:13): [True: 7.45k, False: 134k]
  ------------------
 5327|  7.45k|                m_type = reader_type::character_set;
 5328|  7.45k|                break;
 5329|       |
 5330|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5330:13): [True: 0, False: 141k]
  ------------------
 5331|      0|                m_type = reader_type::regex;
 5332|      0|                break;
 5333|       |
 5334|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5334:13): [True: 0, False: 141k]
  ------------------
 5335|      0|                m_type = reader_type::regex_escaped;
 5336|      0|                break;
 5337|   141k|        }
 5338|       |
 5339|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5340|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5341|   141k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6212|  51.4k|    {
 6213|  51.4k|        const bool need_skipped_width =
 6214|  51.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 51.4k]
  |  Branch (6214:33): [True: 0, False: 51.4k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  51.4k|        auto it = rng.begin();
 6218|  51.4k|        std::ptrdiff_t prefix_width = 0;
 6219|  51.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 51.4k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|  51.4k|        else {
 6227|  51.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  51.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 906, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    906|    }                                                  \
  |  |  |  | 3957|  51.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|  50.5k|            std::tie(it, prefix_width) = prefix_result;
 6229|  50.5k|        }
 6230|  50.5k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  50.5k|        std::ptrdiff_t value_width = 0;
 6234|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 50.5k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|  50.5k|        else {
 6250|  50.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.67k, False: 47.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  2.67k|    }                                                  \
  |  | 3957|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  47.8k|                                             specs, value, loc));
 6252|       |
 6253|  47.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 47.8k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  47.8k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  47.8k|        std::ptrdiff_t postfix_width = 0;
 6262|  47.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 47.4k, False: 484]
  ------------------
 6263|  47.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 47.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  47.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  47.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  47.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  47.4k|                                 value_width));
 6267|  47.4k|            std::tie(it, postfix_width) = postfix_result;
 6268|  47.4k|        }
 6269|       |
 6270|  47.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  47.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 47.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  47.8k|            specs, prefix_width, value_width, postfix_width));
 6272|  47.8k|        return it;
 6273|  47.8k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5344|   454k|    {
 5345|   454k|        return m_type == reader_type::word;
 5346|   454k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   319k|{
 1242|   319k|    auto it = src.begin();
 1243|  2.08M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.77M, False: 311k]
  ------------------
 1244|  1.77M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.77M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 4.70k, False: 1.77M]
  ------------------
 1246|  4.70k|            return false;
 1247|  4.70k|        }
 1248|  1.77M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 731, False: 1.77M]
  ------------------
 1249|    731|            return false;
 1250|    731|        }
 1251|  1.77M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.77M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.77M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.66k, False: 1.76M]
  ------------------
 1254|  2.66k|            return false;
 1255|  2.66k|        }
 1256|  1.76M|        it += len;
 1257|  1.76M|    }
 1258|   311k|    return true;
 1259|   319k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|   118k|{
 3140|   118k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|   118k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 1.85k, False: 116k]
  ------------------
 3142|  1.85k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|  1.85k|    static_cast<    \
  |  | 1109|  1.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|  1.85k|        }
 3144|   116k|        else {
 3145|   116k|            dest.assign(source.view());
 3146|   116k|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|   118k|    return {};
 3153|   118k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5192|  7.45k|        {
 5193|  7.45k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5193:17): [True: 7.45k, False: 0]
  ------------------
 5194|  7.45k|                return {};
 5195|  7.45k|            }
 5196|       |
 5197|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5198|      0|            auto it = detail::to_address(charset_string.begin());
 5199|      0|            auto set = detail::parse_presentation_set(
 5200|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5201|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5202|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5203|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|       |
 5205|      0|            std::sort(nonascii.extra_ranges.begin(),
 5206|      0|                      nonascii.extra_ranges.end());
 5207|      0|            return {};
 5208|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5165|  14.9k|        {
 5166|  14.9k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5167|  14.9k|            const auto val =
 5168|  14.9k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5169|  14.9k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5170|  14.9k|                    (val % 8)) &
 5171|  14.9k|                   1u;
 5172|  14.9k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5216|  16.6k|        {
 5217|  16.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5217:17): [True: 1.73k, False: 14.9k]
  ------------------
 5218|  1.73k|                return false;
 5219|  1.73k|            }
 5220|       |
 5221|  14.9k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5222|  16.6k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5162|  7.45k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5362|  50.5k|    {
 5363|  50.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  50.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  50.5k|        return read_impl(range, specs, value);
 5365|  50.5k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5380|  50.5k|    {
 5381|  50.5k|        SCN_CLANG_PUSH
 5382|  50.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  50.5k|        switch (m_type) {
 5385|  48.0k|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 48.0k, False: 2.48k]
  ------------------
 5386|  48.0k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 0, False: 50.5k]
  ------------------
 5389|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|      0|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 50.5k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  2.48k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 2.48k, False: 48.0k]
  ------------------
 5396|  2.48k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  2.48k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 50.5k]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 50.5k]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 50.5k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  50.5k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  50.5k|        }
 5417|       |
 5418|  50.5k|        SCN_CLANG_POP
 5419|  50.5k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4913|   120k|    {
 4914|   120k|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|   120k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4847|   120k|{
 4848|   120k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|   120k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|   120k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 2.35k, False: 117k]
  ------------------
 4852|  2.35k|        return detail::unexpected_scan_error(
 4853|  2.35k|            scan_error::invalid_scanned_value,
 4854|  2.35k|            "Invalid encoding in scanned string");
 4855|  2.35k|    }
 4856|       |
 4857|   117k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|   117k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|   117k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|   117k|    static_cast<    \
  |  | 1109|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|   117k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2219|   120k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   120k|    else {
 2229|   120k|        auto it = range.begin();
 2230|       |
 2231|   120k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|   120k|            auto seg = get_contiguous_beginning(range);
 2233|   120k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|   120k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2234:17): [True: 0, False: 120k]
  ------------------
 2235|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|      0|            }
 2237|   120k|            ranges::advance(it, seg.size());
 2238|   120k|        }
 2239|       |
 2240|      0|        return read_until_code_point(
 2241|   120k|            ranges::subrange{it, range.end()},
 2242|   120k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   120k|    }
 2244|   120k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   242k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   242k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   242k|        else {
 1055|   242k|            return r.begin().contiguous_segment();
 1056|   242k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   242k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   228k|{
 2193|   228k|    auto it = range.begin();
 2194|  1.19M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 1.18M, False: 3.83k]
  ------------------
 2195|  1.18M|        const auto val =
 2196|  1.18M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  1.18M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  1.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.16M, False: 17.4k]
  |  |  ------------------
  ------------------
 2198|  1.16M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  1.16M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  1.16M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 224k, False: 944k]
  ------------------
 2201|   224k|                return it;
 2202|   224k|            }
 2203|  1.16M|        }
 2204|   962k|        it = val.iterator;
 2205|   962k|    }
 2206|       |
 2207|  3.83k|    return it;
 2208|   228k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.18M|{
 1998|  1.18M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.18M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.18M|    auto it = range.begin();
 2002|  1.18M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.18M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.4k, False: 1.16M]
  |  |  ------------------
  ------------------
 2005|  17.4k|        ++it;
 2006|  17.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  17.4k|        return {it, {}};
 2008|  17.4k|    }
 2009|       |
 2010|  1.16M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.09M, False: 75.1k]
  ------------------
 2011|  1.09M|        ++it;
 2012|  1.09M|        return {it, string_type(1, *range.begin())};
 2013|  1.09M|    }
 2014|       |
 2015|  75.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  75.1k|    return {it, string_type{range.begin(), it}};
 2017|  1.16M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  17.4k|{
 1265|  17.4k|    auto it = input.begin();
 1266|  36.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 36.3k, False: 552]
  ------------------
 1267|  36.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 16.8k, False: 19.4k]
  ------------------
 1268|  16.8k|            break;
 1269|  16.8k|        }
 1270|  36.3k|    }
 1271|  17.4k|    return it;
 1272|  17.4k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  75.1k|    {
  283|  75.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  75.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  75.1k|    {
  252|  75.1k|        constexpr iter_difference_t<I> zero{0};
  253|  75.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|   278k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 203k, False: 74.6k]
  |  Branch (255:30): [True: 202k, False: 526]
  ------------------
  256|   202k|            ++i;
  257|   202k|            ++counter;
  258|   202k|        }
  259|       |
  260|  75.1k|        return counter;
  261|  75.1k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.18M|    {
 1989|  1.18M|        return !codepoint.empty();
 1990|  1.18M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   120k|        : m_fptr([](storage fn,
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|   120k|              if constexpr (std::is_void_v<R>) {
  746|   120k|                  obj(static_cast<decltype(args)>(args)...);
  747|   120k|              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
  752|   120k|          m_storage(std::addressof(f))
  753|   120k|    {
  754|   120k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   712k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   712k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   712k|              else {
  749|   712k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   712k|              }
  751|   712k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   712k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   712k|        else if constexpr (std::is_object_v<T>) {
  688|   712k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   712k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2242|   712k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   120k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   120k|        {
  662|   120k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5137|  2.48k|    {
 5138|  2.48k|        auto it = read_source_impl(range, {specs});
 5139|  2.48k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 696]
  |  |  ------------------
  ------------------
 5140|  1.78k|            return unexpected(it.error());
 5141|  1.78k|        }
 5142|       |
 5143|    696|        return read_string_impl(range, *it, value);
 5144|  2.48k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5240|  2.48k|    {
 5241|  2.48k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|  2.48k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|  2.48k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  2.48k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 2.48k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|  2.48k|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|  2.48k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 0, False: 2.48k]
  ------------------
 5249|      0|            const auto cb = [&](char32_t cp) {
 5250|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|      0|            };
 5252|       |
 5253|      0|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 0, False: 0]
  ------------------
 5254|      0|                auto it = read_until_code_point(range, cb);
 5255|      0|                return check_nonempty(it, range);
 5256|      0|            }
 5257|      0|            auto it = read_while_code_point(range, cb);
 5258|      0|            return check_nonempty(it, range);
 5259|      0|        }
 5260|       |
 5261|  2.48k|        const auto cb = [&](SourceCharT ch) {
 5262|  2.48k|            return cb_wrapper.on_ascii_only(ch);
 5263|  2.48k|        };
 5264|       |
 5265|  2.48k|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 0, False: 2.48k]
  ------------------
 5266|      0|            auto it = read_until_code_unit(range, cb);
 5267|      0|            return check_nonempty(it, range);
 5268|      0|        }
 5269|  2.48k|        auto it = read_while_code_unit(range, cb);
 5270|  2.48k|        return check_nonempty(it, range);
 5271|  2.48k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5276|  2.48k|    {
 5277|  2.48k|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 1.78k, False: 696]
  ------------------
 5278|  1.78k|            return detail::unexpected_scan_error(
 5279|  1.78k|                scan_error::invalid_scanned_value,
 5280|  1.78k|                "No characters matched in [character set]");
 5281|  1.78k|        }
 5282|       |
 5283|    696|        return it;
 5284|  2.48k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   108k|{
 2214|   108k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   108k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.48k|        : m_fptr([](storage fn,
  743|  2.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.48k|              cvref<T> obj = *get<T>(fn);
  745|  2.48k|              if constexpr (std::is_void_v<R>) {
  746|  2.48k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.48k|              }
  748|  2.48k|              else {
  749|  2.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.48k|              }
  751|  2.48k|          }),
  752|  2.48k|          m_storage(std::addressof(f))
  753|  2.48k|    {
  754|  2.48k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.56k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.56k|              else {
  749|  5.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.56k|              }
  751|  5.56k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.56k|    {
  684|  5.56k|        if constexpr (std::is_const_v<T>) {
  685|  5.56k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.56k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5261|  5.56k|        const auto cb = [&](SourceCharT ch) {
 5262|  5.56k|            return cb_wrapper.on_ascii_only(ch);
 5263|  5.56k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.48k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.48k|        {
  667|  2.48k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4847|    696|{
 4848|    696|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    696|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    696|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 0, False: 696]
  ------------------
 4852|      0|        return detail::unexpected_scan_error(
 4853|      0|            scan_error::invalid_scanned_value,
 4854|      0|            "Invalid encoding in scanned string");
 4855|      0|    }
 4856|       |
 4857|    696|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    696|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 696]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    696|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    696|    static_cast<    \
  |  | 1109|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    696|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|  41.8k|    {
 5363|  41.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  41.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  41.8k|        return read_impl(range, specs, value);
 5365|  41.8k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|  41.8k|    {
 5381|  41.8k|        SCN_CLANG_PUSH
 5382|  41.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  41.8k|        switch (m_type) {
 5385|  39.3k|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 39.3k, False: 2.48k]
  ------------------
 5386|  39.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 0, False: 41.8k]
  ------------------
 5389|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|      0|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 41.8k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  2.48k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 2.48k, False: 39.3k]
  ------------------
 5396|  2.48k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  2.48k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 41.8k]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 41.8k]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 41.8k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  41.8k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  41.8k|        }
 5417|       |
 5418|  41.8k|        SCN_CLANG_POP
 5419|  41.8k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4913|  98.4k|    {
 4914|  98.4k|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|  98.4k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4847|  98.4k|{
 4848|  98.4k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|  98.4k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|  98.4k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 2.87k, False: 95.6k]
  ------------------
 4852|  2.87k|        return detail::unexpected_scan_error(
 4853|  2.87k|            scan_error::invalid_scanned_value,
 4854|  2.87k|            "Invalid encoding in scanned string");
 4855|  2.87k|    }
 4856|       |
 4857|  95.6k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|  95.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 95.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|  95.6k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|  95.6k|    static_cast<    \
  |  | 1109|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|  95.6k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|  96.3k|{
 3160|  96.3k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|  96.3k|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|  96.3k|    return {};
 3168|  96.3k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|   196k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|   196k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|   196k|        auto buf = make_contiguous_buffer(range);
 2224|   196k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|   196k|        return ranges::next(range.begin(),
 2226|   196k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|   196k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5137|  2.48k|    {
 5138|  2.48k|        auto it = read_source_impl(range, {specs});
 5139|  2.48k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 696]
  |  |  ------------------
  ------------------
 5140|  1.78k|            return unexpected(it.error());
 5141|  1.78k|        }
 5142|       |
 5143|    696|        return read_string_impl(range, *it, value);
 5144|  2.48k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5240|  4.96k|    {
 5241|  4.96k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|  4.96k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|  4.96k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  4.96k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.96k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|  4.96k|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|  4.96k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 0, False: 4.96k]
  ------------------
 5249|      0|            const auto cb = [&](char32_t cp) {
 5250|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|      0|            };
 5252|       |
 5253|      0|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 0, False: 0]
  ------------------
 5254|      0|                auto it = read_until_code_point(range, cb);
 5255|      0|                return check_nonempty(it, range);
 5256|      0|            }
 5257|      0|            auto it = read_while_code_point(range, cb);
 5258|      0|            return check_nonempty(it, range);
 5259|      0|        }
 5260|       |
 5261|  4.96k|        const auto cb = [&](SourceCharT ch) {
 5262|  4.96k|            return cb_wrapper.on_ascii_only(ch);
 5263|  4.96k|        };
 5264|       |
 5265|  4.96k|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 0, False: 4.96k]
  ------------------
 5266|      0|            auto it = read_until_code_unit(range, cb);
 5267|      0|            return check_nonempty(it, range);
 5268|      0|        }
 5269|  4.96k|        auto it = read_while_code_unit(range, cb);
 5270|  4.96k|        return check_nonempty(it, range);
 5271|  4.96k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5276|  4.96k|    {
 5277|  4.96k|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 3.57k, False: 1.39k]
  ------------------
 5278|  3.57k|            return detail::unexpected_scan_error(
 5279|  3.57k|                scan_error::invalid_scanned_value,
 5280|  3.57k|                "No characters matched in [character set]");
 5281|  3.57k|        }
 5282|       |
 5283|  1.39k|        return it;
 5284|  4.96k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.96k|        : m_fptr([](storage fn,
  743|  4.96k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.96k|              cvref<T> obj = *get<T>(fn);
  745|  4.96k|              if constexpr (std::is_void_v<R>) {
  746|  4.96k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.96k|              }
  748|  4.96k|              else {
  749|  4.96k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.96k|              }
  751|  4.96k|          }),
  752|  4.96k|          m_storage(std::addressof(f))
  753|  4.96k|    {
  754|  4.96k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  11.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.1k|              else {
  749|  11.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.1k|              }
  751|  11.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  11.1k|    {
  684|  11.1k|        if constexpr (std::is_const_v<T>) {
  685|  11.1k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.1k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5261|  11.1k|        const auto cb = [&](SourceCharT ch) {
 5262|  11.1k|            return cb_wrapper.on_ascii_only(ch);
 5263|  11.1k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.96k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.96k|        {
  667|  4.96k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4847|    696|{
 4848|    696|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    696|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    696|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 0, False: 696]
  ------------------
 4852|      0|        return detail::unexpected_scan_error(
 4853|      0|            scan_error::invalid_scanned_value,
 4854|      0|            "Invalid encoding in scanned string");
 4855|      0|    }
 4856|       |
 4857|    696|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    696|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 696]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    696|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    696|    static_cast<    \
  |  | 1109|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    696|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5897|   104k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|   104k|                       std::is_same_v<T, std::wstring_view>) {
 5912|   104k|        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|       |                       std::is_same_v<T, std::wstring>) {
 5916|       |        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|   104k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5362|  41.8k|    {
 5363|  41.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  41.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|  41.8k|        return read_impl(range, specs, value);
 5365|  41.8k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5380|  41.8k|    {
 5381|  41.8k|        SCN_CLANG_PUSH
 5382|  41.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|  41.8k|        switch (m_type) {
 5385|  39.3k|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 39.3k, False: 2.48k]
  ------------------
 5386|  39.3k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 0, False: 41.8k]
  ------------------
 5389|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|      0|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 41.8k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  2.48k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 2.48k, False: 39.3k]
  ------------------
 5396|  2.48k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  2.48k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 41.8k]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 41.8k]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 41.8k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|  41.8k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|  41.8k|        }
 5417|       |
 5418|  41.8k|        SCN_CLANG_POP
 5419|  41.8k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4920|  98.4k|    {
 4921|  98.4k|        return read_string_view_impl(range, read_until_classic_space(range),
 4922|  98.4k|                                     value);
 4923|  98.4k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4866|  98.4k|{
 4867|  98.4k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|  98.4k|    auto src = [&]() {
 4870|  98.4k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|  98.4k|            return make_contiguous_buffer(
 4872|  98.4k|                ranges::subrange{range.begin().base(), result.base()});
 4873|  98.4k|        }
 4874|  98.4k|        else {
 4875|  98.4k|            return make_contiguous_buffer(
 4876|  98.4k|                ranges::subrange{range.begin(), result});
 4877|  98.4k|        }
 4878|  98.4k|    }();
 4879|  98.4k|    using src_type = decltype(src);
 4880|       |
 4881|  98.4k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|  98.4k|    else {
 4894|  98.4k|        const auto view = src.view();
 4895|  98.4k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|  98.4k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 2.87k, False: 95.6k]
  ------------------
 4898|  2.87k|            return detail::unexpected_scan_error(
 4899|  2.87k|                scan_error::invalid_scanned_value,
 4900|  2.87k|                "Invalid encoding in scanned string_view");
 4901|  2.87k|        }
 4902|       |
 4903|  95.6k|        return SCN_MOVE(result);
  ------------------
  |  | 1108|  95.6k|    static_cast<    \
  |  | 1109|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|  98.4k|    }
 4905|  98.4k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4869|  98.4k|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|  98.4k|        else {
 4875|  98.4k|            return make_contiguous_buffer(
 4876|  98.4k|                ranges::subrange{range.begin(), result});
 4877|  98.4k|        }
 4878|  98.4k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5151|  2.48k|    {
 5152|  2.48k|        auto it = read_source_impl(range, {specs});
 5153|  2.48k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 696]
  |  |  ------------------
  ------------------
 5154|  1.78k|            return unexpected(it.error());
 5155|  1.78k|        }
 5156|       |
 5157|    696|        return read_string_view_impl(range, *it, value);
 5158|  2.48k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4866|    696|{
 4867|    696|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    696|    auto src = [&]() {
 4870|    696|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    696|            return make_contiguous_buffer(
 4872|    696|                ranges::subrange{range.begin().base(), result.base()});
 4873|    696|        }
 4874|    696|        else {
 4875|    696|            return make_contiguous_buffer(
 4876|    696|                ranges::subrange{range.begin(), result});
 4877|    696|        }
 4878|    696|    }();
 4879|    696|    using src_type = decltype(src);
 4880|       |
 4881|    696|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    696|    else {
 4894|    696|        const auto view = src.view();
 4895|    696|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    696|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 0, False: 696]
  ------------------
 4898|      0|            return detail::unexpected_scan_error(
 4899|      0|                scan_error::invalid_scanned_value,
 4900|      0|                "Invalid encoding in scanned string_view");
 4901|      0|        }
 4902|       |
 4903|    696|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    696|    static_cast<    \
  |  | 1109|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    696|    }
 4905|    696|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4869|    696|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|    696|        else {
 4875|    696|            return make_contiguous_buffer(
 4876|    696|                ranges::subrange{range.begin(), result});
 4877|    696|        }
 4878|    696|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   121k|{
 3098|   121k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 121k, False: 0]
  ------------------
 3099|   121k|        auto it = read_while_classic_space(range);
 3100|   121k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   121k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.42k, False: 120k]
  |  |  ------------------
  ------------------
 3102|  1.42k|            return unexpected(e);
 3103|  1.42k|        }
 3104|       |
 3105|   120k|        return it;
 3106|   121k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   121k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   121k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   121k|    else {
 2258|   121k|        auto it = range.begin();
 2259|       |
 2260|   121k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|   121k|            auto seg = get_contiguous_beginning(range);
 2262|   121k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|   121k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 13.3k, False: 108k]
  ------------------
 2264|  13.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|  13.3k|            }
 2266|   108k|            ranges::advance(it, seg.size());
 2267|   108k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   121k|            return detail::is_cp_space(cp);
 2271|   121k|        });
 2272|   121k|    }
 2273|   121k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   457k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   457k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   457k|              else {
  749|   457k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   457k|              }
  751|   457k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   457k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   457k|        else if constexpr (std::is_object_v<T>) {
  688|   457k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   457k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   457k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   457k|            return detail::is_cp_space(cp);
 2271|   457k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   739k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   739k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   739k|        auto beg = r.begin();
  991|   739k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 739k, False: 0]
  ------------------
  992|   739k|            return false;
  993|   739k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   739k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  29.0k|    {
  763|  29.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.0k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  11.0k|        : m_fptr([](storage fn,
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|  11.0k|              if constexpr (std::is_void_v<R>) {
  746|  11.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.0k|              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
  752|  11.0k|          m_storage(std::addressof(f))
  753|  11.0k|    {
  754|  11.0k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  14.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.5k|              else {
  749|  14.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.5k|              }
  751|  14.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  14.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.5k|        else if constexpr (std::is_object_v<T>) {
  688|  14.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.5k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  11.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.0k|        {
  662|  11.0k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6125|   298k|    {
 6126|   298k|        const bool need_skipped_width =
 6127|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 298k]
  |  Branch (6127:33): [True: 0, False: 298k]
  ------------------
 6128|   298k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   298k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 298k]
  ------------------
 6132|   298k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 298k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   298k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 298k, False: 0]
  |  Branch (6136:56): [True: 294k, False: 3.69k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   294k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 294k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   587k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 856, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    856|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    856|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    856|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    856|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    856|    }                                                  \
  |  |  |  | 3957|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   587k|                            make_eof_scan_error));
 6147|       |
 6148|   587k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 293k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   293k|            return result_type{it, 0};
 6156|   587k|        }
 6157|       |
 6158|  3.69k|        return result_type{rng.begin(), 0};
 6159|   298k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  3.69k|{
 2108|  3.69k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  3.69k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.69k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  3.69k|    else {
 2079|  3.69k|        auto first = range.begin();
 2080|  4.87k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 4.83k, False: 36]
  ------------------
 2081|  4.83k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 3.65k, False: 1.18k]
  ------------------
 2082|  3.65k|                return first;
 2083|  3.65k|            }
 2084|  4.83k|        }
 2085|     36|        return first;
 2086|  3.69k|    }
 2087|  3.69k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   290k|    {
  108|   290k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   290k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   290k|    {
   94|   290k|        iter_difference_t<I> counter{0};
   95|  8.69M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.40M, False: 290k]
  ------------------
   96|  8.40M|            ++i;
   97|  8.40M|            ++counter;
   98|  8.40M|        }
   99|   290k|        return counter;
  100|   290k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.17M|{
  951|  1.17M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.14k, False: 1.17M]
  |  |  ------------------
  ------------------
  952|  2.14k|        return eof_error::eof;
  953|  2.14k|    }
  954|  1.17M|    return eof_error::good;
  955|  1.17M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  23.9M|{
  945|  23.9M|    return is_range_eof(r.begin(), r.end());
  946|  23.9M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  23.9M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  23.9M|    {
  938|  23.9M|        return begin == end;
  939|  23.9M|    }
  940|  23.9M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   733k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   733k|    else {
 1788|   733k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|   733k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   733k|    }
 1790|   733k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   733k|    {
 1636|   733k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   733k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   733k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   733k|    {
 1720|   733k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   733k|                           ranges::common_range<Range>) {
 1737|   733k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   733k|            auto end_seg = range.end().contiguous_segment();
 1739|   733k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.48k, False: 730k]
  |  |  ------------------
  ------------------
 1740|   733k|                             detail::to_address(end_seg.end()))) {
 1741|  3.48k|                auto& str = m_storage.emplace();
 1742|  3.48k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.48k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.48k|                m_view = string_view_type{str};
 1745|  3.48k|                return;
 1746|  3.48k|            }
 1747|       |
 1748|   730k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   730k|                                                            end_seg.data());
 1750|   730k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   733k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.46M|    {
 1681|  1.46M|        return m_view;
 1682|  1.46M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   733k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6167|   290k|    {
 6168|   290k|        const bool need_skipped_width =
 6169|   290k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 290k]
  |  Branch (6169:33): [True: 0, False: 290k]
  ------------------
 6170|   290k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   290k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 290k]
  ------------------
 6173|   290k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 290k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   290k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 290k, False: 0]
  ------------------
 6182|   290k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 98, False: 290k]
  ------------------
 6183|   290k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 98]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|     98|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 98]
  ------------------
 6185|     98|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   290k|        return result_type{rng.begin(), 0};
 6207|   290k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  45.5M|{
 1998|  45.5M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  45.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  45.5M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  45.5M|    auto it = range.begin();
 2002|  45.5M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  45.5M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  45.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 45.5M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  45.5M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 45.5M, False: 0]
  ------------------
 2011|  45.5M|        ++it;
 2012|  45.5M|        return {it, string_type(1, *range.begin())};
 2013|  45.5M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  45.5M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  47.9M|{
  945|  47.9M|    return is_range_eof(r.begin(), r.end());
  946|  47.9M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  47.9M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  47.9M|    {
  938|  47.9M|        return begin == end;
  939|  47.9M|    }
  940|  47.9M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  45.5M|    {
 1989|  45.5M|        return !codepoint.empty();
 1990|  45.5M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.35M|{
  951|  2.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.28k, False: 2.34M]
  |  |  ------------------
  ------------------
  952|  4.28k|        return eof_error::eof;
  953|  4.28k|    }
  954|  2.34M|    return eof_error::good;
  955|  2.35M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.46M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.46M|                  ranges::sized_range<Range>) {
 1785|  1.46M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.46M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.46M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.46M|    {
 1589|  1.46M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.19M|    {
 1602|  2.19M|        return sv;
 1603|  2.19M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|  7.38k|{
 2108|  7.38k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  7.38k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  7.38k|{
 2075|  7.38k|    if constexpr (ranges::common_range<Range>) {
 2076|  7.38k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|  7.38k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  1.46M|{
 3098|  1.46M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 1.46M, False: 0]
  ------------------
 3099|  1.46M|        auto it = read_while_classic_space(range);
 3100|  1.46M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  1.46M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.20k, False: 1.46M]
  |  |  ------------------
  ------------------
 3102|  2.20k|            return unexpected(e);
 3103|  2.20k|        }
 3104|       |
 3105|  1.46M|        return it;
 3106|  1.46M|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  1.46M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  1.46M|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  1.46M|    else {
 2258|  1.46M|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  1.46M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.46M|            return detail::is_cp_space(cp);
 2271|  1.46M|        });
 2272|  1.46M|    }
 2273|  1.46M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  1.46M|{
 2214|  1.46M|    return read_until_code_point(range, std::not_fn(pred));
 2215|  1.46M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  2.93M|{
 2193|  2.93M|    auto it = range.begin();
 2194|  45.5M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 45.5M, False: 12.2k]
  ------------------
 2195|  45.5M|        const auto val =
 2196|  45.5M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  45.5M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  45.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 45.5M, False: 0]
  |  |  ------------------
  ------------------
 2198|  45.5M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  45.5M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  45.5M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 2.92M, False: 42.6M]
  ------------------
 2201|  2.92M|                return it;
 2202|  2.92M|            }
 2203|  45.5M|        }
 2204|  42.6M|        it = val.iterator;
 2205|  42.6M|    }
 2206|       |
 2207|  12.2k|    return it;
 2208|  2.93M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.46M|        : m_fptr([](storage fn,
  743|  1.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46M|              cvref<T> obj = *get<T>(fn);
  745|  1.46M|              if constexpr (std::is_void_v<R>) {
  746|  1.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46M|              }
  748|  1.46M|              else {
  749|  1.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46M|              }
  751|  1.46M|          }),
  752|  1.46M|          m_storage(std::addressof(f))
  753|  1.46M|    {
  754|  1.46M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.38M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.38M|              else {
  749|  3.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.38M|              }
  751|  3.38M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.38M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.38M|        else if constexpr (std::is_object_v<T>) {
  688|  3.38M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.38M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|  3.38M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  3.38M|            return detail::is_cp_space(cp);
 2271|  3.38M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.46M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.46M|        {
  662|  1.46M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   728k|    {
 1686|   728k|        return m_storage.has_value();
 1687|   728k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    991|    {
 1691|    991|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|    991|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    991|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    991|        return *m_storage;
 1693|    991|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5291|  2.22M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   904k|    {
 3188|   904k|        reader_error_handler eh{};
 3189|   904k|        get_derived().check_specs_impl(specs, eh);
 3190|   904k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.7k, False: 894k]
  |  |  ------------------
  ------------------
 3191|  10.7k|            return detail::unexpected_scan_error(
 3192|  10.7k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  10.7k|        }
 3194|   894k|        return {};
 3195|   904k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3199|   904k|    {
 3200|   904k|        return static_cast<Derived&>(*this);
 3201|   904k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5295|   904k|    {
 5296|   904k|        detail::check_string_type_specs(specs, eh);
 5297|       |
 5298|   904k|        SCN_GCC_PUSH
 5299|   904k|        SCN_GCC_IGNORE("-Wswitch")
 5300|   904k|        SCN_GCC_IGNORE("-Wswitch-default")
 5301|       |
 5302|   904k|        SCN_CLANG_PUSH
 5303|   904k|        SCN_CLANG_IGNORE("-Wswitch")
 5304|   904k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5305|       |
 5306|   904k|        switch (specs.type) {
  ------------------
  |  Branch (5306:17): [True: 0, False: 904k]
  ------------------
 5307|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5307:13): [True: 0, False: 904k]
  ------------------
 5308|      0|                m_type = reader_type::word;
 5309|      0|                break;
 5310|       |
 5311|   883k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5311:13): [True: 883k, False: 21.8k]
  ------------------
 5312|   883k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5312:21): [True: 0, False: 883k]
  ------------------
 5313|   883k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5313:21): [True: 0, False: 883k]
  ------------------
 5314|      0|                    m_type = reader_type::custom_word;
 5315|      0|                }
 5316|   883k|                else {
 5317|   883k|                    m_type = reader_type::word;
 5318|   883k|                }
 5319|   883k|                break;
 5320|      0|            }
 5321|       |
 5322|  10.7k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5322:13): [True: 10.7k, False: 894k]
  ------------------
 5323|  10.7k|                m_type = reader_type::character;
 5324|  10.7k|                break;
 5325|       |
 5326|  11.0k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5326:13): [True: 11.0k, False: 893k]
  ------------------
 5327|  11.0k|                m_type = reader_type::character_set;
 5328|  11.0k|                break;
 5329|       |
 5330|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5330:13): [True: 0, False: 904k]
  ------------------
 5331|      0|                m_type = reader_type::regex;
 5332|      0|                break;
 5333|       |
 5334|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5334:13): [True: 0, False: 904k]
  ------------------
 5335|      0|                m_type = reader_type::regex_escaped;
 5336|      0|                break;
 5337|   904k|        }
 5338|       |
 5339|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5340|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5341|   904k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5344|  3.08M|    {
 5345|  3.08M|        return m_type == reader_type::word;
 5346|  3.08M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.20M|{
 1242|  2.20M|    auto it = src.begin();
 1243|  62.4M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 60.2M, False: 2.18M]
  ------------------
 1244|  60.2M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  60.2M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 60.2M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  60.2M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 60.2M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  60.2M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  60.2M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  60.2M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 20.4k, False: 60.2M]
  ------------------
 1254|  20.4k|            return false;
 1255|  20.4k|        }
 1256|  60.2M|        it += len;
 1257|  60.2M|    }
 1258|  2.18M|    return true;
 1259|  2.20M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5192|  11.0k|        {
 5193|  11.0k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5193:17): [True: 11.0k, False: 0]
  ------------------
 5194|  11.0k|                return {};
 5195|  11.0k|            }
 5196|       |
 5197|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5198|      0|            auto it = detail::to_address(charset_string.begin());
 5199|      0|            auto set = detail::parse_presentation_set(
 5200|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5201|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5202|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5203|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|       |
 5205|      0|            std::sort(nonascii.extra_ranges.begin(),
 5206|      0|                      nonascii.extra_ranges.end());
 5207|      0|            return {};
 5208|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5165|  9.25k|        {
 5166|  9.25k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|  9.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5167|  9.25k|            const auto val =
 5168|  9.25k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5169|  9.25k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5170|  9.25k|                    (val % 8)) &
 5171|  9.25k|                   1u;
 5172|  9.25k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5216|  14.5k|        {
 5217|  14.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5217:17): [True: 5.25k, False: 9.25k]
  ------------------
 5218|  5.25k|                return false;
 5219|  5.25k|            }
 5220|       |
 5221|  9.25k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5222|  14.5k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5162|  11.0k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2219|   733k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   733k|    else {
 2229|   733k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|   733k|        return read_until_code_point(
 2241|   733k|            ranges::subrange{it, range.end()},
 2242|   733k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   733k|    }
 2244|   733k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  1.46M|{
 2193|  1.46M|    auto it = range.begin();
 2194|  22.7M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 22.7M, False: 6.14k]
  ------------------
 2195|  22.7M|        const auto val =
 2196|  22.7M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  22.7M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  22.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 22.7M, False: 0]
  |  |  ------------------
  ------------------
 2198|  22.7M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  22.7M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  22.7M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 1.46M, False: 21.3M]
  ------------------
 2201|  1.46M|                return it;
 2202|  1.46M|            }
 2203|  22.7M|        }
 2204|  21.3M|        it = val.iterator;
 2205|  21.3M|    }
 2206|       |
 2207|  6.14k|    return it;
 2208|  1.46M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  22.7M|{
 1998|  22.7M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  22.7M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  22.7M|    auto it = range.begin();
 2002|  22.7M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  22.7M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  22.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22.7M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  22.7M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 22.7M, False: 0]
  ------------------
 2011|  22.7M|        ++it;
 2012|  22.7M|        return {it, string_type(1, *range.begin())};
 2013|  22.7M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  22.7M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  22.7M|    {
 1989|  22.7M|        return !codepoint.empty();
 1990|  22.7M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   733k|        : m_fptr([](storage fn,
  743|   733k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   733k|              cvref<T> obj = *get<T>(fn);
  745|   733k|              if constexpr (std::is_void_v<R>) {
  746|   733k|                  obj(static_cast<decltype(args)>(args)...);
  747|   733k|              }
  748|   733k|              else {
  749|   733k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   733k|              }
  751|   733k|          }),
  752|   733k|          m_storage(std::addressof(f))
  753|   733k|    {
  754|   733k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  21.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.0M|              else {
  749|  21.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.0M|              }
  751|  21.0M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  21.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.0M|        else if constexpr (std::is_object_v<T>) {
  688|  21.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.0M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2242|  21.0M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   733k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   733k|        {
  662|   733k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5240|  3.69k|    {
 5241|  3.69k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|  3.69k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|  3.69k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  3.69k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.69k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|  3.69k|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|  3.69k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 0, False: 3.69k]
  ------------------
 5249|      0|            const auto cb = [&](char32_t cp) {
 5250|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|      0|            };
 5252|       |
 5253|      0|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 0, False: 0]
  ------------------
 5254|      0|                auto it = read_until_code_point(range, cb);
 5255|      0|                return check_nonempty(it, range);
 5256|      0|            }
 5257|      0|            auto it = read_while_code_point(range, cb);
 5258|      0|            return check_nonempty(it, range);
 5259|      0|        }
 5260|       |
 5261|  3.69k|        const auto cb = [&](SourceCharT ch) {
 5262|  3.69k|            return cb_wrapper.on_ascii_only(ch);
 5263|  3.69k|        };
 5264|       |
 5265|  3.69k|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 0, False: 3.69k]
  ------------------
 5266|      0|            auto it = read_until_code_unit(range, cb);
 5267|      0|            return check_nonempty(it, range);
 5268|      0|        }
 5269|  3.69k|        auto it = read_while_code_unit(range, cb);
 5270|  3.69k|        return check_nonempty(it, range);
 5271|  3.69k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5276|  3.69k|    {
 5277|  3.69k|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 3.57k, False: 116]
  ------------------
 5278|  3.57k|            return detail::unexpected_scan_error(
 5279|  3.57k|                scan_error::invalid_scanned_value,
 5280|  3.57k|                "No characters matched in [character set]");
 5281|  3.57k|        }
 5282|       |
 5283|    116|        return it;
 5284|  3.69k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   734k|{
 2214|   734k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   734k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.69k|        : m_fptr([](storage fn,
  743|  3.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.69k|              cvref<T> obj = *get<T>(fn);
  745|  3.69k|              if constexpr (std::is_void_v<R>) {
  746|  3.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.69k|              }
  748|  3.69k|              else {
  749|  3.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.69k|              }
  751|  3.69k|          }),
  752|  3.69k|          m_storage(std::addressof(f))
  753|  3.69k|    {
  754|  3.69k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.83k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.83k|              else {
  749|  4.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.83k|              }
  751|  4.83k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.83k|    {
  684|  4.83k|        if constexpr (std::is_const_v<T>) {
  685|  4.83k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.83k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5261|  4.83k|        const auto cb = [&](SourceCharT ch) {
 5262|  4.83k|            return cb_wrapper.on_ascii_only(ch);
 5263|  4.83k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.69k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.69k|        {
  667|  3.69k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|  1.46M|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|  1.46M|    else {
 2229|  1.46M|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|  1.46M|        return read_until_code_point(
 2241|  1.46M|            ranges::subrange{it, range.end()},
 2242|  1.46M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|  1.46M|    }
 2244|  1.46M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.46M|        : m_fptr([](storage fn,
  743|  1.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46M|              cvref<T> obj = *get<T>(fn);
  745|  1.46M|              if constexpr (std::is_void_v<R>) {
  746|  1.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46M|              }
  748|  1.46M|              else {
  749|  1.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46M|              }
  751|  1.46M|          }),
  752|  1.46M|          m_storage(std::addressof(f))
  753|  1.46M|    {
  754|  1.46M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  42.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.1M|              else {
  749|  42.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.1M|              }
  751|  42.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  42.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.1M|        else if constexpr (std::is_object_v<T>) {
  688|  42.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.1M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2242|  42.1M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.46M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.46M|        {
  662|  1.46M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5240|  7.38k|    {
 5241|  7.38k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5242|  7.38k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5243|       |
 5244|  7.38k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  7.38k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5245|       |
 5246|  7.38k|        read_source_callback cb_wrapper{helper};
 5247|       |
 5248|  7.38k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5248:13): [True: 0, False: 7.38k]
  ------------------
 5249|      0|            const auto cb = [&](char32_t cp) {
 5250|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5251|      0|            };
 5252|       |
 5253|      0|            if (is_inverted) {
  ------------------
  |  Branch (5253:17): [True: 0, False: 0]
  ------------------
 5254|      0|                auto it = read_until_code_point(range, cb);
 5255|      0|                return check_nonempty(it, range);
 5256|      0|            }
 5257|      0|            auto it = read_while_code_point(range, cb);
 5258|      0|            return check_nonempty(it, range);
 5259|      0|        }
 5260|       |
 5261|  7.38k|        const auto cb = [&](SourceCharT ch) {
 5262|  7.38k|            return cb_wrapper.on_ascii_only(ch);
 5263|  7.38k|        };
 5264|       |
 5265|  7.38k|        if (is_inverted) {
  ------------------
  |  Branch (5265:13): [True: 0, False: 7.38k]
  ------------------
 5266|      0|            auto it = read_until_code_unit(range, cb);
 5267|      0|            return check_nonempty(it, range);
 5268|      0|        }
 5269|  7.38k|        auto it = read_while_code_unit(range, cb);
 5270|  7.38k|        return check_nonempty(it, range);
 5271|  7.38k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5276|  7.38k|    {
 5277|  7.38k|        if (it == range.begin()) {
  ------------------
  |  Branch (5277:13): [True: 7.15k, False: 232]
  ------------------
 5278|  7.15k|            return detail::unexpected_scan_error(
 5279|  7.15k|                scan_error::invalid_scanned_value,
 5280|  7.15k|                "No characters matched in [character set]");
 5281|  7.15k|        }
 5282|       |
 5283|    232|        return it;
 5284|  7.38k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.38k|        : m_fptr([](storage fn,
  743|  7.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.38k|              cvref<T> obj = *get<T>(fn);
  745|  7.38k|              if constexpr (std::is_void_v<R>) {
  746|  7.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.38k|              }
  748|  7.38k|              else {
  749|  7.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.38k|              }
  751|  7.38k|          }),
  752|  7.38k|          m_storage(std::addressof(f))
  753|  7.38k|    {
  754|  7.38k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.67k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.67k|              else {
  749|  9.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.67k|              }
  751|  9.67k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.67k|    {
  684|  9.67k|        if constexpr (std::is_const_v<T>) {
  685|  9.67k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.67k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5261|  9.67k|        const auto cb = [&](SourceCharT ch) {
 5262|  9.67k|            return cb_wrapper.on_ascii_only(ch);
 5263|  9.67k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.38k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.38k|        {
  667|  7.38k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   301k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   301k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   301k|            auto rd = make_reader<T, char_type>();
 6288|   301k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   301k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.57k, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.57k|    }
  ------------------
 6289|       |
 6290|   298k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 298k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   298k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   298k|                return impl(rd, range, value);
 6293|   298k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   301k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5897|  1.48M|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|       |                       std::is_same_v<T, std::wstring_view>) {
 5912|       |        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|  1.48M|                       std::is_same_v<T, std::wstring>) {
 5916|  1.48M|        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|  1.48M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6212|   298k|    {
 6213|   298k|        const bool need_skipped_width =
 6214|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 298k]
  |  Branch (6214:33): [True: 0, False: 298k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   298k|        auto it = rng.begin();
 6218|   298k|        std::ptrdiff_t prefix_width = 0;
 6219|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 298k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   298k|        else {
 6227|   298k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 856, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    856|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    856|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    856|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    856|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    856|    }                                                  \
  |  |  |  | 3957|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   297k|            std::tie(it, prefix_width) = prefix_result;
 6229|   297k|        }
 6230|   297k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   297k|        std::ptrdiff_t value_width = 0;
 6234|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 297k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   297k|        else {
 6250|   297k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.29k, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.29k|    }                                                  \
  |  | 3957|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   290k|                                             specs, value, loc));
 6252|       |
 6253|   290k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 290k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   290k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   290k|        std::ptrdiff_t postfix_width = 0;
 6262|   290k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 290k, False: 710]
  ------------------
 6263|   290k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   290k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   290k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   290k|                                 value_width));
 6267|   290k|            std::tie(it, postfix_width) = postfix_result;
 6268|   290k|        }
 6269|       |
 6270|   290k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   290k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   290k|            specs, prefix_width, value_width, postfix_width));
 6272|   290k|        return it;
 6273|   290k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|   727k|{
 3140|   727k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|   727k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 991, False: 726k]
  ------------------
 3142|    991|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|    991|    static_cast<    \
  |  | 1109|    991|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|    991|        }
 3144|   726k|        else {
 3145|   726k|            dest.assign(source.view());
 3146|   726k|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|   727k|    return {};
 3153|   727k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5362|   297k|    {
 5363|   297k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   297k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|   297k|        return read_impl(range, specs, value);
 5365|   297k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5380|   297k|    {
 5381|   297k|        SCN_CLANG_PUSH
 5382|   297k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|   297k|        switch (m_type) {
 5385|   293k|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 293k, False: 3.69k]
  ------------------
 5386|   293k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 0, False: 297k]
  ------------------
 5389|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|      0|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 297k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  3.69k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 3.69k, False: 293k]
  ------------------
 5396|  3.69k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  3.69k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 297k]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 297k]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 297k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|   297k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|   297k|        }
 5417|       |
 5418|   297k|        SCN_CLANG_POP
 5419|   297k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4913|   733k|    {
 4914|   733k|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|   733k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4847|   733k|{
 4848|   733k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|   733k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|   733k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 6.80k, False: 727k]
  ------------------
 4852|  6.80k|        return detail::unexpected_scan_error(
 4853|  6.80k|            scan_error::invalid_scanned_value,
 4854|  6.80k|            "Invalid encoding in scanned string");
 4855|  6.80k|    }
 4856|       |
 4857|   727k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|   727k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 727k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|   727k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|   727k|    static_cast<    \
  |  | 1109|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|   727k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5137|  3.69k|    {
 5138|  3.69k|        auto it = read_source_impl(range, {specs});
 5139|  3.69k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 116]
  |  |  ------------------
  ------------------
 5140|  3.57k|            return unexpected(it.error());
 5141|  3.57k|        }
 5142|       |
 5143|    116|        return read_string_impl(range, *it, value);
 5144|  3.69k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4847|    116|{
 4848|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    116|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    116|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 0, False: 116]
  ------------------
 4852|      0|        return detail::unexpected_scan_error(
 4853|      0|            scan_error::invalid_scanned_value,
 4854|      0|            "Invalid encoding in scanned string");
 4855|      0|    }
 4856|       |
 4857|    116|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    116|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 116]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    116|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    116|    static_cast<    \
  |  | 1109|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    116|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5362|   297k|    {
 5363|   297k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   297k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|   297k|        return read_impl(range, specs, value);
 5365|   297k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5380|   297k|    {
 5381|   297k|        SCN_CLANG_PUSH
 5382|   297k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|   297k|        switch (m_type) {
 5385|   293k|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 293k, False: 3.69k]
  ------------------
 5386|   293k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 0, False: 297k]
  ------------------
 5389|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|      0|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 297k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  3.69k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 3.69k, False: 293k]
  ------------------
 5396|  3.69k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  3.69k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 297k]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 297k]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 297k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|   297k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|   297k|        }
 5417|       |
 5418|   297k|        SCN_CLANG_POP
 5419|   297k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4913|   733k|    {
 4914|   733k|        return read_string_impl(range, read_until_classic_space(range), value);
 4915|   733k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4847|   733k|{
 4848|   733k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|   733k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|   733k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 6.80k, False: 727k]
  ------------------
 4852|  6.80k|        return detail::unexpected_scan_error(
 4853|  6.80k|            scan_error::invalid_scanned_value,
 4854|  6.80k|            "Invalid encoding in scanned string");
 4855|  6.80k|    }
 4856|       |
 4857|   727k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|   727k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 727k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|   727k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|   727k|    static_cast<    \
  |  | 1109|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|   727k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|   727k|{
 3160|   727k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|   727k|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|   727k|    return {};
 3168|   727k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5137|  3.69k|    {
 5138|  3.69k|        auto it = read_source_impl(range, {specs});
 5139|  3.69k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 116]
  |  |  ------------------
  ------------------
 5140|  3.57k|            return unexpected(it.error());
 5141|  3.57k|        }
 5142|       |
 5143|    116|        return read_string_impl(range, *it, value);
 5144|  3.69k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4847|    116|{
 4848|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4849|       |
 4850|    116|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4851|    116|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4851:9): [True: 0, False: 116]
  ------------------
 4852|      0|        return detail::unexpected_scan_error(
 4853|      0|            scan_error::invalid_scanned_value,
 4854|      0|            "Invalid encoding in scanned string");
 4855|      0|    }
 4856|       |
 4857|    116|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    116|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 116]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4858|    116|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    116|    static_cast<    \
  |  | 1109|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4859|    116|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5897|   743k|{
 5898|       |    if constexpr (std::is_same_v<T, bool>) {
 5899|       |        return reader_impl_for_bool<CharT>{};
 5900|       |    }
 5901|       |    else if constexpr (std::is_same_v<T, char>) {
 5902|       |        return reader_impl_for_char<CharT>{};
 5903|       |    }
 5904|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5905|       |        return reader_impl_for_wchar<CharT>{};
 5906|       |    }
 5907|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5908|       |        return reader_impl_for_code_point<CharT>{};
 5909|       |    }
 5910|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5911|   743k|                       std::is_same_v<T, std::wstring_view>) {
 5912|   743k|        return reader_impl_for_string<CharT>{};
 5913|       |    }
 5914|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5915|       |                       std::is_same_v<T, std::wstring>) {
 5916|       |        return reader_impl_for_string<CharT>{};
 5917|       |    }
 5918|       |#if !SCN_DISABLE_REGEX
 5919|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5920|       |                       std::is_same_v<T, wregex_matches>) {
 5921|       |        return reader_impl_for_regex_matches<CharT>{};
 5922|       |    }
 5923|       |#endif
 5924|       |    else if constexpr (std::is_same_v<T, void*>) {
 5925|       |        return reader_impl_for_voidptr<CharT>{};
 5926|       |    }
 5927|       |    else if constexpr (std::is_floating_point_v<T>) {
 5928|       |        return reader_impl_for_float<CharT>{};
 5929|       |    }
 5930|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5931|       |                       !std::is_same_v<T, wchar_t> &&
 5932|       |                       !std::is_same_v<T, char32_t> &&
 5933|       |                       !std::is_same_v<T, bool>) {
 5934|       |        return reader_impl_for_int<CharT>{};
 5935|       |    }
 5936|       |    else {
 5937|       |        return reader_impl_for_monostate<CharT>{};
 5938|       |    }
 5939|   743k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5362|   297k|    {
 5363|   297k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   297k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5364|   297k|        return read_impl(range, specs, value);
 5365|   297k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5380|   297k|    {
 5381|   297k|        SCN_CLANG_PUSH
 5382|   297k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5383|       |
 5384|   297k|        switch (m_type) {
 5385|   293k|            case reader_type::word:
  ------------------
  |  Branch (5385:13): [True: 293k, False: 3.69k]
  ------------------
 5386|   293k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5387|       |
 5388|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5388:13): [True: 0, False: 297k]
  ------------------
 5389|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5390|      0|                                                                   value);
 5391|       |
 5392|      0|            case reader_type::character:
  ------------------
  |  Branch (5392:13): [True: 0, False: 297k]
  ------------------
 5393|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5394|       |
 5395|  3.69k|            case reader_type::character_set:
  ------------------
  |  Branch (5395:13): [True: 3.69k, False: 293k]
  ------------------
 5396|  3.69k|                return character_set_reader_impl<SourceCharT>{}.read(
 5397|  3.69k|                    range, specs, value);
 5398|       |
 5399|      0|#if !SCN_DISABLE_REGEX
 5400|      0|            case reader_type::regex:
  ------------------
  |  Branch (5400:13): [True: 0, False: 297k]
  ------------------
 5401|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5402|      0|                    range, specs.charset_string<SourceCharT>(),
 5403|      0|                    specs.regexp_flags, value);
 5404|       |
 5405|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5405:13): [True: 0, False: 297k]
  ------------------
 5406|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5407|      0|                    range,
 5408|      0|                    get_unescaped_regex_pattern(
 5409|      0|                        specs.charset_string<SourceCharT>()),
 5410|      0|                    specs.regexp_flags, value);
 5411|      0|#endif
 5412|       |
 5413|      0|            default:
  ------------------
  |  Branch (5413:13): [True: 0, False: 297k]
  ------------------
 5414|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5415|   297k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5416|   297k|        }
 5417|       |
 5418|   297k|        SCN_CLANG_POP
 5419|   297k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4920|   733k|    {
 4921|   733k|        return read_string_view_impl(range, read_until_classic_space(range),
 4922|   733k|                                     value);
 4923|   733k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4866|   733k|{
 4867|   733k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|   733k|    auto src = [&]() {
 4870|   733k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|   733k|            return make_contiguous_buffer(
 4872|   733k|                ranges::subrange{range.begin().base(), result.base()});
 4873|   733k|        }
 4874|   733k|        else {
 4875|   733k|            return make_contiguous_buffer(
 4876|   733k|                ranges::subrange{range.begin(), result});
 4877|   733k|        }
 4878|   733k|    }();
 4879|   733k|    using src_type = decltype(src);
 4880|       |
 4881|   733k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|   733k|    else {
 4894|   733k|        const auto view = src.view();
 4895|   733k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|   733k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 6.80k, False: 727k]
  ------------------
 4898|  6.80k|            return detail::unexpected_scan_error(
 4899|  6.80k|                scan_error::invalid_scanned_value,
 4900|  6.80k|                "Invalid encoding in scanned string_view");
 4901|  6.80k|        }
 4902|       |
 4903|   727k|        return SCN_MOVE(result);
  ------------------
  |  | 1108|   727k|    static_cast<    \
  |  | 1109|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|   733k|    }
 4905|   733k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4869|   733k|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|   733k|        else {
 4875|   733k|            return make_contiguous_buffer(
 4876|   733k|                ranges::subrange{range.begin(), result});
 4877|   733k|        }
 4878|   733k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5151|  3.69k|    {
 5152|  3.69k|        auto it = read_source_impl(range, {specs});
 5153|  3.69k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.57k, False: 116]
  |  |  ------------------
  ------------------
 5154|  3.57k|            return unexpected(it.error());
 5155|  3.57k|        }
 5156|       |
 5157|    116|        return read_string_view_impl(range, *it, value);
 5158|  3.69k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4866|    116|{
 4867|    116|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4868|       |
 4869|    116|    auto src = [&]() {
 4870|    116|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|    116|            return make_contiguous_buffer(
 4872|    116|                ranges::subrange{range.begin().base(), result.base()});
 4873|    116|        }
 4874|    116|        else {
 4875|    116|            return make_contiguous_buffer(
 4876|    116|                ranges::subrange{range.begin(), result});
 4877|    116|        }
 4878|    116|    }();
 4879|    116|    using src_type = decltype(src);
 4880|       |
 4881|    116|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4881:9): [Folded - Ignored]
  ------------------
 4882|      0|        return detail::unexpected_scan_error(
 4883|      0|            scan_error::invalid_format_string,
 4884|      0|            "Cannot read a string_view from this source range (not "
 4885|      0|            "contiguous)");
 4886|      0|    }
 4887|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4888|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4889|       |                                             "Cannot read a string_view from "
 4890|       |                                             "this source range (would require "
 4891|       |                                             "transcoding)");
 4892|       |    }
 4893|    116|    else {
 4894|    116|        const auto view = src.view();
 4895|    116|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4896|       |
 4897|    116|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4897:13): [True: 0, False: 116]
  ------------------
 4898|      0|            return detail::unexpected_scan_error(
 4899|      0|                scan_error::invalid_scanned_value,
 4900|      0|                "Invalid encoding in scanned string_view");
 4901|      0|        }
 4902|       |
 4903|    116|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    116|    static_cast<    \
  |  | 1109|    116|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4904|    116|    }
 4905|    116|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4869|    116|    auto src = [&]() {
 4870|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4871|       |            return make_contiguous_buffer(
 4872|       |                ranges::subrange{range.begin().base(), result.base()});
 4873|       |        }
 4874|    116|        else {
 4875|    116|            return make_contiguous_buffer(
 4876|    116|                ranges::subrange{range.begin(), result});
 4877|    116|        }
 4878|    116|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   734k|{
 3098|   734k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 734k, False: 0]
  ------------------
 3099|   734k|        auto it = read_while_classic_space(range);
 3100|   734k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   734k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.10k, False: 733k]
  |  |  ------------------
  ------------------
 3102|  1.10k|            return unexpected(e);
 3103|  1.10k|        }
 3104|       |
 3105|   733k|        return it;
 3106|   734k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   734k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   734k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   734k|    else {
 2258|   734k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   734k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   734k|            return detail::is_cp_space(cp);
 2271|   734k|        });
 2272|   734k|    }
 2273|   734k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   734k|        : m_fptr([](storage fn,
  743|   734k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   734k|              cvref<T> obj = *get<T>(fn);
  745|   734k|              if constexpr (std::is_void_v<R>) {
  746|   734k|                  obj(static_cast<decltype(args)>(args)...);
  747|   734k|              }
  748|   734k|              else {
  749|   734k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   734k|              }
  751|   734k|          }),
  752|   734k|          m_storage(std::addressof(f))
  753|   734k|    {
  754|   734k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.69M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.69M|              else {
  749|  1.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.69M|              }
  751|  1.69M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.69M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.69M|        else if constexpr (std::is_object_v<T>) {
  688|  1.69M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.69M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  1.69M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.69M|            return detail::is_cp_space(cp);
 2271|  1.69M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   734k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   734k|        {
  662|   734k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|   120k|{
 5884|   120k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.08k, False: 119k]
  |  |  ------------------
  ------------------
 5885|  1.08k|        return unexpected(e);
 5886|  1.08k|    }
 5887|       |
 5888|   119k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 119k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   119k|    return skip_classic_whitespace(range);
 5893|   119k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|  60.0k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  60.0k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  60.0k|            auto rd = make_reader<T, char_type>();
 5967|  60.0k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  60.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5953|  60.0k|    {
 5954|  60.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  60.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 960, False: 59.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    960|    }                                                  \
  |  |  |  | 3957|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  59.0k|                        .transform_error(make_eof_scan_error));
 5956|  59.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  60.0k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5351|  59.0k|    {
 5352|  59.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  59.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|  59.0k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|  59.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|  60.0k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  60.0k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  60.0k|            auto rd = make_reader<T, char_type>();
 5967|  60.0k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  60.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5953|  60.0k|    {
 5954|  60.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  60.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 960, False: 59.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    960|    }                                                  \
  |  |  |  | 3957|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  59.0k|                        .transform_error(make_eof_scan_error));
 5956|  59.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  60.0k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5351|  59.0k|    {
 5352|  59.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  59.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|  59.0k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|  59.0k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5883|  73.4k|{
 5884|  73.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 690, False: 72.7k]
  |  |  ------------------
  ------------------
 5885|    690|        return unexpected(e);
 5886|    690|    }
 5887|       |
 5888|  72.7k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 72.7k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|  72.7k|    return skip_classic_whitespace(range);
 5893|  72.7k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|  73.4k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  73.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  73.4k|            auto rd = make_reader<T, char_type>();
 5971|  73.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 73.4k, False: 0]
  ------------------
 5972|  73.4k|                return impl(rd, range, value);
 5973|  73.4k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  73.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5953|  73.4k|    {
 5954|  73.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  73.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  73.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  73.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.20k, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.20k|    }                                                  \
  |  |  |  | 3957|  73.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  72.2k|                        .transform_error(make_eof_scan_error));
 5956|  72.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  73.4k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5351|  72.2k|    {
 5352|  72.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  72.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|  72.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|  72.2k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|  95.7k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  95.7k|    static_cast<    \
  |  | 1109|  95.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  95.7k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  95.7k|          m_current(m_range.begin())
 3020|  95.7k|    {
 3021|  95.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   166k|    {
 3030|   166k|        return m_range.end();
 3031|   166k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|  77.8k|    {
 3045|  77.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  77.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  77.8k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 77.8k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  77.8k|        }
 3051|  77.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  77.8k|    static_cast<    \
  |  | 1109|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  77.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|  88.6k|    {
 3035|  88.6k|        return ranges::subrange{begin(), end()};
 3036|  88.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|  85.0k|    {
 6126|  85.0k|        const bool need_skipped_width =
 6127|  85.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 85.0k]
  |  Branch (6127:33): [True: 0, False: 85.0k]
  ------------------
 6128|  85.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|  85.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 85.0k]
  ------------------
 6132|  85.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 85.0k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|  85.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 85.0k, False: 0]
  |  Branch (6136:56): [True: 80.0k, False: 4.96k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|  80.0k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 80.0k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   158k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  80.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  80.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  80.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  80.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.28k, False: 78.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.28k|    }                                                  \
  |  |  |  | 3957|  80.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   158k|                            make_eof_scan_error));
 6147|       |
 6148|   158k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 78.7k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|  78.7k|            return result_type{it, 0};
 6156|   158k|        }
 6157|       |
 6158|  4.96k|        return result_type{rng.begin(), 0};
 6159|  85.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|  77.0k|    {
 6168|  77.0k|        const bool need_skipped_width =
 6169|  77.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 77.0k]
  |  Branch (6169:33): [True: 0, False: 77.0k]
  ------------------
 6170|  77.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|  77.0k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 77.0k]
  ------------------
 6173|  77.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 77.0k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|  77.0k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 77.0k, False: 0]
  ------------------
 6182|  77.0k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 1.31k, False: 75.7k]
  ------------------
 6183|  77.0k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 1.31k]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|  1.31k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 1.31k]
  ------------------
 6185|  1.31k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|  77.0k|        return result_type{rng.begin(), 0};
 6207|  77.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  44.3k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  44.3k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  44.3k|            auto rd = make_reader<T, char_type>();
 6283|  44.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  44.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.78k, False: 42.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.78k|    }
  ------------------
 6284|  42.5k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  44.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6212|  42.5k|    {
 6213|  42.5k|        const bool need_skipped_width =
 6214|  42.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 42.5k]
  |  Branch (6214:33): [True: 0, False: 42.5k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  42.5k|        auto it = rng.begin();
 6218|  42.5k|        std::ptrdiff_t prefix_width = 0;
 6219|  42.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 42.5k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|  42.5k|        else {
 6227|  42.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 640, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    640|    }                                                  \
  |  |  |  | 3957|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|  41.8k|            std::tie(it, prefix_width) = prefix_result;
 6229|  41.8k|        }
 6230|  41.8k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  41.8k|        std::ptrdiff_t value_width = 0;
 6234|  41.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 41.8k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|  41.8k|        else {
 6250|  41.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.93k, False: 38.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  2.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  2.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  2.93k|    }                                                  \
  |  | 3957|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  38.9k|                                             specs, value, loc));
 6252|       |
 6253|  38.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 38.9k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  38.9k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  38.9k|        std::ptrdiff_t postfix_width = 0;
 6262|  38.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 38.5k, False: 400]
  ------------------
 6263|  38.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  38.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  38.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  38.5k|                                 value_width));
 6267|  38.5k|            std::tie(it, postfix_width) = postfix_result;
 6268|  38.5k|        }
 6269|       |
 6270|  38.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  38.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  38.9k|            specs, prefix_width, value_width, postfix_width));
 6272|  38.9k|        return it;
 6273|  38.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|  44.3k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|  44.3k|                          basic_contiguous_scan_context<char_type>>) {
 6282|  44.3k|            auto rd = make_reader<T, char_type>();
 6283|  44.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  44.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.78k, False: 42.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.78k|    }
  ------------------
 6284|  42.5k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|  44.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6212|  42.5k|    {
 6213|  42.5k|        const bool need_skipped_width =
 6214|  42.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 42.5k]
  |  Branch (6214:33): [True: 0, False: 42.5k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|  42.5k|        auto it = rng.begin();
 6218|  42.5k|        std::ptrdiff_t prefix_width = 0;
 6219|  42.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 42.5k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|  42.5k|        else {
 6227|  42.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 640, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    640|    }                                                  \
  |  |  |  | 3957|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|  41.8k|            std::tie(it, prefix_width) = prefix_result;
 6229|  41.8k|        }
 6230|  41.8k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|  41.8k|        std::ptrdiff_t value_width = 0;
 6234|  41.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 41.8k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|  41.8k|        else {
 6250|  41.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.93k, False: 38.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  2.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  2.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  2.93k|    }                                                  \
  |  | 3957|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  38.9k|                                             specs, value, loc));
 6252|       |
 6253|  38.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 38.9k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  38.9k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  38.9k|        std::ptrdiff_t postfix_width = 0;
 6262|  38.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 38.5k, False: 400]
  ------------------
 6263|  38.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  38.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  38.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  38.5k|                                 value_width));
 6267|  38.5k|            std::tie(it, postfix_width) = postfix_result;
 6268|  38.5k|        }
 6269|       |
 6270|  38.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  38.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  38.9k|            specs, prefix_width, value_width, postfix_width));
 6272|  38.9k|        return it;
 6273|  38.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|   883k|{
 5884|   883k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   883k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.07k, False: 881k]
  |  |  ------------------
  ------------------
 5885|  2.07k|        return unexpected(e);
 5886|  2.07k|    }
 5887|       |
 5888|   881k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 881k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   881k|    return skip_classic_whitespace(range);
 5893|   881k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|   441k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|   441k|                          basic_contiguous_scan_context<char_type>>) {
 5966|   441k|            auto rd = make_reader<T, char_type>();
 5967|   441k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|   441k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5953|   441k|    {
 5954|   441k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   441k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.28k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.28k|    }                                                  \
  |  |  |  | 3957|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|   440k|                        .transform_error(make_eof_scan_error));
 5956|   440k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|   441k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5351|   440k|    {
 5352|   440k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|   440k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|   440k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5961|   441k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|   441k|                          basic_contiguous_scan_context<char_type>>) {
 5966|   441k|            auto rd = make_reader<T, char_type>();
 5967|   441k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|   441k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5953|   441k|    {
 5954|   441k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   441k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.28k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.28k|    }                                                  \
  |  |  |  | 3957|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|   440k|                        .transform_error(make_eof_scan_error));
 5956|   440k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|   441k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5351|   440k|    {
 5352|   440k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|   440k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|   440k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   617k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   617k|    static_cast<    \
  |  | 1109|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   617k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   617k|          m_current(m_range.begin())
 3020|   617k|    {
 3021|   617k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|  1.18M|    {
 3030|  1.18M|        return m_range.end();
 3031|  1.18M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   581k|    {
 3045|   581k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   581k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   581k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 581k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   581k|        }
 3051|   581k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   581k|    static_cast<    \
  |  | 1109|   581k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   581k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   603k|    {
 3035|   603k|        return ranges::subrange{begin(), end()};
 3036|   603k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|   596k|    {
 6126|   596k|        const bool need_skipped_width =
 6127|   596k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 596k]
  |  Branch (6127:33): [True: 0, False: 596k]
  ------------------
 6128|   596k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   596k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 596k]
  ------------------
 6132|   596k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 596k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   596k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 596k, False: 0]
  |  Branch (6136:56): [True: 588k, False: 7.38k]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   588k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 588k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|  1.17M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   588k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   588k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   588k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.71k, False: 587k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.71k|    }                                                  \
  |  |  |  | 3957|   588k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|  1.17M|                            make_eof_scan_error));
 6147|       |
 6148|  1.17M|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 587k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   587k|            return result_type{it, 0};
 6156|  1.17M|        }
 6157|       |
 6158|  7.38k|        return result_type{rng.begin(), 0};
 6159|   596k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|   580k|    {
 6168|   580k|        const bool need_skipped_width =
 6169|   580k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 580k]
  |  Branch (6169:33): [True: 0, False: 580k]
  ------------------
 6170|   580k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   580k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 580k]
  ------------------
 6173|   580k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 580k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   580k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 580k, False: 0]
  ------------------
 6182|   580k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 196, False: 580k]
  ------------------
 6183|   580k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 196]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|    196|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 196]
  ------------------
 6185|    196|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   580k|        return result_type{rng.begin(), 0};
 6207|   580k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|   301k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   301k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   301k|            auto rd = make_reader<T, char_type>();
 6283|   301k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   301k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.57k, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.57k|    }
  ------------------
 6284|   298k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   301k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6212|   298k|    {
 6213|   298k|        const bool need_skipped_width =
 6214|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 298k]
  |  Branch (6214:33): [True: 0, False: 298k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   298k|        auto it = rng.begin();
 6218|   298k|        std::ptrdiff_t prefix_width = 0;
 6219|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 298k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   298k|        else {
 6227|   298k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 856, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    856|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    856|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    856|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    856|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    856|    }                                                  \
  |  |  |  | 3957|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   297k|            std::tie(it, prefix_width) = prefix_result;
 6229|   297k|        }
 6230|   297k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   297k|        std::ptrdiff_t value_width = 0;
 6234|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 297k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   297k|        else {
 6250|   297k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.29k, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.29k|    }                                                  \
  |  | 3957|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   290k|                                             specs, value, loc));
 6252|       |
 6253|   290k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 290k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   290k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   290k|        std::ptrdiff_t postfix_width = 0;
 6262|   290k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 290k, False: 710]
  ------------------
 6263|   290k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   290k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   290k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   290k|                                 value_width));
 6267|   290k|            std::tie(it, postfix_width) = postfix_result;
 6268|   290k|        }
 6269|       |
 6270|   290k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   290k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   290k|            specs, prefix_width, value_width, postfix_width));
 6272|   290k|        return it;
 6273|   290k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6277|   301k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   301k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   301k|            auto rd = make_reader<T, char_type>();
 6283|   301k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   301k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.57k, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.57k|    }
  ------------------
 6284|   298k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   301k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6212|   298k|    {
 6213|   298k|        const bool need_skipped_width =
 6214|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 298k]
  |  Branch (6214:33): [True: 0, False: 298k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   298k|        auto it = rng.begin();
 6218|   298k|        std::ptrdiff_t prefix_width = 0;
 6219|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 298k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   298k|        else {
 6227|   298k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 856, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    856|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    856|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    856|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    856|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    856|    }                                                  \
  |  |  |  | 3957|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   297k|            std::tie(it, prefix_width) = prefix_result;
 6229|   297k|        }
 6230|   297k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   297k|        std::ptrdiff_t value_width = 0;
 6234|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 297k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   297k|        else {
 6250|   297k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.29k, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.29k|    }                                                  \
  |  | 3957|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   290k|                                             specs, value, loc));
 6252|       |
 6253|   290k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 290k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   290k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   290k|        std::ptrdiff_t postfix_width = 0;
 6262|   290k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 290k, False: 710]
  ------------------
 6263|   290k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   290k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   290k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   290k|                                 value_width));
 6267|   290k|            std::tie(it, postfix_width) = postfix_result;
 6268|   290k|        }
 6269|       |
 6270|   290k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   290k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   290k|            specs, prefix_width, value_width, postfix_width));
 6272|   290k|        return it;
 6273|   290k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5883|   441k|{
 5884|   441k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.03k, False: 440k]
  |  |  ------------------
  ------------------
 5885|  1.03k|        return unexpected(e);
 5886|  1.03k|    }
 5887|       |
 5888|   440k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 440k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   440k|    return skip_classic_whitespace(range);
 5893|   440k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|   441k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|   441k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|   441k|            auto rd = make_reader<T, char_type>();
 5971|   441k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 441k, False: 0]
  ------------------
 5972|   441k|                return impl(rd, range, value);
 5973|   441k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|   441k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5953|   441k|    {
 5954|   441k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   441k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.28k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.28k|    }                                                  \
  |  |  |  | 3957|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|   440k|                        .transform_error(make_eof_scan_error));
 5956|   440k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|   441k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5351|   440k|    {
 5352|   440k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5353|   440k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5354|   440k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    894|{
   53|    894|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    894|    string_buffer.resize(size);
   57|    894|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    894|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    894|    const auto wsv_reinterpret_size =
   62|    894|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 150, False: 744]
  ------------------
   63|    894|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    894|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    894|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    894|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    894|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    894|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    894|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    894|{
  123|    894|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    894|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    894|    buf.resize(sizeof...(Args));
  126|    894|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    894|    return buf;
  128|    894|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    894|{
  109|    894|    if constexpr (std::is_same_v<CharT, char>) {
  110|    894|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    894|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    894|{
  186|    894|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    894|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    894|                                   format_strings);
  189|    894|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    894|{
  134|       |    // Regular scan
  135|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.36k, False: 894]
  ------------------
  136|  5.36k|        auto it = scn::ranges::begin(source);
  137|  43.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  43.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  43.9k|            auto result = scn::scan<T>(
  140|  43.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  43.9k|                scn::runtime_format(f));
  142|  43.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.36k, False: 38.5k]
  ------------------
  143|  5.36k|                break;
  144|  5.36k|            }
  145|  38.5k|            it = result->begin();
  146|  38.5k|        }
  147|  5.36k|    }
  148|       |
  149|       |    // scan localized
  150|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.36k, False: 894]
  ------------------
  151|  5.36k|        auto it = scn::ranges::begin(source);
  152|  43.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  43.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  43.9k|            auto result = scn::scan<T>(
  155|  43.9k|                global_locale,
  156|  43.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.9k|                scn::runtime_format(f));
  158|  43.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.36k, False: 38.5k]
  ------------------
  159|  5.36k|                break;
  160|  5.36k|            }
  161|  38.5k|            it = result->begin();
  162|  38.5k|        }
  163|  5.36k|    }
  164|       |
  165|       |    // scan_value
  166|    894|    {
  167|    894|        auto it = scn::ranges::begin(source);
  168|  20.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.0k|            auto result = scn::scan_value<T>(
  171|  20.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 894, False: 19.1k]
  ------------------
  173|    894|                break;
  174|    894|            }
  175|  19.1k|            it = result->begin();
  176|  19.1k|        }
  177|    894|    }
  178|    894|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    894|{
  134|       |    // Regular scan
  135|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.36k, False: 894]
  ------------------
  136|  5.36k|        auto it = scn::ranges::begin(source);
  137|  43.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  43.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  43.9k|            auto result = scn::scan<T>(
  140|  43.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  43.9k|                scn::runtime_format(f));
  142|  43.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.36k, False: 38.5k]
  ------------------
  143|  5.36k|                break;
  144|  5.36k|            }
  145|  38.5k|            it = result->begin();
  146|  38.5k|        }
  147|  5.36k|    }
  148|       |
  149|       |    // scan localized
  150|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.36k, False: 894]
  ------------------
  151|  5.36k|        auto it = scn::ranges::begin(source);
  152|  43.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  43.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  43.9k|            auto result = scn::scan<T>(
  155|  43.9k|                global_locale,
  156|  43.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.9k|                scn::runtime_format(f));
  158|  43.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.36k, False: 38.5k]
  ------------------
  159|  5.36k|                break;
  160|  5.36k|            }
  161|  38.5k|            it = result->begin();
  162|  38.5k|        }
  163|  5.36k|    }
  164|       |
  165|       |    // scan_value
  166|    894|    {
  167|    894|        auto it = scn::ranges::begin(source);
  168|  20.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.0k|            auto result = scn::scan_value<T>(
  171|  20.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 894, False: 19.1k]
  ------------------
  173|    894|                break;
  174|    894|            }
  175|  19.1k|            it = result->begin();
  176|  19.1k|        }
  177|    894|    }
  178|    894|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    894|{
  134|       |    // Regular scan
  135|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.36k, False: 894]
  ------------------
  136|  5.36k|        auto it = scn::ranges::begin(source);
  137|  52.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  52.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  52.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  52.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  52.9k|            auto result = scn::scan<T>(
  140|  52.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  52.9k|                scn::runtime_format(f));
  142|  52.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.36k, False: 47.5k]
  ------------------
  143|  5.36k|                break;
  144|  5.36k|            }
  145|  47.5k|            it = result->begin();
  146|  47.5k|        }
  147|  5.36k|    }
  148|       |
  149|       |    // scan localized
  150|  5.36k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.36k, False: 894]
  ------------------
  151|  5.36k|        auto it = scn::ranges::begin(source);
  152|  52.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  52.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  52.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  52.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  52.9k|            auto result = scn::scan<T>(
  155|  52.9k|                global_locale,
  156|  52.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  52.9k|                scn::runtime_format(f));
  158|  52.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.36k, False: 47.5k]
  ------------------
  159|  5.36k|                break;
  160|  5.36k|            }
  161|  47.5k|            it = result->begin();
  162|  47.5k|        }
  163|  5.36k|    }
  164|       |
  165|       |    // scan_value
  166|    894|    {
  167|    894|        auto it = scn::ranges::begin(source);
  168|  24.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  24.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  24.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  24.4k|            auto result = scn::scan_value<T>(
  171|  24.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  24.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 894, False: 23.5k]
  ------------------
  173|    894|                break;
  174|    894|            }
  175|  23.5k|            it = result->begin();
  176|  23.5k|        }
  177|    894|    }
  178|    894|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    894|{
   91|    894|    using char_type = ranges::range_value_t<Source>;
   92|    894|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    894|    deque.clear();
   94|    894|    std::copy(ranges::begin(source), ranges::end(source),
   95|    894|              std::back_inserter(deque));
   96|    894|    return deque;
   97|    894|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    894|{
   80|    894|    if constexpr (std::is_same_v<CharT, char>) {
   81|    894|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    894|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    894|{
  123|    894|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    894|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    894|    buf.resize(sizeof...(Args));
  126|    894|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    894|    return buf;
  128|    894|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    894|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    894|    else {
  113|    894|        return wformat_string_view_buffer;
  114|    894|    }
  115|    894|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.78k|{
  186|  1.78k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.78k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.78k|                                   format_strings);
  189|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.78k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   301k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   301k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   301k|            auto result = scn::scan<T>(
  140|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   301k|                scn::runtime_format(f));
  142|   301k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 290k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   290k|            it = result->begin();
  146|   290k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.78k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   301k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   301k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   301k|            auto result = scn::scan<T>(
  155|   301k|                global_locale,
  156|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   301k|                scn::runtime_format(f));
  158|   301k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 290k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   290k|            it = result->begin();
  162|   290k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|   147k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   147k|            auto result = scn::scan_value<T>(
  171|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   147k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 145k]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|   145k|            it = result->begin();
  176|   145k|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.78k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   301k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   301k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   301k|            auto result = scn::scan<T>(
  140|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   301k|                scn::runtime_format(f));
  142|   301k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 290k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   290k|            it = result->begin();
  146|   290k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.78k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   301k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   301k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   301k|            auto result = scn::scan<T>(
  155|   301k|                global_locale,
  156|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   301k|                scn::runtime_format(f));
  158|   301k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 290k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   290k|            it = result->begin();
  162|   290k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|   147k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   147k|            auto result = scn::scan_value<T>(
  171|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   147k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 145k]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|   145k|            it = result->begin();
  176|   145k|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.78k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   301k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   301k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   301k|            auto result = scn::scan<T>(
  140|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   301k|                scn::runtime_format(f));
  142|   301k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 290k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   290k|            it = result->begin();
  146|   290k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.78k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   301k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   301k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   301k|            auto result = scn::scan<T>(
  155|   301k|                global_locale,
  156|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   301k|                scn::runtime_format(f));
  158|   301k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 290k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   290k|            it = result->begin();
  162|   290k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|   147k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   147k|            auto result = scn::scan_value<T>(
  171|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   147k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 145k]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|   145k|            it = result->begin();
  176|   145k|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.78k|{
   91|  1.78k|    using char_type = ranges::range_value_t<Source>;
   92|  1.78k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.78k|    deque.clear();
   94|  1.78k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.78k|              std::back_inserter(deque));
   96|  1.78k|    return deque;
   97|  1.78k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.78k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.78k|    else {
   84|  1.78k|        return wnoncontiguous_buffer;
   85|  1.78k|    }
   86|  1.78k|}

LLVMFuzzerTestOneInput:
   57|    895|{
   58|    895|    scn::fuzz::run(data, size);
   59|    895|    return 0;
   60|    895|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    895|{
   36|    895|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 894]
  |  Branch (36:35): [True: 0, False: 894]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    894|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    894|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    894|                                             "{:64U}", "{:[A-Za-z]}");
   44|    894|    do_basic_run(sv, f);
   45|       |
   46|    894|    const auto& wf = get_format_strings<wchar_t>(
   47|    894|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    894|    do_basic_run(wsv_reinterpret, wf);
   49|    894|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 894, False: 0]
  ------------------
   50|    894|        do_basic_run(wsv_transcode, wf);
   51|    894|    }
   52|    894|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    894|{
   25|    894|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    894|                                                           format_strings);
   27|    894|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    894|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    894|            source, format_strings);
   30|    894|    }
   31|    894|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    894|{
   25|    894|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    894|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    894|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.78k|{
   25|  1.78k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.78k|                                                           format_strings);
   27|  1.78k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.78k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.78k|            source, format_strings);
   30|  1.78k|    }
   31|  1.78k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.78k|{
   25|  1.78k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.78k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.78k|}

