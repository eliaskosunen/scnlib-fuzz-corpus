_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  11.8M|{
 3807|  11.8M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  11.8M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  11.8M|    }
 3810|  11.8M|    else if constexpr (sizeof(U) == 2) {
 3811|  11.8M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  11.8M|    }
 3813|  11.8M|    else {
 3814|       |        // utf-32
 3815|  11.8M|        static_assert(sizeof(U) == 4);
 3816|  11.8M|        SCN_UNUSED(ch);
 3817|  11.8M|        return 1;
 3818|  11.8M|    }
 3819|  11.8M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  11.8M|{
 3771|  11.8M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  11.8M|    SCN_GCC_COMPAT_PUSH
 3774|  11.8M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  11.8M|    constexpr char lengths[] =
 3776|  11.8M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  11.8M|        "\1\1\1\1\1\1\1\1"
 3778|  11.8M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  11.8M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  11.8M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  11.8M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  11.8M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  11.8M|    SCN_GCC_COMPAT_POP
 3785|  11.8M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  11.4M|{
 4013|  11.4M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  11.4M|        return decode_utf8_code_point_exhaustive(input);
 4015|  11.4M|    }
 4016|  11.4M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  11.4M|        return decode_utf16_code_point_exhaustive(input);
 4018|  11.4M|    }
 4019|  11.4M|    else {
 4020|  11.4M|        SCN_EXPECT(input.size() == 1);
 4021|  11.4M|        auto cp = static_cast<char32_t>(input.front());
 4022|  11.4M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  11.4M|            return invalid_code_point;
 4024|  11.4M|        }
 4025|  11.4M|        return cp;
 4026|  11.4M|    }
 4027|  11.4M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  11.4M|{
 3826|  11.4M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  11.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  11.4M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  11.4M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  11.4M|    };
 3831|       |
 3832|  11.4M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 9.91M, False: 1.55M]
  ------------------
 3833|  9.91M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 816, False: 9.91M]
  ------------------
 3834|    816|            SCN_UNLIKELY_ATTR
 3835|    816|            return invalid_code_point;
 3836|    816|        }
 3837|  9.91M|        return static_cast<char32_t>(input[0]);
 3838|  9.91M|    }
 3839|       |
 3840|  1.55M|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 857k, False: 692k]
  ------------------
 3841|   857k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 442, False: 857k]
  ------------------
 3842|    442|            SCN_UNLIKELY_ATTR
 3843|    442|            return invalid_code_point;
 3844|    442|        }
 3845|   857k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 32.6k, False: 824k]
  ------------------
 3846|  32.6k|            SCN_UNLIKELY_ATTR
 3847|  32.6k|            return invalid_code_point;
 3848|  32.6k|        }
 3849|       |
 3850|   824k|        char32_t cp{};
 3851|   824k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   824k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   824k|        return cp;
 3854|   857k|    }
 3855|       |
 3856|   692k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 652k, False: 39.9k]
  ------------------
 3857|   652k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 43, False: 652k]
  ------------------
 3858|     43|            SCN_UNLIKELY_ATTR
 3859|     43|            return invalid_code_point;
 3860|     43|        }
 3861|   652k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 27.9k, False: 624k]
  ------------------
 3862|   652k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 3.58k, False: 620k]
  ------------------
 3863|  31.5k|            SCN_UNLIKELY_ATTR
 3864|  31.5k|            return invalid_code_point;
 3865|  31.5k|        }
 3866|       |
 3867|   620k|        char32_t cp{};
 3868|   620k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   620k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   620k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   620k|        return cp;
 3872|   652k|    }
 3873|       |
 3874|  39.9k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 39.9k, False: 0]
  ------------------
 3875|  39.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 39.9k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  39.9k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 16.0k, False: 23.9k]
  ------------------
 3880|  16.0k|            SCN_UNLIKELY_ATTR
 3881|  16.0k|            return invalid_code_point;
 3882|  16.0k|        }
 3883|  23.9k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 7.72k, False: 16.2k]
  ------------------
 3884|  23.9k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 491, False: 15.7k]
  ------------------
 3885|  23.9k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 417, False: 15.3k]
  ------------------
 3886|  8.63k|            SCN_UNLIKELY_ATTR
 3887|  8.63k|            return invalid_code_point;
 3888|  8.63k|        }
 3889|       |
 3890|  15.3k|        char32_t cp{};
 3891|  15.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  15.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  15.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  15.3k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  15.3k|        return cp;
 3896|  23.9k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  2.18M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.18M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.18M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  10.1M|{
 3699|  10.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  10.1M|                                          decltype(first), decltype(last)> &&
 3701|  10.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  10.1M|        return {first, last};
 3703|  10.1M|    }
 3704|  10.1M|    else {
 3705|  10.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  10.1M|                                       to_address(first), to_address(last)))};
 3707|  10.1M|    }
 3708|  10.1M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  31.5M|{
  326|  31.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  31.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  31.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  32.2M|{
  304|  32.2M|    return p;
  305|  32.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  4.85M|{
 3730|  4.85M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  4.85M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  4.85M|                      decltype(it)> &&
 3733|  4.85M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  4.85M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  4.85M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  4.85M|        return it;
 3736|  4.85M|    }
 3737|  4.85M|    else {
 3738|  4.85M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  4.85M|    }
 3740|  4.85M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  64.9k|    {
 2724|  64.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  64.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  64.9k|    {
 2705|  64.9k|        return decay_copy(t.begin());
 2706|  64.9k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  5.07M|{
 1949|  5.07M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.07M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.18M|    {
 2781|  1.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.18M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.18M|    {
 2763|  1.18M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.18M|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|   120k|{
 8867|   120k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   120k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   120k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   513k|{
 5396|   513k|    detail::check_scan_arg_types<Args...>();
 5397|   513k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   513k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   630k|{
 5135|   630k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   630k|                  "Scan argument types must be default constructible");
 5137|   630k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   630k|                  "Scan argument types must be Destructible");
 5139|   630k|    static_assert(
 5140|   630k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   630k|        "Scan argument types must not be references");
 5142|   630k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|   513k|    {
 5349|   513k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   513k|    {
 5360|   513k|        return {detail::make_arg<
 5361|   513k|            kind, Context,
 5362|   513k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   513k|                                 typename Context::char_type>::value>(args)...};
 5364|   513k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   513k|{
 5170|   513k|    return make_value<Context>(value).ref_value;
 5171|   513k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   630k|{
 5120|   630k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   630k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   630k|                                  needs_context_tag>) {
 5124|   630k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   630k|    }
 5126|   630k|    else {
 5127|   630k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   630k|            value, context_tag<Context>{}));
 5129|   630k|    }
 5130|   630k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   630k|    {                                                                        \
 4959|   630k|        return val;                                                          \
 4960|   630k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   630k|{
 5089|   630k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   630k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   630k|    constexpr bool scannable_char =
 5093|   630k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   630k|    static_assert(scannable_char,
 5095|   630k|                  "Cannot scan an argument of an unsupported character "
 5096|   630k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   630k|    constexpr bool scannable_const =
 5099|   630k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   630k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   630k|    constexpr bool scannable_disabled =
 5103|   630k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   630k|    static_assert(scannable_disabled,
 5105|   630k|                  "Cannot scan an argument that has been disabled by "
 5106|   630k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   630k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   630k|    static_assert(
 5110|   630k|        scannable,
 5111|   630k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   630k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   630k|    return arg_value{arg};
 5115|   630k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   630k|    {
 4902|   630k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   241k|{
 8654|   241k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   241k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   241k|{
 8591|   241k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   241k|    auto result = vscan_impl(buffer, format, args);
 8594|   241k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 212k]
  |  |  ------------------
  ------------------
 8595|  28.8k|        return unexpected(result.error());
 8596|  28.8k|    }
 8597|   212k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   241k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   593k|{
 4720|   593k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   593k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   593k|                  "\n"
 4724|   593k|                  "Unsupported range type given as input to a scanning "
 4725|   593k|                  "function.\n"
 4726|   593k|                  "A range needs to have a character type (value type) "
 4727|   593k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   593k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   593k|                  "to be included.\n"
 4730|   593k|                  "See the scnlib documentation for more details.");
 4731|   593k|    static_assert(
 4732|   593k|        !std::is_same_v<T, custom_char_traits>,
 4733|   593k|        "\n"
 4734|   593k|        "Unsupported range type given as input to a scanning "
 4735|   593k|        "function.\n"
 4736|   593k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   593k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   593k|        "not supported.");
 4739|   593k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   593k|                  "\n"
 4741|   593k|                  "Unsupported range type given as input to a scanning "
 4742|   593k|                  "function.\n"
 4743|   593k|                  "file_marker_found cannot be used as an "
 4744|   593k|                  "source range type to scn::scan.\n"
 4745|   593k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   593k|                  "and do not provide an explicit source range, "
 4747|   593k|                  "or use scn::scan with a FILE* directly.");
 4748|   593k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   593k|                  "\n"
 4750|   593k|                  "Unsupported range type given as input to a scanning "
 4751|   593k|                  "function.\n"
 4752|   593k|                  "In order to be scannable, a range needs to satisfy "
 4753|   593k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   593k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   593k|                  "\n"
 4756|   593k|                  "Unsupported range type given as input to a scanning "
 4757|   593k|                  "function.\n"
 4758|   593k|                  "A range needs to model forward_range and have a valid "
 4759|   593k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   593k|                  "Examples of scannable ranges are std::string, "
 4761|   593k|                  "std::string_view, "
 4762|   593k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   593k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   593k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   593k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   593k|{
 4659|   593k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   593k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   593k|    }
 4662|   593k|    else {
 4663|   593k|        return invalid_char_type{};
 4664|   593k|    }
 4665|   593k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   593k|    {
 2855|   593k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   593k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   593k|    {
 2836|   593k|        return t.data();
 2837|   593k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   593k|    {
 3231|   593k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 4.64k, False: 588k]
  ------------------
 3232|   593k|                   ? nullptr
 3233|   593k|                   : std::addressof(*ranges::begin(derived()));
 3234|   593k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   593k|    {
 3005|   593k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   593k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   593k|    {
 2978|   593k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   593k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  2.23M|    {
 3339|  2.23M|        return m_iterator == m_sentinel;
 3340|  2.23M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  1.18M|    {
 3185|  1.18M|        return static_cast<const D&>(*this);
 3186|  1.18M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.11M|    {
 2724|  1.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.11M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.11M|    {
 2705|  1.11M|        return decay_copy(t.begin());
 2706|  1.11M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  6.55M|    {
 3330|  6.55M|        return m_iterator;
 3331|  6.55M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   593k|    {
 2930|   593k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   593k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   593k|    {
 2896|   593k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   593k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  8.43M|{
 1949|  8.43M|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  8.43M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  2.23M|    {
 3346|  2.23M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.23M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  16.9M|    {
 1598|  16.9M|        return has_value();
 1599|  16.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  33.8M|    {
  485|  33.8M|        return m_has_value;
  486|  33.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   281k|    {
 1604|   281k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   281k|        return this->get_unexpected().error();
 1606|   281k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   281k|    {
  468|   281k|        return m_unexpected;
  469|   281k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  2.08M|    {
  361|  2.08M|        return m_unexpected;
  362|  2.08M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  1.04M|    {
  347|  1.04M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.04M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.04M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  62.5k|    {
 1476|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  62.5k|    {
  447|  62.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  1.19M|    {
  356|  1.19M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   593k|    {
 1177|   593k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   531k|{
 5923|   531k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   531k|                      ranges::iterator_t<SourceRange>>) {
 5925|   531k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   531k|    }
 5927|   531k|    else {
 5928|   531k|        auto it = ranges::begin(source);
 5929|   531k|        while (n > 0) {
 5930|   531k|            --n;
 5931|   531k|            ++it;
 5932|   531k|        }
 5933|   531k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   531k|    }
 5935|   531k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.16M|    {
 2724|  2.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.16M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.16M|    {
 2705|  2.16M|        return decay_copy(t.begin());
 2706|  2.16M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   531k|{
 5910|   531k|    return ranges::end(source);
 5911|   531k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   531k|    {
 2781|   531k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   531k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   531k|    {
 2763|   531k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   531k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  3.41M|    {
 3334|  3.41M|        return m_sentinel;
 3335|  3.41M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  16.5M|    {
 1653|  16.5M|        return value();
 1654|  16.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  16.5M|    {
 1627|  16.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.5M|        return this->get_value();
 1629|  16.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  16.5M|    {
  451|  16.5M|        return m_value;
  452|  16.5M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   531k|    {
 1430|   531k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   531k|    {
  437|   531k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|   241k|    {
 7975|   241k|        return m_str;
 7976|   241k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   513k|    {
 5426|   513k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   513k|    {
 5379|   513k|        return m_argptrs;
 5380|   513k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   754k|    {
 5478|   754k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   241k|{
 8820|   241k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 212k]
  |  |  ------------------
  ------------------
 8821|  28.8k|        return unexpected(result.error());
 8822|  28.8k|    }
 8823|   212k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   241k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   593k|    {
 1598|   593k|        return has_value();
 1599|   593k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.18M|    {
  485|  1.18M|        return m_has_value;
  486|  1.18M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  62.5k|    {
 1604|  62.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  62.5k|        return this->get_unexpected().error();
 1606|  62.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  62.5k|    {
  468|  62.5k|        return m_unexpected;
  469|  62.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  31.2k|    {
 1476|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  31.2k|    {
  626|  31.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  31.2k|    {
  689|  31.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  31.2k|                                  std::forward<Args>(args)...);
  691|  31.2k|        m_has_value = false;
  692|  31.2k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   187k|{
  392|   187k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   187k|        T(std::forward<Args>(args)...);
  394|   187k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  62.5k|    {
  718|  62.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  62.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  62.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  62.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   296k|    {
 1177|   296k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   425k|    {
 1653|   425k|        return value();
 1654|   425k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   531k|    {
 1627|   531k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   531k|        return this->get_value();
 1629|   531k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   531k|    {
  451|   531k|        return m_value;
  452|   531k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|   265k|    {
 5830|   265k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   531k|    {
 5681|   531k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|   568k|    {
 5616|   568k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|   265k|    {
 1430|   265k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|   265k|    {
  616|   265k|        construct(std::forward<Args>(args)...);
  617|   265k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   265k|    {
  682|   265k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   265k|        m_has_value = true;
  684|   265k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   265k|{
  392|   265k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   265k|        T(std::forward<Args>(args)...);
  394|   265k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|   265k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   796k|    {
  706|   796k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   796k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   796k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   531k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   513k|    {
 5374|   513k|        return m_args;
 5375|   513k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   513k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  3.82M|    {
 3316|  3.82M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   754k|{
 7691|   754k|    return s;
 7692|   754k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   754k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   241k|    {
 7971|   241k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   296k|    {
 1598|   296k|        return has_value();
 1599|   296k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   859k|    {
  675|   859k|        return m_has_value;
  676|   859k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   265k|    {
 1673|   265k|        return &value();
 1674|   265k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|   265k|    {
 1627|   265k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   265k|        return this->get_value();
 1629|   265k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   265k|    {
  641|   265k|        return *value_ptr();
  642|   265k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   531k|    {
 5698|   531k|        return ranges::begin(m_range);
 5699|   531k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   296k|    {
  631|   296k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 265k, False: 31.2k]
  ------------------
  632|   265k|            destroy_value();
  633|   265k|        }
  634|  31.2k|        else {
  635|  31.2k|            destroy_unexpected();
  636|  31.2k|        }
  637|   296k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   265k|    {
  696|   265k|        scn::detail::destroy_at(value_ptr());
  697|   265k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   265k|{
  398|   265k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   265k|        for (auto& elem : *p) {
  400|   265k|            scn::detail::destroy_at(&elem);
  401|   265k|        }
  402|   265k|    }
  403|   265k|    else {
  404|   265k|        p->~T();
  405|   265k|    }
  406|   265k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  31.2k|    {
  700|  31.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  31.2k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   187k|{
  398|   187k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   187k|        for (auto& elem : *p) {
  400|   187k|            scn::detail::destroy_at(&elem);
  401|   187k|        }
  402|   187k|    }
  403|   187k|    else {
  404|   187k|        p->~T();
  405|   187k|    }
  406|   187k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|   120k|{
 8934|   120k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   120k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   120k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   241k|{
 8672|   241k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   241k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   241k|{
 8607|   241k|#if !SCN_DISABLE_LOCALE
 8608|   241k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   241k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   241k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   241k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   241k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 212k]
  |  |  ------------------
  ------------------
 8615|  28.8k|        return unexpected(result.error());
 8616|  28.8k|    }
 8617|   212k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   241k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  55.1k|{
 8973|  55.1k|    T value;
 8974|  55.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  55.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  55.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  55.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  55.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 52.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.40k|    }                                                  \
  |  |  |  | 3671|  55.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  52.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  55.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   117k|{
 5155|   117k|    check_scan_arg_types<T>();
 5156|       |
 5157|   117k|    basic_scan_arg<Context> arg;
 5158|   117k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   117k|    arg.m_value = make_value<Context>(value);
 5160|   117k|    return arg;
 5161|   117k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   927k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  12.6M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   110k|{
 8685|   110k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   110k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   110k|{
 8631|   110k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   110k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 105k]
  |  |  ------------------
  ------------------
 8635|  4.81k|        return unexpected(result.error());
 8636|  4.81k|    }
 8637|   105k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   110k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   105k|    {
 1663|   105k|        return std::move(value());
 1664|   105k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|   120k|{
 8867|   120k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   120k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   120k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|   241k|{
 5396|   241k|    detail::check_scan_arg_types<Args...>();
 5397|   241k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   241k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|   296k|{
 5135|   296k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   296k|                  "Scan argument types must be default constructible");
 5137|   296k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   296k|                  "Scan argument types must be Destructible");
 5139|   296k|    static_assert(
 5140|   296k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   296k|        "Scan argument types must not be references");
 5142|   296k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|   241k|    {
 5349|   241k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   241k|    {
 5360|   241k|        return {detail::make_arg<
 5361|   241k|            kind, Context,
 5362|   241k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   241k|                                 typename Context::char_type>::value>(args)...};
 5364|   241k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|   241k|{
 5170|   241k|    return make_value<Context>(value).ref_value;
 5171|   241k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|   296k|{
 5120|   296k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   296k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   296k|                                  needs_context_tag>) {
 5124|   296k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   296k|    }
 5126|   296k|    else {
 5127|   296k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   296k|            value, context_tag<Context>{}));
 5129|   296k|    }
 5130|   296k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|   296k|    {                                                                        \
 4959|   296k|        return val;                                                          \
 4960|   296k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|   296k|{
 5089|   296k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   296k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   296k|    constexpr bool scannable_char =
 5093|   296k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   296k|    static_assert(scannable_char,
 5095|   296k|                  "Cannot scan an argument of an unsupported character "
 5096|   296k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   296k|    constexpr bool scannable_const =
 5099|   296k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   296k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   296k|    constexpr bool scannable_disabled =
 5103|   296k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   296k|    static_assert(scannable_disabled,
 5105|   296k|                  "Cannot scan an argument that has been disabled by "
 5106|   296k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   296k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   296k|    static_assert(
 5110|   296k|        scannable,
 5111|   296k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   296k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   296k|    return arg_value{arg};
 5115|   296k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|   296k|    {
 4902|   296k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|   241k|    {
 7975|   241k|        return m_str;
 7976|   241k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   241k|    {
 5426|   241k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|   241k|    {
 5379|   241k|        return m_argptrs;
 5380|   241k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   241k|{
 8820|   241k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 212k]
  |  |  ------------------
  ------------------
 8821|  28.8k|        return unexpected(result.error());
 8822|  28.8k|    }
 8823|   212k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   241k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  31.2k|    {
 1476|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  31.2k|    {
  447|  31.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   296k|    {
 1177|   296k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|   265k|    {
 5830|   265k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|   265k|    {
 5616|   265k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|   265k|    {
 1430|   265k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|   265k|    {
  437|   265k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|   241k|    {
 5374|   241k|        return m_args;
 5375|   241k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   241k|    {
 7971|   241k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   296k|    {
 1598|   296k|        return has_value();
 1599|   296k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   562k|    {
  485|   562k|        return m_has_value;
  486|   562k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   265k|    {
 1673|   265k|        return &value();
 1674|   265k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|   265k|    {
 1627|   265k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   265k|        return this->get_value();
 1629|   265k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   265k|    {
  451|   265k|        return m_value;
  452|   265k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|   120k|{
 8934|   120k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   120k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   120k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  55.1k|{
 8973|  55.1k|    T value;
 8974|  55.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  55.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  55.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  55.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  55.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 52.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.40k|    }                                                  \
  |  |  |  | 3671|  55.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  52.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  55.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  55.1k|{
 5155|  55.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  55.1k|    basic_scan_arg<Context> arg;
 5158|  55.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  55.1k|    arg.m_value = make_value<Context>(value);
 5160|  55.1k|    return arg;
 5161|  55.1k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  31.2k|    {
 2724|  31.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  31.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  31.2k|    {
 2705|  31.2k|        return decay_copy(t.begin());
 2706|  31.2k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  14.7M|{
 1949|  14.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  14.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  14.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   668k|    {
 2781|   668k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   668k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   668k|    {
 2763|   668k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   668k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|   135k|{
 8867|   135k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   135k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   135k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   135k|    static_cast<    \
  |  |  929|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   135k|    static_cast<    \
  |  |  929|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   135k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   135k|{
 8654|   135k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   135k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   135k|{
 8591|   135k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   135k|    auto result = vscan_impl(buffer, format, args);
 8594|   135k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 121k]
  |  |  ------------------
  ------------------
 8595|  14.4k|        return unexpected(result.error());
 8596|  14.4k|    }
 8597|   121k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   135k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|   334k|{
 4720|   334k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   334k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   334k|                  "\n"
 4724|   334k|                  "Unsupported range type given as input to a scanning "
 4725|   334k|                  "function.\n"
 4726|   334k|                  "A range needs to have a character type (value type) "
 4727|   334k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   334k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   334k|                  "to be included.\n"
 4730|   334k|                  "See the scnlib documentation for more details.");
 4731|   334k|    static_assert(
 4732|   334k|        !std::is_same_v<T, custom_char_traits>,
 4733|   334k|        "\n"
 4734|   334k|        "Unsupported range type given as input to a scanning "
 4735|   334k|        "function.\n"
 4736|   334k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   334k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   334k|        "not supported.");
 4739|   334k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   334k|                  "\n"
 4741|   334k|                  "Unsupported range type given as input to a scanning "
 4742|   334k|                  "function.\n"
 4743|   334k|                  "file_marker_found cannot be used as an "
 4744|   334k|                  "source range type to scn::scan.\n"
 4745|   334k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   334k|                  "and do not provide an explicit source range, "
 4747|   334k|                  "or use scn::scan with a FILE* directly.");
 4748|   334k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   334k|                  "\n"
 4750|   334k|                  "Unsupported range type given as input to a scanning "
 4751|   334k|                  "function.\n"
 4752|   334k|                  "In order to be scannable, a range needs to satisfy "
 4753|   334k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   334k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   334k|                  "\n"
 4756|   334k|                  "Unsupported range type given as input to a scanning "
 4757|   334k|                  "function.\n"
 4758|   334k|                  "A range needs to model forward_range and have a valid "
 4759|   334k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   334k|                  "Examples of scannable ranges are std::string, "
 4761|   334k|                  "std::string_view, "
 4762|   334k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   334k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   334k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   334k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   334k|{
 4690|   334k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   334k|        return file_marker_found{};
 4692|   334k|    }
 4693|   334k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   334k|        if constexpr (ranges::range<Range>) {
 4695|   334k|            return insufficient_range{};
 4696|   334k|        }
 4697|   334k|        else {
 4698|   334k|            return invalid_input_range{};
 4699|   334k|        }
 4700|   334k|    }
 4701|   334k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   334k|        return invalid_char_type{};
 4703|   334k|    }
 4704|   334k|    else {
 4705|   334k|        return make_forward_scan_buffer(r);
 4706|   334k|    }
 4707|   334k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|   334k|{
 4524|   334k|    return basic_scan_forward_buffer_impl(range);
 4525|   334k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   334k|    {
 4411|   334k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|   334k|    {
 4382|   334k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|   334k|    {
 4151|   334k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|   334k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   636k|    {
 2724|   636k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   636k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   636k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   636k|    {
 2705|   636k|        return decay_copy(t.begin());
 2706|   636k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   939k|    {
 3330|   939k|        return m_iterator;
 3331|   939k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  4.27M|    {
 4415|  4.27M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 37.9k, False: 4.24M]
  ------------------
 4416|  37.9k|            return false;
 4417|  37.9k|        }
 4418|  4.24M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  4.24M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  4.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  4.24M|        }
 4421|  4.24M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 3.92M, False: 316k]
  ------------------
 4422|  3.92M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  3.92M|                                          this->m_current_view.begin(),
 4424|  3.92M|                                          this->m_current_view.end());
 4425|  3.92M|        }
 4426|  4.24M|        m_latest = *m_cursor;
 4427|  4.24M|        ++m_cursor;
 4428|  4.24M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  4.24M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  4.24M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  4.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  4.24M|        }
 4432|  4.24M|        return true;
 4433|  4.24M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  12.7M|    {
 2781|  12.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  12.7M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  12.7M|    {
 2763|  12.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  12.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  12.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  13.0M|    {
 3334|  13.0M|        return m_sentinel;
 3335|  13.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|   334k|    {
 4071|   334k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   334k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   334k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  31.2k|    {
 1476|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  31.2k|    {
  447|  31.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   334k|    {
 1177|   334k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   302k|{
 5923|   302k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   302k|                      ranges::iterator_t<SourceRange>>) {
 5925|   302k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   302k|    }
 5927|   302k|    else {
 5928|   302k|        auto it = ranges::begin(source);
 5929|   302k|        while (n > 0) {
 5930|   302k|            --n;
 5931|   302k|            ++it;
 5932|   302k|        }
 5933|   302k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   302k|    }
 5935|   302k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   302k|    {
 2724|   302k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   302k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   302k|    {
 2705|   302k|        return decay_copy(t.begin());
 2706|   302k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|   302k|{
 5910|   302k|    return ranges::end(source);
 5911|   302k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   302k|    {
 2781|   302k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   302k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   302k|    {
 2763|   302k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   302k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   302k|    {
 1430|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   302k|    {
  437|   302k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|   271k|    {
 7975|   271k|        return m_str;
 7976|   271k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   271k|{
 8820|   271k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 242k]
  |  |  ------------------
  ------------------
 8821|  28.8k|        return unexpected(result.error());
 8822|  28.8k|    }
 8823|   242k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   242k|    static_cast<    \
  |  |  929|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   242k|    static_cast<    \
  |  |  929|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   271k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   334k|    {
 1598|   334k|        return has_value();
 1599|   334k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   668k|    {
  485|   668k|        return m_has_value;
  486|   668k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  31.2k|    {
 1604|  31.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  31.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  31.2k|        return this->get_unexpected().error();
 1606|  31.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  31.2k|    {
  468|  31.2k|        return m_unexpected;
  469|  31.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  31.2k|    {
 1476|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  31.2k|    {
  626|  31.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  31.2k|    {
  689|  31.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  31.2k|                                  std::forward<Args>(args)...);
  691|  31.2k|        m_has_value = false;
  692|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  62.5k|    {
  718|  62.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  62.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  62.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  62.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   334k|    {
 1177|   334k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   242k|    {
 1653|   242k|        return value();
 1654|   242k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   302k|    {
 1627|   302k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   302k|        return this->get_value();
 1629|   302k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   302k|    {
  451|   302k|        return m_value;
  452|   302k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|   302k|    {
 5830|   302k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|   302k|    {
 5681|   302k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|   302k|    {
 1430|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|   302k|    {
  616|   302k|        construct(std::forward<Args>(args)...);
  617|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   302k|    {
  682|   302k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   302k|        m_has_value = true;
  684|   302k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   302k|{
  392|   302k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   302k|        T(std::forward<Args>(args)...);
  394|   302k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|   302k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   908k|    {
  706|   908k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   908k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   908k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   605k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   636k|    {
 3316|   636k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   271k|    {
 7971|   271k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   334k|    {
 1598|   334k|        return has_value();
 1599|   334k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   970k|    {
  675|   970k|        return m_has_value;
  676|   970k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   302k|    {
 1673|   302k|        return &value();
 1674|   302k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|   302k|    {
 1627|   302k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   302k|        return this->get_value();
 1629|   302k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   302k|    {
  641|   302k|        return *value_ptr();
  642|   302k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|   302k|    {
 5698|   302k|        return ranges::begin(m_range);
 5699|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   334k|    {
  631|   334k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 302k, False: 31.2k]
  ------------------
  632|   302k|            destroy_value();
  633|   302k|        }
  634|  31.2k|        else {
  635|  31.2k|            destroy_unexpected();
  636|  31.2k|        }
  637|   334k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   302k|    {
  696|   302k|        scn::detail::destroy_at(value_ptr());
  697|   302k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   302k|{
  398|   302k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   302k|        for (auto& elem : *p) {
  400|   302k|            scn::detail::destroy_at(&elem);
  401|   302k|        }
  402|   302k|    }
  403|   302k|    else {
  404|   302k|        p->~T();
  405|   302k|    }
  406|   302k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  31.2k|    {
  700|  31.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  31.2k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|   135k|{
 8934|   135k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   135k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   135k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   135k|    static_cast<    \
  |  |  929|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   135k|    static_cast<    \
  |  |  929|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   135k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   135k|{
 8672|   135k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   135k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   135k|{
 8607|   135k|#if !SCN_DISABLE_LOCALE
 8608|   135k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   135k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   135k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   135k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   135k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 121k]
  |  |  ------------------
  ------------------
 8615|  14.4k|        return unexpected(result.error());
 8616|  14.4k|    }
 8617|   121k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   135k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  62.2k|{
 8973|  62.2k|    T value;
 8974|  62.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  62.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 59.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.40k|    }                                                  \
  |  |  |  | 3671|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  59.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  59.8k|    static_cast<    \
  |  |  929|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  59.8k|    static_cast<    \
  |  |  929|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  62.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  62.2k|{
 8685|  62.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  62.2k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  62.2k|{
 8631|  62.2k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  62.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  62.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.40k, False: 59.8k]
  |  |  ------------------
  ------------------
 8635|  2.40k|        return unexpected(result.error());
 8636|  2.40k|    }
 8637|  59.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  62.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  59.8k|    {
 1663|  59.8k|        return std::move(value());
 1664|  59.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   129k|    {
 2724|   129k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   129k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   129k|    {
 2705|   129k|        return decay_copy(t.begin());
 2706|   129k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  54.5M|{
 1949|  54.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  54.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  54.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  15.6M|    {
 2781|  15.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  15.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  15.6M|    {
 2763|  15.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  15.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  15.6M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  6.29M|{
 5396|  6.29M|    detail::check_scan_arg_types<Args...>();
 5397|  6.29M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  6.29M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  7.84M|{
 5135|  7.84M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  7.84M|                  "Scan argument types must be default constructible");
 5137|  7.84M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  7.84M|                  "Scan argument types must be Destructible");
 5139|  7.84M|    static_assert(
 5140|  7.84M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  7.84M|        "Scan argument types must not be references");
 5142|  7.84M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  6.29M|    {
 5349|  6.29M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  6.29M|    {
 5360|  6.29M|        return {detail::make_arg<
 5361|  6.29M|            kind, Context,
 5362|  6.29M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  6.29M|                                 typename Context::char_type>::value>(args)...};
 5364|  6.29M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  6.29M|{
 5170|  6.29M|    return make_value<Context>(value).ref_value;
 5171|  6.29M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  7.84M|{
 5120|  7.84M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  7.84M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  7.84M|                                  needs_context_tag>) {
 5124|  7.84M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  7.84M|    }
 5126|  7.84M|    else {
 5127|  7.84M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  7.84M|            value, context_tag<Context>{}));
 5129|  7.84M|    }
 5130|  7.84M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  7.84M|    {                                                                        \
 4959|  7.84M|        return val;                                                          \
 4960|  7.84M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  7.84M|{
 5089|  7.84M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  7.84M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  7.84M|    constexpr bool scannable_char =
 5093|  7.84M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  7.84M|    static_assert(scannable_char,
 5095|  7.84M|                  "Cannot scan an argument of an unsupported character "
 5096|  7.84M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  7.84M|    constexpr bool scannable_const =
 5099|  7.84M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  7.84M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  7.84M|    constexpr bool scannable_disabled =
 5103|  7.84M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  7.84M|    static_assert(scannable_disabled,
 5105|  7.84M|                  "Cannot scan an argument that has been disabled by "
 5106|  7.84M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  7.84M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  7.84M|    static_assert(
 5110|  7.84M|        scannable,
 5111|  7.84M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  7.84M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  7.84M|    return arg_value{arg};
 5115|  7.84M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  7.84M|    {
 4902|  7.84M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  3.14M|{
 8591|  3.14M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  3.14M|    auto result = vscan_impl(buffer, format, args);
 8594|  3.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 3.08M]
  |  |  ------------------
  ------------------
 8595|  57.7k|        return unexpected(result.error());
 8596|  57.7k|    }
 8597|  3.08M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  3.14M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  7.84M|{
 4720|  7.84M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  7.84M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  7.84M|                  "\n"
 4724|  7.84M|                  "Unsupported range type given as input to a scanning "
 4725|  7.84M|                  "function.\n"
 4726|  7.84M|                  "A range needs to have a character type (value type) "
 4727|  7.84M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  7.84M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  7.84M|                  "to be included.\n"
 4730|  7.84M|                  "See the scnlib documentation for more details.");
 4731|  7.84M|    static_assert(
 4732|  7.84M|        !std::is_same_v<T, custom_char_traits>,
 4733|  7.84M|        "\n"
 4734|  7.84M|        "Unsupported range type given as input to a scanning "
 4735|  7.84M|        "function.\n"
 4736|  7.84M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  7.84M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  7.84M|        "not supported.");
 4739|  7.84M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  7.84M|                  "\n"
 4741|  7.84M|                  "Unsupported range type given as input to a scanning "
 4742|  7.84M|                  "function.\n"
 4743|  7.84M|                  "file_marker_found cannot be used as an "
 4744|  7.84M|                  "source range type to scn::scan.\n"
 4745|  7.84M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  7.84M|                  "and do not provide an explicit source range, "
 4747|  7.84M|                  "or use scn::scan with a FILE* directly.");
 4748|  7.84M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  7.84M|                  "\n"
 4750|  7.84M|                  "Unsupported range type given as input to a scanning "
 4751|  7.84M|                  "function.\n"
 4752|  7.84M|                  "In order to be scannable, a range needs to satisfy "
 4753|  7.84M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  7.84M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  7.84M|                  "\n"
 4756|  7.84M|                  "Unsupported range type given as input to a scanning "
 4757|  7.84M|                  "function.\n"
 4758|  7.84M|                  "A range needs to model forward_range and have a valid "
 4759|  7.84M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  7.84M|                  "Examples of scannable ranges are std::string, "
 4761|  7.84M|                  "std::string_view, "
 4762|  7.84M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  7.84M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  7.84M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  7.84M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  7.84M|{
 4659|  7.84M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  7.84M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  7.84M|    }
 4662|  7.84M|    else {
 4663|  7.84M|        return invalid_char_type{};
 4664|  7.84M|    }
 4665|  7.84M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  7.84M|    {
 2855|  7.84M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  7.84M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  7.84M|    {
 2836|  7.84M|        return t.data();
 2837|  7.84M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  7.84M|    {
 3231|  7.84M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 9.90k, False: 7.83M]
  ------------------
 3232|  7.84M|                   ? nullptr
 3233|  7.84M|                   : std::addressof(*ranges::begin(derived()));
 3234|  7.84M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  7.84M|    {
 3005|  7.84M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  7.84M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  7.84M|    {
 2978|  7.84M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  7.84M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  15.6M|    {
 3339|  15.6M|        return m_iterator == m_sentinel;
 3340|  15.6M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  15.6M|    {
 3185|  15.6M|        return static_cast<const D&>(*this);
 3186|  15.6M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.5M|    {
 2724|  15.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.5M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.5M|    {
 2705|  15.5M|        return decay_copy(t.begin());
 2706|  15.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   569M|    {
 3330|   569M|        return m_iterator;
 3331|   569M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  7.84M|    {
 2930|  7.84M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  7.84M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  7.84M|    {
 2896|  7.84M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  7.84M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  15.6M|    {
 3346|  15.6M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  15.6M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   125k|    {
 1476|   125k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   125k|    {
  447|   125k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.84M|    {
 1177|  7.84M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  7.72M|{
 5923|  7.72M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  7.72M|                      ranges::iterator_t<SourceRange>>) {
 5925|  7.72M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  7.72M|    }
 5927|  7.72M|    else {
 5928|  7.72M|        auto it = ranges::begin(source);
 5929|  7.72M|        while (n > 0) {
 5930|  7.72M|            --n;
 5931|  7.72M|            ++it;
 5932|  7.72M|        }
 5933|  7.72M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  7.72M|    }
 5935|  7.72M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.4M|    {
 2724|  15.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.4M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.4M|    {
 2705|  15.4M|        return decay_copy(t.begin());
 2706|  15.4M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  7.72M|{
 5910|  7.72M|    return ranges::end(source);
 5911|  7.72M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  7.72M|    {
 2781|  7.72M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  7.72M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  7.72M|    {
 2763|  7.72M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  7.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  7.72M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   534M|    {
 3334|   534M|        return m_sentinel;
 3335|   534M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  7.72M|    {
 1430|  7.72M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  7.72M|    {
  437|  7.72M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|  3.14M|    {
 7975|  3.14M|        return m_str;
 7976|  3.14M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  6.29M|    {
 5426|  6.29M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  6.29M|    {
 5379|  6.29M|        return m_argptrs;
 5380|  6.29M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|  9.43M|    {
 5478|  9.43M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  3.14M|{
 8820|  3.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 3.08M]
  |  |  ------------------
  ------------------
 8821|  57.7k|        return unexpected(result.error());
 8822|  57.7k|    }
 8823|  3.08M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  3.14M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  7.84M|    {
 1598|  7.84M|        return has_value();
 1599|  7.84M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  15.6M|    {
  485|  15.6M|        return m_has_value;
  486|  15.6M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   125k|    {
 1604|   125k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   125k|        return this->get_unexpected().error();
 1606|   125k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   125k|    {
  468|   125k|        return m_unexpected;
  469|   125k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  62.5k|    {
 1476|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  62.5k|    {
  626|  62.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  62.5k|    {
  689|  62.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  62.5k|                                  std::forward<Args>(args)...);
  691|  62.5k|        m_has_value = false;
  692|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   125k|    {
  718|   125k|        return reinterpret_cast<unexpected<E>*>(
  719|   125k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   125k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   125k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.92M|    {
 1177|  3.92M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  6.17M|    {
 1653|  6.17M|        return value();
 1654|  6.17M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  7.72M|    {
 1627|  7.72M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.72M|        return this->get_value();
 1629|  7.72M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  7.72M|    {
  451|  7.72M|        return m_value;
  452|  7.72M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  3.86M|    {
 5830|  3.86M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  7.72M|    {
 5681|  7.72M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  7.72M|    {
 5616|  7.72M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  3.86M|    {
 1430|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  3.86M|    {
  616|  3.86M|        construct(std::forward<Args>(args)...);
  617|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  3.86M|    {
  682|  3.86M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  3.86M|        m_has_value = true;
  684|  3.86M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  3.86M|{
  392|  3.86M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  3.86M|        T(std::forward<Args>(args)...);
  394|  3.86M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  3.86M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  11.5M|    {
  706|  11.5M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  11.5M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  11.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  7.72M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  6.29M|    {
 5374|  6.29M|        return m_args;
 5375|  6.29M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  6.29M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   220M|    {
 3316|   220M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  9.43M|{
 7696|  9.43M|    return s;
 7697|  9.43M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  9.43M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  3.14M|    {
 7971|  3.14M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  3.92M|    {
 1598|  3.92M|        return has_value();
 1599|  3.92M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  11.7M|    {
  675|  11.7M|        return m_has_value;
  676|  11.7M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  3.86M|    {
 1673|  3.86M|        return &value();
 1674|  3.86M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.86M|    {
 1627|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.86M|        return this->get_value();
 1629|  3.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  3.86M|    {
  641|  3.86M|        return *value_ptr();
  642|  3.86M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  7.72M|    {
 5698|  7.72M|        return ranges::begin(m_range);
 5699|  7.72M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  3.92M|    {
  631|  3.92M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 3.86M, False: 62.5k]
  ------------------
  632|  3.86M|            destroy_value();
  633|  3.86M|        }
  634|  62.5k|        else {
  635|  62.5k|            destroy_unexpected();
  636|  62.5k|        }
  637|  3.92M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  3.86M|    {
  696|  3.86M|        scn::detail::destroy_at(value_ptr());
  697|  3.86M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  3.86M|{
  398|  3.86M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  3.86M|        for (auto& elem : *p) {
  400|  3.86M|            scn::detail::destroy_at(&elem);
  401|  3.86M|        }
  402|  3.86M|    }
  403|  3.86M|    else {
  404|  3.86M|        p->~T();
  405|  3.86M|    }
  406|  3.86M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  62.5k|    {
  700|  62.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  62.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  3.14M|{
 8607|  3.14M|#if !SCN_DISABLE_LOCALE
 8608|  3.14M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  3.14M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  3.14M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  3.14M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  3.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 3.08M]
  |  |  ------------------
  ------------------
 8615|  57.7k|        return unexpected(result.error());
 8616|  57.7k|    }
 8617|  3.08M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  3.14M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  1.55M|{
 5155|  1.55M|    check_scan_arg_types<T>();
 5156|       |
 5157|  1.55M|    basic_scan_arg<Context> arg;
 5158|  1.55M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  1.55M|    arg.m_value = make_value<Context>(value);
 5160|  1.55M|    return arg;
 5161|  1.55M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  11.7M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  1.55M|{
 8631|  1.55M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  1.55M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  1.55M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 1.54M]
  |  |  ------------------
  ------------------
 8635|  9.62k|        return unexpected(result.error());
 8636|  9.62k|    }
 8637|  1.54M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  1.55M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.54M|    {
 1663|  1.54M|        return std::move(value());
 1664|  1.54M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  3.14M|{
 5396|  3.14M|    detail::check_scan_arg_types<Args...>();
 5397|  3.14M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  3.14M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  3.92M|{
 5135|  3.92M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  3.92M|                  "Scan argument types must be default constructible");
 5137|  3.92M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  3.92M|                  "Scan argument types must be Destructible");
 5139|  3.92M|    static_assert(
 5140|  3.92M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  3.92M|        "Scan argument types must not be references");
 5142|  3.92M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  3.14M|    {
 5349|  3.14M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  3.14M|    {
 5360|  3.14M|        return {detail::make_arg<
 5361|  3.14M|            kind, Context,
 5362|  3.14M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  3.14M|                                 typename Context::char_type>::value>(args)...};
 5364|  3.14M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  3.14M|{
 5170|  3.14M|    return make_value<Context>(value).ref_value;
 5171|  3.14M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  3.92M|{
 5120|  3.92M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  3.92M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  3.92M|                                  needs_context_tag>) {
 5124|  3.92M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  3.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  3.92M|    }
 5126|  3.92M|    else {
 5127|  3.92M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  3.92M|            value, context_tag<Context>{}));
 5129|  3.92M|    }
 5130|  3.92M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  3.92M|    {                                                                        \
 4959|  3.92M|        return val;                                                          \
 4960|  3.92M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  3.92M|{
 5089|  3.92M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  3.92M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  3.92M|    constexpr bool scannable_char =
 5093|  3.92M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  3.92M|    static_assert(scannable_char,
 5095|  3.92M|                  "Cannot scan an argument of an unsupported character "
 5096|  3.92M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  3.92M|    constexpr bool scannable_const =
 5099|  3.92M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  3.92M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  3.92M|    constexpr bool scannable_disabled =
 5103|  3.92M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  3.92M|    static_assert(scannable_disabled,
 5105|  3.92M|                  "Cannot scan an argument that has been disabled by "
 5106|  3.92M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  3.92M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  3.92M|    static_assert(
 5110|  3.92M|        scannable,
 5111|  3.92M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  3.92M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  3.92M|    return arg_value{arg};
 5115|  3.92M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  3.92M|    {
 4902|  3.92M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|  3.14M|    {
 7975|  3.14M|        return m_str;
 7976|  3.14M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  3.14M|    {
 5426|  3.14M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  3.14M|    {
 5379|  3.14M|        return m_argptrs;
 5380|  3.14M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  3.14M|{
 8820|  3.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 3.08M]
  |  |  ------------------
  ------------------
 8821|  57.7k|        return unexpected(result.error());
 8822|  57.7k|    }
 8823|  3.08M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  3.14M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  62.5k|    {
 1476|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  62.5k|    {
  447|  62.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.92M|    {
 1177|  3.92M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  3.86M|    {
 5830|  3.86M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  3.86M|    {
 5616|  3.86M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  3.86M|    {
 1430|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  3.86M|    {
  437|  3.86M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  3.14M|    {
 5374|  3.14M|        return m_args;
 5375|  3.14M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  3.14M|    {
 7971|  3.14M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  3.92M|    {
 1598|  3.92M|        return has_value();
 1599|  3.92M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.78M|    {
  485|  7.78M|        return m_has_value;
  486|  7.78M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  3.86M|    {
 1673|  3.86M|        return &value();
 1674|  3.86M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|  3.86M|    {
 1627|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.86M|        return this->get_value();
 1629|  3.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.86M|    {
  451|  3.86M|        return m_value;
  452|  3.86M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   776k|{
 5155|   776k|    check_scan_arg_types<T>();
 5156|       |
 5157|   776k|    basic_scan_arg<Context> arg;
 5158|   776k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   776k|    arg.m_value = make_value<Context>(value);
 5160|   776k|    return arg;
 5161|   776k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  62.5k|    {
 2724|  62.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  62.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  62.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  62.5k|    {
 2705|  62.5k|        return decay_copy(t.begin());
 2706|  62.5k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   262M|{
 1949|   262M|    return SCN_FWD(t);
  ------------------
  |  |  930|   262M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   262M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  7.84M|    {
 2781|  7.84M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  7.84M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  7.84M|    {
 2763|  7.84M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  7.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  7.84M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.57M|{
 8591|  1.57M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.57M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.57M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 1.54M]
  |  |  ------------------
  ------------------
 8595|  28.8k|        return unexpected(result.error());
 8596|  28.8k|    }
 8597|  1.54M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.57M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|  3.92M|{
 4720|  3.92M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  3.92M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  3.92M|                  "\n"
 4724|  3.92M|                  "Unsupported range type given as input to a scanning "
 4725|  3.92M|                  "function.\n"
 4726|  3.92M|                  "A range needs to have a character type (value type) "
 4727|  3.92M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  3.92M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  3.92M|                  "to be included.\n"
 4730|  3.92M|                  "See the scnlib documentation for more details.");
 4731|  3.92M|    static_assert(
 4732|  3.92M|        !std::is_same_v<T, custom_char_traits>,
 4733|  3.92M|        "\n"
 4734|  3.92M|        "Unsupported range type given as input to a scanning "
 4735|  3.92M|        "function.\n"
 4736|  3.92M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  3.92M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  3.92M|        "not supported.");
 4739|  3.92M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  3.92M|                  "\n"
 4741|  3.92M|                  "Unsupported range type given as input to a scanning "
 4742|  3.92M|                  "function.\n"
 4743|  3.92M|                  "file_marker_found cannot be used as an "
 4744|  3.92M|                  "source range type to scn::scan.\n"
 4745|  3.92M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  3.92M|                  "and do not provide an explicit source range, "
 4747|  3.92M|                  "or use scn::scan with a FILE* directly.");
 4748|  3.92M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  3.92M|                  "\n"
 4750|  3.92M|                  "Unsupported range type given as input to a scanning "
 4751|  3.92M|                  "function.\n"
 4752|  3.92M|                  "In order to be scannable, a range needs to satisfy "
 4753|  3.92M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  3.92M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  3.92M|                  "\n"
 4756|  3.92M|                  "Unsupported range type given as input to a scanning "
 4757|  3.92M|                  "function.\n"
 4758|  3.92M|                  "A range needs to model forward_range and have a valid "
 4759|  3.92M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  3.92M|                  "Examples of scannable ranges are std::string, "
 4761|  3.92M|                  "std::string_view, "
 4762|  3.92M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  3.92M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  3.92M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  3.92M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  3.92M|{
 4690|  3.92M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  3.92M|        return file_marker_found{};
 4692|  3.92M|    }
 4693|  3.92M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  3.92M|        if constexpr (ranges::range<Range>) {
 4695|  3.92M|            return insufficient_range{};
 4696|  3.92M|        }
 4697|  3.92M|        else {
 4698|  3.92M|            return invalid_input_range{};
 4699|  3.92M|        }
 4700|  3.92M|    }
 4701|  3.92M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  3.92M|        return invalid_char_type{};
 4703|  3.92M|    }
 4704|  3.92M|    else {
 4705|  3.92M|        return make_forward_scan_buffer(r);
 4706|  3.92M|    }
 4707|  3.92M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|  3.92M|{
 4524|  3.92M|    return basic_scan_forward_buffer_impl(range);
 4525|  3.92M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  3.92M|    {
 4411|  3.92M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|  3.92M|    {
 4382|  3.92M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|  3.92M|    {
 4151|  3.92M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|  3.92M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  7.78M|    {
 2724|  7.78M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  7.78M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  7.78M|    {
 2705|  7.78M|        return decay_copy(t.begin());
 2706|  7.78M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  11.6M|    {
 3330|  11.6M|        return m_iterator;
 3331|  11.6M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  79.7M|    {
 4415|  79.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 54.5k, False: 79.6M]
  ------------------
 4416|  54.5k|            return false;
 4417|  54.5k|        }
 4418|  79.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  79.6M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  79.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  79.6M|        }
 4421|  79.6M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 75.7M, False: 3.88M]
  ------------------
 4422|  75.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  75.7M|                                          this->m_current_view.begin(),
 4424|  75.7M|                                          this->m_current_view.end());
 4425|  75.7M|        }
 4426|  79.6M|        m_latest = *m_cursor;
 4427|  79.6M|        ++m_cursor;
 4428|  79.6M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  79.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  79.6M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  79.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  79.6M|        }
 4432|  79.6M|        return true;
 4433|  79.6M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   239M|    {
 2781|   239M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   239M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   239M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   239M|    {
 2763|   239M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   239M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   239M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|   242M|    {
 3334|   242M|        return m_sentinel;
 3335|   242M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|  3.92M|    {
 4071|  3.92M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  3.92M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  3.92M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  62.5k|    {
 1476|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  62.5k|    {
  447|  62.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.92M|    {
 1177|  3.92M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  3.86M|{
 5923|  3.86M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  3.86M|                      ranges::iterator_t<SourceRange>>) {
 5925|  3.86M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  3.86M|    }
 5927|  3.86M|    else {
 5928|  3.86M|        auto it = ranges::begin(source);
 5929|  3.86M|        while (n > 0) {
 5930|  3.86M|            --n;
 5931|  3.86M|            ++it;
 5932|  3.86M|        }
 5933|  3.86M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  3.86M|    }
 5935|  3.86M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.86M|    {
 2724|  3.86M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.86M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.86M|    {
 2705|  3.86M|        return decay_copy(t.begin());
 2706|  3.86M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  3.86M|{
 5910|  3.86M|    return ranges::end(source);
 5911|  3.86M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.86M|    {
 2781|  3.86M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.86M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.86M|    {
 2763|  3.86M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  3.86M|    {
 1430|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  3.86M|    {
  437|  3.86M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|  3.14M|    {
 7975|  3.14M|        return m_str;
 7976|  3.14M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  3.14M|{
 8820|  3.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 3.08M]
  |  |  ------------------
  ------------------
 8821|  57.7k|        return unexpected(result.error());
 8822|  57.7k|    }
 8823|  3.08M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  3.14M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  3.92M|    {
 1598|  3.92M|        return has_value();
 1599|  3.92M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.84M|    {
  485|  7.84M|        return m_has_value;
  486|  7.84M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  62.5k|    {
 1604|  62.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  62.5k|        return this->get_unexpected().error();
 1606|  62.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  62.5k|    {
  468|  62.5k|        return m_unexpected;
  469|  62.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  62.5k|    {
 1476|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  62.5k|    {
  626|  62.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  62.5k|    {
  689|  62.5k|        scn::detail::construct_at(unexpected_ptr(),
  690|  62.5k|                                  std::forward<Args>(args)...);
  691|  62.5k|        m_has_value = false;
  692|  62.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   125k|    {
  718|   125k|        return reinterpret_cast<unexpected<E>*>(
  719|   125k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   125k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   125k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.92M|    {
 1177|  3.92M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  3.08M|    {
 1653|  3.08M|        return value();
 1654|  3.08M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  3.86M|    {
 1627|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.86M|        return this->get_value();
 1629|  3.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.86M|    {
  451|  3.86M|        return m_value;
  452|  3.86M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|  3.86M|    {
 5830|  3.86M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|  3.86M|    {
 5681|  3.86M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|  3.86M|    {
 1430|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|  3.86M|    {
  616|  3.86M|        construct(std::forward<Args>(args)...);
  617|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  3.86M|    {
  682|  3.86M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  3.86M|        m_has_value = true;
  684|  3.86M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  3.86M|{
  392|  3.86M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  3.86M|        T(std::forward<Args>(args)...);
  394|  3.86M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|  3.86M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  11.5M|    {
  706|  11.5M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  11.5M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  11.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  7.72M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  7.78M|    {
 3316|  7.78M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  3.14M|    {
 7971|  3.14M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  3.92M|    {
 1598|  3.92M|        return has_value();
 1599|  3.92M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  11.7M|    {
  675|  11.7M|        return m_has_value;
  676|  11.7M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  3.86M|    {
 1673|  3.86M|        return &value();
 1674|  3.86M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|  3.86M|    {
 1627|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.86M|        return this->get_value();
 1629|  3.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  3.86M|    {
  641|  3.86M|        return *value_ptr();
  642|  3.86M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  3.86M|    {
 5698|  3.86M|        return ranges::begin(m_range);
 5699|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  3.92M|    {
  631|  3.92M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 3.86M, False: 62.5k]
  ------------------
  632|  3.86M|            destroy_value();
  633|  3.86M|        }
  634|  62.5k|        else {
  635|  62.5k|            destroy_unexpected();
  636|  62.5k|        }
  637|  3.92M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  3.86M|    {
  696|  3.86M|        scn::detail::destroy_at(value_ptr());
  697|  3.86M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  3.86M|{
  398|  3.86M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  3.86M|        for (auto& elem : *p) {
  400|  3.86M|            scn::detail::destroy_at(&elem);
  401|  3.86M|        }
  402|  3.86M|    }
  403|  3.86M|    else {
  404|  3.86M|        p->~T();
  405|  3.86M|    }
  406|  3.86M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  62.5k|    {
  700|  62.5k|        scn::detail::destroy_at(unexpected_ptr());
  701|  62.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.57M|{
 8607|  1.57M|#if !SCN_DISABLE_LOCALE
 8608|  1.57M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.57M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.57M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.57M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.57M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 1.54M]
  |  |  ------------------
  ------------------
 8615|  28.8k|        return unexpected(result.error());
 8616|  28.8k|    }
 8617|  1.54M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.57M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   776k|{
 8631|   776k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   776k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   776k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 772k]
  |  |  ------------------
  ------------------
 8635|  4.81k|        return unexpected(result.error());
 8636|  4.81k|    }
 8637|   772k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   772k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   776k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   772k|    {
 1663|   772k|        return std::move(value());
 1664|   772k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   367k|    {
 3568|   367k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   367k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   367k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  39.2M|    {
 3574|  39.2M|        return m_code == good;
 3575|  39.2M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   129k|    {
 3585|   129k|        return m_code;
 3586|   129k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  13.8M|    {
 3330|  13.8M|        return m_iterator;
 3331|  13.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   273M|    {
 3330|   273M|        return m_iterator;
 3331|   273M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  5.18M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  86.5k|    {
 6282|  86.5k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 86.5k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  86.5k|        m_specs.width = width;
 6289|  86.5k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  5.10M|    {
 6303|  5.10M|        m_specs.type = type;
 6304|  5.10M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  98.7k|    {
 6320|  98.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  98.7k|        const auto end_value = static_cast<unsigned>(end);
 6322|  98.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  98.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  98.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  98.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 98.7k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  98.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  98.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  2.66M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 2.56M, False: 98.7k]
  ------------------
 6329|  2.56M|                m_specs.charset_literals[v / 8] |=
 6330|  2.56M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  2.56M|            }
 6332|  98.7k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  98.7k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  86.5k|    {
 6365|  86.5k|        SCN_UNLIKELY_ATTR
 6366|  86.5k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  86.5k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  5.33M|    {
 6376|  5.33M|        return static_cast<bool>(m_error);
 6377|  5.33M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   129k|{
 3609|   129k|    return a.code() == b;
 3610|   129k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   129k|{
 3613|   129k|    return !(a == b);
 3614|   129k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  43.2k|{
 7063|  43.2k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 43.2k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 43.2k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 43.2k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 43.2k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 43.2k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 43.2k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 43.2k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 43.2k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 43.2k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 43.2k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 43.2k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 43.2k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 43.2k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 43.2k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 43.2k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 43.2k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 43.2k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 43.2k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 43.2k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  4.81k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 4.81k, False: 38.4k]
  ------------------
 7096|  14.4k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 9.62k, False: 33.6k]
  ------------------
 7097|  24.0k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 9.62k, False: 33.6k]
  ------------------
 7098|  43.2k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 19.2k, False: 24.0k]
  ------------------
 7099|  43.2k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 43.2k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 43.2k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  43.2k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  43.2k|            SCN_CLANG_POP
 7110|  43.2k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  43.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  43.2k|{
 3654|  43.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  43.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  52.3k|{
 3654|  52.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  52.3k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  26.5k|{
 3654|  26.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  26.5k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  5.10M|{
 7205|  5.10M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 5.10M]
  ------------------
 7206|  5.10M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 5.00M, False: 92.6k]
  ------------------
 7207|  5.10M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 49.3k, False: 43.2k]
  ------------------
 7208|  5.10M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 43.2k]
  ------------------
 7209|  5.10M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 43.2k]
  ------------------
 7210|  5.05M|        return;
 7211|  5.05M|    }
 7212|  43.2k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 43.2k, False: 0]
  ------------------
 7213|  43.2k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.2k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  43.2k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  43.2k|        }
 7218|      0|        return;
 7219|  43.2k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  77.3M|    {
 4195|  77.3M|        return m_end == nullptr;
 4196|  77.3M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   302k|{
 3715|   302k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   302k|                                          const CharT*, const CharT*>) {
 3717|   302k|        return {first, last};
 3718|   302k|    }
 3719|   302k|    else {
 3720|   302k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   302k|    }
 3722|   302k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  1.55M|    {
 4211|  1.55M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.55M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.55M|        return parent()->get_segment_starting_at(position());
 4217|  1.55M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  45.0M|    {
 4205|  45.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  45.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  45.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  45.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  1.55M|    {
 4101|  1.55M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 897k, False: 662k]
  |  |  ------------------
  ------------------
 4102|  1.55M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   897k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   897k|        }
 4105|   662k|        const auto start = pos - m_putback_buffer.size();
 4106|   662k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   662k|        return m_current_view.substr(start);
 4108|   662k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  1.75M|    {
 4190|  1.75M|        return m_position;
 4191|  1.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  1.00M|    {
 4123|  1.00M|        return m_is_contiguous;
 4124|  1.00M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  1.45G|    {
 4195|  1.45G|        return m_end == nullptr;
 4196|  1.45G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  3.86M|{
 3715|  3.86M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  3.86M|                                          const CharT*, const CharT*>) {
 3717|  3.86M|        return {first, last};
 3718|  3.86M|    }
 3719|  3.86M|    else {
 3720|  3.86M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  3.86M|    }
 3722|  3.86M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  11.6M|    {
 4211|  11.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 11.6M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  11.6M|        return parent()->get_segment_starting_at(position());
 4217|  11.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|   848M|    {
 4205|   848M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   848M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   848M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   848M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   848M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  11.6M|    {
 4101|  11.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  11.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.73M, False: 3.91M]
  |  |  ------------------
  ------------------
 4102|  11.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  7.73M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  7.73M|        }
 4105|  3.91M|        const auto start = pos - m_putback_buffer.size();
 4106|  3.91M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  3.91M|        return m_current_view.substr(start);
 4108|  3.91M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  13.9M|    {
 4190|  13.9M|        return m_position;
 4191|  13.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  11.7M|    {
 4123|  11.7M|        return m_is_contiguous;
 4124|  11.7M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  3.27M|    {
 3180|  3.27M|        return static_cast<D&>(*this);
 3181|  3.27M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.63M|    {
 2978|  1.63M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.63M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.63M|    {
 3005|  1.63M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.63M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.63M|    {
 3221|  1.63M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.82k, False: 1.63M]
  ------------------
 3222|  1.63M|                   ? nullptr
 3223|  1.63M|                   : std::addressof(*ranges::begin(derived()));
 3224|  1.63M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  15.5M|    {
 3180|  15.5M|        return static_cast<D&>(*this);
 3181|  15.5M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  7.75M|    {
 2978|  7.75M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  7.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  7.75M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  7.75M|    {
 3005|  7.75M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  7.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  7.75M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  7.75M|    {
 3221|  7.75M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 7.75M]
  ------------------
 3222|  7.75M|                   ? nullptr
 3223|  7.75M|                   : std::addressof(*ranges::begin(derived()));
 3224|  7.75M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   137k|    {
 8169|   137k|        return ranges::subrange{begin(), end()};
 8170|   137k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   407k|    {
 8153|   407k|        return m_current;
 8154|   407k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   137k|    {
 8161|   137k|        return ranges::default_sentinel;
 8162|   137k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  5.03M|    {
 3316|  5.03M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  12.6M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   312k|    {
 1837|   312k|        return detail::transform_error_impl(std::move(*this),
 1838|   312k|                                            std::forward<F>(f));
 1839|   312k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   312k|{
 1323|   312k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   312k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   312k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   312k|            return result(*std::forward<Exp>(exp));
 1327|   312k|        }
 1328|       |
 1329|   312k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   312k|        return result(unexpect, monostate{});
 1331|   312k|    }
 1332|   312k|    else {
 1333|   312k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   312k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   312k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 308k, False: 4.61k]
  |  |  ------------------
  ------------------
 1335|   312k|                   ? result(*std::forward<Exp>(exp))
 1336|   312k|                   : result(unexpect,
 1337|  4.61k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.61k|                                           std::forward<Exp>(exp).error()));
 1339|   312k|    }
 1340|   312k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   625k|    {
  485|   625k|        return m_has_value;
  486|   625k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|   308k|    {
 1663|   308k|        return std::move(value());
 1664|   308k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|   308k|    {
 1627|   308k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   308k|        return this->get_value();
 1629|   308k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   308k|    {
  451|   308k|        return m_value;
  452|   308k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   734k|    {
 1430|   734k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   734k|    {
  437|   734k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   774k|    {
 1177|   774k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  29.3k|{
 1211|  29.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  29.3k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.61k|    {
 1614|  4.61k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.61k|        return std::move(this->get_unexpected().error());
 1616|  4.61k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.61k|    {
  468|  4.61k|        return m_unexpected;
  469|  4.61k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  58.7k|    {
  361|  58.7k|        return m_unexpected;
  362|  58.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  4.61k|    {
 1486|  4.61k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  38.6k|    {
  447|  38.6k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|  1.57M|    {
 8169|  1.57M|        return ranges::subrange{begin(), end()};
 8170|  1.57M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  4.70M|    {
 8153|  4.70M|        return m_current;
 8154|  4.70M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|  1.57M|    {
 8161|  1.57M|        return ranges::default_sentinel;
 8162|  1.57M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  98.3M|    {
 3316|  98.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.88M|    {
 1837|  3.88M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.88M|                                            std::forward<F>(f));
 1839|  3.88M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.88M|{
 1323|  3.88M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.88M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.88M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.88M|            return result(*std::forward<Exp>(exp));
 1327|  3.88M|        }
 1328|       |
 1329|  3.88M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.88M|        return result(unexpect, monostate{});
 1331|  3.88M|    }
 1332|  3.88M|    else {
 1333|  3.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.87M, False: 5.66k]
  |  |  ------------------
  ------------------
 1335|  3.88M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.88M|                   : result(unexpect,
 1337|  5.66k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.66k|                                           std::forward<Exp>(exp).error()));
 1339|  3.88M|    }
 1340|  3.88M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.76M|    {
  485|  7.76M|        return m_has_value;
  486|  7.76M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.87M|    {
 1663|  3.87M|        return std::move(value());
 1664|  3.87M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  3.87M|    {
 1627|  3.87M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.87M|        return this->get_value();
 1629|  3.87M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.87M|    {
  451|  3.87M|        return m_value;
  452|  3.87M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  9.28M|    {
 1430|  9.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  9.28M|    {
  437|  9.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.35M|    {
 1177|  9.35M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  5.66k|    {
 1614|  5.66k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.66k|        return std::move(this->get_unexpected().error());
 1616|  5.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.66k|    {
  468|  5.66k|        return m_unexpected;
  469|  5.66k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  5.66k|    {
 1486|  5.66k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  75.5k|    {
  447|  75.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   122k|    {
  347|   122k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   122k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   122k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  69.0k|    {
 1476|  69.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  76.8k|    {
  447|  76.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.36M|    {
 1177|  1.36M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.28M|    {
 1430|  1.28M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.28M|    {
  437|  1.28M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  1.36M|    {
 1598|  1.36M|        return has_value();
 1599|  1.36M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  2.73M|    {
  485|  2.73M|        return m_has_value;
  486|  2.73M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  76.8k|    {
 1604|  76.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  76.8k|        return this->get_unexpected().error();
 1606|  76.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  76.8k|    {
  468|  76.8k|        return m_unexpected;
  469|  76.8k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.07M|    {
 1663|  1.07M|        return std::move(value());
 1664|  1.07M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   139k|    {
 1476|   139k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   151k|    {
  447|   151k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.7M|    {
 1177|  18.7M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  18.5M|    {
 1430|  18.5M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  18.5M|    {
  437|  18.5M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  18.7M|    {
 1598|  18.7M|        return has_value();
 1599|  18.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  37.4M|    {
  485|  37.4M|        return m_has_value;
  486|  37.4M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   151k|    {
 1604|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   151k|        return this->get_unexpected().error();
 1606|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   151k|    {
  468|   151k|        return m_unexpected;
  469|   151k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  15.4M|    {
 1663|  15.4M|        return std::move(value());
 1664|  15.4M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  18.5M|    {
 1627|  18.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.5M|        return this->get_value();
 1629|  18.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  18.5M|    {
  451|  18.5M|        return m_value;
  452|  18.5M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   551k|    {
 1837|   551k|        return detail::transform_error_impl(std::move(*this),
 1838|   551k|                                            std::forward<F>(f));
 1839|   551k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   551k|{
 1323|   551k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   551k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   551k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   551k|            return result(*std::forward<Exp>(exp));
 1327|   551k|        }
 1328|       |
 1329|   551k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   551k|        return result(unexpect, monostate{});
 1331|   551k|    }
 1332|   551k|    else {
 1333|   551k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   551k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   551k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 543k, False: 7.79k]
  |  |  ------------------
  ------------------
 1335|   551k|                   ? result(*std::forward<Exp>(exp))
 1336|   551k|                   : result(unexpect,
 1337|  7.79k|                            trivial_invoke(std::forward<F>(f),
 1338|  7.79k|                                           std::forward<Exp>(exp).error()));
 1339|   551k|    }
 1340|   551k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   543k|    {
 1663|   543k|        return std::move(value());
 1664|   543k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   543k|    {
 1627|   543k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   543k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   543k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   543k|        return this->get_value();
 1629|   543k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   543k|    {
  451|   543k|        return m_value;
  452|   543k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  7.79k|    {
 1614|  7.79k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  7.79k|        return std::move(this->get_unexpected().error());
 1616|  7.79k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  7.79k|    {
  468|  7.79k|        return m_unexpected;
  469|  7.79k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  7.79k|    {
 1486|  7.79k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  28.7M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  34.0k|    {
 1476|  34.0k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.96M|    {
 4280|  3.96M|        return x.is_at_end();
 4281|  3.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  8.30M|    {
 4324|  8.30M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 8.30M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  8.30M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 8.30M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  8.30M|        return !read_at_position();
 4331|  8.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  23.1M|    {
 4304|  23.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  23.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 23.1M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  23.1M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  23.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.8M, False: 4.27M]
  |  |  ------------------
  ------------------
 4311|  18.8M|            return true;
 4312|  18.8M|        }
 4313|       |
 4314|  8.52M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 4.27M, False: 4.24M]
  ------------------
 4315|  4.27M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 37.9k, False: 4.24M]
  ------------------
 4316|  37.9k|                return false;
 4317|  37.9k|            }
 4318|  4.27M|        }
 4319|  4.24M|        return true;
 4320|  4.27M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  31.6M|    {
 4081|  31.6M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  31.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  7.56M|    {
 4239|  7.56M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  7.56M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 7.56M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  7.56M|        auto res = read_at_position();
 4248|  7.56M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  7.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  7.56M|        return parent()->get_character_at(m_position);
 4250|  7.56M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  7.56M|    {
 4112|  7.56M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.14M, False: 3.42M]
  |  |  ------------------
  ------------------
 4113|  7.56M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.14M|            return m_putback_buffer[pos];
 4115|  4.14M|        }
 4116|  3.42M|        const auto start = pos - m_putback_buffer.size();
 4117|  3.42M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  3.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  3.42M|        return m_current_view[start];
 4119|  3.42M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|   308k|    {
 1430|   308k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   308k|    {
  437|   308k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   312k|    {
 1177|   312k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  4.61k|    {
 1476|  4.61k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  4.61k|    {
  447|  4.61k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  29.3k|    {
  356|  29.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  29.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  3.42M|    {
 4274|  3.42M|        return !(lhs == rhs);
 4275|  3.42M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  3.43M|    {
 4269|  3.43M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 3.43M, False: 0]
  |  Branch (4269:46): [True: 643k, False: 2.78M]
  ------------------
 4270|  3.43M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  7.25M|    {
 4225|  7.25M|        ++m_position;
 4226|  7.25M|        (void)read_at_position();
 4227|  7.25M|        return *this;
 4228|  7.25M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  29.3k|    {
  347|  29.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.3k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.02k|    {
 1476|  2.02k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.02k|    {
  447|  2.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   254k|    {
 1177|   254k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   252k|    {
 1430|   252k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   252k|    {
  437|   252k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   254k|    {
 1598|   254k|        return has_value();
 1599|   254k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   509k|    {
  485|   509k|        return m_has_value;
  486|   509k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.02k|    {
 1604|  2.02k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.02k|        return this->get_unexpected().error();
 1606|  2.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.02k|    {
  468|  2.02k|        return m_unexpected;
  469|  2.02k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   252k|    {
 1663|   252k|        return std::move(value());
 1664|   252k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   252k|    {
 1627|   252k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   252k|        return this->get_value();
 1629|   252k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   252k|    {
  451|   252k|        return m_value;
  452|   252k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  12.4M|    {
 3334|  12.4M|        return m_sentinel;
 3335|  12.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|   326k|    {
 3330|   326k|        return m_iterator;
 3331|   326k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|   326k|    {
 3334|   326k|        return m_sentinel;
 3335|   326k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   774k|    {
 1598|   774k|        return has_value();
 1599|   774k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.54M|    {
  485|  1.54M|        return m_has_value;
  486|  1.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  38.6k|    {
 1604|  38.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  38.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  38.6k|        return this->get_unexpected().error();
 1606|  38.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  38.6k|    {
  468|  38.6k|        return m_unexpected;
  469|  38.6k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   611k|    {
 1663|   611k|        return std::move(value());
 1664|   611k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   735k|    {
 1627|   735k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   735k|        return this->get_value();
 1629|   735k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   735k|    {
  451|   735k|        return m_value;
  452|   735k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   620k|{
  326|   620k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   620k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   310k|    {
 3316|   310k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  4.33M|    {
 4291|  4.33M|        return !x.is_at_end();
 4292|  4.33M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  7.79k|    {
 1476|  7.79k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  7.79k|    {
  447|  7.79k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   551k|    {
 1177|   551k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   543k|    {
 1430|   543k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   543k|    {
  437|   543k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.11k|    {
 1476|  3.11k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  3.11k|    {
  447|  3.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   446k|    {
 1177|   446k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   443k|    {
 1430|   443k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   443k|    {
  437|   443k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   446k|    {
 1598|   446k|        return has_value();
 1599|   446k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   893k|    {
  485|   893k|        return m_has_value;
  486|   893k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  3.11k|    {
 1604|  3.11k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.11k|        return this->get_unexpected().error();
 1606|  3.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.11k|    {
  468|  3.11k|        return m_unexpected;
  469|  3.11k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   443k|    {
 1663|   443k|        return std::move(value());
 1664|   443k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   443k|    {
 1627|   443k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   443k|        return this->get_value();
 1629|   443k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   443k|    {
  451|   443k|        return m_value;
  452|   443k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.63M|    {
 2855|  1.63M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.63M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.63M|    {
 2836|  1.63M|        return t.data();
 2837|  1.63M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   281k|    {
 1476|   281k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   281k|    {
  447|   281k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.6M|    {
 1177|  12.6M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  12.4M|    {
 1430|  12.4M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  12.4M|    {
  437|  12.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   124k|    {
 1653|   124k|        return value();
 1654|   124k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   218k|    {
 1653|   218k|        return value();
 1654|   218k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|  1.89k|    {
 1430|  1.89k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.89k|    {
  437|  1.89k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  3.78k|    {
 1430|  3.78k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.78k|    {
  437|  3.78k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  69.8k|    {
 1476|  69.8k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  85.9M|    {
 4280|  85.9M|        return x.is_at_end();
 4281|  85.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|   167M|    {
 4324|   167M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 167M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|   167M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 167M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|   167M|        return !read_at_position();
 4331|   167M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   436M|    {
 4304|   436M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   436M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   436M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   436M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 436M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   436M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   436M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 357M, False: 79.7M]
  |  |  ------------------
  ------------------
 4311|   357M|            return true;
 4312|   357M|        }
 4313|       |
 4314|   159M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 79.7M, False: 79.6M]
  ------------------
 4315|  79.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 54.5k, False: 79.6M]
  ------------------
 4316|  54.5k|                return false;
 4317|  54.5k|            }
 4318|  79.7M|        }
 4319|  79.6M|        return true;
 4320|  79.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   596M|    {
 4081|   596M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   596M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|   160M|    {
 4239|   160M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   160M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|   160M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 160M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|   160M|        auto res = read_at_position();
 4248|   160M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   160M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|   160M|        return parent()->get_character_at(m_position);
 4250|   160M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|   160M|    {
 4112|   160M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   160M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.7M, False: 75.8M]
  |  |  ------------------
  ------------------
 4113|   160M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  84.7M|            return m_putback_buffer[pos];
 4115|  84.7M|        }
 4116|  75.8M|        const auto start = pos - m_putback_buffer.size();
 4117|  75.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  75.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  75.8M|        return m_current_view[start];
 4119|  75.8M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   437M|{
 3807|   437M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   437M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   437M|    }
 3810|   437M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   437M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   437M|    }
 3813|   437M|    else {
 3814|       |        // utf-32
 3815|   437M|        static_assert(sizeof(U) == 4);
 3816|   437M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   437M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   437M|        return 1;
 3818|   437M|    }
 3819|   437M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  3.87M|    {
 1430|  3.87M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  3.87M|    {
  437|  3.87M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.88M|    {
 1177|  3.88M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  5.66k|    {
 1476|  5.66k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  5.66k|    {
  447|  5.66k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  31.0M|    {
 4274|  31.0M|        return !(lhs == rhs);
 4275|  31.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  31.0M|    {
 4269|  31.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 31.0M, False: 0]
  |  Branch (4269:46): [True: 1.56M, False: 29.5M]
  ------------------
 4270|  31.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|   109M|    {
 4225|   109M|        ++m_position;
 4226|   109M|        (void)read_at_position();
 4227|   109M|        return *this;
 4228|   109M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   437M|{
 4013|   437M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   437M|        return decode_utf8_code_point_exhaustive(input);
 4015|   437M|    }
 4016|   437M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   437M|        return decode_utf16_code_point_exhaustive(input);
 4018|   437M|    }
 4019|   437M|    else {
 4020|   437M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   437M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   437M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   437M|        auto cp = static_cast<char32_t>(input.front());
 4022|   437M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   437M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73M, False: 434M]
  |  |  ------------------
  ------------------
 4023|  2.73M|            return invalid_code_point;
 4024|  2.73M|        }
 4025|   434M|        return cp;
 4026|   437M|    }
 4027|   437M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.26k|    {
 1476|  2.26k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.26k|    {
  447|  2.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.10M|    {
 1177|  3.10M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.10M|    {
 1430|  3.10M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  3.10M|    {
  437|  3.10M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  3.10M|    {
 1598|  3.10M|        return has_value();
 1599|  3.10M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.21M|    {
  485|  6.21M|        return m_has_value;
  486|  6.21M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.26k|    {
 1604|  2.26k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.26k|        return this->get_unexpected().error();
 1606|  2.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.26k|    {
  468|  2.26k|        return m_unexpected;
  469|  2.26k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.10M|    {
 1663|  3.10M|        return std::move(value());
 1664|  3.10M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.10M|    {
 1627|  3.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.10M|        return this->get_value();
 1629|  3.10M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.10M|    {
  451|  3.10M|        return m_value;
  452|  3.10M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   260M|    {
 3334|   260M|        return m_sentinel;
 3335|   260M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|  3.89M|    {
 3330|  3.89M|        return m_iterator;
 3331|  3.89M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|  3.89M|    {
 3334|  3.89M|        return m_sentinel;
 3335|  3.89M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  9.35M|    {
 1598|  9.35M|        return has_value();
 1599|  9.35M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  18.7M|    {
  485|  18.7M|        return m_has_value;
  486|  18.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  75.5k|    {
 1604|  75.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  75.5k|        return this->get_unexpected().error();
 1606|  75.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  75.5k|    {
  468|  75.5k|        return m_unexpected;
  469|  75.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  7.73M|    {
 1663|  7.73M|        return std::move(value());
 1664|  7.73M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  9.28M|    {
 1627|  9.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.28M|        return this->get_value();
 1629|  9.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  9.28M|    {
  451|  9.28M|        return m_value;
  452|  9.28M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|   198M|{
 3699|   198M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|   198M|                                          decltype(first), decltype(last)> &&
 3701|   198M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   198M|        return {first, last};
 3703|   198M|    }
 3704|   198M|    else {
 3705|   198M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|   198M|                                       to_address(first), to_address(last)))};
 3707|   198M|    }
 3708|   198M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   595M|{
  326|   595M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   595M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   595M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   603M|{
  304|   603M|    return p;
  305|   603M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.75M|{
  326|  7.75M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.75M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  3.87M|    {
 3316|  3.87M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  81.2M|    {
 4291|  81.2M|        return !x.is_at_end();
 4292|  81.2M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  11.3k|    {
  447|  11.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.76M|    {
 1177|  7.76M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  7.75M|    {
 1430|  7.75M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  7.75M|    {
  437|  7.75M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  15.5M|    {
  485|  15.5M|        return m_has_value;
  486|  15.5M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  7.75M|    {
 1627|  7.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.75M|        return this->get_value();
 1629|  7.75M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  7.75M|    {
  451|  7.75M|        return m_value;
  452|  7.75M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  4.53k|    {
 1476|  4.53k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  4.53k|    {
  447|  4.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.21M|    {
 1177|  6.21M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  6.20M|    {
 1430|  6.20M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  6.20M|    {
  437|  6.20M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  7.76M|    {
 1837|  7.76M|        return detail::transform_error_impl(std::move(*this),
 1838|  7.76M|                                            std::forward<F>(f));
 1839|  7.76M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  7.76M|{
 1323|  7.76M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  7.76M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  7.76M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  7.76M|            return result(*std::forward<Exp>(exp));
 1327|  7.76M|        }
 1328|       |
 1329|  7.76M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  7.76M|        return result(unexpect, monostate{});
 1331|  7.76M|    }
 1332|  7.76M|    else {
 1333|  7.76M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.76M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.76M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.75M, False: 11.3k]
  |  |  ------------------
  ------------------
 1335|  7.76M|                   ? result(*std::forward<Exp>(exp))
 1336|  7.76M|                   : result(unexpect,
 1337|  11.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.3k|                                           std::forward<Exp>(exp).error()));
 1339|  7.76M|    }
 1340|  7.76M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  7.75M|    {
 1663|  7.75M|        return std::move(value());
 1664|  7.75M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  11.3k|    {
 1614|  11.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  11.3k|        return std::move(this->get_unexpected().error());
 1616|  11.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  11.3k|    {
  468|  11.3k|        return m_unexpected;
  469|  11.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  11.3k|    {
 1486|  11.3k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  6.21M|    {
 1598|  6.21M|        return has_value();
 1599|  6.21M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.4M|    {
  485|  12.4M|        return m_has_value;
  486|  12.4M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  4.53k|    {
 1604|  4.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.53k|        return this->get_unexpected().error();
 1606|  4.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  4.53k|    {
  468|  4.53k|        return m_unexpected;
  469|  4.53k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  6.20M|    {
 1663|  6.20M|        return std::move(value());
 1664|  6.20M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  6.20M|    {
 1627|  6.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.20M|        return this->get_value();
 1629|  6.20M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.20M|    {
  451|  6.20M|        return m_value;
  452|  6.20M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  7.75M|    {
 2855|  7.75M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  7.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  7.75M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  7.75M|    {
 2836|  7.75M|        return t.data();
 2837|  7.75M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.54M|    {
 1653|  1.54M|        return value();
 1654|  1.54M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.08M|    {
 1653|  3.08M|        return value();
 1654|  3.08M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|    138|    {
 1430|    138|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|    138|    {
  437|    138|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    276|    {
 1430|    276|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    276|    {
  437|    276|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   754k|    {
 5466|   754k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   754k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 754k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   754k|        return static_cast<std::size_t>(m_desc &
 5471|   754k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   754k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  1.50M|    {
 5491|  1.50M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.50M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   754k|    {
 5434|   754k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   754k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 754k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   754k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   754k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 754k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   754k|        const auto t = type(id);
 5446|   754k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   754k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 754k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   754k|        basic_scan_arg<Context> arg;
 5451|   754k|        arg.m_type = t;
 5452|   754k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 754k, False: 0]
  ------------------
 5453|   754k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   754k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   754k|        return arg;
 5459|   754k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   754k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   754k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   754k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   754k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   754k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   754k|    {
 5495|   754k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   754k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  1.30M|    {
 5247|  1.30M|        return m_type != detail::arg_type::none_type;
 5248|  1.30M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   330k|{
 8417|   330k|#define SCN_VISIT(Type)                                         \
 8418|   330k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   330k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   330k|    }                                                           \
 8421|   330k|    else {                                                      \
 8422|   330k|        return vis(monostate_val);                              \
 8423|   330k|    }
 8424|       |
 8425|   330k|    monostate monostate_val{};
 8426|       |
 8427|   330k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 330k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 330k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 330k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 330k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 330k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 330k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 330k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 330k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 330k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 330k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 330k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 330k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 330k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 330k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 330k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 330k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 330k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 330k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|   165k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 165k, False: 165k]
  ------------------
 8465|   165k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   165k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   165k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   165k|    }                                                           \
  |  | 8421|   165k|    else {                                                      \
  |  | 8422|   165k|        return vis(monostate_val);                              \
  |  | 8423|   165k|    }
  ------------------
 8466|   165k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 165k, False: 165k]
  ------------------
 8467|   165k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   165k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   165k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   165k|    }                                                           \
  |  | 8421|   165k|    else {                                                      \
  |  | 8422|   165k|        return vis(monostate_val);                              \
  |  | 8423|   165k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 330k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 330k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 330k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 330k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 330k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 330k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 330k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   330k|            SCN_CLANG_POP
 8495|   330k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   409k|    {
 5545|   409k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   147k|    {
 8138|   147k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   409k|    {
 8056|   409k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|   334k|{
 4344|   334k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 334k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   334k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   334k|                            ranges::default_sentinel};
 4350|   334k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|   334k|    {
 4177|   334k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   334k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   334k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   186k|{
 8417|   186k|#define SCN_VISIT(Type)                                         \
 8418|   186k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   186k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   186k|    }                                                           \
 8421|   186k|    else {                                                      \
 8422|   186k|        return vis(monostate_val);                              \
 8423|   186k|    }
 8424|       |
 8425|   186k|    monostate monostate_val{};
 8426|       |
 8427|   186k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 186k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 186k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 186k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 186k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 186k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 186k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 186k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 186k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 186k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 186k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 186k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 186k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 186k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 186k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 186k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 186k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 186k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 186k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 186k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|   186k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 186k, False: 0]
  ------------------
 8467|   186k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   186k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   186k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   186k|    }                                                           \
  |  | 8421|   186k|    else {                                                      \
  |  | 8422|   186k|        return vis(monostate_val);                              \
  |  | 8423|   186k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 186k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 186k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 186k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 186k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 186k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 186k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 186k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   186k|            SCN_CLANG_POP
 8495|   186k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   262k|{
 7044|   262k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   262k|    handler.check_args_exhausted();
 7046|   262k|    return handler.get_error();
 7047|   262k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   262k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   262k|    auto begin = format.data();
 7013|   262k|    auto it = begin;
 7014|   262k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   477k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 262k, False: 214k]
  ------------------
 7017|   262k|        const auto ch = *it++;
 7018|   262k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 262k, False: 0]
  ------------------
 7019|   262k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   262k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   262k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 48.1k, False: 214k]
  ------------------
 7023|  48.1k|                return;
 7024|  48.1k|            }
 7025|   262k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   262k|    }
 7036|       |
 7037|   214k|    handler.on_literal_text(begin, end);
 7038|   214k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   262k|{
 6942|   262k|    struct id_adapter {
 6943|   262k|        constexpr void operator()()
 6944|   262k|        {
 6945|   262k|            arg_id = handler.on_arg_id();
 6946|   262k|        }
 6947|   262k|        constexpr void operator()(std::size_t id)
 6948|   262k|        {
 6949|   262k|            arg_id = handler.on_arg_id(id);
 6950|   262k|        }
 6951|       |
 6952|   262k|        constexpr void on_error(const char* msg)
 6953|   262k|        {
 6954|   262k|            SCN_UNLIKELY_ATTR
 6955|   262k|            handler.on_error(msg);
 6956|   262k|        }
 6957|       |
 6958|   262k|        Handler& handler;
 6959|   262k|        std::size_t arg_id;
 6960|   262k|    };
 6961|       |
 6962|   262k|    ++begin;
 6963|   262k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   262k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 262k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   262k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 262k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   262k|    else {
 6975|   262k|        auto adapter = id_adapter{handler, 0};
 6976|   262k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   262k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   262k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 262k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   262k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 262k, False: 0]
  ------------------
 6987|   262k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   262k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   262k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 243k]
  |  |  |  Branch (859:45): [True: 0, False: 262k]
  |  |  |  Branch (859:45): [True: 19.2k, False: 243k]
  |  |  ------------------
  ------------------
 6993|  19.2k|                handler.on_error("Unknown format specifier");
 6994|  19.2k|                return begin;
 6995|  19.2k|            }
 6996|   262k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   262k|    }
 7003|   243k|    return begin + 1;
 7004|   262k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   409k|    {
 8039|   409k|        return m_args.get(id);
 8040|   409k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   381k|    {
 8049|   381k|        return m_locale;
 8050|   381k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   409k|    {
 5566|   409k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   409k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   409k|        do_check_arg_id(id);
 5574|   409k|        return id;
 5575|   409k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   409k|{
 6054|   409k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   409k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   409k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   262k|{
 6443|   262k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   262k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 262k, False: 0]
  |  Branch (6444:26): [True: 0, False: 262k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   262k|    handler();
 6449|   262k|    return begin;
 6450|   262k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  28.8k|{
 6392|  28.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  28.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  28.8k|    unsigned long long value = 0;
 6396|  57.7k|    do {
 6397|  57.7k|        value *= 10;
 6398|  57.7k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  57.7k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 57.7k]
  ------------------
 6400|  57.7k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  57.7k|        ++begin;
 6404|  57.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 57.7k, False: 0]
  |  Branch (6404:30): [True: 57.7k, False: 0]
  |  Branch (6404:47): [True: 28.8k, False: 28.8k]
  ------------------
 6405|  28.8k|    return static_cast<int>(value);
 6406|  28.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   262k|        {
 6945|   262k|            arg_id = handler.on_arg_id();
 6946|   262k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   819k|    {
 5252|   819k|        return m_type;
 5253|   819k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   381k|    {
 5561|   381k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   381k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   790k|    {
 5550|   790k|        return m_format.data();
 5551|   790k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   262k|    {
 7122|   262k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   262k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   262k|{
 6858|   262k|    auto do_presentation = [&]() -> const CharT* {
 6859|   262k|        if (*begin == CharT{'['}) {
 6860|   262k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   262k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   262k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   262k|                return begin;
 6866|   262k|            }
 6867|   262k|            handler.on_character_set_string(set);
 6868|   262k|            return begin;
 6869|   262k|        }
 6870|   262k|        if (*begin == CharT{'/'}) {
 6871|   262k|            return parse_presentation_regex(begin, end, handler);
 6872|   262k|        }
 6873|   262k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   262k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   262k|            handler.on_error("Invalid type specifier in format string");
 6876|   262k|            return begin;
 6877|   262k|        }
 6878|   262k|        handler.on_type(type);
 6879|   262k|        return begin;
 6880|   262k|    };
 6881|       |
 6882|   262k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 262k, False: 0]
  |  Branch (6882:28): [True: 230k, False: 32.6k]
  ------------------
 6883|   262k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 230k, False: 0]
  |  Branch (6883:36): [True: 220k, False: 9.62k]
  ------------------
 6884|   220k|        return do_presentation();
 6885|   220k|    }
 6886|       |
 6887|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  42.2k|    begin = parse_align(begin, end, handler);
 6893|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  42.2k|    begin = parse_width(begin, end, handler);
 6899|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  42.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 42.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  42.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 9.62k, False: 32.6k]
  ------------------
 6918|  9.62k|        handler.on_localized();
 6919|  9.62k|        ++begin;
 6920|  9.62k|    }
 6921|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  42.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 42.2k, False: 0]
  |  Branch (6926:25): [True: 32.6k, False: 9.62k]
  ------------------
 6927|  32.6k|        do_presentation();
 6928|  32.6k|    }
 6929|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  42.2k|    return begin;
 6935|  42.2k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   360k|{
 6507|   360k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 346k, False: 14.4k]
  |  Branch (6507:33): [True: 346k, False: 0]
  ------------------
 6508|   360k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 14.4k, False: 0]
  |  Branch (6508:33): [True: 14.4k, False: 0]
  ------------------
 6509|   360k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   253k|    auto do_presentation = [&]() -> const CharT* {
 6859|   253k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 13.4k, False: 239k]
  ------------------
 6860|  13.4k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  13.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  13.4k|            handler.on_character_set_string(set);
 6868|  13.4k|            return begin;
 6869|  13.4k|        }
 6870|   239k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 239k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   239k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   239k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 230k]
  |  |  ------------------
  ------------------
 6875|  9.62k|            handler.on_error("Invalid type specifier in format string");
 6876|  9.62k|            return begin;
 6877|  9.62k|        }
 6878|   230k|        handler.on_type(type);
 6879|   230k|        return begin;
 6880|   239k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  13.4k|{
 6697|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  13.4k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  13.4k|    auto start = begin;
 6701|  13.4k|    ++begin;
 6702|       |
 6703|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  13.4k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 13.4k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  13.4k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 13.4k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  40.2k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 40.2k, False: 0]
  ------------------
 6728|  40.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.2k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  40.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 13.4k, False: 26.8k]
  ------------------
 6733|  13.4k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  13.4k|        }
 6735|       |
 6736|  26.8k|        parse_presentation_set_literal(begin, end, handler);
 6737|  26.8k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  13.4k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  26.8k|{
 6661|  26.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  26.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  26.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.8k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  26.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 26.8k, False: 0]
  |  Branch (6668:25): [True: 26.8k, False: 0]
  |  Branch (6668:49): [True: 26.8k, False: 0]
  ------------------
 6669|  26.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 26.8k, False: 0]
  ------------------
 6670|  26.8k|        ++begin;
 6671|       |
 6672|  26.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  26.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.8k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  26.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.8k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  26.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  26.8k|        return;
 6686|  26.8k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  53.6k|{
 6637|  53.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  53.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  53.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.6k]
  |  |  |  Branch (859:45): [True: 0, False: 53.6k]
  |  |  |  Branch (859:45): [True: 0, False: 53.6k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  53.6k|    const auto cp =
 6646|  53.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  53.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.6k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  53.6k|    begin += len;
 6653|  53.6k|    return cp;
 6654|  53.6k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  20.1k|    {
 6346|  20.1k|        m_specs.charset_string_data = fmt.data();
 6347|  20.1k|        m_specs.charset_string_size = fmt.size();
 6348|  20.1k|        on_type(presentation_type::string_set);
 6349|  20.1k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   375k|{
 6455|   375k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 375k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 375k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 375k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 375k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 375k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 375k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 375k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 375k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 375k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 375k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 375k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 375k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 375k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 375k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 375k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 375k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 375k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 375k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   346k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 346k, False: 28.8k]
  ------------------
 6486|   346k|            return presentation_type::string;
 6487|  14.4k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 14.4k, False: 360k]
  ------------------
 6488|  14.4k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 375k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 375k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 375k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 375k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  14.4k|        default:
  ------------------
  |  Branch (6499:9): [True: 14.4k, False: 360k]
  ------------------
 6500|  14.4k|            return presentation_type::none;
 6501|   375k|    }
 6502|   375k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  42.2k|{
 6532|  42.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  42.2k|    auto check_align = [](wchar_t ch) {
 6535|  42.2k|        switch (ch) {
 6536|  42.2k|            case L'<':
 6537|  42.2k|                return align_type::left;
 6538|  42.2k|            case L'>':
 6539|  42.2k|                return align_type::right;
 6540|  42.2k|            case L'^':
 6541|  42.2k|                return align_type::center;
 6542|  42.2k|            default:
 6543|  42.2k|                return align_type::none;
 6544|  42.2k|        }
 6545|  42.2k|    };
 6546|       |
 6547|  42.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  42.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  84.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  |  Branch (859:45): [True: 0, False: 42.2k]
  |  |  |  Branch (859:45): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6549|  42.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  42.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  42.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  42.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  42.2k|    const auto begin_before_fill = begin;
 6559|  42.2k|    begin += potential_fill_len;
 6560|       |
 6561|  42.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 42.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  42.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  42.2k|    const auto begin_after_fill = begin;
 6567|  42.2k|    ++begin;
 6568|       |
 6569|  42.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 42.2k, False: 0]
  ------------------
 6570|  42.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  42.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 13.4k, False: 28.8k]
  ------------------
 6575|  13.4k|            return begin_before_fill;
 6576|  13.4k|        }
 6577|  42.2k|    }
 6578|       |
 6579|  28.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 28.8k, False: 0]
  ------------------
 6580|  28.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 28.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  28.8k|        return begin_before_fill;
 6585|  28.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  28.8k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  63.3k|{
 6514|  63.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  63.3k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  63.3k|        return 1;
 6517|  63.3k|    }
 6518|  63.3k|    else {
 6519|  63.3k|        const auto lengths =
 6520|  63.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  63.3k|            "\3\4";
 6522|  63.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  63.3k|        return len;
 6524|  63.3k|    }
 6525|  63.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  84.5k|    auto check_align = [](wchar_t ch) {
 6535|  84.5k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 84.5k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 84.5k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 84.5k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  84.5k|            default:
  ------------------
  |  Branch (6542:13): [True: 84.5k, False: 0]
  ------------------
 6543|  84.5k|                return align_type::none;
 6544|  84.5k|        }
 6545|  84.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  42.2k|{
 6597|  42.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  42.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 42.2k, False: 0]
  |  Branch (6599:33): [True: 19.2k, False: 23.0k]
  ------------------
 6600|  19.2k|        int width = parse_simple_int(begin, end);
 6601|  19.2k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  19.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.2k, False: 0]
  |  |  ------------------
  ------------------
 6602|  19.2k|            handler.on_width(width);
 6603|  19.2k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  19.2k|    }
 6609|  42.2k|    return begin;
 6610|  42.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  9.62k|    {
 7127|  9.62k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  9.62k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 9.62k, False: 0]
  ------------------
 7129|  9.62k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 9.62k, False: 0]
  ------------------
 7130|  9.62k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 9.62k, False: 0]
  ------------------
 7131|  9.62k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 9.62k, False: 0]
  ------------------
 7132|  9.62k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  9.62k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  9.62k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   243k|{
 8417|   243k|#define SCN_VISIT(Type)                                         \
 8418|   243k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   243k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   243k|    }                                                           \
 8421|   243k|    else {                                                      \
 8422|   243k|        return vis(monostate_val);                              \
 8423|   243k|    }
 8424|       |
 8425|   243k|    monostate monostate_val{};
 8426|       |
 8427|   243k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 243k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 243k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 243k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 243k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 243k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 243k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 243k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 243k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 243k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 243k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 243k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 243k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 243k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 243k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 243k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 243k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 243k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 243k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|   121k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 121k, False: 121k]
  ------------------
 8465|   121k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   121k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   121k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   121k|    }                                                           \
  |  | 8421|   121k|    else {                                                      \
  |  | 8422|   121k|        return vis(monostate_val);                              \
  |  | 8423|   121k|    }
  ------------------
 8466|   121k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 121k, False: 121k]
  ------------------
 8467|   121k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   121k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   121k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   121k|    }                                                           \
  |  | 8421|   121k|    else {                                                      \
  |  | 8422|   121k|        return vis(monostate_val);                              \
  |  | 8423|   121k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 243k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 243k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 243k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 243k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 243k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 243k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 243k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   243k|            SCN_CLANG_POP
 8495|   243k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   147k|{
 7044|   147k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   147k|    handler.check_args_exhausted();
 7046|   147k|    return handler.get_error();
 7047|   147k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   147k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   147k|    auto begin = format.data();
 7013|   147k|    auto it = begin;
 7014|   147k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   270k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 147k, False: 123k]
  ------------------
 7017|   147k|        const auto ch = *it++;
 7018|   147k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 147k, False: 0]
  ------------------
 7019|   147k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   147k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   147k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 24.0k, False: 123k]
  ------------------
 7023|  24.0k|                return;
 7024|  24.0k|            }
 7025|   147k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   147k|    }
 7036|       |
 7037|   123k|    handler.on_literal_text(begin, end);
 7038|   123k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   123k|    {
 8175|   123k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   123k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   147k|{
 6942|   147k|    struct id_adapter {
 6943|   147k|        constexpr void operator()()
 6944|   147k|        {
 6945|   147k|            arg_id = handler.on_arg_id();
 6946|   147k|        }
 6947|   147k|        constexpr void operator()(std::size_t id)
 6948|   147k|        {
 6949|   147k|            arg_id = handler.on_arg_id(id);
 6950|   147k|        }
 6951|       |
 6952|   147k|        constexpr void on_error(const char* msg)
 6953|   147k|        {
 6954|   147k|            SCN_UNLIKELY_ATTR
 6955|   147k|            handler.on_error(msg);
 6956|   147k|        }
 6957|       |
 6958|   147k|        Handler& handler;
 6959|   147k|        std::size_t arg_id;
 6960|   147k|    };
 6961|       |
 6962|   147k|    ++begin;
 6963|   147k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   147k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 147k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   147k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 147k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   147k|    else {
 6975|   147k|        auto adapter = id_adapter{handler, 0};
 6976|   147k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   147k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   147k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 147k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   147k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 147k, False: 0]
  ------------------
 6987|   147k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   147k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   147k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 137k]
  |  |  |  Branch (859:45): [True: 0, False: 147k]
  |  |  |  Branch (859:45): [True: 9.62k, False: 137k]
  |  |  ------------------
  ------------------
 6993|  9.62k|                handler.on_error("Unknown format specifier");
 6994|  9.62k|                return begin;
 6995|  9.62k|            }
 6996|   147k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   147k|    }
 7003|   137k|    return begin + 1;
 7004|   147k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   147k|{
 6443|   147k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   147k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 147k, False: 0]
  |  Branch (6444:26): [True: 0, False: 147k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   147k|    handler();
 6449|   147k|    return begin;
 6450|   147k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   147k|        {
 6945|   147k|            arg_id = handler.on_arg_id();
 6946|   147k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   147k|    {
 7122|   147k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   147k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   147k|{
 6858|   147k|    auto do_presentation = [&]() -> const CharT* {
 6859|   147k|        if (*begin == CharT{'['}) {
 6860|   147k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   147k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   147k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   147k|                return begin;
 6866|   147k|            }
 6867|   147k|            handler.on_character_set_string(set);
 6868|   147k|            return begin;
 6869|   147k|        }
 6870|   147k|        if (*begin == CharT{'/'}) {
 6871|   147k|            return parse_presentation_regex(begin, end, handler);
 6872|   147k|        }
 6873|   147k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   147k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   147k|            handler.on_error("Invalid type specifier in format string");
 6876|   147k|            return begin;
 6877|   147k|        }
 6878|   147k|        handler.on_type(type);
 6879|   147k|        return begin;
 6880|   147k|    };
 6881|       |
 6882|   147k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 147k, False: 0]
  |  Branch (6882:28): [True: 130k, False: 16.3k]
  ------------------
 6883|   147k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 130k, False: 0]
  |  Branch (6883:36): [True: 125k, False: 4.81k]
  ------------------
 6884|   125k|        return do_presentation();
 6885|   125k|    }
 6886|       |
 6887|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  21.1k|    begin = parse_align(begin, end, handler);
 6893|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  21.1k|    begin = parse_width(begin, end, handler);
 6899|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  21.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 21.1k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  21.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 4.81k, False: 16.3k]
  ------------------
 6918|  4.81k|        handler.on_localized();
 6919|  4.81k|        ++begin;
 6920|  4.81k|    }
 6921|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  21.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 21.1k, False: 0]
  |  Branch (6926:25): [True: 16.3k, False: 4.81k]
  ------------------
 6927|  16.3k|        do_presentation();
 6928|  16.3k|    }
 6929|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  21.1k|    return begin;
 6935|  21.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   142k|    auto do_presentation = [&]() -> const CharT* {
 6859|   142k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 6.70k, False: 135k]
  ------------------
 6860|  6.70k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  6.70k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  6.70k|            handler.on_character_set_string(set);
 6868|  6.70k|            return begin;
 6869|  6.70k|        }
 6870|   135k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 135k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   135k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   135k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 130k]
  |  |  ------------------
  ------------------
 6875|  4.81k|            handler.on_error("Invalid type specifier in format string");
 6876|  4.81k|            return begin;
 6877|  4.81k|        }
 6878|   130k|        handler.on_type(type);
 6879|   130k|        return begin;
 6880|   135k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  6.70k|{
 6697|  6.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  6.70k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  6.70k|    auto start = begin;
 6701|  6.70k|    ++begin;
 6702|       |
 6703|  6.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  6.70k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 6.70k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  6.70k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 6.70k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  20.1k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 20.1k, False: 0]
  ------------------
 6728|  20.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.1k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  20.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 6.70k, False: 13.4k]
  ------------------
 6733|  6.70k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  6.70k|        }
 6735|       |
 6736|  13.4k|        parse_presentation_set_literal(begin, end, handler);
 6737|  13.4k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  6.70k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  13.4k|{
 6661|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  13.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  13.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  13.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 13.4k, False: 0]
  |  Branch (6668:25): [True: 13.4k, False: 0]
  |  Branch (6668:49): [True: 13.4k, False: 0]
  ------------------
 6669|  13.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 13.4k, False: 0]
  ------------------
 6670|  13.4k|        ++begin;
 6671|       |
 6672|  13.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  13.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  13.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  13.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  13.4k|        return;
 6686|  13.4k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  26.8k|{
 6637|  26.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  26.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  26.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.8k]
  |  |  |  Branch (859:45): [True: 0, False: 26.8k]
  |  |  |  Branch (859:45): [True: 0, False: 26.8k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  26.8k|    const auto cp =
 6646|  26.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  26.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.8k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  26.8k|    begin += len;
 6653|  26.8k|    return cp;
 6654|  26.8k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  21.1k|{
 6532|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  21.1k|    auto check_align = [](wchar_t ch) {
 6535|  21.1k|        switch (ch) {
 6536|  21.1k|            case L'<':
 6537|  21.1k|                return align_type::left;
 6538|  21.1k|            case L'>':
 6539|  21.1k|                return align_type::right;
 6540|  21.1k|            case L'^':
 6541|  21.1k|                return align_type::center;
 6542|  21.1k|            default:
 6543|  21.1k|                return align_type::none;
 6544|  21.1k|        }
 6545|  21.1k|    };
 6546|       |
 6547|  21.1k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  21.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  |  Branch (859:45): [True: 0, False: 21.1k]
  |  |  |  Branch (859:45): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6549|  21.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  21.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  21.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  21.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  21.1k|    const auto begin_before_fill = begin;
 6559|  21.1k|    begin += potential_fill_len;
 6560|       |
 6561|  21.1k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 21.1k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  21.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  21.1k|    const auto begin_after_fill = begin;
 6567|  21.1k|    ++begin;
 6568|       |
 6569|  21.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 21.1k, False: 0]
  ------------------
 6570|  21.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  21.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 6.70k, False: 14.4k]
  ------------------
 6575|  6.70k|            return begin_before_fill;
 6576|  6.70k|        }
 6577|  21.1k|    }
 6578|       |
 6579|  14.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 14.4k, False: 0]
  ------------------
 6580|  14.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 14.4k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  14.4k|        return begin_before_fill;
 6585|  14.4k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  14.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  42.2k|    auto check_align = [](wchar_t ch) {
 6535|  42.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 42.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 42.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 42.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  42.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 42.2k, False: 0]
  ------------------
 6543|  42.2k|                return align_type::none;
 6544|  42.2k|        }
 6545|  42.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  21.1k|{
 6597|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  21.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 21.1k, False: 0]
  |  Branch (6599:33): [True: 9.62k, False: 11.5k]
  ------------------
 6600|  9.62k|        int width = parse_simple_int(begin, end);
 6601|  9.62k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  9.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.62k, False: 0]
  |  |  ------------------
  ------------------
 6602|  9.62k|            handler.on_width(width);
 6603|  9.62k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  9.62k|    }
 6609|  21.1k|    return begin;
 6610|  21.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  4.81k|    {
 7127|  4.81k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  4.81k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 4.81k, False: 0]
  ------------------
 7129|  4.81k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 4.81k, False: 0]
  ------------------
 7130|  4.81k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 4.81k, False: 0]
  ------------------
 7131|  4.81k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 4.81k, False: 0]
  ------------------
 7132|  4.81k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  4.81k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  4.81k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   137k|{
 8417|   137k|#define SCN_VISIT(Type)                                         \
 8418|   137k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   137k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   137k|    }                                                           \
 8421|   137k|    else {                                                      \
 8422|   137k|        return vis(monostate_val);                              \
 8423|   137k|    }
 8424|       |
 8425|   137k|    monostate monostate_val{};
 8426|       |
 8427|   137k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 137k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 137k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 137k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 137k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 137k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 137k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 137k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 137k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 137k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 137k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 137k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 137k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 137k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 137k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 137k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 137k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 137k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 137k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 137k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|   137k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 137k, False: 0]
  ------------------
 8467|   137k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   137k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   137k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   137k|    }                                                           \
  |  | 8421|   137k|    else {                                                      \
  |  | 8422|   137k|        return vis(monostate_val);                              \
  |  | 8423|   137k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 137k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 137k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 137k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 137k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 137k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 137k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 137k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   137k|            SCN_CLANG_POP
 8495|   137k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  31.2k|    {
 4076|  31.2k|        sync(0);
 4077|  31.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  9.43M|    {
 5466|  9.43M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  9.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.43M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  9.43M|        return static_cast<std::size_t>(m_desc &
 5471|  9.43M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  9.43M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  18.8M|    {
 5491|  18.8M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  18.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  9.43M|    {
 5434|  9.43M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  9.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.43M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  9.43M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  9.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.43M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  9.43M|        const auto t = type(id);
 5446|  9.43M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  9.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.43M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  9.43M|        basic_scan_arg<Context> arg;
 5451|  9.43M|        arg.m_type = t;
 5452|  9.43M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 9.43M, False: 0]
  ------------------
 5453|  9.43M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  9.43M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  9.43M|        return arg;
 5459|  9.43M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  9.43M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  9.43M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  9.43M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  9.43M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  9.43M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  9.43M|    {
 5495|  9.43M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  9.43M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  16.4M|    {
 5247|  16.4M|        return m_type != detail::arg_type::none_type;
 5248|  16.4M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  4.66M|{
 8417|  4.66M|#define SCN_VISIT(Type)                                         \
 8418|  4.66M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  4.66M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  4.66M|    }                                                           \
 8421|  4.66M|    else {                                                      \
 8422|  4.66M|        return vis(monostate_val);                              \
 8423|  4.66M|    }
 8424|       |
 8425|  4.66M|    monostate monostate_val{};
 8426|       |
 8427|  4.66M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 4.66M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.66M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 4.66M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.66M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.66M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.66M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.66M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 4.66M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 4.66M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 4.66M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 4.66M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 4.66M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.66M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 4.66M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 4.66M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.66M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 4.66M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 4.66M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 4.66M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 4.66M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  2.33M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 2.33M, False: 2.33M]
  ------------------
 8469|  2.33M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  2.33M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.33M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.33M|    }                                                           \
  |  | 8421|  2.33M|    else {                                                      \
  |  | 8422|  2.33M|        return vis(monostate_val);                              \
  |  | 8423|  2.33M|    }
  ------------------
 8470|  2.33M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 2.33M, False: 2.33M]
  ------------------
 8471|  2.33M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  2.33M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.33M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.33M|    }                                                           \
  |  | 8421|  2.33M|    else {                                                      \
  |  | 8422|  2.33M|        return vis(monostate_val);                              \
  |  | 8423|  2.33M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 4.66M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 4.66M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 4.66M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 4.66M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 4.66M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  4.66M|            SCN_CLANG_POP
 8495|  4.66M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|  4.77M|    {
 5545|  4.77M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  1.59M|    {
 8138|  1.59M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|  4.77M|    {
 8056|  4.77M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  3.18M|{
 7044|  3.18M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  3.18M|    handler.check_args_exhausted();
 7046|  3.18M|    return handler.get_error();
 7047|  3.18M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  3.18M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  3.18M|    auto begin = format.data();
 7013|  3.18M|    auto it = begin;
 7014|  3.18M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  6.27M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 3.18M, False: 3.08M]
  ------------------
 7017|  3.18M|        const auto ch = *it++;
 7018|  3.18M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 3.18M, False: 0]
  ------------------
 7019|  3.18M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  3.18M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  3.18M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 96.2k, False: 3.08M]
  ------------------
 7023|  96.2k|                return;
 7024|  96.2k|            }
 7025|  3.18M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  3.18M|    }
 7036|       |
 7037|  3.08M|    handler.on_literal_text(begin, end);
 7038|  3.08M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  3.18M|{
 6942|  3.18M|    struct id_adapter {
 6943|  3.18M|        constexpr void operator()()
 6944|  3.18M|        {
 6945|  3.18M|            arg_id = handler.on_arg_id();
 6946|  3.18M|        }
 6947|  3.18M|        constexpr void operator()(std::size_t id)
 6948|  3.18M|        {
 6949|  3.18M|            arg_id = handler.on_arg_id(id);
 6950|  3.18M|        }
 6951|       |
 6952|  3.18M|        constexpr void on_error(const char* msg)
 6953|  3.18M|        {
 6954|  3.18M|            SCN_UNLIKELY_ATTR
 6955|  3.18M|            handler.on_error(msg);
 6956|  3.18M|        }
 6957|       |
 6958|  3.18M|        Handler& handler;
 6959|  3.18M|        std::size_t arg_id;
 6960|  3.18M|    };
 6961|       |
 6962|  3.18M|    ++begin;
 6963|  3.18M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  3.18M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 3.18M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  3.18M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 3.18M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  3.18M|    else {
 6975|  3.18M|        auto adapter = id_adapter{handler, 0};
 6976|  3.18M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  3.18M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  3.18M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 3.18M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  3.18M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 3.18M, False: 0]
  ------------------
 6987|  3.18M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  3.18M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  3.18M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  6.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 3.14M]
  |  |  |  Branch (859:45): [True: 0, False: 3.18M]
  |  |  |  Branch (859:45): [True: 38.4k, False: 3.14M]
  |  |  ------------------
  ------------------
 6993|  38.4k|                handler.on_error("Unknown format specifier");
 6994|  38.4k|                return begin;
 6995|  38.4k|            }
 6996|  3.18M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  3.18M|    }
 7003|  3.14M|    return begin + 1;
 7004|  3.18M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  4.77M|    {
 8039|  4.77M|        return m_args.get(id);
 8040|  4.77M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  4.71M|    {
 8049|  4.71M|        return m_locale;
 8050|  4.71M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  4.77M|    {
 5566|  4.77M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.77M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  4.77M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  4.77M|        do_check_arg_id(id);
 5574|  4.77M|        return id;
 5575|  4.77M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  4.77M|{
 6054|  4.77M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  4.77M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  4.77M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  3.18M|{
 6443|  3.18M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  3.18M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 3.18M, False: 0]
  |  Branch (6444:26): [True: 0, False: 3.18M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  3.18M|    handler();
 6449|  3.18M|    return begin;
 6450|  3.18M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  57.7k|{
 6392|  57.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  57.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  57.7k|    unsigned long long value = 0;
 6396|   115k|    do {
 6397|   115k|        value *= 10;
 6398|   115k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|   115k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 115k]
  ------------------
 6400|   115k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|   115k|        ++begin;
 6404|   115k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 115k, False: 0]
  |  Branch (6404:30): [True: 115k, False: 0]
  |  Branch (6404:47): [True: 57.7k, False: 57.7k]
  ------------------
 6405|  57.7k|    return static_cast<int>(value);
 6406|  57.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  3.18M|        {
 6945|  3.18M|            arg_id = handler.on_arg_id();
 6946|  3.18M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  9.55M|    {
 5252|  9.55M|        return m_type;
 5253|  9.55M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  4.71M|    {
 5561|  4.71M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  4.71M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|  3.92M|{
 4344|  3.92M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 3.92M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  3.92M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  3.92M|                            ranges::default_sentinel};
 4350|  3.92M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|  3.92M|    {
 4177|  3.92M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  3.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  3.92M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  3.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  3.92M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  9.49M|    {
 5550|  9.49M|        return m_format.data();
 5551|  9.49M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  3.18M|    {
 7122|  3.18M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  3.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  3.18M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  3.18M|{
 6858|  3.18M|    auto do_presentation = [&]() -> const CharT* {
 6859|  3.18M|        if (*begin == CharT{'['}) {
 6860|  3.18M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  3.18M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  3.18M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  3.18M|                return begin;
 6866|  3.18M|            }
 6867|  3.18M|            handler.on_character_set_string(set);
 6868|  3.18M|            return begin;
 6869|  3.18M|        }
 6870|  3.18M|        if (*begin == CharT{'/'}) {
 6871|  3.18M|            return parse_presentation_regex(begin, end, handler);
 6872|  3.18M|        }
 6873|  3.18M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.18M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  3.18M|            handler.on_error("Invalid type specifier in format string");
 6876|  3.18M|            return begin;
 6877|  3.18M|        }
 6878|  3.18M|        handler.on_type(type);
 6879|  3.18M|        return begin;
 6880|  3.18M|    };
 6881|       |
 6882|  3.18M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 3.18M, False: 0]
  |  Branch (6882:28): [True: 3.12M, False: 57.9k]
  ------------------
 6883|  3.18M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 3.12M, False: 0]
  |  Branch (6883:36): [True: 3.10M, False: 19.2k]
  ------------------
 6884|  3.10M|        return do_presentation();
 6885|  3.10M|    }
 6886|       |
 6887|  77.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  77.2k|    begin = parse_align(begin, end, handler);
 6893|  77.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  77.2k|    begin = parse_width(begin, end, handler);
 6899|  77.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  77.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 77.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  77.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 19.2k, False: 57.9k]
  ------------------
 6918|  19.2k|        handler.on_localized();
 6919|  19.2k|        ++begin;
 6920|  19.2k|    }
 6921|  77.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  77.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 77.2k, False: 0]
  |  Branch (6926:25): [True: 57.9k, False: 19.2k]
  ------------------
 6927|  57.9k|        do_presentation();
 6928|  57.9k|    }
 6929|  77.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  77.2k|    return begin;
 6935|  77.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  4.69M|{
 6507|  4.69M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 4.66M, False: 28.8k]
  |  Branch (6507:33): [True: 4.66M, False: 0]
  ------------------
 6508|  4.69M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 28.8k, False: 0]
  |  Branch (6508:33): [True: 28.8k, False: 0]
  ------------------
 6509|  4.69M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  3.16M|    auto do_presentation = [&]() -> const CharT* {
 6859|  3.16M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 19.5k, False: 3.14M]
  ------------------
 6860|  19.5k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  19.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  19.5k|            handler.on_character_set_string(set);
 6868|  19.5k|            return begin;
 6869|  19.5k|        }
 6870|  3.14M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 3.14M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  3.14M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.14M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 3.12M]
  |  |  ------------------
  ------------------
 6875|  19.2k|            handler.on_error("Invalid type specifier in format string");
 6876|  19.2k|            return begin;
 6877|  19.2k|        }
 6878|  3.12M|        handler.on_type(type);
 6879|  3.12M|        return begin;
 6880|  3.14M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  19.5k|{
 6697|  19.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  19.5k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  19.5k|    auto start = begin;
 6701|  19.5k|    ++begin;
 6702|       |
 6703|  19.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  19.5k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 19.5k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  19.5k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 19.5k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  58.5k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 58.5k, False: 0]
  ------------------
 6728|  58.5k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.5k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  58.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 19.5k, False: 39.0k]
  ------------------
 6733|  19.5k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  19.5k|        }
 6735|       |
 6736|  39.0k|        parse_presentation_set_literal(begin, end, handler);
 6737|  39.0k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  19.5k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  39.0k|{
 6661|  39.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  39.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  39.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  39.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 39.0k, False: 0]
  |  Branch (6668:25): [True: 39.0k, False: 0]
  |  Branch (6668:49): [True: 39.0k, False: 0]
  ------------------
 6669|  39.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 39.0k, False: 0]
  ------------------
 6670|  39.0k|        ++begin;
 6671|       |
 6672|  39.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  39.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  39.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  39.0k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  39.0k|        return;
 6686|  39.0k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  78.0k|{
 6637|  78.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  78.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  78.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.0k]
  |  |  |  Branch (859:45): [True: 0, False: 78.0k]
  |  |  |  Branch (859:45): [True: 0, False: 78.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  78.0k|    const auto cp =
 6646|  78.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  78.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  78.0k|    begin += len;
 6653|  78.0k|    return cp;
 6654|  78.0k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  29.2k|    {
 6346|  29.2k|        m_specs.charset_string_data = fmt.data();
 6347|  29.2k|        m_specs.charset_string_size = fmt.size();
 6348|  29.2k|        on_type(presentation_type::string_set);
 6349|  29.2k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  4.71M|{
 6455|  4.71M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 4.71M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 4.71M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 4.71M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 4.71M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 4.71M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 4.71M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 4.71M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 4.71M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 4.71M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 4.71M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 4.71M]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 4.71M]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 4.71M]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 4.71M]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 4.71M]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 4.71M]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 4.71M]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 4.71M]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|  4.66M|        case 's':
  ------------------
  |  Branch (6485:9): [True: 4.66M, False: 57.7k]
  ------------------
 6486|  4.66M|            return presentation_type::string;
 6487|  28.8k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 28.8k, False: 4.69M]
  ------------------
 6488|  28.8k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 4.71M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 4.71M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.71M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.71M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  28.8k|        default:
  ------------------
  |  Branch (6499:9): [True: 28.8k, False: 4.69M]
  ------------------
 6500|  28.8k|            return presentation_type::none;
 6501|  4.71M|    }
 6502|  4.71M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  77.2k|{
 6532|  77.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  77.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  77.2k|    auto check_align = [](wchar_t ch) {
 6535|  77.2k|        switch (ch) {
 6536|  77.2k|            case L'<':
 6537|  77.2k|                return align_type::left;
 6538|  77.2k|            case L'>':
 6539|  77.2k|                return align_type::right;
 6540|  77.2k|            case L'^':
 6541|  77.2k|                return align_type::center;
 6542|  77.2k|            default:
 6543|  77.2k|                return align_type::none;
 6544|  77.2k|        }
 6545|  77.2k|    };
 6546|       |
 6547|  77.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  77.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  |  Branch (859:45): [True: 0, False: 77.2k]
  |  |  |  Branch (859:45): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6549|  77.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  77.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  77.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  77.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  77.2k|    const auto begin_before_fill = begin;
 6559|  77.2k|    begin += potential_fill_len;
 6560|       |
 6561|  77.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 77.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  77.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  77.2k|    const auto begin_after_fill = begin;
 6567|  77.2k|    ++begin;
 6568|       |
 6569|  77.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 77.2k, False: 0]
  ------------------
 6570|  77.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  77.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 19.5k, False: 57.7k]
  ------------------
 6575|  19.5k|            return begin_before_fill;
 6576|  19.5k|        }
 6577|  77.2k|    }
 6578|       |
 6579|  57.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 57.7k, False: 0]
  ------------------
 6580|  57.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 57.7k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  57.7k|        return begin_before_fill;
 6585|  57.7k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  57.7k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   115k|{
 6514|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   115k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   115k|        return 1;
 6517|   115k|    }
 6518|   115k|    else {
 6519|   115k|        const auto lengths =
 6520|   115k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   115k|            "\3\4";
 6522|   115k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   115k|        return len;
 6524|   115k|    }
 6525|   115k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   154k|    auto check_align = [](wchar_t ch) {
 6535|   154k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 154k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 154k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 154k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   154k|            default:
  ------------------
  |  Branch (6542:13): [True: 154k, False: 0]
  ------------------
 6543|   154k|                return align_type::none;
 6544|   154k|        }
 6545|   154k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  77.2k|{
 6597|  77.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  77.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  77.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 77.2k, False: 0]
  |  Branch (6599:33): [True: 38.4k, False: 38.7k]
  ------------------
 6600|  38.4k|        int width = parse_simple_int(begin, end);
 6601|  38.4k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  38.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.4k, False: 0]
  |  |  ------------------
  ------------------
 6602|  38.4k|            handler.on_width(width);
 6603|  38.4k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  38.4k|    }
 6609|  77.2k|    return begin;
 6610|  77.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  19.2k|    {
 7127|  19.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  19.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 19.2k, False: 0]
  ------------------
 7129|  19.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 19.2k, False: 0]
  ------------------
 7130|  19.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 19.2k, False: 0]
  ------------------
 7131|  19.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 19.2k, False: 0]
  ------------------
 7132|  19.2k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  19.2k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  19.2k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  3.14M|{
 8417|  3.14M|#define SCN_VISIT(Type)                                         \
 8418|  3.14M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  3.14M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  3.14M|    }                                                           \
 8421|  3.14M|    else {                                                      \
 8422|  3.14M|        return vis(monostate_val);                              \
 8423|  3.14M|    }
 8424|       |
 8425|  3.14M|    monostate monostate_val{};
 8426|       |
 8427|  3.14M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 3.14M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 3.14M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 3.14M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 3.14M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 3.14M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 3.14M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 3.14M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 3.14M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 3.14M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 3.14M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 3.14M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 3.14M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 3.14M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 3.14M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 3.14M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 3.14M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 3.14M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 3.14M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 3.14M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 3.14M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  1.57M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 1.57M, False: 1.57M]
  ------------------
 8469|  1.57M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  1.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.57M|    }                                                           \
  |  | 8421|  1.57M|    else {                                                      \
  |  | 8422|  1.57M|        return vis(monostate_val);                              \
  |  | 8423|  1.57M|    }
  ------------------
 8470|  1.57M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 1.57M, False: 1.57M]
  ------------------
 8471|  1.57M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  1.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.57M|    }                                                           \
  |  | 8421|  1.57M|    else {                                                      \
  |  | 8422|  1.57M|        return vis(monostate_val);                              \
  |  | 8423|  1.57M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 3.14M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 3.14M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 3.14M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 3.14M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 3.14M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  3.14M|            SCN_CLANG_POP
 8495|  3.14M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.33M|{
 8417|  2.33M|#define SCN_VISIT(Type)                                         \
 8418|  2.33M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.33M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.33M|    }                                                           \
 8421|  2.33M|    else {                                                      \
 8422|  2.33M|        return vis(monostate_val);                              \
 8423|  2.33M|    }
 8424|       |
 8425|  2.33M|    monostate monostate_val{};
 8426|       |
 8427|  2.33M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.33M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.33M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.33M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.33M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.33M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.33M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.33M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.33M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.33M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.33M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.33M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.33M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.33M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.33M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.33M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 2.33M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 2.33M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 2.33M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.33M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.33M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.33M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  2.33M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 2.33M, False: 0]
  ------------------
 8471|  2.33M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  2.33M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  2.33M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  2.33M|    }                                                           \
  |  | 8421|  2.33M|    else {                                                      \
  |  | 8422|  2.33M|        return vis(monostate_val);                              \
  |  | 8423|  2.33M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.33M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.33M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.33M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.33M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.33M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.33M|            SCN_CLANG_POP
 8495|  2.33M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.59M|{
 7044|  1.59M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.59M|    handler.check_args_exhausted();
 7046|  1.59M|    return handler.get_error();
 7047|  1.59M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.59M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.59M|    auto begin = format.data();
 7013|  1.59M|    auto it = begin;
 7014|  1.59M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.13M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.59M, False: 1.54M]
  ------------------
 7017|  1.59M|        const auto ch = *it++;
 7018|  1.59M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.59M, False: 0]
  ------------------
 7019|  1.59M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.59M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.59M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 48.1k, False: 1.54M]
  ------------------
 7023|  48.1k|                return;
 7024|  48.1k|            }
 7025|  1.59M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.59M|    }
 7036|       |
 7037|  1.54M|    handler.on_literal_text(begin, end);
 7038|  1.54M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  1.54M|    {
 8175|  1.54M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.54M|    static_cast<    \
  |  |  929|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.54M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|  1.59M|{
 6942|  1.59M|    struct id_adapter {
 6943|  1.59M|        constexpr void operator()()
 6944|  1.59M|        {
 6945|  1.59M|            arg_id = handler.on_arg_id();
 6946|  1.59M|        }
 6947|  1.59M|        constexpr void operator()(std::size_t id)
 6948|  1.59M|        {
 6949|  1.59M|            arg_id = handler.on_arg_id(id);
 6950|  1.59M|        }
 6951|       |
 6952|  1.59M|        constexpr void on_error(const char* msg)
 6953|  1.59M|        {
 6954|  1.59M|            SCN_UNLIKELY_ATTR
 6955|  1.59M|            handler.on_error(msg);
 6956|  1.59M|        }
 6957|       |
 6958|  1.59M|        Handler& handler;
 6959|  1.59M|        std::size_t arg_id;
 6960|  1.59M|    };
 6961|       |
 6962|  1.59M|    ++begin;
 6963|  1.59M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.59M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.59M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.59M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.59M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.59M|    else {
 6975|  1.59M|        auto adapter = id_adapter{handler, 0};
 6976|  1.59M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.59M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.59M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.59M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.59M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.59M, False: 0]
  ------------------
 6987|  1.59M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.59M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.59M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 1.57M]
  |  |  |  Branch (859:45): [True: 0, False: 1.59M]
  |  |  |  Branch (859:45): [True: 19.2k, False: 1.57M]
  |  |  ------------------
  ------------------
 6993|  19.2k|                handler.on_error("Unknown format specifier");
 6994|  19.2k|                return begin;
 6995|  19.2k|            }
 6996|  1.59M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.59M|    }
 7003|  1.57M|    return begin + 1;
 7004|  1.59M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.59M|{
 6443|  1.59M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.59M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.59M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.59M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.59M|    handler();
 6449|  1.59M|    return begin;
 6450|  1.59M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.59M|        {
 6945|  1.59M|            arg_id = handler.on_arg_id();
 6946|  1.59M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  1.59M|    {
 7122|  1.59M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.59M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.59M|{
 6858|  1.59M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.59M|        if (*begin == CharT{'['}) {
 6860|  1.59M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.59M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.59M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.59M|                return begin;
 6866|  1.59M|            }
 6867|  1.59M|            handler.on_character_set_string(set);
 6868|  1.59M|            return begin;
 6869|  1.59M|        }
 6870|  1.59M|        if (*begin == CharT{'/'}) {
 6871|  1.59M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.59M|        }
 6873|  1.59M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.59M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.59M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.59M|            return begin;
 6877|  1.59M|        }
 6878|  1.59M|        handler.on_type(type);
 6879|  1.59M|        return begin;
 6880|  1.59M|    };
 6881|       |
 6882|  1.59M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.59M, False: 0]
  |  Branch (6882:28): [True: 1.56M, False: 28.9k]
  ------------------
 6883|  1.59M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.56M, False: 0]
  |  Branch (6883:36): [True: 1.55M, False: 9.62k]
  ------------------
 6884|  1.55M|        return do_presentation();
 6885|  1.55M|    }
 6886|       |
 6887|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  38.6k|    begin = parse_align(begin, end, handler);
 6893|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  38.6k|    begin = parse_width(begin, end, handler);
 6899|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  38.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 38.6k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  38.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 9.62k, False: 28.9k]
  ------------------
 6918|  9.62k|        handler.on_localized();
 6919|  9.62k|        ++begin;
 6920|  9.62k|    }
 6921|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  38.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 38.6k, False: 0]
  |  Branch (6926:25): [True: 28.9k, False: 9.62k]
  ------------------
 6927|  28.9k|        do_presentation();
 6928|  28.9k|    }
 6929|  38.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  38.6k|    return begin;
 6935|  38.6k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.58M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.58M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 9.75k, False: 1.57M]
  ------------------
 6860|  9.75k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  9.75k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.75k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  9.75k|            handler.on_character_set_string(set);
 6868|  9.75k|            return begin;
 6869|  9.75k|        }
 6870|  1.57M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.57M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.57M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.57M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 1.56M]
  |  |  ------------------
  ------------------
 6875|  9.62k|            handler.on_error("Invalid type specifier in format string");
 6876|  9.62k|            return begin;
 6877|  9.62k|        }
 6878|  1.56M|        handler.on_type(type);
 6879|  1.56M|        return begin;
 6880|  1.57M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  9.75k|{
 6697|  9.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  9.75k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  9.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  9.75k|    auto start = begin;
 6701|  9.75k|    ++begin;
 6702|       |
 6703|  9.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.75k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  9.75k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 9.75k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  9.75k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 9.75k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  29.2k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 29.2k, False: 0]
  ------------------
 6728|  29.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.2k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  29.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 9.75k, False: 19.5k]
  ------------------
 6733|  9.75k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  9.75k|        }
 6735|       |
 6736|  19.5k|        parse_presentation_set_literal(begin, end, handler);
 6737|  19.5k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  9.75k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  19.5k|{
 6661|  19.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  19.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  19.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  19.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 19.5k, False: 0]
  |  Branch (6668:25): [True: 19.5k, False: 0]
  |  Branch (6668:49): [True: 19.5k, False: 0]
  ------------------
 6669|  19.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 19.5k, False: 0]
  ------------------
 6670|  19.5k|        ++begin;
 6671|       |
 6672|  19.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  19.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  19.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  19.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  19.5k|        return;
 6686|  19.5k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  39.0k|{
 6637|  39.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  39.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  39.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  |  Branch (859:45): [True: 0, False: 39.0k]
  |  |  |  Branch (859:45): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  39.0k|    const auto cp =
 6646|  39.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  39.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  39.0k|    begin += len;
 6653|  39.0k|    return cp;
 6654|  39.0k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  38.6k|{
 6532|  38.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  38.6k|    auto check_align = [](wchar_t ch) {
 6535|  38.6k|        switch (ch) {
 6536|  38.6k|            case L'<':
 6537|  38.6k|                return align_type::left;
 6538|  38.6k|            case L'>':
 6539|  38.6k|                return align_type::right;
 6540|  38.6k|            case L'^':
 6541|  38.6k|                return align_type::center;
 6542|  38.6k|            default:
 6543|  38.6k|                return align_type::none;
 6544|  38.6k|        }
 6545|  38.6k|    };
 6546|       |
 6547|  38.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  38.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  |  Branch (859:45): [True: 0, False: 38.6k]
  |  |  |  Branch (859:45): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6549|  38.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  38.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  38.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  38.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  38.6k|    const auto begin_before_fill = begin;
 6559|  38.6k|    begin += potential_fill_len;
 6560|       |
 6561|  38.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 38.6k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  38.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  38.6k|    const auto begin_after_fill = begin;
 6567|  38.6k|    ++begin;
 6568|       |
 6569|  38.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 38.6k, False: 0]
  ------------------
 6570|  38.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  38.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 9.75k, False: 28.8k]
  ------------------
 6575|  9.75k|            return begin_before_fill;
 6576|  9.75k|        }
 6577|  38.6k|    }
 6578|       |
 6579|  28.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 28.8k, False: 0]
  ------------------
 6580|  28.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 28.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  28.8k|        return begin_before_fill;
 6585|  28.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  28.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  77.2k|    auto check_align = [](wchar_t ch) {
 6535|  77.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 77.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 77.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 77.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  77.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 77.2k, False: 0]
  ------------------
 6543|  77.2k|                return align_type::none;
 6544|  77.2k|        }
 6545|  77.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  38.6k|{
 6597|  38.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  38.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 38.6k, False: 0]
  |  Branch (6599:33): [True: 19.2k, False: 19.3k]
  ------------------
 6600|  19.2k|        int width = parse_simple_int(begin, end);
 6601|  19.2k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  19.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.2k, False: 0]
  |  |  ------------------
  ------------------
 6602|  19.2k|            handler.on_width(width);
 6603|  19.2k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  19.2k|    }
 6609|  38.6k|    return begin;
 6610|  38.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  9.62k|    {
 7127|  9.62k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  9.62k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 9.62k, False: 0]
  ------------------
 7129|  9.62k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 9.62k, False: 0]
  ------------------
 7130|  9.62k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 9.62k, False: 0]
  ------------------
 7131|  9.62k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 9.62k, False: 0]
  ------------------
 7132|  9.62k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  9.62k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  9.62k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.57M|{
 8417|  1.57M|#define SCN_VISIT(Type)                                         \
 8418|  1.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.57M|    }                                                           \
 8421|  1.57M|    else {                                                      \
 8422|  1.57M|        return vis(monostate_val);                              \
 8423|  1.57M|    }
 8424|       |
 8425|  1.57M|    monostate monostate_val{};
 8426|       |
 8427|  1.57M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.57M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.57M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.57M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.57M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.57M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.57M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.57M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.57M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.57M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.57M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.57M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.57M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.57M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.57M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.57M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.57M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.57M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.57M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.57M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.57M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.57M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  1.57M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 1.57M, False: 0]
  ------------------
 8471|  1.57M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.57M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  1.57M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.57M|    }                                                           \
  |  | 8421|  1.57M|    else {                                                      \
  |  | 8422|  1.57M|        return vis(monostate_val);                              \
  |  | 8423|  1.57M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.57M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.57M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.57M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.57M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.57M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.57M|            SCN_CLANG_POP
 8495|  1.57M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  62.5k|    {
 4076|  62.5k|        sync(0);
 4077|  62.5k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   172k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  2.33M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  1.57M|{
   89|  1.57M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.57M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.57M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.57M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  3.14M|{
   44|  3.14M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  3.14M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  1.57M|{
  127|  1.57M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.57M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.57M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.57M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  3.14M|{
   60|  3.14M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  3.14M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|   776k|{
  163|   776k|    T value;
  164|   776k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   776k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   776k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   776k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   776k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.81k, False: 772k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.81k|    }                                                  \
  |  |  |  | 3671|   776k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   772k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   772k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   772k|    static_cast<    \
  |  |  929|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   772k|    static_cast<    \
  |  |  929|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   776k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  1.55M|{
   72|  1.55M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  1.55M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  1.57M|{
   89|  1.57M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.57M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.57M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.57M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  1.57M|{
  127|  1.57M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.57M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.57M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.57M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|   776k|{
  163|   776k|    T value;
  164|   776k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   776k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   776k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   776k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   776k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.81k, False: 772k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.81k|    }                                                  \
  |  |  |  | 3671|   776k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   772k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   772k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   772k|    static_cast<    \
  |  |  929|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   772k|    static_cast<    \
  |  |  929|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   776k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  1.57M|{
   89|  1.57M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.57M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.57M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.57M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  1.57M|{
   44|  1.57M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.57M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  1.57M|{
  127|  1.57M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.57M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.57M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.57M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  1.57M|{
   60|  1.57M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.57M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|   776k|{
  163|   776k|    T value;
  164|   776k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   776k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   776k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   776k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   776k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.81k, False: 772k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.81k|    }                                                  \
  |  |  |  | 3671|   776k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   772k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   772k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   772k|    static_cast<    \
  |  |  929|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   772k|    static_cast<    \
  |  |  929|   772k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   776k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   776k|{
   72|   776k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   776k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  5.09M|{
  653|  5.09M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  5.09M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   241k|{
 2184|   241k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   241k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   135k|{
 2192|   135k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   135k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 121k, False: 14.4k]
  |  |  ------------------
  ------------------
 2194|   121k|        source.sync(*n);
 2195|   121k|    }
 2196|  14.4k|    else {
 2197|  14.4k|        source.sync_all();
 2198|  14.4k|    }
 2199|   135k|    return n;
 2200|   135k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  3.14M|{
 2208|  3.14M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  3.14M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  1.57M|{
 2216|  1.57M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  1.57M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.57M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.54M, False: 28.8k]
  |  |  ------------------
  ------------------
 2218|  1.54M|        source.sync(*n);
 2219|  1.54M|    }
 2220|  28.8k|    else {
 2221|  28.8k|        source.sync_all();
 2222|  28.8k|    }
 2223|  1.57M|    return n;
 2224|  1.57M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   851k|{
  194|   851k|    return find_classic_impl(
  195|   851k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   851k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   851k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   859k|{
  202|   859k|    return find_classic_impl(
  203|   859k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   859k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   859k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   241k|{
 2141|   241k|    return vscan_internal(source, format, args);
 2142|   241k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   135k|{
 2147|   135k|    auto n = vscan_internal(source, format, args);
 2148|   135k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 121k, False: 14.4k]
  |  |  ------------------
  ------------------
 2149|   121k|        source.sync(*n);
 2150|   121k|    }
 2151|  14.4k|    else {
 2152|  14.4k|        source.sync_all();
 2153|  14.4k|    }
 2154|   135k|    return n;
 2155|   135k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  3.14M|{
 2161|  3.14M|    return vscan_internal(source, format, args);
 2162|  3.14M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  1.57M|{
 2167|  1.57M|    auto n = vscan_internal(source, format, args);
 2168|  1.57M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.57M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.54M, False: 28.8k]
  |  |  ------------------
  ------------------
 2169|  1.54M|        source.sync(*n);
 2170|  1.54M|    }
 2171|  28.8k|    else {
 2172|  28.8k|        source.sync_all();
 2173|  28.8k|    }
 2174|  1.57M|    return n;
 2175|  1.57M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   110k|{
 2251|   110k|    return vscan_value_internal(source, arg);
 2252|   110k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  62.2k|{
 2256|  62.2k|    auto n = vscan_value_internal(source, arg);
 2257|  62.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  62.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.8k, False: 2.40k]
  |  |  ------------------
  ------------------
 2258|  59.8k|        source.sync(*n);
 2259|  59.8k|    }
 2260|  2.40k|    else {
 2261|  2.40k|        source.sync_all();
 2262|  2.40k|    }
 2263|  62.2k|    return n;
 2264|  62.2k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  1.55M|{
 2270|  1.55M|    return vscan_value_internal(source, arg);
 2271|  1.55M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   776k|{
 2276|   776k|    auto n = vscan_value_internal(source, arg);
 2277|   776k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   776k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 772k, False: 4.81k]
  |  |  ------------------
  ------------------
 2278|   772k|        source.sync(*n);
 2279|   772k|    }
 2280|  4.81k|    else {
 2281|  4.81k|        source.sync_all();
 2282|  4.81k|    }
 2283|   776k|    return n;
 2284|   776k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   851k|{
  118|   851k|    auto it = source.begin();
  119|       |
  120|  1.60M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.28M, False: 319k]
  ------------------
  121|  1.28M|        auto sv =
  122|  1.28M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.28M|                .substr(0, 8);
  124|       |
  125|  1.28M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 855k, False: 429k]
  ------------------
  126|   855k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   855k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   855k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 370k, False: 485k]
  ------------------
  129|   370k|                break;
  130|   370k|            }
  131|   485k|            continue;
  132|   855k|        }
  133|       |
  134|  1.30M|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 1.03M, False: 267k]
  ------------------
  135|  1.03M|            auto tmp =
  136|  1.03M|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  1.03M|            auto res = get_next_code_point(tmp);
  138|  1.03M|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 162k, False: 872k]
  ------------------
  139|   162k|                return it;
  140|   162k|            }
  141|   872k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   872k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   872k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   872k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   872k|        }
  145|   429k|    }
  146|       |
  147|   689k|    return detail::make_string_view_iterator(source, it);
  148|   851k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  2.14M|{
  105|  2.14M|    static_assert(sizeof(*source.data()) == 1);
  106|  2.14M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  2.14M|    uint64_t word{};
  108|  2.14M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  2.14M|    return has_byte_greater(word, 127) != 0;
  111|  2.14M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  3.69M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  1.03M|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   859k|{
  118|   859k|    auto it = source.begin();
  119|       |
  120|  1.15M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 862k, False: 296k]
  ------------------
  121|   862k|        auto sv =
  122|   862k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   862k|                .substr(0, 8);
  124|       |
  125|   862k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 670k, False: 192k]
  ------------------
  126|   670k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   670k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   670k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 376k, False: 294k]
  ------------------
  129|   376k|                break;
  130|   376k|            }
  131|   294k|            continue;
  132|   670k|        }
  133|       |
  134|   385k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 380k, False: 5.07k]
  ------------------
  135|   380k|            auto tmp =
  136|   380k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   380k|            auto res = get_next_code_point(tmp);
  138|   380k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 187k, False: 193k]
  ------------------
  139|   187k|                return it;
  140|   187k|            }
  141|   193k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   193k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   193k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   193k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   193k|        }
  145|   192k|    }
  146|       |
  147|   672k|    return detail::make_string_view_iterator(source, it);
  148|   859k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.12M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   380k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   271k|{
 2073|   271k|    const auto argcount = args.size();
 2074|   271k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 124k, False: 147k]
  |  Branch (2074:60): [True: 124k, False: 0]
  ------------------
 2075|   124k|        auto arg = args.get(0);
 2076|   124k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   124k|    static_cast<    \
  |  |  929|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   124k|    }
 2078|       |
 2079|   147k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 147k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   147k|    SCN_UNLIKELY_ATTR
 2087|   147k|    {
 2088|   147k|        auto handler = format_handler<false, CharT>{
 2089|   147k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   147k|        return vscan_parse_format_string(format, handler);
 2091|   147k|    }
 2092|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   754k|{
 1625|   754k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 409k, False: 345k]
  ------------------
 1626|   409k|        return false;
 1627|   409k|    }
 1628|   345k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 345k, False: 0]
  |  Branch (1628:39): [True: 345k, False: 0]
  ------------------
 1629|   754k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   186k|{
 1658|   186k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   186k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   186k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   186k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   186k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   186k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.21k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.21k|    }                                                  \
  |  |  |  | 3671|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   179k|    return it.position();
 1675|   186k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   262k|    {
 1903|   262k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  5.18M|    {
 1722|  5.18M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  5.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   262k|    {
 1853|   262k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   262k|{
 2038|   262k|    const auto beg = handler.get_ctx().begin();
 2039|   262k|    detail::parse_format_string<false>(format, handler);
 2040|   262k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.1k, False: 214k]
  |  |  ------------------
  ------------------
 2041|  48.1k|        return unexpected(handler.error);
 2042|  48.1k|    }
 2043|   214k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   262k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.70M|    {
 2022|  1.70M|        return ctx.get();
 2023|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.70M|    {
 1857|  1.70M|        return contiguous_ctx;
 1858|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   477k|    {
 1907|   477k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 477k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   477k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   262k|{
 1681|   262k|    auto arg = ctx.arg(id);
 1682|   262k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   262k|    return arg;
 1686|   262k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  5.18M|    {
 1797|  5.18M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  5.18M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  5.18M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  5.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.18M, False: 0]
  |  |  ------------------
  ------------------
 1807|  5.18M|            visited_args_lower64 |= (1ull << id);
 1808|  5.18M|            return;
 1809|  5.18M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  5.18M|    {
 1782|  5.18M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.18M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  5.18M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  5.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.18M, False: 0]
  |  |  ------------------
  ------------------
 1788|  5.18M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  5.18M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  5.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   129k|    {
 1766|   129k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 129k, False: 0]
  |  |  ------------------
  ------------------
 1767|   129k|            error = err;
 1768|   129k|        }
 1769|   129k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   262k|    {
 1944|   262k|        return parse_ctx.next_arg_id();
 1945|   262k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   262k|    {
 1985|   262k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   262k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   262k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 262k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   262k|        auto specs = detail::format_specs{};
 1998|   262k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   262k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   262k|            arg.type()};
 2001|       |
 2002|   262k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   262k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 262k]
  |  Branch (2003:29): [True: 0, False: 262k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   262k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 243k]
  |  |  ------------------
  ------------------
 2009|  19.2k|            return parse_ctx.begin();
 2010|  19.2k|        }
 2011|   243k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   243k|        on_visit_scan_arg(
 2014|   243k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   243k|                                           get_ctx().locale()},
 2016|   243k|            arg);
 2017|   243k|        return parse_ctx.begin();
 2018|   262k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   262k|    {
 1701|   262k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   243k|    {
 1956|   243k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 243k]
  |  Branch (1956:23): [True: 0, False: 243k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   243k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   243k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 214k]
  |  |  ------------------
  ------------------
 1963|  28.8k|            on_error(r.error());
 1964|  28.8k|        }
 1965|   214k|        else {
 1966|   214k|            get_ctx().advance_to(*r);
 1967|   214k|        }
 1968|   243k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  86.5k|    {
 1761|  86.5k|        SCN_UNLIKELY_ATTR
 1762|  86.5k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  86.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  5.18M|    {
 1729|  5.18M|        {
 1730|  5.18M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 5.18M]
  ------------------
 1731|  5.18M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 5.18M]
  ------------------
 1732|  5.18M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  5.18M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  5.18M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 5.18M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  5.18M|        }
 1739|       |
 1740|  5.18M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 5.18M, False: 0]
  ------------------
 1741|  5.18M|            return;
 1742|  5.18M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  5.18M|    {
 1777|  5.18M|        return error;
 1778|  5.18M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  15.4M|    {
 1773|  15.4M|        return static_cast<bool>(error);
 1774|  15.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   147k|    {
 1903|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   147k|    {
 1830|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   147k|{
 2038|   147k|    const auto beg = handler.get_ctx().begin();
 2039|   147k|    detail::parse_format_string<false>(format, handler);
 2040|   147k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.0k, False: 123k]
  |  |  ------------------
  ------------------
 2041|  24.0k|        return unexpected(handler.error);
 2042|  24.0k|    }
 2043|   123k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   962k|    {
 2022|   962k|        return ctx.get();
 2023|   962k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   962k|    {
 1834|   962k|        return ctx;
 1835|   962k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   270k|    {
 1907|   270k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 270k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   270k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   147k|{
 1681|   147k|    auto arg = ctx.arg(id);
 1682|   147k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   147k|    return arg;
 1686|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   147k|    {
 1944|   147k|        return parse_ctx.next_arg_id();
 1945|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   147k|    {
 1985|   147k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   147k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   147k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 147k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   147k|        auto specs = detail::format_specs{};
 1998|   147k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   147k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   147k|            arg.type()};
 2001|       |
 2002|   147k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   147k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 147k]
  |  Branch (2003:29): [True: 0, False: 147k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   147k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 137k]
  |  |  ------------------
  ------------------
 2009|  9.62k|            return parse_ctx.begin();
 2010|  9.62k|        }
 2011|   137k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   137k|        on_visit_scan_arg(
 2014|   137k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   137k|                                           get_ctx().locale()},
 2016|   137k|            arg);
 2017|   137k|        return parse_ctx.begin();
 2018|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   147k|    {
 1701|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   137k|    {
 1956|   137k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 137k]
  |  Branch (1956:23): [True: 0, False: 137k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   137k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   137k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 123k]
  |  |  ------------------
  ------------------
 1963|  14.4k|            on_error(r.error());
 1964|  14.4k|        }
 1965|   123k|        else {
 1966|   123k|            get_ctx().advance_to(*r);
 1967|   123k|        }
 1968|   137k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   483k|{
 2053|   483k|    const auto argcount = args.size();
 2054|   483k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 220k, False: 262k]
  |  Branch (2054:60): [True: 220k, False: 0]
  ------------------
 2055|   220k|        auto arg = args.get(0);
 2056|   220k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   220k|    static_cast<    \
  |  |  929|   220k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   220k|    }
 2058|       |
 2059|   262k|    auto handler = format_handler<true, CharT>{
 2060|   262k|        ranges::subrange<const CharT*>{source.data(),
 2061|   262k|                                       source.data() + source.size()},
 2062|   262k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   262k|    return vscan_parse_format_string(format, handler);
 2064|   483k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   330k|{
 1638|   330k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   330k|    auto reader =
 1644|   330k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   330k|            ranges::subrange<const CharT*>{source.data(),
 1646|   330k|                                           source.data() + source.size()},
 1647|   330k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   330k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.4k|    }                                                  \
  |  |  |  | 3671|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   316k|    return ranges::distance(source.data(), it);
 1650|   330k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  6.29M|{
 2053|  6.29M|    const auto argcount = args.size();
 2054|  6.29M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 3.10M, False: 3.18M]
  |  Branch (2054:60): [True: 3.10M, False: 0]
  ------------------
 2055|  3.10M|        auto arg = args.get(0);
 2056|  3.10M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  3.10M|    static_cast<    \
  |  |  929|  3.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  3.10M|    }
 2058|       |
 2059|  3.18M|    auto handler = format_handler<true, CharT>{
 2060|  3.18M|        ranges::subrange<const CharT*>{source.data(),
 2061|  3.18M|                                       source.data() + source.size()},
 2062|  3.18M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  3.18M|    static_cast<    \
  |  |  929|  3.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  3.18M|    static_cast<    \
  |  |  929|  3.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  3.18M|    return vscan_parse_format_string(format, handler);
 2064|  6.29M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  9.43M|{
 1625|  9.43M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 4.77M, False: 4.66M]
  ------------------
 1626|  4.77M|        return false;
 1627|  4.77M|    }
 1628|  4.66M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 4.66M, False: 0]
  |  Branch (1628:39): [True: 4.66M, False: 0]
  ------------------
 1629|  9.43M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  4.66M|{
 1638|  4.66M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  4.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.66M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  4.66M|    auto reader =
 1644|  4.66M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  4.66M|            ranges::subrange<const CharT*>{source.data(),
 1646|  4.66M|                                           source.data() + source.size()},
 1647|  4.66M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  4.66M|    static_cast<    \
  |  |  929|  4.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  4.66M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  4.66M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.66M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.66M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.8k, False: 4.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.8k|    }                                                  \
  |  |  |  | 3671|  4.66M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  4.63M|    return ranges::distance(source.data(), it);
 1650|  4.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  3.18M|    {
 1903|  3.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  3.18M|    {
 1853|  3.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  3.18M|{
 2038|  3.18M|    const auto beg = handler.get_ctx().begin();
 2039|  3.18M|    detail::parse_format_string<false>(format, handler);
 2040|  3.18M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.2k, False: 3.08M]
  |  |  ------------------
  ------------------
 2041|  96.2k|        return unexpected(handler.error);
 2042|  96.2k|    }
 2043|  3.08M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  3.18M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  22.0M|    {
 2022|  22.0M|        return ctx.get();
 2023|  22.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  22.0M|    {
 1857|  22.0M|        return contiguous_ctx;
 1858|  22.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  6.27M|    {
 1907|  6.27M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 6.27M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  6.27M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  3.18M|{
 1681|  3.18M|    auto arg = ctx.arg(id);
 1682|  3.18M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.18M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  3.18M|    return arg;
 1686|  3.18M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  3.18M|    {
 1944|  3.18M|        return parse_ctx.next_arg_id();
 1945|  3.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  3.18M|    {
 1985|  3.18M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  3.18M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  3.18M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 3.18M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  3.18M|        auto specs = detail::format_specs{};
 1998|  3.18M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  3.18M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  3.18M|            arg.type()};
 2001|       |
 2002|  3.18M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  3.18M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 3.18M]
  |  Branch (2003:29): [True: 0, False: 3.18M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  3.18M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 3.14M]
  |  |  ------------------
  ------------------
 2009|  38.4k|            return parse_ctx.begin();
 2010|  38.4k|        }
 2011|  3.14M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  3.14M|        on_visit_scan_arg(
 2014|  3.14M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  3.14M|                                           get_ctx().locale()},
 2016|  3.14M|            arg);
 2017|  3.14M|        return parse_ctx.begin();
 2018|  3.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  3.18M|    {
 1701|  3.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  3.14M|    {
 1956|  3.14M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 3.14M]
  |  Branch (1956:23): [True: 0, False: 3.14M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  3.14M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  3.14M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 3.08M]
  |  |  ------------------
  ------------------
 1963|  57.7k|            on_error(r.error());
 1964|  57.7k|        }
 1965|  3.08M|        else {
 1966|  3.08M|            get_ctx().advance_to(*r);
 1967|  3.08M|        }
 1968|  3.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  3.14M|{
 2073|  3.14M|    const auto argcount = args.size();
 2074|  3.14M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 1.55M, False: 1.59M]
  |  Branch (2074:60): [True: 1.55M, False: 0]
  ------------------
 2075|  1.55M|        auto arg = args.get(0);
 2076|  1.55M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  1.55M|    static_cast<    \
  |  |  929|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  1.55M|    }
 2078|       |
 2079|  1.59M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.59M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.59M|    SCN_UNLIKELY_ATTR
 2087|  1.59M|    {
 2088|  1.59M|        auto handler = format_handler<false, CharT>{
 2089|  1.59M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.59M|    static_cast<    \
  |  |  929|  1.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.59M|    static_cast<    \
  |  |  929|  1.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.59M|        return vscan_parse_format_string(format, handler);
 2091|  1.59M|    }
 2092|  1.59M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  2.33M|{
 1658|  2.33M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  2.33M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  2.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  2.33M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  2.33M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  2.33M|    static_cast<    \
  |  |  929|  2.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  2.33M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  2.33M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.33M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.33M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 2.31M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.4k|    }                                                  \
  |  |  |  | 3671|  2.33M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  2.31M|    return it.position();
 1675|  2.33M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  1.59M|    {
 1903|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  1.59M|    {
 1830|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.59M|{
 2038|  1.59M|    const auto beg = handler.get_ctx().begin();
 2039|  1.59M|    detail::parse_format_string<false>(format, handler);
 2040|  1.59M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.1k, False: 1.54M]
  |  |  ------------------
  ------------------
 2041|  48.1k|        return unexpected(handler.error);
 2042|  48.1k|    }
 2043|  1.54M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.59M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  11.0M|    {
 2022|  11.0M|        return ctx.get();
 2023|  11.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  11.0M|    {
 1834|  11.0M|        return ctx;
 1835|  11.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  3.13M|    {
 1907|  3.13M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.13M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.59M|{
 1681|  1.59M|    auto arg = ctx.arg(id);
 1682|  1.59M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.59M|    return arg;
 1686|  1.59M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|  1.59M|    {
 1944|  1.59M|        return parse_ctx.next_arg_id();
 1945|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|  1.59M|    {
 1985|  1.59M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.59M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.59M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.59M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.59M|        auto specs = detail::format_specs{};
 1998|  1.59M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.59M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.59M|            arg.type()};
 2001|       |
 2002|  1.59M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.59M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.59M]
  |  Branch (2003:29): [True: 0, False: 1.59M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.59M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 1.57M]
  |  |  ------------------
  ------------------
 2009|  19.2k|            return parse_ctx.begin();
 2010|  19.2k|        }
 2011|  1.57M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.57M|        on_visit_scan_arg(
 2014|  1.57M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.57M|                                           get_ctx().locale()},
 2016|  1.57M|            arg);
 2017|  1.57M|        return parse_ctx.begin();
 2018|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  1.59M|    {
 1701|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.57M|    {
 1956|  1.57M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.57M]
  |  Branch (1956:23): [True: 0, False: 1.57M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.57M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.57M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 1.54M]
  |  |  ------------------
  ------------------
 1963|  28.8k|            on_error(r.error());
 1964|  28.8k|        }
 1965|  1.54M|        else {
 1966|  1.54M|            get_ctx().advance_to(*r);
 1967|  1.54M|        }
 1968|  1.57M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   110k|{
 2099|   110k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   110k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  62.2k|{
 2099|  62.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  62.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  1.55M|{
 2099|  1.55M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  1.55M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   776k|{
 2099|   776k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   776k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.40k|{
 1363|  2.40k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.40k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.40k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.40k|            std::u32string tmp;
 1368|  2.40k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.40k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.40k|                std::u32string_view{tmp}, dest);
 1371|  2.40k|        }
 1372|  2.40k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.40k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.40k|        }
 1375|  2.40k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.40k|{
 1256|  2.40k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.40k|    auto it = src.begin();
 1259|   901k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 899k, False: 2.40k]
  ------------------
 1260|   899k|        auto res = get_next_code_point(
 1261|   899k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   899k|                                                                 src.end()));
 1263|   899k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   899k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 886k]
  |  |  ------------------
  ------------------
 1264|  12.3k|            dest.push_back(DestCharT{0xfffd});
 1265|  12.3k|        }
 1266|   886k|        else {
 1267|   886k|            dest.push_back(res.value);
 1268|   886k|        }
 1269|   899k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   899k|    }
 1271|  2.40k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.31M|{
 1169|  2.31M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.31M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.31M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.8k, False: 2.26M]
  |  |  ------------------
  ------------------
 1173|  47.8k|        return {get_start_for_next_code_point(input),
 1174|  47.8k|                detail::invalid_code_point};
 1175|  47.8k|    }
 1176|  2.26M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.7k, False: 2.23M]
  |  |  ------------------
  ------------------
 1177|  32.7k|        return {input.end(), detail::invalid_code_point};
 1178|  32.7k|    }
 1179|       |
 1180|  2.23M|    return {input.begin() + len,
 1181|  2.23M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.26M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  47.8k|{
 1155|  47.8k|    auto it = input.begin();
 1156|   218k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 213k, False: 4.28k]
  ------------------
 1157|   213k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 43.5k, False: 170k]
  ------------------
 1158|  43.5k|            break;
 1159|  43.5k|        }
 1160|   213k|    }
 1161|  47.8k|    return it;
 1162|  47.8k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  43.2k|    {
 2931|  43.2k|        SCN_UNLIKELY_ATTR
 2932|  43.2k|        m_msg = msg;
 2933|  43.2k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  5.10M|    {
 2936|  5.10M|        return m_msg == nullptr;
 2937|  5.10M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  5.82M|{
  458|  5.82M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  5.82M|        static_cast<unsigned char>(ch))];
  460|  5.82M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   100k|{
  469|   100k|    return static_cast<unsigned char>(ch) <= 127;
  470|   100k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  29.4k|{
  474|  29.4k|#if WCHAR_MIN < 0
  475|  29.4k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 26.5k, False: 2.84k]
  |  Branch (475:23): [True: 16.2k, False: 10.3k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  29.4k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  2.14M|{
  539|  2.14M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.14M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  20.0M|{
  784|  20.0M|    return e != eof_error::good;
  785|  20.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  29.3k|{
  798|  29.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  29.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  29.3k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  29.3k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   243M|{
 1200|       |    // Pattern_White_Space property
 1201|   243M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 79.7M, False: 164M]
  |  Branch (1201:27): [True: 11.4M, False: 68.3M]
  ------------------
 1202|   243M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 11.6M, False: 220M]
  ------------------
 1203|   243M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 1.75M, False: 219M]
  ------------------
 1204|   243M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 441k, False: 218M]
  ------------------
 1205|   243M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.13M, False: 217M]
  ------------------
 1206|   243M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.15M, False: 216M]
  ------------------
 1207|   243M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 216M]
  ------------------
 1208|   243M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  4.97M|{
 6008|  4.97M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 4.97M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  4.97M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 4.97M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  4.97M|    return {};
 6023|  4.97M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.09M|    {
  304|  1.09M|        ranges::advance(x, n);
  305|  1.09M|        return x;
  306|  1.09M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.09M|    {
  268|  1.09M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.09M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.09M|    {
  151|  1.09M|        i += n;
  152|  1.09M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.70M|    {
  108|  2.70M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.70M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.70M|    {
   87|  2.70M|        return s - i;
   88|  2.70M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  7.72M|    {
  108|  7.72M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  7.72M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  7.72M|    {
   87|  7.72M|        return s - i;
   88|  7.72M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   319k|{
  981|   319k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   319k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   319k|        return true;
  984|   319k|    }
  985|   319k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   319k|                           ranges::const_iterator_t<Range>,
  987|   319k|                           typename detail::basic_scan_buffer<
  988|   319k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   319k|        auto beg = r.begin();
  990|   319k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 319k, False: 0]
  ------------------
  991|   319k|            return false;
  992|   319k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   319k|    else {
 1006|   319k|        return false;
 1007|   319k|    }
 1008|   319k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  89.0k|    {
  763|  89.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  89.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  20.1k|    {
  754|  20.1k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  44.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.5k|              cvref<T> obj = *get<T>(fn);
  745|  44.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  44.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.5k|              }
  748|  44.5k|              else {
  749|  44.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.5k|              }
  751|  44.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  44.5k|    {
  684|  44.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  44.5k|            return static_cast<T*>(s.m_cp);
  686|  44.5k|        }
  687|  44.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  44.5k|            return static_cast<T*>(s.m_p);
  689|  44.5k|        }
  690|  44.5k|        else {
  691|  44.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  44.5k|        }
  693|  44.5k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  20.1k|        {
  662|  20.1k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   269M|    {
  763|   269M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   269M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   269M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  11.9M|    {
  754|  11.9M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  27.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.1M|              cvref<T> obj = *get<T>(fn);
  745|  27.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.1M|              }
  748|  27.1M|              else {
  749|  27.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.1M|              }
  751|  27.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  27.1M|    {
  684|  27.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.1M|            return static_cast<T*>(s.m_cp);
  686|  27.1M|        }
  687|  27.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.1M|            return static_cast<T*>(s.m_p);
  689|  27.1M|        }
  690|  27.1M|        else {
  691|  27.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.1M|        }
  693|  27.1M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  11.9M|        {
  662|  11.9M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   132k|    {
 6037|   132k|        const bool need_skipped_width =
 6038|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 132k]
  |  Branch (6038:33): [True: 0, False: 132k]
  ------------------
 6039|   132k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   132k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 132k]
  ------------------
 6043|   132k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 132k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   132k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 132k, False: 0]
  |  Branch (6047:56): [True: 125k, False: 6.70k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   125k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 125k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   249k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.02k|    }                                                  \
  |  |  |  | 3671|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   249k|                            make_eof_scan_error));
 6058|       |
 6059|   249k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 123k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   123k|            return result_type{it, 0};
 6067|   249k|        }
 6068|       |
 6069|  6.70k|        return result_type{rng.begin(), 0};
 6070|   132k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  6.70k|{
 1976|  6.70k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.70k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  6.70k|{
 1957|  6.70k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.70k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.70k|    }
 1960|  6.70k|    else {
 1961|  6.70k|        auto first = range.begin();
 1962|  14.9k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 14.8k, False: 80]
  ------------------
 1963|  14.8k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 6.62k, False: 8.22k]
  ------------------
 1964|  6.62k|                return first;
 1965|  6.62k|            }
 1966|  14.8k|        }
 1967|     80|        return first;
 1968|  6.70k|    }
 1969|  6.70k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   123k|    {
  108|   123k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   123k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   123k|    {
   94|   123k|        iter_difference_t<I> counter{0};
   95|  1.47M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.34M, False: 123k]
  ------------------
   96|  1.34M|            ++i;
   97|  1.34M|            ++counter;
   98|  1.34M|        }
   99|   123k|        return counter;
  100|   123k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   498k|{
  950|   498k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.61k, False: 493k]
  |  |  ------------------
  ------------------
  951|  4.61k|        return eof_error::eof;
  952|  4.61k|    }
  953|   493k|    return eof_error::good;
  954|   498k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  3.96M|{
  944|  3.96M|    return is_range_eof(r.begin(), r.end());
  945|  3.96M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  3.96M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.96M|    {
  937|  3.96M|        return begin == end;
  938|  3.96M|    }
  939|  3.96M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   310k|{
 1683|   310k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   310k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   310k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   310k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   310k|    }
 1688|   310k|    else {
 1689|   310k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   310k|    }
 1691|   310k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   310k|    {
 1537|   310k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   310k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   310k|    {
 1621|   310k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   310k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   310k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   310k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   310k|            m_storage.reset();
 1627|   310k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   310k|        }
 1629|   310k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   310k|                                          std::basic_string<CharT>>) {
 1631|   310k|            m_storage.emplace(SCN_FWD(range));
 1632|   310k|            m_view = string_view_type{*m_storage};
 1633|   310k|        }
 1634|   310k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   310k|                                          typename detail::basic_scan_buffer<
 1636|   310k|                                              value_t>::forward_iterator> &&
 1637|   310k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   310k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   310k|            auto end_seg = range.end().contiguous_segment();
 1640|   310k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.05k, False: 302k]
  |  |  ------------------
  ------------------
 1641|   310k|                             detail::to_address(end_seg.end()))) {
 1642|  8.05k|                auto& str = m_storage.emplace();
 1643|  8.05k|                str.reserve(range.end().position() - range.begin().position());
 1644|  8.05k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  8.05k|                m_view = string_view_type{str};
 1646|  8.05k|                return;
 1647|  8.05k|            }
 1648|       |
 1649|   302k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   302k|                                                            end_seg.data());
 1651|   302k|            m_storage.reset();
 1652|   302k|        }
 1653|   310k|        else {
 1654|   310k|            auto& str = m_storage.emplace();
 1655|   310k|            if constexpr (ranges::sized_range<Range>) {
 1656|   310k|                str.reserve(range.size());
 1657|   310k|            }
 1658|   310k|            if constexpr (ranges::common_range<Range>) {
 1659|   310k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   310k|                          std::back_inserter(str));
 1661|   310k|            }
 1662|   310k|            else {
 1663|   310k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   310k|                     ++it) {
 1665|   310k|                    str.push_back(*it);
 1666|   310k|                }
 1667|   310k|            }
 1668|   310k|            m_view = string_view_type{str};
 1669|   310k|        }
 1670|   310k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   607k|    {
 1582|   607k|        return m_view;
 1583|   607k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   310k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   121k|    {
 6079|   121k|        const bool need_skipped_width =
 6080|   121k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 121k]
  |  Branch (6080:33): [True: 0, False: 121k]
  ------------------
 6081|   121k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   121k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 121k]
  ------------------
 6084|   121k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 121k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   121k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 121k, False: 0]
  ------------------
 6093|   121k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.85k, False: 120k]
  ------------------
 6094|   121k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.85k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.85k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.85k]
  ------------------
 6096|  1.85k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   121k|        return result_type{rng.begin(), 0};
 6118|   121k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   879k|{
  950|   879k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   879k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.79k, False: 871k]
  |  |  ------------------
  ------------------
  951|  7.79k|        return eof_error::eof;
  952|  7.79k|    }
  953|   871k|    return eof_error::good;
  954|   879k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   879k|{
  944|   879k|    return is_range_eof(r.begin(), r.end());
  945|   879k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   879k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   879k|    {
  937|   879k|        return begin == end;
  938|   879k|    }
  939|   879k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   547k|{
 1683|   547k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   547k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   547k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   547k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   547k|    }
 1688|   547k|    else {
 1689|   547k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   547k|    }
 1691|   547k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   547k|    {
 1490|   547k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  2.99M|    {
 1503|  2.99M|        return sv;
 1504|  2.99M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  13.4k|{
 1976|  13.4k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  13.4k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  13.4k|{
 1957|  13.4k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  13.4k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  13.4k|    }
 1960|  13.4k|    else {
 1961|  13.4k|        auto first = range.begin();
 1962|  13.4k|        for (; first != range.end(); ++first) {
 1963|  13.4k|            if (pred(*first)) {
 1964|  13.4k|                return first;
 1965|  13.4k|            }
 1966|  13.4k|        }
 1967|  13.4k|        return first;
 1968|  13.4k|    }
 1969|  13.4k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   548k|{
 2951|   548k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 548k, False: 0]
  ------------------
 2952|   548k|        auto it = read_while_classic_space(range);
 2953|   548k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   548k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   548k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.05k, False: 543k]
  |  |  ------------------
  ------------------
 2955|  5.05k|            return unexpected(e);
 2956|  5.05k|        }
 2957|       |
 2958|   543k|        return it;
 2959|   548k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   548k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   548k|{
 2117|   548k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   548k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   548k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   548k|        auto buf = make_contiguous_buffer(range);
 2121|   548k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   548k|        return ranges::next(range.begin(),
 2123|   548k|                            ranges::distance(buf.view().begin(), it));
 2124|   548k|    }
 2125|   548k|    else {
 2126|   548k|        auto it = range.begin();
 2127|       |
 2128|   548k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   548k|            auto seg = get_contiguous_beginning(range);
 2130|   548k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   548k|                seg_it != seg.end()) {
 2132|   548k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   548k|            }
 2134|   548k|            ranges::advance(it, seg.size());
 2135|   548k|        }
 2136|       |
 2137|   548k|        return read_while_code_point(
 2138|   548k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   548k|    }
 2140|   548k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.09M|{
 1683|  1.09M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.09M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.09M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.09M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.09M|    }
 1688|  1.09M|    else {
 1689|  1.09M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.09M|    }
 1691|  1.09M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.09M|    {
 1490|  1.09M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  20.2k|    {
  304|  20.2k|        ranges::advance(x, n);
  305|  20.2k|        return x;
  306|  20.2k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   619k|    {
  268|   619k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   619k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   619k|    {
  181|  1.17M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 550k, False: 619k]
  ------------------
  182|   550k|            ++i;
  183|   550k|        }
  184|   619k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   307k|    {
 1587|   307k|        return m_storage.has_value();
 1588|   307k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  5.11k|    {
 1592|  5.11k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  5.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  5.11k|        return *m_storage;
 1594|  5.11k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   137k|    {
 6193|   137k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   137k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   137k|            auto rd = make_reader<T, char_type>();
 6198|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   137k|                return unexpected(e);
 6200|   137k|            }
 6201|       |
 6202|   137k|            return impl(rd, range, value);
 6203|   137k|        }
 6204|   137k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   137k|            auto rd = make_reader<T, char_type>();
 6206|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 132k]
  |  |  ------------------
  ------------------
 6207|  4.81k|                return unexpected(e);
 6208|  4.81k|            }
 6209|       |
 6210|   132k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 132k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   132k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   132k|                return impl(rd, range, value);
 6213|   132k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   137k|        else {
 6221|   137k|            SCN_EXPECT(false);
 6222|   137k|            SCN_UNREACHABLE;
 6223|   137k|        }
 6224|   137k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   611k|{
 5809|   611k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   611k|        return reader_impl_for_bool<CharT>{};
 5811|   611k|    }
 5812|   611k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   611k|        return reader_impl_for_char<CharT>{};
 5814|   611k|    }
 5815|   611k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   611k|        return reader_impl_for_wchar<CharT>{};
 5817|   611k|    }
 5818|   611k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   611k|        return reader_impl_for_code_point<CharT>{};
 5820|   611k|    }
 5821|   611k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   611k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   611k|        return reader_impl_for_string<CharT>{};
 5824|   611k|    }
 5825|   611k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   611k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   611k|        return reader_impl_for_string<CharT>{};
 5828|   611k|    }
 5829|   611k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   611k|                       std::is_same_v<T, wregex_matches>) {
 5831|   611k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   611k|    }
 5833|   611k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   611k|        return reader_impl_for_voidptr<CharT>{};
 5835|   611k|    }
 5836|   611k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   611k|        return reader_impl_for_float<CharT>{};
 5838|   611k|    }
 5839|   611k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   611k|                       !std::is_same_v<T, wchar_t> &&
 5841|   611k|                       !std::is_same_v<T, char32_t> &&
 5842|   611k|                       !std::is_same_v<T, bool>) {
 5843|   611k|        return reader_impl_for_int<CharT>{};
 5844|   611k|    }
 5845|   611k|    else {
 5846|   611k|        return reader_impl_for_monostate<CharT>{};
 5847|   611k|    }
 5848|   611k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   898k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   381k|    {
 3040|   381k|        reader_error_handler eh{};
 3041|   381k|        get_derived().check_specs_impl(specs, eh);
 3042|   381k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 366k]
  |  |  ------------------
  ------------------
 3043|  14.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  14.4k|        }
 3045|   366k|        return {};
 3046|   381k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   381k|    {
 3051|   381k|        return static_cast<Derived&>(*this);
 3052|   381k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   381k|    {
 5210|   381k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   381k|        SCN_GCC_PUSH
 5213|   381k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   381k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   381k|        SCN_CLANG_PUSH
 5217|   381k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   381k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   381k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 381k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 381k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   346k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 346k, False: 34.5k]
  ------------------
 5226|   346k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 346k]
  ------------------
 5227|   346k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 346k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   346k|                else {
 5231|   346k|                    m_type = reader_type::word;
 5232|   346k|                }
 5233|   346k|                break;
 5234|      0|            }
 5235|       |
 5236|  14.4k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 14.4k, False: 366k]
  ------------------
 5237|  14.4k|                m_type = reader_type::character;
 5238|  14.4k|                break;
 5239|       |
 5240|  20.1k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 20.1k, False: 360k]
  ------------------
 5241|  20.1k|                m_type = reader_type::character_set;
 5242|  20.1k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 381k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 381k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   381k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   381k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|   132k|    {
 6124|   132k|        const bool need_skipped_width =
 6125|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 132k]
  |  Branch (6125:33): [True: 0, False: 132k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   132k|        auto it = rng.begin();
 6129|   132k|        std::ptrdiff_t prefix_width = 0;
 6130|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 132k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   132k|        else {
 6138|   132k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.02k|    }                                                  \
  |  |  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   130k|            std::tie(it, prefix_width) = prefix_result;
 6140|   130k|        }
 6141|   130k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   130k|        std::ptrdiff_t value_width = 0;
 6145|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 130k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   130k|        else {
 6161|   130k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.60k, False: 123k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  7.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  7.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  7.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  7.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  7.60k|    }                                                  \
  |  | 3671|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   123k|                                             specs, value, loc));
 6163|       |
 6164|   123k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 123k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   123k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   123k|        std::ptrdiff_t postfix_width = 0;
 6173|   123k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 121k, False: 1.10k]
  ------------------
 6174|   121k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   121k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   121k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   121k|                                 value_width));
 6178|   121k|            std::tie(it, postfix_width) = postfix_result;
 6179|   121k|        }
 6180|       |
 6181|   123k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   123k|                                                 value_width, postfix_width);
 6183|   123k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 123k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   123k|        return it;
 6188|   123k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  1.21M|    {
 5259|  1.21M|        return m_type == reader_type::word;
 5260|  1.21M|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   857k|{
 1132|   857k|    auto it = src.begin();
 1133|  6.55M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 5.72M, False: 833k]
  ------------------
 1134|  5.72M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  5.72M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 12.7k, False: 5.71M]
  ------------------
 1136|  12.7k|            return false;
 1137|  12.7k|        }
 1138|  5.71M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 1.74k, False: 5.71M]
  ------------------
 1139|  1.74k|            return false;
 1140|  1.74k|        }
 1141|  5.71M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  5.71M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  5.71M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 9.19k, False: 5.70M]
  ------------------
 1144|  9.19k|            return false;
 1145|  9.19k|        }
 1146|  5.70M|        it += len;
 1147|  5.70M|    }
 1148|   833k|    return true;
 1149|   857k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   302k|{
 2993|   302k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   302k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 5.11k, False: 297k]
  ------------------
 2995|  5.11k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  5.11k|    static_cast<    \
  |  |  929|  5.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  5.11k|        }
 2997|   297k|        else {
 2998|   297k|            dest.assign(source.view());
 2999|   297k|        }
 3000|   302k|    }
 3001|   302k|    else {
 3002|   302k|        return transcode_impl(source.view(), dest);
 3003|   302k|    }
 3004|       |
 3005|   302k|    return {};
 3006|   302k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  20.1k|        {
 5103|  20.1k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 20.1k, False: 0]
  ------------------
 5104|  20.1k|                return {};
 5105|  20.1k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  39.9k|        {
 5076|  39.9k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  39.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  39.9k|            const auto val =
 5078|  39.9k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  39.9k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  39.9k|                    (val % 8)) &
 5081|  39.9k|                   1u;
 5082|  39.9k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  44.5k|        {
 5129|  44.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.53k, False: 39.9k]
  ------------------
 5130|  4.53k|                return false;
 5131|  4.53k|            }
 5132|       |
 5133|  39.9k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  44.5k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  20.1k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|   130k|    {
 5277|   130k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   130k|        return read_impl(range, specs, value);
 5279|   130k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|   130k|    {
 5295|   130k|        SCN_CLANG_PUSH
 5296|   130k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   130k|        switch (m_type) {
 5299|   123k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 123k, False: 6.70k]
  ------------------
 5300|   123k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 130k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 130k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  6.70k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 6.70k, False: 123k]
  ------------------
 5310|  6.70k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  6.70k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 130k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 130k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 130k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   130k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   130k|        }
 5331|       |
 5332|   130k|        SCN_CLANG_POP
 5333|   130k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   308k|    {
 4820|   308k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   308k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   308k|{
 4752|   308k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   308k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   308k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 7.41k, False: 300k]
  ------------------
 4756|  7.41k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  7.41k|                                     "Invalid encoding in scanned string");
 4758|  7.41k|    }
 4759|   300k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   300k|    static_cast<    \
  |  |  929|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   300k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   300k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   300k|    static_cast<    \
  |  |  929|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   300k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   308k|{
 2088|   308k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   308k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   308k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   308k|        auto buf = make_contiguous_buffer(range);
 2092|   308k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   308k|        return ranges::next(range.begin(),
 2094|   308k|                            ranges::distance(buf.view().begin(), it));
 2095|   308k|    }
 2096|   308k|    else {
 2097|   308k|        auto it = range.begin();
 2098|       |
 2099|   308k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   308k|            auto seg = get_contiguous_beginning(range);
 2101|   308k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   308k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 308k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   308k|            ranges::advance(it, seg.size());
 2106|   308k|        }
 2107|       |
 2108|   308k|        return read_until_code_point(
 2109|   308k|            ranges::subrange{it, range.end()},
 2110|   308k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   308k|    }
 2112|   308k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   619k|{
 1039|   619k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   619k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   619k|        return r;
 1042|   619k|    }
 1043|   619k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   619k|                           ranges::const_iterator_t<Range>,
 1045|   619k|                           typename detail::basic_scan_buffer<
 1046|   619k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   619k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   619k|            auto seg = r.begin().contiguous_segment();
 1049|   619k|            auto dist =
 1050|   619k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   619k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   619k|        }
 1053|   619k|        else {
 1054|   619k|            return r.begin().contiguous_segment();
 1055|   619k|        }
 1056|   619k|    }
 1057|   619k|    else {
 1058|   619k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   619k|    }
 1060|   619k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   599k|{
 2061|   599k|    auto it = range.begin();
 2062|  3.48M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.47M, False: 8.58k]
  ------------------
 2063|  3.47M|        const auto val =
 2064|  3.47M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.47M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.43M, False: 32.0k]
  |  |  ------------------
  ------------------
 2066|  3.43M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.43M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.43M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 590k, False: 2.84M]
  ------------------
 2069|   590k|                return it;
 2070|   590k|            }
 2071|  3.43M|        }
 2072|  2.88M|        it = val.iterator;
 2073|  2.88M|    }
 2074|       |
 2075|  8.58k|    return it;
 2076|   599k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.47M|{
 1899|  3.47M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.47M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.47M|    auto it = range.begin();
 1903|  3.47M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.47M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.0k, False: 3.43M]
  |  |  ------------------
  ------------------
 1906|  32.0k|        ++it;
 1907|  32.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  32.0k|        return {it, {}};
 1909|  32.0k|    }
 1910|       |
 1911|  3.43M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.18M, False: 253k]
  ------------------
 1912|  3.18M|        ++it;
 1913|  3.18M|        return {it, string_type(1, *range.begin())};
 1914|  3.18M|    }
 1915|       |
 1916|   253k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   253k|    return {it, string_type{range.begin(), it}};
 1918|  3.43M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  32.0k|{
 1155|  32.0k|    auto it = input.begin();
 1156|  88.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 87.2k, False: 904]
  ------------------
 1157|  87.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 31.1k, False: 56.1k]
  ------------------
 1158|  31.1k|            break;
 1159|  31.1k|        }
 1160|  87.2k|    }
 1161|  32.0k|    return it;
 1162|  32.0k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|   253k|    {
  283|   253k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   253k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|   253k|    {
  252|   253k|        constexpr iter_difference_t<I> zero{0};
  253|   253k|        iter_difference_t<I> counter{0};
  254|       |
  255|   886k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 633k, False: 252k]
  |  Branch (255:30): [True: 632k, False: 1.30k]
  ------------------
  256|   632k|            ++i;
  257|   632k|            ++counter;
  258|   632k|        }
  259|       |
  260|   253k|        return counter;
  261|   253k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.47M|    {
 1890|  3.47M|        return !codepoint.empty();
 1891|  3.47M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   308k|    {
  754|   308k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.11M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.11M|              cvref<T> obj = *get<T>(fn);
  745|  2.11M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.11M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.11M|              }
  748|  2.11M|              else {
  749|  2.11M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.11M|              }
  751|  2.11M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.11M|    {
  684|  2.11M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.11M|            return static_cast<T*>(s.m_cp);
  686|  2.11M|        }
  687|  2.11M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.11M|            return static_cast<T*>(s.m_p);
  689|  2.11M|        }
  690|  2.11M|        else {
  691|  2.11M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.11M|        }
  693|  2.11M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  2.11M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   308k|        {
  662|   308k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  6.70k|    {
 5048|  6.70k|        auto it = read_source_impl(range, {specs});
 5049|  6.70k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 1.89k]
  |  |  ------------------
  ------------------
 5050|  4.81k|            return unexpected(it.error());
 5051|  4.81k|        }
 5052|       |
 5053|  1.89k|        return read_string_impl(range, *it, value);
 5054|  6.70k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  6.70k|    {
 5153|  6.70k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  6.70k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  6.70k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.70k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  6.70k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  6.70k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 6.70k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  6.70k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.70k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.70k|        };
 5178|       |
 5179|  6.70k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 6.70k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  6.70k|        auto it = read_while_code_unit(range, cb);
 5184|  6.70k|        return check_nonempty(it, range);
 5185|  6.70k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  6.70k|    {
 5191|  6.70k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 4.81k, False: 1.89k]
  ------------------
 5192|  4.81k|            return unexpected_scan_error(
 5193|  4.81k|                scan_error::invalid_scanned_value,
 5194|  4.81k|                "No characters matched in [character set]");
 5195|  4.81k|        }
 5196|       |
 5197|  1.89k|        return it;
 5198|  6.70k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   291k|{
 2082|   291k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   291k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  6.70k|    {
  754|  6.70k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  14.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.8k|              cvref<T> obj = *get<T>(fn);
  745|  14.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.8k|              }
  748|  14.8k|              else {
  749|  14.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.8k|              }
  751|  14.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  14.8k|    {
  684|  14.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.8k|            return static_cast<T*>(s.m_cp);
  686|  14.8k|        }
  687|  14.8k|        else if constexpr (std::is_object_v<T>) {
  688|  14.8k|            return static_cast<T*>(s.m_p);
  689|  14.8k|        }
  690|  14.8k|        else {
  691|  14.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.8k|        }
  693|  14.8k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  14.8k|        const auto cb = [&](SourceCharT ch) {
 5176|  14.8k|            return cb_wrapper.on_ascii_only(ch);
 5177|  14.8k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  6.70k|        {
  667|  6.70k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|  1.89k|{
 4752|  1.89k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.89k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.89k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 1.89k]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|  1.89k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.89k|    static_cast<    \
  |  |  929|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.89k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.89k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.89k|    static_cast<    \
  |  |  929|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.89k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|   115k|    {
 5277|   115k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   115k|        return read_impl(range, specs, value);
 5279|   115k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|   115k|    {
 5295|   115k|        SCN_CLANG_PUSH
 5296|   115k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   115k|        switch (m_type) {
 5299|   108k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 108k, False: 6.70k]
  ------------------
 5300|   108k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 115k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 115k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  6.70k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 6.70k, False: 108k]
  ------------------
 5310|  6.70k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  6.70k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 115k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 115k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 115k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   115k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   115k|        }
 5331|       |
 5332|   115k|        SCN_CLANG_POP
 5333|   115k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   271k|    {
 4820|   271k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   271k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   271k|{
 4752|   271k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   271k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   271k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 8.13k, False: 263k]
  ------------------
 4756|  8.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  8.13k|                                     "Invalid encoding in scanned string");
 4758|  8.13k|    }
 4759|   263k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   263k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   263k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   263k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   265k|{
 3012|   265k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   265k|        dest.assign(source.view());
 3014|   265k|    }
 3015|   265k|    else {
 3016|   265k|        return transcode_impl(source.view(), dest);
 3017|   265k|    }
 3018|       |
 3019|   265k|    return {};
 3020|   265k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   543k|{
 2088|   543k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   543k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   543k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   543k|        auto buf = make_contiguous_buffer(range);
 2092|   543k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   543k|        return ranges::next(range.begin(),
 2094|   543k|                            ranges::distance(buf.view().begin(), it));
 2095|   543k|    }
 2096|   543k|    else {
 2097|   543k|        auto it = range.begin();
 2098|       |
 2099|   543k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   543k|            auto seg = get_contiguous_beginning(range);
 2101|   543k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   543k|                seg_it != seg.end()) {
 2103|   543k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   543k|            }
 2105|   543k|            ranges::advance(it, seg.size());
 2106|   543k|        }
 2107|       |
 2108|   543k|        return read_until_code_point(
 2109|   543k|            ranges::subrange{it, range.end()},
 2110|   543k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   543k|    }
 2112|   543k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  6.70k|    {
 5048|  6.70k|        auto it = read_source_impl(range, {specs});
 5049|  6.70k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 1.89k]
  |  |  ------------------
  ------------------
 5050|  4.81k|            return unexpected(it.error());
 5051|  4.81k|        }
 5052|       |
 5053|  1.89k|        return read_string_impl(range, *it, value);
 5054|  6.70k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  13.4k|    {
 5153|  13.4k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  13.4k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  13.4k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  13.4k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  13.4k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 13.4k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  13.4k|        const auto cb = [&](SourceCharT ch) {
 5176|  13.4k|            return cb_wrapper.on_ascii_only(ch);
 5177|  13.4k|        };
 5178|       |
 5179|  13.4k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 13.4k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  13.4k|        auto it = read_while_code_unit(range, cb);
 5184|  13.4k|        return check_nonempty(it, range);
 5185|  13.4k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  13.4k|    {
 5191|  13.4k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 9.62k, False: 3.78k]
  ------------------
 5192|  9.62k|            return unexpected_scan_error(
 5193|  9.62k|                scan_error::invalid_scanned_value,
 5194|  9.62k|                "No characters matched in [character set]");
 5195|  9.62k|        }
 5196|       |
 5197|  3.78k|        return it;
 5198|  13.4k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  13.4k|    {
  754|  13.4k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  29.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.6k|              cvref<T> obj = *get<T>(fn);
  745|  29.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.6k|              }
  748|  29.6k|              else {
  749|  29.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.6k|              }
  751|  29.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  29.6k|    {
  684|  29.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.6k|            return static_cast<T*>(s.m_cp);
  686|  29.6k|        }
  687|  29.6k|        else if constexpr (std::is_object_v<T>) {
  688|  29.6k|            return static_cast<T*>(s.m_p);
  689|  29.6k|        }
  690|  29.6k|        else {
  691|  29.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.6k|        }
  693|  29.6k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  29.6k|        const auto cb = [&](SourceCharT ch) {
 5176|  29.6k|            return cb_wrapper.on_ascii_only(ch);
 5177|  29.6k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  13.4k|        {
  667|  13.4k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.89k|{
 4752|  1.89k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.89k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.89k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 1.89k]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|  1.89k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.89k|    static_cast<    \
  |  |  929|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.89k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.89k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.89k|    static_cast<    \
  |  |  929|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.89k|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|   287k|{
 5809|   287k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   287k|        return reader_impl_for_bool<CharT>{};
 5811|   287k|    }
 5812|   287k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   287k|        return reader_impl_for_char<CharT>{};
 5814|   287k|    }
 5815|   287k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   287k|        return reader_impl_for_wchar<CharT>{};
 5817|   287k|    }
 5818|   287k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   287k|        return reader_impl_for_code_point<CharT>{};
 5820|   287k|    }
 5821|   287k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   287k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   287k|        return reader_impl_for_string<CharT>{};
 5824|   287k|    }
 5825|   287k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   287k|                       std::is_same_v<T, std::wstring>) {
 5827|   287k|        return reader_impl_for_string<CharT>{};
 5828|   287k|    }
 5829|   287k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   287k|                       std::is_same_v<T, wregex_matches>) {
 5831|   287k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   287k|    }
 5833|   287k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   287k|        return reader_impl_for_voidptr<CharT>{};
 5835|   287k|    }
 5836|   287k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   287k|        return reader_impl_for_float<CharT>{};
 5838|   287k|    }
 5839|   287k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   287k|                       !std::is_same_v<T, wchar_t> &&
 5841|   287k|                       !std::is_same_v<T, char32_t> &&
 5842|   287k|                       !std::is_same_v<T, bool>) {
 5843|   287k|        return reader_impl_for_int<CharT>{};
 5844|   287k|    }
 5845|   287k|    else {
 5846|   287k|        return reader_impl_for_monostate<CharT>{};
 5847|   287k|    }
 5848|   287k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|   115k|    {
 5277|   115k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   115k|        return read_impl(range, specs, value);
 5279|   115k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|   115k|    {
 5295|   115k|        SCN_CLANG_PUSH
 5296|   115k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   115k|        switch (m_type) {
 5299|   108k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 108k, False: 6.70k]
  ------------------
 5300|   108k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 115k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 115k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  6.70k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 6.70k, False: 108k]
  ------------------
 5310|  6.70k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  6.70k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 115k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 115k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 115k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   115k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   115k|        }
 5331|       |
 5332|   115k|        SCN_CLANG_POP
 5333|   115k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   271k|    {
 4827|   271k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   271k|                                     value);
 4829|   271k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   271k|{
 4773|   271k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   271k|    auto src = [&]() {
 4776|   271k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   271k|            return make_contiguous_buffer(
 4778|   271k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   271k|        }
 4780|   271k|        else {
 4781|   271k|            return make_contiguous_buffer(
 4782|   271k|                ranges::subrange{range.begin(), result});
 4783|   271k|        }
 4784|   271k|    }();
 4785|   271k|    using src_type = decltype(src);
 4786|       |
 4787|   271k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   271k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   271k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   271k|                                     "Cannot read a string_view from "
 4796|   271k|                                     "this source range (would require "
 4797|   271k|                                     "transcoding)");
 4798|   271k|    }
 4799|   271k|    else {
 4800|   271k|        const auto view = src.view();
 4801|   271k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   271k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 8.13k, False: 263k]
  ------------------
 4804|  8.13k|            return unexpected_scan_error(
 4805|  8.13k|                scan_error::invalid_scanned_value,
 4806|  8.13k|                "Invalid encoding in scanned string_view");
 4807|  8.13k|        }
 4808|       |
 4809|   263k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   271k|    }
 4811|   271k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   271k|    auto src = [&]() {
 4776|   271k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   271k|            return make_contiguous_buffer(
 4778|   271k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   271k|        }
 4780|   271k|        else {
 4781|   271k|            return make_contiguous_buffer(
 4782|   271k|                ranges::subrange{range.begin(), result});
 4783|   271k|        }
 4784|   271k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  6.70k|    {
 5062|  6.70k|        auto it = read_source_impl(range, {specs});
 5063|  6.70k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 1.89k]
  |  |  ------------------
  ------------------
 5064|  4.81k|            return unexpected(it.error());
 5065|  4.81k|        }
 5066|       |
 5067|  1.89k|        return read_string_view_impl(range, *it, value);
 5068|  6.70k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.89k|{
 4773|  1.89k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.89k|    auto src = [&]() {
 4776|  1.89k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.89k|            return make_contiguous_buffer(
 4778|  1.89k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.89k|        }
 4780|  1.89k|        else {
 4781|  1.89k|            return make_contiguous_buffer(
 4782|  1.89k|                ranges::subrange{range.begin(), result});
 4783|  1.89k|        }
 4784|  1.89k|    }();
 4785|  1.89k|    using src_type = decltype(src);
 4786|       |
 4787|  1.89k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.89k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.89k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.89k|                                     "Cannot read a string_view from "
 4796|  1.89k|                                     "this source range (would require "
 4797|  1.89k|                                     "transcoding)");
 4798|  1.89k|    }
 4799|  1.89k|    else {
 4800|  1.89k|        const auto view = src.view();
 4801|  1.89k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.89k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 1.89k]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|  1.89k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.89k|    static_cast<    \
  |  |  929|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.89k|    }
 4811|  1.89k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.89k|    auto src = [&]() {
 4776|  1.89k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.89k|            return make_contiguous_buffer(
 4778|  1.89k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.89k|        }
 4780|  1.89k|        else {
 4781|  1.89k|            return make_contiguous_buffer(
 4782|  1.89k|                ranges::subrange{range.begin(), result});
 4783|  1.89k|        }
 4784|  1.89k|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   311k|{
 2951|   311k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 311k, False: 0]
  ------------------
 2952|   311k|        auto it = read_while_classic_space(range);
 2953|   311k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   311k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.11k, False: 308k]
  |  |  ------------------
  ------------------
 2955|  3.11k|            return unexpected(e);
 2956|  3.11k|        }
 2957|       |
 2958|   308k|        return it;
 2959|   311k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   311k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   311k|{
 2117|   311k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   311k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   311k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   311k|        auto buf = make_contiguous_buffer(range);
 2121|   311k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   311k|        return ranges::next(range.begin(),
 2123|   311k|                            ranges::distance(buf.view().begin(), it));
 2124|   311k|    }
 2125|   311k|    else {
 2126|   311k|        auto it = range.begin();
 2127|       |
 2128|   311k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   311k|            auto seg = get_contiguous_beginning(range);
 2130|   311k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   311k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 20.2k, False: 291k]
  ------------------
 2132|  20.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  20.2k|            }
 2134|   291k|            ranges::advance(it, seg.size());
 2135|   291k|        }
 2136|       |
 2137|   291k|        return read_while_code_point(
 2138|   291k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   311k|    }
 2140|   311k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   291k|    {
  754|   291k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.32M|              cvref<T> obj = *get<T>(fn);
  745|  1.32M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.32M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.32M|              }
  748|  1.32M|              else {
  749|  1.32M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.32M|              }
  751|  1.32M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.32M|    {
  684|  1.32M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.32M|            return static_cast<T*>(s.m_cp);
  686|  1.32M|        }
  687|  1.32M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.32M|            return static_cast<T*>(s.m_p);
  689|  1.32M|        }
  690|  1.32M|        else {
  691|  1.32M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.32M|        }
  693|  1.32M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.32M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   291k|        {
  662|   291k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  3.89M|{
  981|  3.89M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  3.89M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  3.89M|        return true;
  984|  3.89M|    }
  985|  3.89M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  3.89M|                           ranges::const_iterator_t<Range>,
  987|  3.89M|                           typename detail::basic_scan_buffer<
  988|  3.89M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  3.89M|        auto beg = r.begin();
  990|  3.89M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 3.89M, False: 0]
  ------------------
  991|  3.89M|            return false;
  992|  3.89M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  3.89M|    else {
 1006|  3.89M|        return false;
 1007|  3.89M|    }
 1008|  3.89M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  58.8k|    {
  763|  58.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  58.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  29.2k|    {
  754|  29.2k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  29.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.4k|              cvref<T> obj = *get<T>(fn);
  745|  29.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.4k|              }
  748|  29.4k|              else {
  749|  29.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.4k|              }
  751|  29.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  29.4k|    {
  684|  29.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.4k|            return static_cast<T*>(s.m_cp);
  686|  29.4k|        }
  687|  29.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.4k|            return static_cast<T*>(s.m_p);
  689|  29.4k|        }
  690|  29.4k|        else {
  691|  29.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.4k|        }
  693|  29.4k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  29.2k|        {
  662|  29.2k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.56M|    {
 6037|  1.56M|        const bool need_skipped_width =
 6038|  1.56M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.56M]
  |  Branch (6038:33): [True: 0, False: 1.56M]
  ------------------
 6039|  1.56M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.56M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.56M]
  ------------------
 6043|  1.56M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.56M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.56M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.56M, False: 0]
  |  Branch (6047:56): [True: 1.55M, False: 9.75k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.55M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.55M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.10M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.55M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.26k, False: 1.55M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.26k|    }                                                  \
  |  |  |  | 3671|  1.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.10M|                            make_eof_scan_error));
 6058|       |
 6059|  3.10M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.55M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.55M|            return result_type{it, 0};
 6067|  3.10M|        }
 6068|       |
 6069|  9.75k|        return result_type{rng.begin(), 0};
 6070|  1.56M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  9.75k|{
 1976|  9.75k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  9.75k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  9.75k|{
 1957|  9.75k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  9.75k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  9.75k|    }
 1960|  9.75k|    else {
 1961|  9.75k|        auto first = range.begin();
 1962|  9.90k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 9.80k, False: 96]
  ------------------
 1963|  9.80k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 9.66k, False: 146]
  ------------------
 1964|  9.66k|                return first;
 1965|  9.66k|            }
 1966|  9.80k|        }
 1967|     96|        return first;
 1968|  9.75k|    }
 1969|  9.75k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.54M|    {
  108|  1.54M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.54M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.54M|    {
   94|  1.54M|        iter_difference_t<I> counter{0};
   95|  29.8M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 28.3M, False: 1.54M]
  ------------------
   96|  28.3M|            ++i;
   97|  28.3M|            ++counter;
   98|  28.3M|        }
   99|  1.54M|        return counter;
  100|  1.54M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  6.21M|{
  950|  6.21M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.66k, False: 6.20M]
  |  |  ------------------
  ------------------
  951|  5.66k|        return eof_error::eof;
  952|  5.66k|    }
  953|  6.20M|    return eof_error::good;
  954|  6.21M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  85.9M|{
  944|  85.9M|    return is_range_eof(r.begin(), r.end());
  945|  85.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  85.9M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  85.9M|    {
  937|  85.9M|        return begin == end;
  938|  85.9M|    }
  939|  85.9M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  3.87M|{
 1683|  3.87M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.87M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.87M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.87M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  3.87M|    }
 1688|  3.87M|    else {
 1689|  3.87M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.87M|    }
 1691|  3.87M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  3.87M|    {
 1537|  3.87M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.87M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  3.87M|    {
 1621|  3.87M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.87M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.87M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.87M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.87M|            m_storage.reset();
 1627|  3.87M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.87M|        }
 1629|  3.87M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.87M|                                          std::basic_string<CharT>>) {
 1631|  3.87M|            m_storage.emplace(SCN_FWD(range));
 1632|  3.87M|            m_view = string_view_type{*m_storage};
 1633|  3.87M|        }
 1634|  3.87M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.87M|                                          typename detail::basic_scan_buffer<
 1636|  3.87M|                                              value_t>::forward_iterator> &&
 1637|  3.87M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.87M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.87M|            auto end_seg = range.end().contiguous_segment();
 1640|  3.87M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  3.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.64k, False: 3.86M]
  |  |  ------------------
  ------------------
 1641|  3.87M|                             detail::to_address(end_seg.end()))) {
 1642|  9.64k|                auto& str = m_storage.emplace();
 1643|  9.64k|                str.reserve(range.end().position() - range.begin().position());
 1644|  9.64k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  9.64k|                m_view = string_view_type{str};
 1646|  9.64k|                return;
 1647|  9.64k|            }
 1648|       |
 1649|  3.86M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  3.86M|                                                            end_seg.data());
 1651|  3.86M|            m_storage.reset();
 1652|  3.86M|        }
 1653|  3.87M|        else {
 1654|  3.87M|            auto& str = m_storage.emplace();
 1655|  3.87M|            if constexpr (ranges::sized_range<Range>) {
 1656|  3.87M|                str.reserve(range.size());
 1657|  3.87M|            }
 1658|  3.87M|            if constexpr (ranges::common_range<Range>) {
 1659|  3.87M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.87M|                          std::back_inserter(str));
 1661|  3.87M|            }
 1662|  3.87M|            else {
 1663|  3.87M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.87M|                     ++it) {
 1665|  3.87M|                    str.push_back(*it);
 1666|  3.87M|                }
 1667|  3.87M|            }
 1668|  3.87M|            m_view = string_view_type{str};
 1669|  3.87M|        }
 1670|  3.87M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  7.73M|    {
 1582|  7.73M|        return m_view;
 1583|  7.73M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.87M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.54M|    {
 6079|  1.54M|        const bool need_skipped_width =
 6080|  1.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.54M]
  |  Branch (6080:33): [True: 0, False: 1.54M]
  ------------------
 6081|  1.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.54M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.54M]
  ------------------
 6084|  1.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.54M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.54M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.54M, False: 0]
  ------------------
 6093|  1.54M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 90, False: 1.54M]
  ------------------
 6094|  1.54M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 90]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     90|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 90]
  ------------------
 6096|     90|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.54M|        return result_type{rng.begin(), 0};
 6118|  1.54M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   159M|{
 1899|   159M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   159M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   159M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   159M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   159M|    auto it = range.begin();
 1903|   159M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   159M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   159M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 159M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   159M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 159M, False: 0]
  ------------------
 1912|   159M|        ++it;
 1913|   159M|        return {it, string_type(1, *range.begin())};
 1914|   159M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   159M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   171M|{
  944|   171M|    return is_range_eof(r.begin(), r.end());
  945|   171M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   171M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   171M|    {
  937|   171M|        return begin == end;
  938|   171M|    }
  939|   171M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   159M|    {
 1890|   159M|        return !codepoint.empty();
 1891|   159M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  12.4M|{
  950|  12.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  12.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 12.4M]
  |  |  ------------------
  ------------------
  951|  11.3k|        return eof_error::eof;
  952|  11.3k|    }
  953|  12.4M|    return eof_error::good;
  954|  12.4M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  7.75M|{
 1683|  7.75M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  7.75M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  7.75M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  7.75M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  7.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  7.75M|    }
 1688|  7.75M|    else {
 1689|  7.75M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  7.75M|    }
 1691|  7.75M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  7.75M|    {
 1490|  7.75M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  11.6M|    {
 1503|  11.6M|        return sv;
 1504|  11.6M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  19.5k|{
 1976|  19.5k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  19.5k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  19.5k|{
 1957|  19.5k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  19.5k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  19.5k|    }
 1960|  19.5k|    else {
 1961|  19.5k|        auto first = range.begin();
 1962|  19.5k|        for (; first != range.end(); ++first) {
 1963|  19.5k|            if (pred(*first)) {
 1964|  19.5k|                return first;
 1965|  19.5k|            }
 1966|  19.5k|        }
 1967|  19.5k|        return first;
 1968|  19.5k|    }
 1969|  19.5k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.76M|{
 2951|  7.76M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.76M, False: 0]
  ------------------
 2952|  7.76M|        auto it = read_while_classic_space(range);
 2953|  7.76M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.76M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.44k, False: 7.75M]
  |  |  ------------------
  ------------------
 2955|  5.44k|            return unexpected(e);
 2956|  5.44k|        }
 2957|       |
 2958|  7.75M|        return it;
 2959|  7.76M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  7.76M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  7.76M|{
 2117|  7.76M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  7.76M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  7.76M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  7.76M|        auto buf = make_contiguous_buffer(range);
 2121|  7.76M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  7.76M|        return ranges::next(range.begin(),
 2123|  7.76M|                            ranges::distance(buf.view().begin(), it));
 2124|  7.76M|    }
 2125|  7.76M|    else {
 2126|  7.76M|        auto it = range.begin();
 2127|       |
 2128|  7.76M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  7.76M|            auto seg = get_contiguous_beginning(range);
 2130|  7.76M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  7.76M|                seg_it != seg.end()) {
 2132|  7.76M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  7.76M|            }
 2134|  7.76M|            ranges::advance(it, seg.size());
 2135|  7.76M|        }
 2136|       |
 2137|  7.76M|        return read_while_code_point(
 2138|  7.76M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  7.76M|    }
 2140|  7.76M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  7.76M|{
 2082|  7.76M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  7.76M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  15.5M|{
 2061|  15.5M|    auto it = range.begin();
 2062|   159M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 159M, False: 32.5k]
  ------------------
 2063|   159M|        const auto val =
 2064|   159M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   159M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   159M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 159M, False: 0]
  |  |  ------------------
  ------------------
 2066|   159M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   159M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   159M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 15.4M, False: 143M]
  ------------------
 2069|  15.4M|                return it;
 2070|  15.4M|            }
 2071|   159M|        }
 2072|   143M|        it = val.iterator;
 2073|   143M|    }
 2074|       |
 2075|  32.5k|    return it;
 2076|  15.5M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  7.76M|    {
  754|  7.76M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  17.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.2M|              cvref<T> obj = *get<T>(fn);
  745|  17.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.2M|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.2M|              }
  748|  17.2M|              else {
  749|  17.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.2M|              }
  751|  17.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  17.2M|    {
  684|  17.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.2M|            return static_cast<T*>(s.m_cp);
  686|  17.2M|        }
  687|  17.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.2M|            return static_cast<T*>(s.m_p);
  689|  17.2M|        }
  690|  17.2M|        else {
  691|  17.2M|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.2M|        }
  693|  17.2M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  17.2M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  7.76M|        {
  662|  7.76M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  3.86M|    {
 1587|  3.86M|        return m_storage.has_value();
 1588|  3.86M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  3.25k|    {
 1592|  3.25k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.25k|        return *m_storage;
 1594|  3.25k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  11.7M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.71M|    {
 3040|  4.71M|        reader_error_handler eh{};
 3041|  4.71M|        get_derived().check_specs_impl(specs, eh);
 3042|  4.71M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 4.69M]
  |  |  ------------------
  ------------------
 3043|  28.8k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  28.8k|        }
 3045|  4.69M|        return {};
 3046|  4.71M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  4.71M|    {
 3051|  4.71M|        return static_cast<Derived&>(*this);
 3052|  4.71M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  4.71M|    {
 5210|  4.71M|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  4.71M|        SCN_GCC_PUSH
 5213|  4.71M|        SCN_GCC_IGNORE("-Wswitch")
 5214|  4.71M|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  4.71M|        SCN_CLANG_PUSH
 5217|  4.71M|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  4.71M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  4.71M|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 4.71M]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 4.71M]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|  4.66M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 4.66M, False: 58.1k]
  ------------------
 5226|  4.66M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 4.66M]
  ------------------
 5227|  4.66M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 4.66M]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|  4.66M|                else {
 5231|  4.66M|                    m_type = reader_type::word;
 5232|  4.66M|                }
 5233|  4.66M|                break;
 5234|      0|            }
 5235|       |
 5236|  28.8k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 28.8k, False: 4.69M]
  ------------------
 5237|  28.8k|                m_type = reader_type::character;
 5238|  28.8k|                break;
 5239|       |
 5240|  29.2k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 29.2k, False: 4.69M]
  ------------------
 5241|  29.2k|                m_type = reader_type::character_set;
 5242|  29.2k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 4.71M]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 4.71M]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  4.71M|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  4.71M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  16.3M|    {
 5259|  16.3M|        return m_type == reader_type::word;
 5260|  16.3M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  11.6M|{
 1132|  11.6M|    auto it = src.begin();
 1133|   210M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 198M, False: 11.5M]
  ------------------
 1134|   198M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   198M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 198M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   198M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 198M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   198M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   198M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   198M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 55.1k, False: 198M]
  ------------------
 1144|  55.1k|            return false;
 1145|  55.1k|        }
 1146|   198M|        it += len;
 1147|   198M|    }
 1148|  11.5M|    return true;
 1149|  11.6M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  29.2k|        {
 5103|  29.2k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 29.2k, False: 0]
  ------------------
 5104|  29.2k|                return {};
 5105|  29.2k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  16.2k|        {
 5076|  16.2k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  16.2k|            const auto val =
 5078|  16.2k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  16.2k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  16.2k|                    (val % 8)) &
 5081|  16.2k|                   1u;
 5082|  16.2k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  29.4k|        {
 5129|  29.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 13.1k, False: 16.2k]
  ------------------
 5130|  13.1k|                return false;
 5131|  13.1k|            }
 5132|       |
 5133|  16.2k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  29.4k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  29.2k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  3.87M|{
 2088|  3.87M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.87M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.87M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.87M|        auto buf = make_contiguous_buffer(range);
 2092|  3.87M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.87M|        return ranges::next(range.begin(),
 2094|  3.87M|                            ranges::distance(buf.view().begin(), it));
 2095|  3.87M|    }
 2096|  3.87M|    else {
 2097|  3.87M|        auto it = range.begin();
 2098|       |
 2099|  3.87M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  3.87M|            auto seg = get_contiguous_beginning(range);
 2101|  3.87M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.87M|                seg_it != seg.end()) {
 2103|  3.87M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.87M|            }
 2105|  3.87M|            ranges::advance(it, seg.size());
 2106|  3.87M|        }
 2107|       |
 2108|  3.87M|        return read_until_code_point(
 2109|  3.87M|            ranges::subrange{it, range.end()},
 2110|  3.87M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.87M|    }
 2112|  3.87M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  7.76M|{
 2061|  7.76M|    auto it = range.begin();
 2062|  79.7M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 79.6M, False: 16.2k]
  ------------------
 2063|  79.6M|        const auto val =
 2064|  79.6M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  79.6M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  79.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.6M, False: 0]
  |  |  ------------------
  ------------------
 2066|  79.6M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  79.6M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  79.6M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 7.74M, False: 71.9M]
  ------------------
 2069|  7.74M|                return it;
 2070|  7.74M|            }
 2071|  79.6M|        }
 2072|  71.9M|        it = val.iterator;
 2073|  71.9M|    }
 2074|       |
 2075|  16.2k|    return it;
 2076|  7.76M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  79.6M|{
 1899|  79.6M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  79.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  79.6M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  79.6M|    auto it = range.begin();
 1903|  79.6M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  79.6M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  79.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 79.6M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  79.6M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 79.6M, False: 0]
  ------------------
 1912|  79.6M|        ++it;
 1913|  79.6M|        return {it, string_type(1, *range.begin())};
 1914|  79.6M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  79.6M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  79.6M|    {
 1890|  79.6M|        return !codepoint.empty();
 1891|  79.6M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  3.87M|    {
  754|  3.87M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  71.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.0M|              cvref<T> obj = *get<T>(fn);
  745|  71.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  71.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  71.0M|              }
  748|  71.0M|              else {
  749|  71.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.0M|              }
  751|  71.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  71.0M|    {
  684|  71.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  71.0M|            return static_cast<T*>(s.m_cp);
  686|  71.0M|        }
  687|  71.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  71.0M|            return static_cast<T*>(s.m_p);
  689|  71.0M|        }
  690|  71.0M|        else {
  691|  71.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  71.0M|        }
  693|  71.0M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  71.0M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  3.87M|        {
  662|  3.87M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  9.75k|    {
 5153|  9.75k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  9.75k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  9.75k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.75k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  9.75k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  9.75k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 9.75k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  9.75k|        const auto cb = [&](SourceCharT ch) {
 5176|  9.75k|            return cb_wrapper.on_ascii_only(ch);
 5177|  9.75k|        };
 5178|       |
 5179|  9.75k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 9.75k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  9.75k|        auto it = read_while_code_unit(range, cb);
 5184|  9.75k|        return check_nonempty(it, range);
 5185|  9.75k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  9.75k|    {
 5191|  9.75k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 9.62k, False: 138]
  ------------------
 5192|  9.62k|            return unexpected_scan_error(
 5193|  9.62k|                scan_error::invalid_scanned_value,
 5194|  9.62k|                "No characters matched in [character set]");
 5195|  9.62k|        }
 5196|       |
 5197|    138|        return it;
 5198|  9.75k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  3.88M|{
 2082|  3.88M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.88M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  9.75k|    {
  754|  9.75k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  9.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.80k|              cvref<T> obj = *get<T>(fn);
  745|  9.80k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.80k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.80k|              }
  748|  9.80k|              else {
  749|  9.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.80k|              }
  751|  9.80k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.80k|    {
  684|  9.80k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.80k|            return static_cast<T*>(s.m_cp);
  686|  9.80k|        }
  687|  9.80k|        else if constexpr (std::is_object_v<T>) {
  688|  9.80k|            return static_cast<T*>(s.m_p);
  689|  9.80k|        }
  690|  9.80k|        else {
  691|  9.80k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.80k|        }
  693|  9.80k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  9.80k|        const auto cb = [&](SourceCharT ch) {
 5176|  9.80k|            return cb_wrapper.on_ascii_only(ch);
 5177|  9.80k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  9.75k|        {
  667|  9.75k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  7.75M|{
 2088|  7.75M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  7.75M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  7.75M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  7.75M|        auto buf = make_contiguous_buffer(range);
 2092|  7.75M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  7.75M|        return ranges::next(range.begin(),
 2094|  7.75M|                            ranges::distance(buf.view().begin(), it));
 2095|  7.75M|    }
 2096|  7.75M|    else {
 2097|  7.75M|        auto it = range.begin();
 2098|       |
 2099|  7.75M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  7.75M|            auto seg = get_contiguous_beginning(range);
 2101|  7.75M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  7.75M|                seg_it != seg.end()) {
 2103|  7.75M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  7.75M|            }
 2105|  7.75M|            ranges::advance(it, seg.size());
 2106|  7.75M|        }
 2107|       |
 2108|  7.75M|        return read_until_code_point(
 2109|  7.75M|            ranges::subrange{it, range.end()},
 2110|  7.75M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  7.75M|    }
 2112|  7.75M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  7.75M|    {
  754|  7.75M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   142M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   142M|              cvref<T> obj = *get<T>(fn);
  745|   142M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   142M|                  obj(static_cast<decltype(args)>(args)...);
  747|   142M|              }
  748|   142M|              else {
  749|   142M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   142M|              }
  751|   142M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   142M|    {
  684|   142M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   142M|            return static_cast<T*>(s.m_cp);
  686|   142M|        }
  687|   142M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   142M|            return static_cast<T*>(s.m_p);
  689|   142M|        }
  690|   142M|        else {
  691|   142M|            return reinterpret_cast<T*>(s.m_fp);
  692|   142M|        }
  693|   142M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   142M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  7.75M|        {
  662|  7.75M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  19.5k|    {
 5153|  19.5k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  19.5k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  19.5k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  19.5k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  19.5k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 19.5k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  19.5k|        const auto cb = [&](SourceCharT ch) {
 5176|  19.5k|            return cb_wrapper.on_ascii_only(ch);
 5177|  19.5k|        };
 5178|       |
 5179|  19.5k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 19.5k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  19.5k|        auto it = read_while_code_unit(range, cb);
 5184|  19.5k|        return check_nonempty(it, range);
 5185|  19.5k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  19.5k|    {
 5191|  19.5k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 19.2k, False: 276]
  ------------------
 5192|  19.2k|            return unexpected_scan_error(
 5193|  19.2k|                scan_error::invalid_scanned_value,
 5194|  19.2k|                "No characters matched in [character set]");
 5195|  19.2k|        }
 5196|       |
 5197|    276|        return it;
 5198|  19.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  19.5k|    {
  754|  19.5k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  19.6k|    {
  684|  19.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.6k|            return static_cast<T*>(s.m_cp);
  686|  19.6k|        }
  687|  19.6k|        else if constexpr (std::is_object_v<T>) {
  688|  19.6k|            return static_cast<T*>(s.m_p);
  689|  19.6k|        }
  690|  19.6k|        else {
  691|  19.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.6k|        }
  693|  19.6k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  19.6k|        const auto cb = [&](SourceCharT ch) {
 5176|  19.6k|            return cb_wrapper.on_ascii_only(ch);
 5177|  19.6k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  19.5k|        {
  667|  19.5k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  1.57M|    {
 6193|  1.57M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  1.57M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  1.57M|            auto rd = make_reader<T, char_type>();
 6198|  1.57M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  1.57M|                return unexpected(e);
 6200|  1.57M|            }
 6201|       |
 6202|  1.57M|            return impl(rd, range, value);
 6203|  1.57M|        }
 6204|  1.57M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  1.57M|            auto rd = make_reader<T, char_type>();
 6206|  1.57M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 1.56M]
  |  |  ------------------
  ------------------
 6207|  9.62k|                return unexpected(e);
 6208|  9.62k|            }
 6209|       |
 6210|  1.56M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 1.56M, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  1.56M|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  1.56M|                return impl(rd, range, value);
 6213|  1.56M|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  1.57M|        else {
 6221|  1.57M|            SCN_EXPECT(false);
 6222|  1.57M|            SCN_UNREACHABLE;
 6223|  1.57M|        }
 6224|  1.57M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  7.80M|{
 5809|  7.80M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  7.80M|        return reader_impl_for_bool<CharT>{};
 5811|  7.80M|    }
 5812|  7.80M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  7.80M|        return reader_impl_for_char<CharT>{};
 5814|  7.80M|    }
 5815|  7.80M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  7.80M|        return reader_impl_for_wchar<CharT>{};
 5817|  7.80M|    }
 5818|  7.80M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  7.80M|        return reader_impl_for_code_point<CharT>{};
 5820|  7.80M|    }
 5821|  7.80M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  7.80M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  7.80M|        return reader_impl_for_string<CharT>{};
 5824|  7.80M|    }
 5825|  7.80M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  7.80M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  7.80M|        return reader_impl_for_string<CharT>{};
 5828|  7.80M|    }
 5829|  7.80M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  7.80M|                       std::is_same_v<T, wregex_matches>) {
 5831|  7.80M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  7.80M|    }
 5833|  7.80M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  7.80M|        return reader_impl_for_voidptr<CharT>{};
 5835|  7.80M|    }
 5836|  7.80M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  7.80M|        return reader_impl_for_float<CharT>{};
 5838|  7.80M|    }
 5839|  7.80M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  7.80M|                       !std::is_same_v<T, wchar_t> &&
 5841|  7.80M|                       !std::is_same_v<T, char32_t> &&
 5842|  7.80M|                       !std::is_same_v<T, bool>) {
 5843|  7.80M|        return reader_impl_for_int<CharT>{};
 5844|  7.80M|    }
 5845|  7.80M|    else {
 5846|  7.80M|        return reader_impl_for_monostate<CharT>{};
 5847|  7.80M|    }
 5848|  7.80M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  1.56M|    {
 6124|  1.56M|        const bool need_skipped_width =
 6125|  1.56M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 1.56M]
  |  Branch (6125:33): [True: 0, False: 1.56M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  1.56M|        auto it = rng.begin();
 6129|  1.56M|        std::ptrdiff_t prefix_width = 0;
 6130|  1.56M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 1.56M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  1.56M|        else {
 6138|  1.56M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  1.56M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.26k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.26k|    }                                                  \
  |  |  |  | 3671|  1.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  1.56M|            std::tie(it, prefix_width) = prefix_result;
 6140|  1.56M|        }
 6141|  1.56M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  1.56M|        std::ptrdiff_t value_width = 0;
 6145|  1.56M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 1.56M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  1.56M|        else {
 6161|  1.56M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  1.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.54M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.9k|    }                                                  \
  |  | 3671|  1.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.54M|                                             specs, value, loc));
 6163|       |
 6164|  1.54M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 1.54M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  1.54M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.54M|        std::ptrdiff_t postfix_width = 0;
 6173|  1.54M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.54M, False: 2.01k]
  ------------------
 6174|  1.54M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.54M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.54M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.54M|                                 value_width));
 6178|  1.54M|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.54M|        }
 6180|       |
 6181|  1.54M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.54M|                                                 value_width, postfix_width);
 6183|  1.54M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 1.54M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  1.54M|        return it;
 6188|  1.54M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  3.86M|{
 2993|  3.86M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  3.86M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.25k, False: 3.85M]
  ------------------
 2995|  3.25k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.25k|        }
 2997|  3.85M|        else {
 2998|  3.85M|            dest.assign(source.view());
 2999|  3.85M|        }
 3000|  3.86M|    }
 3001|  3.86M|    else {
 3002|  3.86M|        return transcode_impl(source.view(), dest);
 3003|  3.86M|    }
 3004|       |
 3005|  3.86M|    return {};
 3006|  3.86M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  1.56M|    {
 5277|  1.56M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.56M|        return read_impl(range, specs, value);
 5279|  1.56M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  1.56M|    {
 5295|  1.56M|        SCN_CLANG_PUSH
 5296|  1.56M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.56M|        switch (m_type) {
 5299|  1.55M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 1.55M, False: 9.75k]
  ------------------
 5300|  1.55M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 1.56M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.56M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  9.75k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 9.75k, False: 1.55M]
  ------------------
 5310|  9.75k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  9.75k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 1.56M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 1.56M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.56M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.56M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.56M|        }
 5331|       |
 5332|  1.56M|        SCN_CLANG_POP
 5333|  1.56M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  3.87M|    {
 4820|  3.87M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  3.87M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  3.87M|{
 4752|  3.87M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  3.87M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  3.87M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 18.3k, False: 3.86M]
  ------------------
 4756|  18.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  18.3k|                                     "Invalid encoding in scanned string");
 4758|  18.3k|    }
 4759|  3.86M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  3.86M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.86M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  3.86M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  3.86M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  9.75k|    {
 5048|  9.75k|        auto it = read_source_impl(range, {specs});
 5049|  9.75k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 138]
  |  |  ------------------
  ------------------
 5050|  9.62k|            return unexpected(it.error());
 5051|  9.62k|        }
 5052|       |
 5053|    138|        return read_string_impl(range, *it, value);
 5054|  9.75k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    138|{
 4752|    138|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    138|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    138|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 138]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    138|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    138|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    138|    return SCN_MOVE(result);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    138|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.56M|    {
 5277|  1.56M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.56M|        return read_impl(range, specs, value);
 5279|  1.56M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.56M|    {
 5295|  1.56M|        SCN_CLANG_PUSH
 5296|  1.56M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.56M|        switch (m_type) {
 5299|  1.55M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 1.55M, False: 9.75k]
  ------------------
 5300|  1.55M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 1.56M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.56M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  9.75k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 9.75k, False: 1.55M]
  ------------------
 5310|  9.75k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  9.75k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 1.56M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 1.56M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.56M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.56M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.56M|        }
 5331|       |
 5332|  1.56M|        SCN_CLANG_POP
 5333|  1.56M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  3.87M|    {
 4820|  3.87M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  3.87M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  3.87M|{
 4752|  3.87M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  3.87M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  3.87M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 18.3k, False: 3.86M]
  ------------------
 4756|  18.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  18.3k|                                     "Invalid encoding in scanned string");
 4758|  18.3k|    }
 4759|  3.86M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  3.86M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.86M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  3.86M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  3.86M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.86M|{
 3012|  3.86M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.86M|        dest.assign(source.view());
 3014|  3.86M|    }
 3015|  3.86M|    else {
 3016|  3.86M|        return transcode_impl(source.view(), dest);
 3017|  3.86M|    }
 3018|       |
 3019|  3.86M|    return {};
 3020|  3.86M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  9.75k|    {
 5048|  9.75k|        auto it = read_source_impl(range, {specs});
 5049|  9.75k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 138]
  |  |  ------------------
  ------------------
 5050|  9.62k|            return unexpected(it.error());
 5051|  9.62k|        }
 5052|       |
 5053|    138|        return read_string_impl(range, *it, value);
 5054|  9.75k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    138|{
 4752|    138|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    138|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    138|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 138]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    138|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    138|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    138|    return SCN_MOVE(result);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    138|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  3.90M|{
 5809|  3.90M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  3.90M|        return reader_impl_for_bool<CharT>{};
 5811|  3.90M|    }
 5812|  3.90M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  3.90M|        return reader_impl_for_char<CharT>{};
 5814|  3.90M|    }
 5815|  3.90M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  3.90M|        return reader_impl_for_wchar<CharT>{};
 5817|  3.90M|    }
 5818|  3.90M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  3.90M|        return reader_impl_for_code_point<CharT>{};
 5820|  3.90M|    }
 5821|  3.90M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  3.90M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  3.90M|        return reader_impl_for_string<CharT>{};
 5824|  3.90M|    }
 5825|  3.90M|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  3.90M|                       std::is_same_v<T, std::wstring>) {
 5827|  3.90M|        return reader_impl_for_string<CharT>{};
 5828|  3.90M|    }
 5829|  3.90M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  3.90M|                       std::is_same_v<T, wregex_matches>) {
 5831|  3.90M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  3.90M|    }
 5833|  3.90M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  3.90M|        return reader_impl_for_voidptr<CharT>{};
 5835|  3.90M|    }
 5836|  3.90M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  3.90M|        return reader_impl_for_float<CharT>{};
 5838|  3.90M|    }
 5839|  3.90M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  3.90M|                       !std::is_same_v<T, wchar_t> &&
 5841|  3.90M|                       !std::is_same_v<T, char32_t> &&
 5842|  3.90M|                       !std::is_same_v<T, bool>) {
 5843|  3.90M|        return reader_impl_for_int<CharT>{};
 5844|  3.90M|    }
 5845|  3.90M|    else {
 5846|  3.90M|        return reader_impl_for_monostate<CharT>{};
 5847|  3.90M|    }
 5848|  3.90M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  1.56M|    {
 5277|  1.56M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.56M|        return read_impl(range, specs, value);
 5279|  1.56M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  1.56M|    {
 5295|  1.56M|        SCN_CLANG_PUSH
 5296|  1.56M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.56M|        switch (m_type) {
 5299|  1.55M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 1.55M, False: 9.75k]
  ------------------
 5300|  1.55M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 1.56M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 1.56M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  9.75k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 9.75k, False: 1.55M]
  ------------------
 5310|  9.75k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  9.75k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 1.56M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 1.56M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.56M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.56M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.56M|        }
 5331|       |
 5332|  1.56M|        SCN_CLANG_POP
 5333|  1.56M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  3.87M|    {
 4827|  3.87M|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  3.87M|                                     value);
 4829|  3.87M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  3.87M|{
 4773|  3.87M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  3.87M|    auto src = [&]() {
 4776|  3.87M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  3.87M|            return make_contiguous_buffer(
 4778|  3.87M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  3.87M|        }
 4780|  3.87M|        else {
 4781|  3.87M|            return make_contiguous_buffer(
 4782|  3.87M|                ranges::subrange{range.begin(), result});
 4783|  3.87M|        }
 4784|  3.87M|    }();
 4785|  3.87M|    using src_type = decltype(src);
 4786|       |
 4787|  3.87M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  3.87M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  3.87M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  3.87M|                                     "Cannot read a string_view from "
 4796|  3.87M|                                     "this source range (would require "
 4797|  3.87M|                                     "transcoding)");
 4798|  3.87M|    }
 4799|  3.87M|    else {
 4800|  3.87M|        const auto view = src.view();
 4801|  3.87M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  3.87M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 18.3k, False: 3.86M]
  ------------------
 4804|  18.3k|            return unexpected_scan_error(
 4805|  18.3k|                scan_error::invalid_scanned_value,
 4806|  18.3k|                "Invalid encoding in scanned string_view");
 4807|  18.3k|        }
 4808|       |
 4809|  3.86M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  3.87M|    }
 4811|  3.87M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  3.87M|    auto src = [&]() {
 4776|  3.87M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  3.87M|            return make_contiguous_buffer(
 4778|  3.87M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  3.87M|        }
 4780|  3.87M|        else {
 4781|  3.87M|            return make_contiguous_buffer(
 4782|  3.87M|                ranges::subrange{range.begin(), result});
 4783|  3.87M|        }
 4784|  3.87M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  9.75k|    {
 5062|  9.75k|        auto it = read_source_impl(range, {specs});
 5063|  9.75k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 138]
  |  |  ------------------
  ------------------
 5064|  9.62k|            return unexpected(it.error());
 5065|  9.62k|        }
 5066|       |
 5067|    138|        return read_string_view_impl(range, *it, value);
 5068|  9.75k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    138|{
 4773|    138|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    138|    auto src = [&]() {
 4776|    138|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    138|            return make_contiguous_buffer(
 4778|    138|                ranges::subrange{range.begin().base(), result.base()});
 4779|    138|        }
 4780|    138|        else {
 4781|    138|            return make_contiguous_buffer(
 4782|    138|                ranges::subrange{range.begin(), result});
 4783|    138|        }
 4784|    138|    }();
 4785|    138|    using src_type = decltype(src);
 4786|       |
 4787|    138|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    138|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    138|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    138|                                     "Cannot read a string_view from "
 4796|    138|                                     "this source range (would require "
 4797|    138|                                     "transcoding)");
 4798|    138|    }
 4799|    138|    else {
 4800|    138|        const auto view = src.view();
 4801|    138|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    138|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 138]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    138|        return SCN_MOVE(result);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    138|    }
 4811|    138|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    138|    auto src = [&]() {
 4776|    138|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    138|            return make_contiguous_buffer(
 4778|    138|                ranges::subrange{range.begin().base(), result.base()});
 4779|    138|        }
 4780|    138|        else {
 4781|    138|            return make_contiguous_buffer(
 4782|    138|                ranges::subrange{range.begin(), result});
 4783|    138|        }
 4784|    138|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.88M|{
 2951|  3.88M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.88M, False: 0]
  ------------------
 2952|  3.88M|        auto it = read_while_classic_space(range);
 2953|  3.88M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.88M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 3.87M]
  |  |  ------------------
  ------------------
 2955|  2.72k|            return unexpected(e);
 2956|  2.72k|        }
 2957|       |
 2958|  3.87M|        return it;
 2959|  3.88M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.88M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.88M|{
 2117|  3.88M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.88M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.88M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.88M|        auto buf = make_contiguous_buffer(range);
 2121|  3.88M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.88M|        return ranges::next(range.begin(),
 2123|  3.88M|                            ranges::distance(buf.view().begin(), it));
 2124|  3.88M|    }
 2125|  3.88M|    else {
 2126|  3.88M|        auto it = range.begin();
 2127|       |
 2128|  3.88M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.88M|            auto seg = get_contiguous_beginning(range);
 2130|  3.88M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.88M|                seg_it != seg.end()) {
 2132|  3.88M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.88M|            }
 2134|  3.88M|            ranges::advance(it, seg.size());
 2135|  3.88M|        }
 2136|       |
 2137|  3.88M|        return read_while_code_point(
 2138|  3.88M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.88M|    }
 2140|  3.88M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  3.88M|    {
  754|  3.88M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  8.61M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.61M|              cvref<T> obj = *get<T>(fn);
  745|  8.61M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.61M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.61M|              }
  748|  8.61M|              else {
  749|  8.61M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.61M|              }
  751|  8.61M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  8.61M|    {
  684|  8.61M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.61M|            return static_cast<T*>(s.m_cp);
  686|  8.61M|        }
  687|  8.61M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.61M|            return static_cast<T*>(s.m_p);
  689|  8.61M|        }
  690|  8.61M|        else {
  691|  8.61M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.61M|        }
  693|  8.61M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  8.61M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  3.88M|        {
  662|  3.88M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   330k|{
 5795|   330k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 328k]
  |  |  ------------------
  ------------------
 5796|  2.73k|        return unexpected(e);
 5797|  2.73k|    }
 5798|       |
 5799|   328k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 328k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   328k|    return skip_classic_whitespace(range);
 5804|   328k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|   165k|    {
 5871|   165k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   165k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   165k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   165k|            auto rd = make_reader<T, char_type>();
 5876|   165k|            return impl(rd, range, value);
 5877|   165k|        }
 5878|   165k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   165k|            auto rd = make_reader<T, char_type>();
 5880|   165k|            if (!is_segment_contiguous(range)) {
 5881|   165k|                return impl(rd, range, value);
 5882|   165k|            }
 5883|   165k|            auto crange = get_as_contiguous(range);
 5884|   165k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   165k|            return ranges::next(range.begin(),
 5886|   165k|                                ranges::distance(crange.begin(), it));
 5887|   165k|        }
 5888|   165k|        else {
 5889|   165k|            SCN_EXPECT(false);
 5890|   165k|            SCN_UNREACHABLE;
 5891|   165k|        }
 5892|   165k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|   165k|    {
 5863|   165k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.33k, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.33k|    }                                                  \
  |  |  |  | 3671|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   163k|                        .transform_error(make_eof_scan_error));
 5865|   163k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   165k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|   163k|    {
 5266|   163k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   163k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   163k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   163k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|   165k|    {
 5871|   165k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   165k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   165k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   165k|            auto rd = make_reader<T, char_type>();
 5876|   165k|            return impl(rd, range, value);
 5877|   165k|        }
 5878|   165k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   165k|            auto rd = make_reader<T, char_type>();
 5880|   165k|            if (!is_segment_contiguous(range)) {
 5881|   165k|                return impl(rd, range, value);
 5882|   165k|            }
 5883|   165k|            auto crange = get_as_contiguous(range);
 5884|   165k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   165k|            return ranges::next(range.begin(),
 5886|   165k|                                ranges::distance(crange.begin(), it));
 5887|   165k|        }
 5888|   165k|        else {
 5889|   165k|            SCN_EXPECT(false);
 5890|   165k|            SCN_UNREACHABLE;
 5891|   165k|        }
 5892|   165k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|   165k|    {
 5863|   165k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.33k, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.33k|    }                                                  \
  |  |  |  | 3671|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   163k|                        .transform_error(make_eof_scan_error));
 5865|   163k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   165k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|   163k|    {
 5266|   163k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   163k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   163k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   163k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   186k|{
 5795|   186k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.50k, False: 185k]
  |  |  ------------------
  ------------------
 5796|  1.50k|        return unexpected(e);
 5797|  1.50k|    }
 5798|       |
 5799|   185k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 185k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   185k|    return skip_classic_whitespace(range);
 5804|   185k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   186k|    {
 5871|   186k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   186k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   186k|            auto rd = make_reader<T, char_type>();
 5876|   186k|            return impl(rd, range, value);
 5877|   186k|        }
 5878|   186k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   186k|            auto rd = make_reader<T, char_type>();
 5880|   186k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 186k, False: 0]
  ------------------
 5881|   186k|                return impl(rd, range, value);
 5882|   186k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   186k|        else {
 5889|   186k|            SCN_EXPECT(false);
 5890|   186k|            SCN_UNREACHABLE;
 5891|   186k|        }
 5892|   186k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|   186k|    {
 5863|   186k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.59k, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.59k|    }                                                  \
  |  |  |  | 3671|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   184k|                        .transform_error(make_eof_scan_error));
 5865|   184k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   186k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|   184k|    {
 5266|   184k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   184k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   184k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   184k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   262k|    {
 2879|   262k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   720k|    {
 2883|   720k|        return m_current;
 2884|   720k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   458k|    {
 2888|   458k|        return m_range.end();
 2889|   458k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   214k|    {
 2903|   214k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   214k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   214k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 214k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   214k|        }
 2909|   214k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   214k|    static_cast<    \
  |  |  929|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   214k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   243k|    {
 2893|   243k|        return ranges::subrange{begin(), end()};
 2894|   243k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   233k|    {
 6037|   233k|        const bool need_skipped_width =
 6038|   233k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 233k]
  |  Branch (6038:33): [True: 0, False: 233k]
  ------------------
 6039|   233k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   233k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 233k]
  ------------------
 6043|   233k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 233k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   233k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 233k, False: 0]
  |  Branch (6047:56): [True: 220k, False: 13.4k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   220k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 220k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   437k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.11k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.11k|    }                                                  \
  |  |  |  | 3671|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   437k|                            make_eof_scan_error));
 6058|       |
 6059|   437k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 217k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   217k|            return result_type{it, 0};
 6067|   437k|        }
 6068|       |
 6069|  13.4k|        return result_type{rng.begin(), 0};
 6070|   233k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   212k|    {
 6079|   212k|        const bool need_skipped_width =
 6080|   212k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 212k]
  |  Branch (6080:33): [True: 0, False: 212k]
  ------------------
 6081|   212k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   212k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 212k]
  ------------------
 6084|   212k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 212k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   212k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 212k, False: 0]
  ------------------
 6093|   212k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 3.70k, False: 209k]
  ------------------
 6094|   212k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 3.70k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  3.70k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 3.70k]
  ------------------
 6096|  3.70k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   212k|        return result_type{rng.begin(), 0};
 6118|   212k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|   121k|    {
 6193|   121k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   121k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   121k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   121k|            auto rd = make_reader<T, char_type>();
 6198|   121k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 116k]
  |  |  ------------------
  ------------------
 6199|  4.81k|                return unexpected(e);
 6200|  4.81k|            }
 6201|       |
 6202|   116k|            return impl(rd, range, value);
 6203|   121k|        }
 6204|   121k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   121k|            auto rd = make_reader<T, char_type>();
 6206|   121k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   121k|                return unexpected(e);
 6208|   121k|            }
 6209|       |
 6210|   121k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   121k|                specs.width != 0) {
 6212|   121k|                return impl(rd, range, value);
 6213|   121k|            }
 6214|       |
 6215|   121k|            auto crange = get_as_contiguous(range);
 6216|   121k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   121k|            return ranges::next(range.begin(),
 6218|   121k|                                ranges::distance(crange.begin(), it));
 6219|   121k|        }
 6220|   121k|        else {
 6221|   121k|            SCN_EXPECT(false);
 6222|   121k|            SCN_UNREACHABLE;
 6223|   121k|        }
 6224|   121k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|   116k|    {
 6124|   116k|        const bool need_skipped_width =
 6125|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 116k]
  |  Branch (6125:33): [True: 0, False: 116k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   116k|        auto it = rng.begin();
 6129|   116k|        std::ptrdiff_t prefix_width = 0;
 6130|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 116k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   116k|        else {
 6138|   116k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.55k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.55k|    }                                                  \
  |  |  |  | 3671|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   115k|            std::tie(it, prefix_width) = prefix_result;
 6140|   115k|        }
 6141|   115k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   115k|        std::ptrdiff_t value_width = 0;
 6145|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 115k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   115k|        else {
 6161|   115k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.06k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.06k|    }                                                  \
  |  | 3671|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   107k|                                             specs, value, loc));
 6163|       |
 6164|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 107k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   107k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   107k|        std::ptrdiff_t postfix_width = 0;
 6173|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 106k, False: 952]
  ------------------
 6174|   106k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   106k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   106k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   106k|                                 value_width));
 6178|   106k|            std::tie(it, postfix_width) = postfix_result;
 6179|   106k|        }
 6180|       |
 6181|   107k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   107k|                                                 value_width, postfix_width);
 6183|   107k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 107k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   107k|        return it;
 6188|   107k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|   121k|    {
 6193|   121k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   121k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   121k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   121k|            auto rd = make_reader<T, char_type>();
 6198|   121k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 116k]
  |  |  ------------------
  ------------------
 6199|  4.81k|                return unexpected(e);
 6200|  4.81k|            }
 6201|       |
 6202|   116k|            return impl(rd, range, value);
 6203|   121k|        }
 6204|   121k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   121k|            auto rd = make_reader<T, char_type>();
 6206|   121k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   121k|                return unexpected(e);
 6208|   121k|            }
 6209|       |
 6210|   121k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   121k|                specs.width != 0) {
 6212|   121k|                return impl(rd, range, value);
 6213|   121k|            }
 6214|       |
 6215|   121k|            auto crange = get_as_contiguous(range);
 6216|   121k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   121k|            return ranges::next(range.begin(),
 6218|   121k|                                ranges::distance(crange.begin(), it));
 6219|   121k|        }
 6220|   121k|        else {
 6221|   121k|            SCN_EXPECT(false);
 6222|   121k|            SCN_UNREACHABLE;
 6223|   121k|        }
 6224|   121k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|   116k|    {
 6124|   116k|        const bool need_skipped_width =
 6125|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 116k]
  |  Branch (6125:33): [True: 0, False: 116k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   116k|        auto it = rng.begin();
 6129|   116k|        std::ptrdiff_t prefix_width = 0;
 6130|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 116k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   116k|        else {
 6138|   116k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.55k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.55k|    }                                                  \
  |  |  |  | 3671|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   115k|            std::tie(it, prefix_width) = prefix_result;
 6140|   115k|        }
 6141|   115k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   115k|        std::ptrdiff_t value_width = 0;
 6145|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 115k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   115k|        else {
 6161|   115k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.06k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.06k|    }                                                  \
  |  | 3671|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   107k|                                             specs, value, loc));
 6163|       |
 6164|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 107k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   107k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   107k|        std::ptrdiff_t postfix_width = 0;
 6173|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 106k, False: 952]
  ------------------
 6174|   106k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   106k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   106k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   106k|                                 value_width));
 6178|   106k|            std::tie(it, postfix_width) = postfix_result;
 6179|   106k|        }
 6180|       |
 6181|   107k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   107k|                                                 value_width, postfix_width);
 6183|   107k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 107k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   107k|        return it;
 6188|   107k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.66M|{
 5795|  4.66M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.88k, False: 4.65M]
  |  |  ------------------
  ------------------
 5796|  5.88k|        return unexpected(e);
 5797|  5.88k|    }
 5798|       |
 5799|  4.65M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 4.65M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  4.65M|    return skip_classic_whitespace(range);
 5804|  4.65M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  2.33M|    {
 5871|  2.33M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  2.33M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  2.33M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  2.33M|            auto rd = make_reader<T, char_type>();
 5876|  2.33M|            return impl(rd, range, value);
 5877|  2.33M|        }
 5878|  2.33M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  2.33M|            auto rd = make_reader<T, char_type>();
 5880|  2.33M|            if (!is_segment_contiguous(range)) {
 5881|  2.33M|                return impl(rd, range, value);
 5882|  2.33M|            }
 5883|  2.33M|            auto crange = get_as_contiguous(range);
 5884|  2.33M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  2.33M|            return ranges::next(range.begin(),
 5886|  2.33M|                                ranges::distance(crange.begin(), it));
 5887|  2.33M|        }
 5888|  2.33M|        else {
 5889|  2.33M|            SCN_EXPECT(false);
 5890|  2.33M|            SCN_UNREACHABLE;
 5891|  2.33M|        }
 5892|  2.33M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  2.33M|    {
 5863|  2.33M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  2.33M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.33M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.33M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.39k, False: 2.32M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.39k|    }                                                  \
  |  |  |  | 3671|  2.33M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  2.32M|                        .transform_error(make_eof_scan_error));
 5865|  2.32M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  2.33M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  2.32M|    {
 5266|  2.32M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  2.32M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  2.32M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  2.33M|    {
 5871|  2.33M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  2.33M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  2.33M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  2.33M|            auto rd = make_reader<T, char_type>();
 5876|  2.33M|            return impl(rd, range, value);
 5877|  2.33M|        }
 5878|  2.33M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  2.33M|            auto rd = make_reader<T, char_type>();
 5880|  2.33M|            if (!is_segment_contiguous(range)) {
 5881|  2.33M|                return impl(rd, range, value);
 5882|  2.33M|            }
 5883|  2.33M|            auto crange = get_as_contiguous(range);
 5884|  2.33M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  2.33M|            return ranges::next(range.begin(),
 5886|  2.33M|                                ranges::distance(crange.begin(), it));
 5887|  2.33M|        }
 5888|  2.33M|        else {
 5889|  2.33M|            SCN_EXPECT(false);
 5890|  2.33M|            SCN_UNREACHABLE;
 5891|  2.33M|        }
 5892|  2.33M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  2.33M|    {
 5863|  2.33M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  2.33M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.33M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.33M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.39k, False: 2.32M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.39k|    }                                                  \
  |  |  |  | 3671|  2.33M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  2.32M|                        .transform_error(make_eof_scan_error));
 5865|  2.32M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  2.33M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  2.32M|    {
 5266|  2.32M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  2.32M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  2.32M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  3.18M|    {
 2879|  3.18M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  9.41M|    {
 2883|  9.41M|        return m_current;
 2884|  9.41M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  6.23M|    {
 2888|  6.23M|        return m_range.end();
 2889|  6.23M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  3.08M|    {
 2903|  3.08M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  3.08M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  3.08M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 3.08M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  3.08M|        }
 2909|  3.08M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  3.08M|    static_cast<    \
  |  |  929|  3.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  3.08M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  3.14M|    {
 2893|  3.14M|        return ranges::subrange{begin(), end()};
 2894|  3.14M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  3.12M|    {
 6037|  3.12M|        const bool need_skipped_width =
 6038|  3.12M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 3.12M]
  |  Branch (6038:33): [True: 0, False: 3.12M]
  ------------------
 6039|  3.12M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  3.12M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 3.12M]
  ------------------
 6043|  3.12M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 3.12M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  3.12M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 3.12M, False: 0]
  |  Branch (6047:56): [True: 3.10M, False: 19.5k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.10M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 3.10M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  6.21M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  3.10M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.10M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.10M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.53k, False: 3.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.53k|    }                                                  \
  |  |  |  | 3671|  3.10M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  6.21M|                            make_eof_scan_error));
 6058|       |
 6059|  6.21M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 3.10M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  3.10M|            return result_type{it, 0};
 6067|  6.21M|        }
 6068|       |
 6069|  19.5k|        return result_type{rng.begin(), 0};
 6070|  3.12M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  3.08M|    {
 6079|  3.08M|        const bool need_skipped_width =
 6080|  3.08M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 3.08M]
  |  Branch (6080:33): [True: 0, False: 3.08M]
  ------------------
 6081|  3.08M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  3.08M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 3.08M]
  ------------------
 6084|  3.08M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 3.08M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  3.08M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.08M, False: 0]
  ------------------
 6093|  3.08M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 180, False: 3.08M]
  ------------------
 6094|  3.08M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 180]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    180|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 180]
  ------------------
 6096|    180|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  3.08M|        return result_type{rng.begin(), 0};
 6118|  3.08M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  1.57M|    {
 6193|  1.57M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  1.57M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  1.57M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  1.57M|            auto rd = make_reader<T, char_type>();
 6198|  1.57M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 1.56M]
  |  |  ------------------
  ------------------
 6199|  9.62k|                return unexpected(e);
 6200|  9.62k|            }
 6201|       |
 6202|  1.56M|            return impl(rd, range, value);
 6203|  1.57M|        }
 6204|  1.57M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  1.57M|            auto rd = make_reader<T, char_type>();
 6206|  1.57M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  1.57M|                return unexpected(e);
 6208|  1.57M|            }
 6209|       |
 6210|  1.57M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  1.57M|                specs.width != 0) {
 6212|  1.57M|                return impl(rd, range, value);
 6213|  1.57M|            }
 6214|       |
 6215|  1.57M|            auto crange = get_as_contiguous(range);
 6216|  1.57M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  1.57M|            return ranges::next(range.begin(),
 6218|  1.57M|                                ranges::distance(crange.begin(), it));
 6219|  1.57M|        }
 6220|  1.57M|        else {
 6221|  1.57M|            SCN_EXPECT(false);
 6222|  1.57M|            SCN_UNREACHABLE;
 6223|  1.57M|        }
 6224|  1.57M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  1.56M|    {
 6124|  1.56M|        const bool need_skipped_width =
 6125|  1.56M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 1.56M]
  |  Branch (6125:33): [True: 0, False: 1.56M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  1.56M|        auto it = rng.begin();
 6129|  1.56M|        std::ptrdiff_t prefix_width = 0;
 6130|  1.56M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 1.56M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  1.56M|        else {
 6138|  1.56M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  1.56M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.26k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.26k|    }                                                  \
  |  |  |  | 3671|  1.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  1.56M|            std::tie(it, prefix_width) = prefix_result;
 6140|  1.56M|        }
 6141|  1.56M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  1.56M|        std::ptrdiff_t value_width = 0;
 6145|  1.56M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 1.56M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  1.56M|        else {
 6161|  1.56M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  1.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.54M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.9k|    }                                                  \
  |  | 3671|  1.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.54M|                                             specs, value, loc));
 6163|       |
 6164|  1.54M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 1.54M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  1.54M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.54M|        std::ptrdiff_t postfix_width = 0;
 6173|  1.54M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.54M, False: 2.01k]
  ------------------
 6174|  1.54M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.54M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.54M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.54M|                                 value_width));
 6178|  1.54M|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.54M|        }
 6180|       |
 6181|  1.54M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.54M|                                                 value_width, postfix_width);
 6183|  1.54M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 1.54M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  1.54M|        return it;
 6188|  1.54M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  1.57M|    {
 6193|  1.57M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  1.57M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  1.57M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  1.57M|            auto rd = make_reader<T, char_type>();
 6198|  1.57M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 1.56M]
  |  |  ------------------
  ------------------
 6199|  9.62k|                return unexpected(e);
 6200|  9.62k|            }
 6201|       |
 6202|  1.56M|            return impl(rd, range, value);
 6203|  1.57M|        }
 6204|  1.57M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  1.57M|            auto rd = make_reader<T, char_type>();
 6206|  1.57M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  1.57M|                return unexpected(e);
 6208|  1.57M|            }
 6209|       |
 6210|  1.57M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  1.57M|                specs.width != 0) {
 6212|  1.57M|                return impl(rd, range, value);
 6213|  1.57M|            }
 6214|       |
 6215|  1.57M|            auto crange = get_as_contiguous(range);
 6216|  1.57M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  1.57M|            return ranges::next(range.begin(),
 6218|  1.57M|                                ranges::distance(crange.begin(), it));
 6219|  1.57M|        }
 6220|  1.57M|        else {
 6221|  1.57M|            SCN_EXPECT(false);
 6222|  1.57M|            SCN_UNREACHABLE;
 6223|  1.57M|        }
 6224|  1.57M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  1.56M|    {
 6124|  1.56M|        const bool need_skipped_width =
 6125|  1.56M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 1.56M]
  |  Branch (6125:33): [True: 0, False: 1.56M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  1.56M|        auto it = rng.begin();
 6129|  1.56M|        std::ptrdiff_t prefix_width = 0;
 6130|  1.56M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 1.56M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  1.56M|        else {
 6138|  1.56M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  1.56M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.26k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.26k|    }                                                  \
  |  |  |  | 3671|  1.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  1.56M|            std::tie(it, prefix_width) = prefix_result;
 6140|  1.56M|        }
 6141|  1.56M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  1.56M|        std::ptrdiff_t value_width = 0;
 6145|  1.56M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 1.56M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  1.56M|        else {
 6161|  1.56M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  1.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.54M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.9k|    }                                                  \
  |  | 3671|  1.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.54M|                                             specs, value, loc));
 6163|       |
 6164|  1.54M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 1.54M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  1.54M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.54M|        std::ptrdiff_t postfix_width = 0;
 6173|  1.54M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 1.54M, False: 2.01k]
  ------------------
 6174|  1.54M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  1.54M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  1.54M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  1.54M|                                 value_width));
 6178|  1.54M|            std::tie(it, postfix_width) = postfix_result;
 6179|  1.54M|        }
 6180|       |
 6181|  1.54M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.54M|                                                 value_width, postfix_width);
 6183|  1.54M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 1.54M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  1.54M|        return it;
 6188|  1.54M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  2.33M|{
 5795|  2.33M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.94k, False: 2.32M]
  |  |  ------------------
  ------------------
 5796|  2.94k|        return unexpected(e);
 5797|  2.94k|    }
 5798|       |
 5799|  2.32M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 2.32M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  2.32M|    return skip_classic_whitespace(range);
 5804|  2.32M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  2.33M|    {
 5871|  2.33M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  2.33M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  2.33M|            auto rd = make_reader<T, char_type>();
 5876|  2.33M|            return impl(rd, range, value);
 5877|  2.33M|        }
 5878|  2.33M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  2.33M|            auto rd = make_reader<T, char_type>();
 5880|  2.33M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 2.33M, False: 0]
  ------------------
 5881|  2.33M|                return impl(rd, range, value);
 5882|  2.33M|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  2.33M|        else {
 5889|  2.33M|            SCN_EXPECT(false);
 5890|  2.33M|            SCN_UNREACHABLE;
 5891|  2.33M|        }
 5892|  2.33M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  2.33M|    {
 5863|  2.33M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  2.33M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.33M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.33M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.39k, False: 2.32M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.39k|    }                                                  \
  |  |  |  | 3671|  2.33M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  2.32M|                        .transform_error(make_eof_scan_error));
 5865|  2.32M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  2.33M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  2.32M|    {
 5266|  2.32M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  2.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  2.32M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  2.32M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.40k|{
   52|  2.40k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.40k|    string_buffer.resize(size);
   56|  2.40k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.40k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.40k|    const auto wsv_reinterpret_size =
   61|  2.40k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 385, False: 2.02k]
  ------------------
   62|  2.40k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.40k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.40k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.40k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.40k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.40k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.40k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.40k|{
  122|  2.40k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.40k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.40k|    buf.resize(sizeof...(Args));
  125|  2.40k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.40k|    return buf;
  127|  2.40k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.40k|{
  108|  2.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.40k|        return format_string_view_buffer;
  110|  2.40k|    }
  111|  2.40k|    else {
  112|  2.40k|        return wformat_string_view_buffer;
  113|  2.40k|    }
  114|  2.40k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.40k|{
  185|  2.40k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.40k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.40k|                                   format_strings);
  188|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.40k|{
  133|       |    // Regular scan
  134|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.4k, False: 2.40k]
  ------------------
  135|  14.4k|        auto it = scn::ranges::begin(source);
  136|   120k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   120k|            auto result = scn::scan<T>(
  139|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   120k|                scn::runtime_format(f));
  141|   120k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.4k, False: 106k]
  ------------------
  142|  14.4k|                break;
  143|  14.4k|            }
  144|   106k|            it = result->begin();
  145|   106k|        }
  146|  14.4k|    }
  147|       |
  148|       |    // scan localized
  149|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.4k, False: 2.40k]
  ------------------
  150|  14.4k|        auto it = scn::ranges::begin(source);
  151|   120k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   120k|            auto result = scn::scan<T>(
  154|   120k|                global_locale,
  155|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   120k|                scn::runtime_format(f));
  157|   120k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.4k, False: 106k]
  ------------------
  158|  14.4k|                break;
  159|  14.4k|            }
  160|   106k|            it = result->begin();
  161|   106k|        }
  162|  14.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.40k|    {
  166|  2.40k|        auto it = scn::ranges::begin(source);
  167|  55.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.1k|            auto result = scn::scan_value<T>(
  170|  55.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.40k, False: 52.7k]
  ------------------
  172|  2.40k|                break;
  173|  2.40k|            }
  174|  52.7k|            it = result->begin();
  175|  52.7k|        }
  176|  2.40k|    }
  177|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.40k|{
  133|       |    // Regular scan
  134|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.4k, False: 2.40k]
  ------------------
  135|  14.4k|        auto it = scn::ranges::begin(source);
  136|   120k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   120k|            auto result = scn::scan<T>(
  139|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   120k|                scn::runtime_format(f));
  141|   120k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.4k, False: 106k]
  ------------------
  142|  14.4k|                break;
  143|  14.4k|            }
  144|   106k|            it = result->begin();
  145|   106k|        }
  146|  14.4k|    }
  147|       |
  148|       |    // scan localized
  149|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.4k, False: 2.40k]
  ------------------
  150|  14.4k|        auto it = scn::ranges::begin(source);
  151|   120k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   120k|            auto result = scn::scan<T>(
  154|   120k|                global_locale,
  155|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   120k|                scn::runtime_format(f));
  157|   120k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.4k, False: 106k]
  ------------------
  158|  14.4k|                break;
  159|  14.4k|            }
  160|   106k|            it = result->begin();
  161|   106k|        }
  162|  14.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.40k|    {
  166|  2.40k|        auto it = scn::ranges::begin(source);
  167|  55.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.1k|            auto result = scn::scan_value<T>(
  170|  55.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.40k, False: 52.7k]
  ------------------
  172|  2.40k|                break;
  173|  2.40k|            }
  174|  52.7k|            it = result->begin();
  175|  52.7k|        }
  176|  2.40k|    }
  177|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.40k|{
  133|       |    // Regular scan
  134|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.4k, False: 2.40k]
  ------------------
  135|  14.4k|        auto it = scn::ranges::begin(source);
  136|   135k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   135k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   135k|            auto result = scn::scan<T>(
  139|   135k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   135k|                scn::runtime_format(f));
  141|   135k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.4k, False: 121k]
  ------------------
  142|  14.4k|                break;
  143|  14.4k|            }
  144|   121k|            it = result->begin();
  145|   121k|        }
  146|  14.4k|    }
  147|       |
  148|       |    // scan localized
  149|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.4k, False: 2.40k]
  ------------------
  150|  14.4k|        auto it = scn::ranges::begin(source);
  151|   135k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   135k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   135k|            auto result = scn::scan<T>(
  154|   135k|                global_locale,
  155|   135k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   135k|                scn::runtime_format(f));
  157|   135k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.4k, False: 121k]
  ------------------
  158|  14.4k|                break;
  159|  14.4k|            }
  160|   121k|            it = result->begin();
  161|   121k|        }
  162|  14.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.40k|    {
  166|  2.40k|        auto it = scn::ranges::begin(source);
  167|  62.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  62.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  62.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  62.2k|            auto result = scn::scan_value<T>(
  170|  62.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  62.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.40k, False: 59.8k]
  ------------------
  172|  2.40k|                break;
  173|  2.40k|            }
  174|  59.8k|            it = result->begin();
  175|  59.8k|        }
  176|  2.40k|    }
  177|  2.40k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.40k|{
   90|  2.40k|    using char_type = ranges::range_value_t<Source>;
   91|  2.40k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.40k|    deque.clear();
   93|  2.40k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.40k|              std::back_inserter(deque));
   95|  2.40k|    return deque;
   96|  2.40k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.40k|{
   79|  2.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.40k|        return noncontiguous_buffer;
   81|  2.40k|    }
   82|  2.40k|    else {
   83|  2.40k|        return wnoncontiguous_buffer;
   84|  2.40k|    }
   85|  2.40k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.40k|{
  122|  2.40k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.40k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.40k|    buf.resize(sizeof...(Args));
  125|  2.40k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.40k|    return buf;
  127|  2.40k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.40k|{
  108|  2.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.40k|        return format_string_view_buffer;
  110|  2.40k|    }
  111|  2.40k|    else {
  112|  2.40k|        return wformat_string_view_buffer;
  113|  2.40k|    }
  114|  2.40k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.81k|{
  185|  4.81k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.81k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.81k|                                   format_strings);
  188|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  4.81k|{
  133|       |    // Regular scan
  134|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.8k, False: 4.81k]
  ------------------
  135|  28.8k|        auto it = scn::ranges::begin(source);
  136|  1.57M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.57M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.57M|            auto result = scn::scan<T>(
  139|  1.57M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.57M|                scn::runtime_format(f));
  141|  1.57M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.8k, False: 1.54M]
  ------------------
  142|  28.8k|                break;
  143|  28.8k|            }
  144|  1.54M|            it = result->begin();
  145|  1.54M|        }
  146|  28.8k|    }
  147|       |
  148|       |    // scan localized
  149|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.8k, False: 4.81k]
  ------------------
  150|  28.8k|        auto it = scn::ranges::begin(source);
  151|  1.57M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.57M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.57M|            auto result = scn::scan<T>(
  154|  1.57M|                global_locale,
  155|  1.57M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.57M|                scn::runtime_format(f));
  157|  1.57M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.8k, False: 1.54M]
  ------------------
  158|  28.8k|                break;
  159|  28.8k|            }
  160|  1.54M|            it = result->begin();
  161|  1.54M|        }
  162|  28.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.81k|    {
  166|  4.81k|        auto it = scn::ranges::begin(source);
  167|   776k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   776k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   776k|            auto result = scn::scan_value<T>(
  170|   776k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   776k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.81k, False: 772k]
  ------------------
  172|  4.81k|                break;
  173|  4.81k|            }
  174|   772k|            it = result->begin();
  175|   772k|        }
  176|  4.81k|    }
  177|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.81k|{
  133|       |    // Regular scan
  134|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.8k, False: 4.81k]
  ------------------
  135|  28.8k|        auto it = scn::ranges::begin(source);
  136|  1.57M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.57M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.57M|            auto result = scn::scan<T>(
  139|  1.57M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.57M|                scn::runtime_format(f));
  141|  1.57M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.8k, False: 1.54M]
  ------------------
  142|  28.8k|                break;
  143|  28.8k|            }
  144|  1.54M|            it = result->begin();
  145|  1.54M|        }
  146|  28.8k|    }
  147|       |
  148|       |    // scan localized
  149|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.8k, False: 4.81k]
  ------------------
  150|  28.8k|        auto it = scn::ranges::begin(source);
  151|  1.57M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.57M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.57M|            auto result = scn::scan<T>(
  154|  1.57M|                global_locale,
  155|  1.57M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.57M|                scn::runtime_format(f));
  157|  1.57M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.8k, False: 1.54M]
  ------------------
  158|  28.8k|                break;
  159|  28.8k|            }
  160|  1.54M|            it = result->begin();
  161|  1.54M|        }
  162|  28.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.81k|    {
  166|  4.81k|        auto it = scn::ranges::begin(source);
  167|   776k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   776k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   776k|            auto result = scn::scan_value<T>(
  170|   776k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   776k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.81k, False: 772k]
  ------------------
  172|  4.81k|                break;
  173|  4.81k|            }
  174|   772k|            it = result->begin();
  175|   772k|        }
  176|  4.81k|    }
  177|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  4.81k|{
  133|       |    // Regular scan
  134|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.8k, False: 4.81k]
  ------------------
  135|  28.8k|        auto it = scn::ranges::begin(source);
  136|  1.57M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.57M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.57M|            auto result = scn::scan<T>(
  139|  1.57M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.57M|                scn::runtime_format(f));
  141|  1.57M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.8k, False: 1.54M]
  ------------------
  142|  28.8k|                break;
  143|  28.8k|            }
  144|  1.54M|            it = result->begin();
  145|  1.54M|        }
  146|  28.8k|    }
  147|       |
  148|       |    // scan localized
  149|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.8k, False: 4.81k]
  ------------------
  150|  28.8k|        auto it = scn::ranges::begin(source);
  151|  1.57M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.57M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.57M|            auto result = scn::scan<T>(
  154|  1.57M|                global_locale,
  155|  1.57M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.57M|                scn::runtime_format(f));
  157|  1.57M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.8k, False: 1.54M]
  ------------------
  158|  28.8k|                break;
  159|  28.8k|            }
  160|  1.54M|            it = result->begin();
  161|  1.54M|        }
  162|  28.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.81k|    {
  166|  4.81k|        auto it = scn::ranges::begin(source);
  167|   776k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   776k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   776k|            auto result = scn::scan_value<T>(
  170|   776k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   776k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.81k, False: 772k]
  ------------------
  172|  4.81k|                break;
  173|  4.81k|            }
  174|   772k|            it = result->begin();
  175|   772k|        }
  176|  4.81k|    }
  177|  4.81k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.81k|{
   90|  4.81k|    using char_type = ranges::range_value_t<Source>;
   91|  4.81k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.81k|    deque.clear();
   93|  4.81k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.81k|              std::back_inserter(deque));
   95|  4.81k|    return deque;
   96|  4.81k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.81k|{
   79|  4.81k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.81k|        return noncontiguous_buffer;
   81|  4.81k|    }
   82|  4.81k|    else {
   83|  4.81k|        return wnoncontiguous_buffer;
   84|  4.81k|    }
   85|  4.81k|}

LLVMFuzzerTestOneInput:
   57|  2.40k|{
   58|  2.40k|    scn::fuzz::run(data, size);
   59|  2.40k|    return 0;
   60|  2.40k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  2.40k|{
   36|  2.40k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 2.40k]
  |  Branch (36:35): [True: 0, False: 2.40k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  2.40k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  2.40k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  2.40k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  2.40k|    do_basic_run(sv, f);
   45|       |
   46|  2.40k|    const auto& wf = get_format_strings<wchar_t>(
   47|  2.40k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  2.40k|    do_basic_run(wsv_reinterpret, wf);
   49|  2.40k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 2.40k, False: 0]
  ------------------
   50|  2.40k|        do_basic_run(wsv_transcode, wf);
   51|  2.40k|    }
   52|  2.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.40k|{
   25|  2.40k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.40k|                                                           format_strings);
   27|  2.40k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  2.40k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.40k|            source, format_strings);
   30|  2.40k|    }
   31|  2.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.40k|{
   25|  2.40k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.40k|                                                           format_strings);
   27|  2.40k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  2.40k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.40k|            source, format_strings);
   30|  2.40k|    }
   31|  2.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.81k|{
   25|  4.81k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.81k|                                                           format_strings);
   27|  4.81k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  4.81k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  4.81k|            source, format_strings);
   30|  4.81k|    }
   31|  4.81k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.81k|{
   25|  4.81k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.81k|                                                           format_strings);
   27|  4.81k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  4.81k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  4.81k|            source, format_strings);
   30|  4.81k|    }
   31|  4.81k|}

